/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-06-14 20:04:07.194618
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72;
x0=IKsin(j[0]);
x1=IKsin(j[2]);
x2=IKcos(j[0]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((0.37429)*x7);
x15=((0.27952)*x9);
x16=((0.01)*x5);
x17=((0.27952)*x7);
x18=((0.01)*x7);
x19=((1.0)*x12);
x20=((0.27952)*x8);
x21=((1.0)*x0);
x22=((1.0)*x5);
x23=((0.37429)*x0);
x24=((1.0)*x7);
x25=((0.01)*x4);
x26=((1.0)*x9);
x27=((0.27952)*x5);
x28=((0.069)*x0);
x29=((1.0)*x8);
x30=((1.0)*x4);
x31=((1.0)*x13);
x32=(x2*x6);
x33=((-1.0)*x9);
x34=(x0*x6);
x35=(x1*x2);
x36=(x4*x7);
x37=((-1.0)*x8);
x38=(x3*x6);
x39=(x2*x3);
x40=(x1*x6);
x41=(x3*x4);
x42=(x0*x3);
x43=(x30*x35);
x44=(x24*x32);
x45=(x21*x41);
x46=(x21*x6*x7);
x47=((((-1.0)*x45))+x35);
x48=(((x4*x5))+(((-1.0)*x24*x38)));
x49=(x36+((x38*x5)));
x50=((((-1.0)*x21*x3))+x43);
x51=((((-1.0)*x35))+x45);
x52=(((x1*x21))+((x30*x39)));
x53=((-1.0)*x52);
x54=(((x1*x21*x4))+(((1.0)*x39)));
x55=((-1.0)*x54);
x56=(x12*x49);
x57=(x50*x8);
x58=(x5*x51);
x59=(x53*x7);
x60=(x5*x52);
x61=(((x47*x7))+(((-1.0)*x21*x5*x6)));
x62=(((x48*x9))+((x40*x8)));
x63=((((-1.0)*x46))+x58);
x64=(((x26*x40))+(((-1.0)*x29*x48)));
x65=((((-1.0)*x22*x32))+x59);
x66=((((-1.0)*x44))+x60);
x67=(x13*x62);
x68=(x12*x63);
x69=(((x54*x8))+((x61*x9)));
x70=(x57+((x65*x9)));
x71=(x13*x69);
x72=(((x37*x65))+((x33*(((((-1.0)*x43))+x42)))));
eerot[0]=(((x10*((((x12*x66))+((x13*x70))))))+((x11*x72)));
eerot[1]=(((x10*x72))+((x11*(((((-1.0)*x19*x66))+(((-1.0)*x31*x70)))))));
eerot[2]=(((x13*((x44+(((-1.0)*x22*x52))))))+((x12*x70)));
IkReal x73=((1.0)*x32);
IkReal x74=((1.0)*x1);
IkReal x75=(x39*x4);
eetrans[0]=((0.0557)+(((0.069)*x2))+((x5*(((((-0.37429)*x75))+(((-1.0)*x23*x74))))))+(((0.36442)*x32))+((x12*((((x20*x50))+((x15*(((((-1.0)*x5*x73))+x59))))))))+((x13*(((((-1.0)*x27*x52))+((x17*x32))))))+((x14*x32))+((x9*((((x18*x53))+(((-1.0)*x16*x73))))))+(((-1.0)*x28*x74))+(((-0.069)*x75))+((x8*((((x25*x35))+(((-0.01)*x42)))))));
eerot[3]=(((x10*((x71+x68))))+((x11*(((((-1.0)*x29*x61))+(((-1.0)*x26*x55)))))));
eerot[4]=(((x11*(((((-1.0)*x31*x69))+(((-1.0)*x19*x63))))))+((x10*((((x37*x61))+((x33*x55)))))));
eerot[5]=(((x12*x69))+((x13*((x46+(((-1.0)*x22*x51)))))));
IkReal x76=((1.0)*x41);
eetrans[1]=(((x5*(((((0.37429)*x35))+(((-1.0)*x23*x76))))))+(((0.36442)*x34))+((x9*((((x18*x47))+(((-0.01)*x34*x5))))))+((x14*x34))+((x8*((((x0*x1*x25))+(((0.01)*x39))))))+x28+(((-1.0)*x28*x76))+((x12*((((x15*x61))+((x20*x54))))))+((x13*(((((-1.0)*x27*x51))+((x17*x34))))))+(((0.069)*x35)));
eerot[6]=(((x10*((x56+x67))))+((x11*x64)));
eerot[7]=(((x10*x64))+((x11*(((((-1.0)*x56))+(((-1.0)*x67)))))));
eerot[8]=(((x12*x62))+((x13*(((((-1.0)*x24*x4))+(((-1.0)*x22*x38)))))));
IkReal x77=((1.0)*x38);
IkReal x78=((1.0)*x4);
eetrans[2]=((0.28139)+((x13*(((((-1.0)*x27*x77))+(((-1.0)*x17*x78))))))+(((0.01)*x40*x8))+((x12*((((x20*x40))+((x15*x48))))))+((x9*(((((-1.0)*x18*x77))+((x16*x4))))))+(((-0.36442)*x4))+(((-0.37429)*x38*x5))+(((-1.0)*x14*x78))+(((-0.069)*x38)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j6,cj6,sj6,htj6,j6mul,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]), htj5=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=r00;
new_r02=r02;
new_px=((-0.0557)+(((-0.27952)*r02))+px);
new_r10=((-1.0)*r11);
new_r11=r10;
new_r12=r12;
new_py=((((-0.27952)*r12))+py);
new_r20=((-1.0)*r21);
new_r21=r20;
new_r22=r22;
new_pz=((-0.28139)+(((-0.27952)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x79=((1.0)*px);
IkReal x80=((1.0)*pz);
IkReal x81=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x81))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x80)));
rxp0_2=((((-1.0)*r10*x79))+((py*r00)));
rxp1_0=((((-1.0)*r21*x81))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x80)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x79)));
rxp2_0=((((-1.0)*r22*x81))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x80))+((px*r22)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x79)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x82=((0.01)*r21);
IkReal x83=((0.01)*r20);
IkReal x84=(rxp2_2*sj5);
IkReal x85=(r22*sj5);
IkReal x86=(cj5*r20);
IkReal x87=(cj5*r21);
IkReal x88=(npx*sj5);
IkReal x89=((0.37429)*r21);
IkReal x90=(r20*sj5);
IkReal x91=((1.0)*rxp1_2);
IkReal x92=((0.02)*cj5);
IkReal x93=((1.0)*sj5);
IkReal x94=(npy*sj5);
IkReal x95=((0.01)+(((-1.0)*npz*x93)));
IkReal x96=((-1.0)*r21);
IkReal x97=((-1.0)*npx);
IkReal x98=(((cj5*rxp1_2))+(((-0.37429)*r20)));
IkReal x99=((0.01)*cj5*r22);
IkReal x100=((0.37429)*x85);
IkReal x101=((-1.0)*npy);
IkReal x102=(sj5*x82);
IkReal x103=((0.37429)*x87);
IkReal x104=((-1.0)*x85);
IkReal x105=((-1.0)*x86);
IkReal x106=(cj5*x97);
IkReal x107=(((cj5*rxp0_2))+x89);
IkReal x108=((-1.0)*x87);
IkReal x109=(cj5*x101);
IkReal x110=((((-0.37429)*x90))+((cj5*x83)));
IkReal x111=((((0.74858)*x88))+(((-1.0)*npx*x92)));
IkReal x112=(((cj5*x82))+(((-1.0)*sj5*x89)));
IkReal x113=((((0.74858)*x94))+(((-1.0)*npy*x92)));
IkReal x114=(x100+(((-1.0)*x99)));
IkReal x115=((((-1.0)*x100))+x99);
IkReal x116=((((0.37429)*x86))+((sj5*x83)));
IkReal x117=(rxp1_2+(((-1.0)*x116)));
IkReal x118=(x102+x103);
IkReal x119=(x116+(((-1.0)*x91)));
IkReal x120=(rxp0_2+x118);
IkReal x121=((((-1.0)*x118))+(((-1.0)*rxp0_2)));
matrixinvcoeffs[0]=x110;
matrixinvcoeffs[1]=x111;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=x90;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=((-1.0)*x88);
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=(x82+((rxp0_2*sj5)));
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=0;
matrixinvcoeffs[19]=x110;
matrixinvcoeffs[20]=x111;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=((-1.0)*x90);
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x88;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=((((-1.0)*rxp0_2*x93))+(((-1.0)*x82)));
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x112;
matrixinvcoeffs[33]=x113;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=(r21*sj5);
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=((-1.0)*x94);
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=(((rxp1_2*sj5))+(((-1.0)*x83)));
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=0;
matrixinvcoeffs[51]=x112;
matrixinvcoeffs[52]=x113;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=(sj5*x96);
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=x94;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=(x83+(((-1.0)*sj5*x91)));
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=x104;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=x95;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x84;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=x114;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=x104;
matrixinvcoeffs[87]=x95;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x84;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x114;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=x105;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=x106;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=x96;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=npy;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x107;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x119;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x105;
matrixinvcoeffs[119]=x106;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=x96;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=npy;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x107;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x119;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=x108;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=x109;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=r20;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=x97;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x98;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x120;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x108;
matrixinvcoeffs[151]=x109;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=r20;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=x97;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x98;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x120;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=x85;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=x95;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x115;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x84;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=x85;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=x95;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x115;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x84;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=x96;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=x101;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=x86;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=x106;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x117;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x107;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=x96;
matrixinvcoeffs[215]=x101;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=x86;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=x106;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x117;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x107;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=r20;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=npx;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x87;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=x109;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x121;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x98;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=r20;
matrixinvcoeffs[247]=npx;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=x87;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x109;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x121;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x98;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_3=matrixinvcoeffs[49], gclwh1_4=matrixinvcoeffs[65], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_3=matrixinvcoeffs[51], gclwh3_4=matrixinvcoeffs[67], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_8=matrixinvcoeffs[132], gclwh4_12=matrixinvcoeffs[196], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_9=matrixinvcoeffs[149], gclwh5_13=matrixinvcoeffs[213], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh6_14=matrixinvcoeffs[230], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_11=matrixinvcoeffs[183], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh8_14=matrixinvcoeffs[232], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_11=matrixinvcoeffs[185], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh10_14=matrixinvcoeffs[234], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_11=matrixinvcoeffs[187], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_12=matrixinvcoeffs[204], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_9=matrixinvcoeffs[157], gclwh13_11=matrixinvcoeffs[189], gclwh13_13=matrixinvcoeffs[221], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_8=matrixinvcoeffs[142], gclwh14_10=matrixinvcoeffs[174], gclwh14_12=matrixinvcoeffs[206], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_9=matrixinvcoeffs[159], gclwh15_11=matrixinvcoeffs[191], gclwh15_13=matrixinvcoeffs[223], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x122=(gclwh8_14*r21);
IkReal x123=((0.006488990872)*sj5);
IkReal x124=(gclwh12_14*r21);
IkReal x125=(gclwh6_14*npx);
IkReal x126=((0.138)*pp);
IkReal x127=(gclwh4_2*pz);
IkReal x128=(gclwh8_14*npy);
IkReal x129=((0.121351535674044)*cj5);
IkReal x130=(rxp2_2*sj5);
IkReal x131=((0.0173368)*sj5);
IkReal x132=(gclwh12_14*rxp0_2);
IkReal x133=((2.0)*pp);
IkReal x134=(gclwh14_14*r20);
IkReal x135=((1.49716)*rxp0_2);
IkReal x136=((4.0)*pz);
IkReal x137=(cj5*r20);
IkReal x138=((0.86684)*pp);
IkReal x139=(gclwh12_2*r21);
IkReal x140=((0.0010330404)*sj5);
IkReal x141=((0.276)*pz);
IkReal x142=(gclwh14_14*rxp1_2);
IkReal x143=((0.6488990872)*cj5);
IkReal x144=((0.04)*sj5);
IkReal x145=(gclwh14_2*rxp1_2);
IkReal x146=(gclwh12_14*npy);
IkReal x147=((1.73368)*pz);
IkReal x148=(gclwh14_14*npx);
IkReal x149=(gclwh6_14*r20);
IkReal x150=((0.10330404)*cj5);
IkReal x151=((0.00276)*sj5);
IkReal x152=(gclwh6_14*rxp1_2);
IkReal x153=(gclwh14_2*r20);
IkReal x154=(gclwh8_14*rxp0_2);
IkReal x155=(cj5*rxp2_2);
IkReal x156=((0.0149716)*sj5);
IkReal x157=(cj5*x147);
IkReal x158=(gclwh4_2*r22*sj5);
IkReal x159=(cj5*gclwh8_2*r21);
op[0]=((((-0.43342)*gclwh12_12*pp*r21))+(((-1.0)*cj5*gclwh8_8*pp*r21))+(((-0.43342)*cj5*gclwh6_12*pp*r20))+(((-0.0096595172829)*cj5*gclwh8_10*r21))+(((2.0)*cj5*gclwh6_8*npx*pz))+(((2.0)*gclwh4_8*npz*pz*sj5))+(((-0.3244495436)*cj5*gclwh14_12*rxp1_2))+(((-0.74858)*cj5*gclwh14_8*rxp1_2))+(((-0.0096733172829)*gclwh12_10*r21))+(((-0.74858)*cj5*gclwh12_8*rxp0_2))+(((0.060762451837022)*gclwh14_12*r20))+(((0.0086684)*cj5*gclwh10_12*rxp2_2))+(((-0.060675767837022)*cj5*gclwh6_12*r20))+(((0.138)*gclwh12_10*npy*pz))+(((-0.1399930041)*gclwh4_8*r22*sj5))+(((-0.43342)*cj5*gclwh8_12*pp*r21))+(((-0.1399930041)*cj5*gclwh6_8*r20))+(((-0.069)*gclwh12_10*pp*r21))+(((-0.05165202)*gclwh8_10*rxp0_2))+(((-0.060675767837022)*cj5*gclwh8_12*r21))+(((-0.0086684)*gclwh12_12*rxp0_2*sj5))+(((-0.3244495436)*gclwh8_12*rxp0_2))+(((0.3244495436)*gclwh6_12*rxp1_2))+(((-0.74858)*gclwh10_8*rxp2_2*sj5))+(((-0.3244495436)*gclwh10_12*rxp2_2*sj5))+(((-0.0096595172829)*cj5*gclwh6_10*r20))+(((-0.0005165202)*gclwh6_10*r20*sj5))+(((-0.060675767837022)*gclwh4_12*r22*sj5))+(((-1.0)*gclwh4_8*pp*r22*sj5))+(((-0.05165202)*cj5*gclwh12_10*rxp0_2))+(((-0.05165202)*gclwh10_10*rxp2_2*sj5))+(((-1.0)*gclwh12_8*pp*r21))+(((-0.060762451837022)*gclwh12_12*r21))+(((-1.0)*cj5*gclwh6_8*pp*r20))+(((2.0)*gclwh12_8*npy*pz))+(((0.05165202)*gclwh6_10*rxp1_2))+((gclwh14_8*pp*r20))+(((0.86684)*cj5*gclwh6_12*npx*pz))+(((-0.3244495436)*cj5*gclwh12_12*rxp0_2))+(((-0.003244495436)*gclwh8_12*r21*sj5))+(((-0.0086684)*gclwh14_12*rxp1_2*sj5))+(((-0.003244495436)*gclwh6_12*r20*sj5))+(((-2.0)*gclwh14_8*npx*pz))+(((0.138)*cj5*gclwh8_10*npy*pz))+(((-0.00138)*gclwh12_10*rxp0_2*sj5))+(((-0.069)*cj5*gclwh8_10*pp*r21))+(((-0.02)*gclwh14_8*rxp1_2*sj5))+(((-0.069)*cj5*gclwh6_10*pp*r20))+(((-0.1399930041)*cj5*gclwh8_8*r21))+(((0.00138)*cj5*gclwh10_10*rxp2_2))+(((-0.0005165202)*gclwh8_10*r21*sj5))+(((0.1401930041)*gclwh14_8*r20))+(((-0.43342)*gclwh4_12*pp*r22*sj5))+(((0.003244495436)*cj5*gclwh4_12*r22))+(((0.069)*gclwh14_10*pp*r20))+(((2.0)*cj5*gclwh8_8*npy*pz))+(((0.0096733172829)*gclwh14_10*r20))+(((0.86684)*gclwh4_12*npz*pz*sj5))+(((-0.74858)*gclwh8_8*rxp0_2))+(((0.43342)*gclwh14_12*pp*r20))+(((0.86684)*gclwh12_12*npy*pz))+(((0.74858)*gclwh6_8*rxp1_2))+(((-0.05165202)*cj5*gclwh14_10*rxp1_2))+(((0.02)*cj5*gclwh10_8*rxp2_2))+(((-0.02)*gclwh4_8*pz))+(((-0.1401930041)*gclwh12_8*r21))+(((0.138)*cj5*gclwh6_10*npx*pz))+(((-0.0086684)*gclwh4_12*pz))+(((-0.02)*gclwh12_8*rxp0_2*sj5))+(((-0.138)*gclwh14_10*npx*pz))+(((-0.0074858)*gclwh8_8*r21*sj5))+(((-0.0074858)*gclwh6_8*r20*sj5))+(((-0.86684)*gclwh14_12*npx*pz))+(((0.86684)*cj5*gclwh8_12*npy*pz))+(((-0.00138)*gclwh14_10*rxp1_2*sj5))+(((0.0074858)*cj5*gclwh4_8*r22)));
op[1]=((((-0.74858)*gclwh14_8*r22*rxp1_2*(cj5*cj5)))+(((0.002803860082)*gclwh12_4*npz*r21*sj5))+(((-0.04)*gclwh4_4*pz*(npz*npz)*(sj5*sj5)))+(((0.000442635354)*gclwh6_10*r20*sj5))+(((0.74858)*cj5*gclwh8_10*npz*rxp0_2))+((cj5*gclwh14_8*pp*r20*r22))+(((0.0074858)*gclwh6_3*pz*r20*sj5))+(((0.74858)*cj5*gclwh12_3*pz*rxp0_2))+(((-0.052323123504589)*cj5*gclwh4_3*sj5*(r22*r22)))+(((-1.0)*gclwh12_4*r21*(pp*pp)))+(((0.5603720164)*gclwh12_4*npz*rxp0_2*(cj5*cj5)))+(((-0.37429)*gclwh8_3*pp*r21*r22*(cj5*cj5)))+(((0.1397930041)*gclwh4_3*pz*r22*sj5))+(((0.008289612332433)*gclwh12_10*r21))+(((-0.0149716)*cj5*gclwh4_3*pz*r22))+(((-0.01)*gclwh12_3*pp*r21*r22*sj5))+(((0.0442635354)*gclwh10_10*rxp2_2*sj5))+(((0.74858)*gclwh8_3*pz*rxp0_2))+(((0.1401930041)*gclwh12_3*pz*r21))+(((0.008277786332433)*cj5*gclwh8_10*r21))+((cj5*gclwh6_3*pp*pz*r20))+(((0.05165202)*gclwh10_3*rxp2_2*sj5))+(((-0.0074858)*cj5*gclwh8_8*r21*r22*sj5))+(((0.1399930041)*gclwh8_10*npz*r21*(cj5*cj5)))+(((-0.0149716)*gclwh10_4*npz*rxp2_2*(cj5*cj5)))+(((0.02)*cj5*gclwh6_3*npx*pz*r22*sj5))+(((0.37429)*cj5*gclwh14_3*pp*r20*r22))+(((-0.0074858)*cj5*gclwh6_14*r20*rxp2_2*sj5))+(((-0.1399930041)*gclwh8_8*r21*r22*(cj5*cj5)))+(((-1.0)*gclwh8_14*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.2801860082)*gclwh14_3*r22*rxp1_2*(cj5*cj5)))+(((-0.001399930041)*gclwh4_3*(r22*r22)*(sj5*sj5)))+(((-1.49716)*cj5*gclwh4_4*pz*sj5*(npz*npz)))+(((-0.11826)*cj5*gclwh8_10*npy*pz))+(((0.74858)*gclwh8_3*npy*pz*r22*(cj5*cj5)))+(((0.05913)*cj5*gclwh8_10*pp*r21))+(((0.0096595172829)*cj5*gclwh8_3*r21))+(((0.02)*cj5*gclwh6_4*npz*pp*r20*sj5))+(((-1.49716)*cj5*gclwh12_4*npy*npz*pz))+(((-0.02)*gclwh14_4*pp*rxp1_2*sj5))+(((-0.1048417846)*cj5*gclwh8_4*npy*pz))+(((-1.0)*gclwh6_14*pp*r20*rxp2_2*(cj5*cj5)))+(((0.000149716)*gclwh8_4*npz*r21*(sj5*sj5)))+(((0.74858)*cj5*gclwh6_8*r22*rxp1_2))+(((0.74858)*gclwh8_4*npz*pp*r21*(cj5*cj5)))+(((-0.11826)*gclwh12_10*npy*pz))+(((0.02)*cj5*gclwh14_10*npz*rxp1_2*sj5))+(((0.00734904236913956)*gclwh12_4*r21))+(((0.069)*cj5*gclwh6_3*pp*r20))+(((-0.02)*cj5*gclwh4_8*pz*r22))+(((0.74858)*gclwh6_3*npx*pz*r22*(cj5*cj5)))+(((0.74858)*gclwh12_10*npz*rxp0_2*(cj5*cj5)))+(((-0.001401930041)*gclwh12_3*r21*r22*sj5))+(((0.1399930041)*cj5*gclwh8_3*pz*r21))+(((-0.74858)*gclwh6_3*pz*rxp1_2))+(((0.138)*gclwh14_3*npx*pz))+(((-1.0)*gclwh14_3*pp*pz*r20))+(((-0.0074858)*cj5*gclwh8_14*r21*rxp2_2*sj5))+(((-0.02)*cj5*gclwh14_8*r22*rxp1_2*sj5))+(((0.02)*cj5*gclwh12_10*npz*rxp0_2*sj5))+(((-0.0074858)*gclwh10_3*r22*rxp2_2*(sj5*sj5)))+(((-0.1048417846)*gclwh12_4*npy*pz))+((gclwh8_10*npz*pp*r21*(cj5*cj5)))+(((0.0149716)*cj5*gclwh4_4*npz*pz))+(((-0.5603720164)*cj5*gclwh6_4*npz*rxp1_2))+(((0.1401930041)*cj5*gclwh14_14*r20*rxp2_2))+(((-0.0074858)*gclwh8_4*pp*r21*sj5))+(((0.02)*cj5*gclwh10_4*pp*rxp2_2))+(((0.002799860082)*gclwh4_4*npz*r22*(sj5*sj5)))+(((-2.0)*cj5*gclwh14_14*npx*pz*rxp2_2))+(((2.0)*gclwh8_14*npy*pz*rxp2_2*(cj5*cj5)))+(((0.0877721118)*gclwh14_4*pp*r20))+(((0.001048417846)*gclwh4_4*pz))+(((-2.0)*gclwh14_4*npx*pp*pz))+(((-1.0)*gclwh4_4*r22*sj5*(pp*pp)))+(((2.0)*cj5*gclwh12_14*npy*pz*rxp2_2))+(((0.00733855819067956)*gclwh4_4*r22*sj5))+(((-0.1399930041)*cj5*gclwh4_8*sj5*(r22*r22)))+(((-2.0)*gclwh8_10*npy*npz*pz*(cj5*cj5)))+(((0.05165202)*gclwh8_3*rxp0_2))+(((-0.02)*gclwh12_4*pp*rxp0_2*sj5))+(((-0.001048417846)*cj5*gclwh10_4*rxp2_2))+(((0.04)*gclwh14_4*npx*npz*pz*sj5))+(((-0.74858)*gclwh10_4*pp*rxp2_2*sj5))+(((2.0)*cj5*gclwh6_4*npx*pp*pz))+(((0.00039241231557934)*gclwh6_4*r20*sj5))+(((-0.04)*cj5*gclwh6_4*npx*npz*pz*sj5))+(((-0.052472839504589)*cj5*gclwh12_3*r21*r22))+(((0.039241231557934)*gclwh10_4*rxp2_2*sj5))+(((-0.2801860082)*gclwh12_3*r22*rxp0_2*(cj5*cj5)))+(((-0.0074858)*gclwh8_3*r22*rxp0_2*sj5))+(((0.0096595172829)*gclwh4_3*r22*sj5))+(((-0.2799860082)*cj5*gclwh10_3*r22*rxp2_2*sj5))+(((-0.01)*cj5*gclwh6_3*pp*r20*r22*sj5))+(((0.02)*gclwh4_3*(pz*pz)))+(((0.001401930041)*gclwh14_3*r20*r22*sj5))+(((-0.37429)*gclwh6_3*pp*r20*r22*(cj5*cj5)))+(((1.49716)*cj5*gclwh14_4*npx*npz*pz))+(((-1.0)*cj5*gclwh4_8*pp*sj5*(r22*r22)))+(((2.0)*gclwh6_14*npx*pz*rxp2_2*(cj5*cj5)))+(((0.02)*gclwh12_3*pz*rxp0_2*sj5))+(((0.2801860082)*cj5*gclwh6_3*r22*rxp1_2))+(((-0.002803860082)*gclwh14_4*npz*r20*sj5))+(((-0.02)*gclwh14_3*npx*pz*r22*sj5))+(((-0.1399930041)*gclwh8_14*r21*rxp2_2*(cj5*cj5)))+(((0.039241231557934)*gclwh8_4*rxp0_2))+(((0.74858)*cj5*gclwh4_3*npz*pz*r22*sj5))+(((-0.74858)*gclwh14_14*rxp1_2*rxp2_2*(cj5*cj5)))+(((0.00138)*gclwh14_3*rxp1_2*sj5))+(((-0.0002)*gclwh14_3*r22*rxp1_2*(sj5*sj5)))+(((-0.052397981504589)*gclwh8_3*r21*r22*(cj5*cj5)))+(((-0.0011826)*cj5*gclwh10_10*rxp2_2))+(((-0.74858)*cj5*gclwh6_10*npz*rxp1_2))+(((-2.0)*gclwh4_3*npz*sj5*(pz*pz)))+(((2.0)*cj5*gclwh4_8*npz*pz*r22*sj5))+(((0.0074858)*cj5*gclwh4_4*pp*r22))+(((0.5603720164)*cj5*gclwh8_4*npz*rxp0_2))+(((-0.0875721118)*cj5*gclwh8_4*pp*r21))+(((-2.0)*gclwh12_3*npy*(pz*pz)))+(((0.069)*cj5*gclwh8_3*pp*r21))+(((0.0005165202)*gclwh6_3*r20*sj5))+((gclwh14_4*r20*(pp*pp)))+((cj5*gclwh12_10*npz*pp*r21))+(((-0.04)*cj5*gclwh8_4*npy*npz*pz*sj5))+(((-0.02)*gclwh4_4*pp*pz))+(((0.02)*gclwh4_4*npz*pp*r22*(sj5*sj5)))+(((-0.039241231557934)*gclwh6_4*rxp1_2))+(((0.02)*gclwh10_14*(cj5*cj5)*(rxp2_2*rxp2_2)))+(((0.1401930041)*cj5*gclwh12_10*npz*r21))+(((-0.00734904236913956)*gclwh14_4*r20))+(((0.74858)*cj5*gclwh12_4*npz*pp*r21))+(((0.0149716)*gclwh8_4*npz*rxp0_2*sj5))+(((0.0074858)*gclwh10_3*r22*rxp2_2*(cj5*cj5)))+(((-1.0)*gclwh8_8*pp*r21*r22*(cj5*cj5)))+(((0.0074858)*gclwh4_8*(cj5*cj5)*(r22*r22)))+(((-0.00039241231557934)*cj5*gclwh4_4*r22))+(((-0.1401930041)*cj5*gclwh12_14*r21*rxp2_2))+(((0.0096733172829)*gclwh12_3*r21))+(((-0.04)*gclwh12_4*npy*npz*pz*sj5))+(((-0.01)*cj5*gclwh8_3*pp*r21*r22*sj5))+(((-1.0)*cj5*gclwh12_14*pp*r21*rxp2_2))+(((0.74858)*gclwh6_4*npz*pp*r20*(cj5*cj5)))+(((-0.008289612332433)*gclwh14_10*r20))+(((-0.052397981504589)*gclwh6_3*r20*r22*(cj5*cj5)))+(((-0.1401930041)*cj5*gclwh14_10*npz*r20))+(((0.0074858)*gclwh8_3*pz*r21*sj5))+(((0.02)*cj5*gclwh8_3*npy*pz*r22*sj5))+(((0.1399930041)*gclwh6_10*npz*r20*(cj5*cj5)))+(((-2.0)*cj5*gclwh6_3*npx*(pz*pz)))+(((0.00733855819067956)*cj5*gclwh8_4*r21))+(((2.0)*gclwh4_4*npz*pp*pz*sj5))+(((-0.1399930041)*gclwh6_14*r20*rxp2_2*(cj5*cj5)))+(((0.02)*gclwh4_3*npz*pz*r22*(sj5*sj5)))+(((-0.02)*cj5*gclwh14_14*rxp1_2*rxp2_2*sj5))+((gclwh6_10*npz*pp*r20*(cj5*cj5)))+(((-0.069)*gclwh14_3*pp*r20))+(((0.74858)*cj5*gclwh10_10*npz*rxp2_2*sj5))+(((2.0)*cj5*gclwh8_4*npy*pp*pz))+(((-0.02)*cj5*gclwh10_3*pz*rxp2_2))+(((0.0096595172829)*cj5*gclwh6_3*r20))+(((0.5603720164)*gclwh14_4*npz*rxp1_2*(cj5*cj5)))+(((-0.74858)*cj5*gclwh14_3*npx*pz*r22))+(((0.05165202)*cj5*gclwh14_3*rxp1_2))+(((-0.74858)*gclwh8_4*pp*rxp0_2))+(((-0.01)*gclwh4_3*pp*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh8_8*npy*pz*r22*(cj5*cj5)))+(((0.01)*gclwh14_3*pp*r20*r22*sj5))+(((0.001048417846)*gclwh12_4*rxp0_2*sj5))+(((-0.004201790123)*cj5*gclwh8_3*r21*r22*sj5))+(((0.008403580246)*cj5*gclwh6_4*npz*r20*sj5))+(((0.0074858)*cj5*gclwh8_10*npz*r21*sj5))+(((-0.74858)*cj5*gclwh12_4*pp*rxp0_2))+(((0.74858)*cj5*gclwh6_14*rxp1_2*rxp2_2))+(((0.00039241231557934)*gclwh8_4*r21*sj5))+((gclwh12_3*pp*pz*r21))+(((0.5599720164)*cj5*gclwh10_4*npz*rxp2_2*sj5))+(((-0.05913)*gclwh14_10*pp*r20))+(((-0.74858)*cj5*gclwh14_4*pp*rxp1_2))+(((0.02)*cj5*gclwh8_4*npz*pp*r21*sj5))+(((2.0)*cj5*gclwh12_8*npy*pz*r22))+(((0.02)*gclwh12_3*npy*pz*r22*sj5))+(((-0.1401930041)*cj5*gclwh12_8*r21*r22))+((cj5*gclwh14_14*pp*r20*rxp2_2))+(((-2.0)*gclwh6_10*npx*npz*pz*(cj5*cj5)))+(((0.0149716)*gclwh10_4*npz*rxp2_2*(sj5*sj5)))+(((-0.0096733172829)*gclwh14_3*r20))+(((-0.0074858)*cj5*gclwh6_8*r20*r22*sj5))+(((-1.0)*cj5*gclwh14_10*npz*pp*r20))+(((0.069)*gclwh12_3*pp*r21))+(((0.0004)*gclwh14_4*npz*rxp1_2*(sj5*sj5)))+(((0.74858)*gclwh14_10*npz*rxp1_2*(cj5*cj5)))+(((-0.0005165202)*cj5*gclwh4_3*r22))+(((-0.005603720164)*gclwh4_4*npz*r22*(cj5*cj5)))+(((-0.02)*cj5*gclwh12_8*r22*rxp0_2*sj5))+(((0.0005165202)*gclwh8_3*r21*sj5))+(((0.74858)*cj5*gclwh12_3*npy*pz*r22))+(((0.05913)*cj5*gclwh6_10*pp*r20))+(((-0.0877721118)*gclwh12_4*pp*r21))+(((-2.0)*cj5*gclwh12_10*npy*npz*pz))+(((-0.02)*gclwh14_4*npz*pp*r20*sj5))+(((0.0074858)*gclwh6_3*r22*rxp1_2*sj5))+(((-0.138)*cj5*gclwh8_3*npy*pz))+(((0.104945679009178)*cj5*gclwh12_4*npz*r21))+(((0.02)*gclwh12_4*npz*pp*r21*sj5))+(((-0.1048417846)*cj5*gclwh6_4*npx*pz))+(((0.0442635354)*cj5*gclwh14_10*rxp1_2))+(((2.0)*gclwh12_4*npy*pp*pz))+(((0.0004)*gclwh12_4*npz*rxp0_2*(sj5*sj5)))+(((0.0442635354)*gclwh8_10*rxp0_2))+(((-0.74858)*cj5*gclwh10_14*sj5*(rxp2_2*rxp2_2)))+(((0.0299432)*cj5*gclwh12_4*npz*rxp0_2*sj5))+(((0.1048417846)*gclwh14_4*npx*pz))+(((0.0299432)*cj5*gclwh14_4*npz*rxp1_2*sj5))+(((-2.0)*cj5*gclwh8_3*npy*(pz*pz)))+(((-0.74858)*cj5*gclwh10_8*r22*rxp2_2*sj5))+(((-0.138)*gclwh4_3*npz*pz*sj5))+(((-1.0)*cj5*gclwh12_8*pp*r21*r22))+(((2.0)*cj5*gclwh14_10*npx*npz*pz))+(((0.008277786332433)*cj5*gclwh6_10*r20))+(((-0.004201790123)*cj5*gclwh6_3*r20*r22*sj5))+(((-0.2801860082)*cj5*gclwh8_3*r22*rxp0_2))+(((0.05165202)*cj5*gclwh12_3*rxp0_2))+(((-0.0875721118)*gclwh4_4*pp*r22*sj5))+(((0.104646247009178)*cj5*gclwh4_4*npz*r22*sj5))+(((0.0074858)*cj5*gclwh6_10*npz*r20*sj5))+(((-0.00138)*cj5*gclwh10_3*rxp2_2))+(((-0.02)*gclwh10_10*npz*rxp2_2*(cj5*cj5)))+(((-0.37429)*cj5*gclwh4_3*pp*sj5*(r22*r22)))+(((-0.138)*cj5*gclwh6_3*npx*pz))+(((-0.74858)*cj5*gclwh14_4*npz*pp*r20))+((gclwh4_3*pp*pz*r22*sj5))+((cj5*gclwh8_3*pp*pz*r21))+(((0.008403580246)*cj5*gclwh8_4*npz*r21*sj5))+(((0.104795963009178)*gclwh8_4*npz*r21*(cj5*cj5)))+(((-0.1399930041)*gclwh6_8*r20*r22*(cj5*cj5)))+(((-0.138)*gclwh12_3*npy*pz))+(((0.0011826)*gclwh12_10*rxp0_2*sj5))+(((-0.1044417846)*gclwh4_4*npz*pz*sj5))+(((-0.0149716)*cj5*gclwh12_3*r22*rxp0_2*sj5))+(((-1.0)*cj5*gclwh8_4*r21*(pp*pp)))+(((0.00138)*gclwh12_3*rxp0_2*sj5))+(((0.039241231557934)*cj5*gclwh14_4*rxp1_2))+(((0.104795963009178)*gclwh6_4*npz*r20*(cj5*cj5)))+(((2.0)*gclwh14_3*npx*(pz*pz)))+(((-0.0149716)*gclwh6_4*npz*rxp1_2*sj5))+(((0.00138)*gclwh4_3*pz))+(((-0.0149716)*cj5*gclwh14_3*r22*rxp1_2*sj5))+(((0.74858)*cj5*gclwh14_3*pz*rxp1_2))+(((-7.4858e-5)*gclwh6_3*r20*r22*(sj5*sj5)))+(((0.05913)*gclwh12_10*pp*r21))+(((-0.0875721118)*cj5*gclwh6_4*pp*r20))+(((0.039241231557934)*cj5*gclwh12_4*rxp0_2))+(((0.069)*gclwh4_3*pp*r22*sj5))+(((-0.74858)*gclwh12_14*rxp0_2*rxp2_2*(cj5*cj5)))+(((-0.02)*cj5*gclwh12_14*rxp0_2*rxp2_2*sj5))+(((0.0442635354)*cj5*gclwh12_10*rxp0_2))+(((0.0011826)*gclwh14_10*rxp1_2*sj5))+(((0.1399930041)*cj5*gclwh6_3*pz*r20))+(((-0.11826)*cj5*gclwh6_10*npx*pz))+(((-0.1401930041)*gclwh14_3*pz*r20))+(((0.74858)*cj5*gclwh4_4*npz*pp*r22*sj5))+(((0.02)*gclwh14_3*pz*rxp1_2*sj5))+(((0.1401930041)*cj5*gclwh14_8*r20*r22))+(((0.001048417846)*gclwh14_4*rxp1_2*sj5))+(((-1.49716)*gclwh6_4*npx*npz*pz*(cj5*cj5)))+(((-1.0)*cj5*gclwh6_4*r20*(pp*pp)))+(((0.00733855819067956)*cj5*gclwh6_4*r20))+(((0.000442635354)*gclwh8_10*r21*sj5))+(((-0.74858)*cj5*gclwh8_14*rxp0_2*rxp2_2))+(((-7.4858e-5)*gclwh8_3*r21*r22*(sj5*sj5)))+(((-1.0)*gclwh6_8*pp*r20*r22*(cj5*cj5)))+(((-0.104945679009178)*cj5*gclwh14_4*npz*r20))+(((0.02)*gclwh10_8*r22*rxp2_2*(cj5*cj5)))+(((-0.74858)*gclwh12_8*r22*rxp0_2*(cj5*cj5)))+(((0.000149716)*gclwh6_4*npz*r20*(sj5*sj5)))+(((-0.37429)*cj5*gclwh12_3*pp*r21*r22))+(((0.002801860082)*gclwh4_3*(cj5*cj5)*(r22*r22)))+(((-0.74858)*cj5*gclwh8_8*r22*rxp0_2))+(((0.74858)*gclwh10_3*pz*rxp2_2*sj5))+(((-0.05165202)*gclwh6_3*rxp1_2))+(((0.052472839504589)*cj5*gclwh14_3*r20*r22))+(((2.0)*gclwh6_8*npx*pz*r22*(cj5*cj5)))+(((-2.0)*cj5*gclwh14_8*npx*pz*r22))+(((-0.0002)*gclwh12_3*r22*rxp0_2*(sj5*sj5)))+(((0.11826)*gclwh14_10*npx*pz))+(((0.74858)*gclwh6_4*pp*rxp1_2))+(((-0.0442635354)*gclwh6_10*rxp1_2))+(((-0.0074858)*gclwh6_4*pp*r20*sj5))+(((-1.49716)*gclwh8_4*npy*npz*pz*(cj5*cj5))));
op[2]=((-0.3852277928)+(((-1.0)*gclwh14_2*npx*x136))+((cj5*gclwh6_2*npx*x136))+(((-1.0)*x131*x142))+((x128*x157))+(((-1.0)*x142*x143))+(((-1.0)*x132*x143))+(((-1.49716)*gclwh10_2*x130))+(((-1.0)*x123*x149))+(((-1.0)*x133*x158))+(((-1.0)*x133*x159))+(((-0.04)*x127))+(((-0.121524903674044)*x124))+(((0.2803860082)*x153))+(((-1.0)*x144*x145))+(((-1.0)*gclwh8_2*x135))+(((1.49716)*gclwh6_2*rxp1_2))+(((-1.0)*x129*x149))+(((-1.0)*x124*x138))+(((-1.0)*x133*x139))+(((-1.0)*cj5*x122*x138))+(((4.0)*npz*sj5*x127))+(((-1.49716)*cj5*x145))+(((0.04)*gclwh10_2*x155))+(((-1.0)*x147*x148))+(((-1.0)*gclwh8_2*r21*x156))+(((-0.2799860082)*gclwh6_2*x137))+(((0.0149716)*cj5*gclwh4_2*r22))+(((-0.2803860082)*x139))+((x134*x138))+(((-1.0)*gclwh6_2*x133*x137))+((cj5*gclwh8_2*npy*x136))+((x146*x147))+(((0.121524903674044)*x134))+(((0.0173368)*gclwh10_14*x155))+(((-1.0)*gclwh12_2*rxp0_2*x144))+(((-1.0)*gclwh6_14*x137*x138))+((x133*x153))+(((0.6488990872)*x152))+(((-0.6488990872)*gclwh10_14*x130))+(((-0.6488990872)*x154))+(((-1.0)*cj5*gclwh12_2*x135))+(((-1.0)*x131*x132))+(((-1.0)*gclwh6_2*r20*x156))+(((-0.2799860082)*x159))+(((-0.2799860082)*x158))+((gclwh12_2*npy*x136))+(((-1.0)*x122*x129))+(((-1.0)*x122*x123))+((x125*x157)));
op[3]=((((-1.0)*x132*x150))+(((-1.0)*x132*x151))+(((-1.0)*x140*x149))+(((-1.0)*x142*x151))+(((-1.0)*x142*x150))+(((-0.10330404)*gclwh10_14*x130))+((cj5*x125*x141))+(((-1.0)*cj5*x122*x126))+(((-1.0)*x122*x140))+(((-1.0)*x124*x126))+(((-0.0193190345658)*gclwh6_14*x137))+((x141*x146))+(((-0.0193190345658)*cj5*x122))+((cj5*x128*x141))+((x126*x134))+(((-1.0)*gclwh6_14*x126*x137))+(((-1.0)*x141*x148))+(((0.0193466345658)*x134))+(((0.00276)*gclwh10_14*x155))+(((-0.10330404)*x154))+(((-0.0193466345658)*x124))+(((0.10330404)*x152)));
op[4]=((((0.0086684)*gclwh4_12*pz))+(((0.0086684)*gclwh12_12*rxp0_2*sj5))+(((-2.0)*cj5*gclwh8_8*npy*pz))+(((0.74858)*cj5*gclwh14_8*rxp1_2))+(((-0.0096595172829)*cj5*gclwh8_10*r21))+(((-0.0096733172829)*gclwh12_10*r21))+(((-0.86684)*gclwh12_12*npy*pz))+(((0.1401930041)*gclwh12_8*r21))+(((-0.003244495436)*cj5*gclwh4_12*r22))+(((0.138)*gclwh12_10*npy*pz))+(((-0.86684)*cj5*gclwh6_12*npx*pz))+(((0.1399930041)*gclwh4_8*r22*sj5))+(((0.003244495436)*gclwh8_12*r21*sj5))+(((0.3244495436)*gclwh10_12*rxp2_2*sj5))+(((0.003244495436)*gclwh6_12*r20*sj5))+(((-0.069)*gclwh12_10*pp*r21))+(((-0.05165202)*gclwh8_10*rxp0_2))+(((-0.0086684)*cj5*gclwh10_12*rxp2_2))+(((-1.0)*gclwh14_8*pp*r20))+(((0.060762451837022)*gclwh12_12*r21))+(((-0.74858)*gclwh6_8*rxp1_2))+(((-0.0096595172829)*cj5*gclwh6_10*r20))+(((0.02)*gclwh4_8*pz))+(((-0.0074858)*cj5*gclwh4_8*r22))+(((-2.0)*cj5*gclwh6_8*npx*pz))+(((-0.0005165202)*gclwh6_10*r20*sj5))+(((0.3244495436)*cj5*gclwh12_12*rxp0_2))+(((0.3244495436)*cj5*gclwh14_12*rxp1_2))+(((0.0074858)*gclwh8_8*r21*sj5))+(((0.43342)*cj5*gclwh8_12*pp*r21))+(((0.43342)*gclwh12_12*pp*r21))+(((-0.05165202)*cj5*gclwh12_10*rxp0_2))+(((-0.05165202)*gclwh10_10*rxp2_2*sj5))+(((0.05165202)*gclwh6_10*rxp1_2))+((cj5*gclwh8_8*pp*r21))+(((0.43342)*gclwh4_12*pp*r22*sj5))+(((-2.0)*gclwh12_8*npy*pz))+(((0.0074858)*gclwh6_8*r20*sj5))+(((0.138)*cj5*gclwh8_10*npy*pz))+(((-0.00138)*gclwh12_10*rxp0_2*sj5))+((gclwh12_8*pp*r21))+(((0.43342)*cj5*gclwh6_12*pp*r20))+(((-0.069)*cj5*gclwh8_10*pp*r21))+(((-0.069)*cj5*gclwh6_10*pp*r20))+(((0.74858)*cj5*gclwh12_8*rxp0_2))+(((0.00138)*cj5*gclwh10_10*rxp2_2))+(((-0.0005165202)*gclwh8_10*r21*sj5))+((gclwh4_8*pp*r22*sj5))+(((0.02)*gclwh14_8*rxp1_2*sj5))+(((0.86684)*gclwh14_12*npx*pz))+(((0.3244495436)*gclwh8_12*rxp0_2))+(((0.060675767837022)*gclwh4_12*r22*sj5))+(((-0.43342)*gclwh14_12*pp*r20))+(((2.0)*gclwh14_8*npx*pz))+(((0.069)*gclwh14_10*pp*r20))+(((-0.1401930041)*gclwh14_8*r20))+(((-0.86684)*cj5*gclwh8_12*npy*pz))+(((0.0096733172829)*gclwh14_10*r20))+(((0.74858)*gclwh8_8*rxp0_2))+((cj5*gclwh6_8*pp*r20))+(((-2.0)*gclwh4_8*npz*pz*sj5))+(((-0.3244495436)*gclwh6_12*rxp1_2))+(((-0.05165202)*cj5*gclwh14_10*rxp1_2))+(((0.74858)*gclwh10_8*rxp2_2*sj5))+(((-0.02)*cj5*gclwh10_8*rxp2_2))+(((-0.86684)*gclwh4_12*npz*pz*sj5))+(((0.138)*cj5*gclwh6_10*npx*pz))+(((0.060675767837022)*cj5*gclwh6_12*r20))+(((0.1399930041)*cj5*gclwh6_8*r20))+(((0.02)*gclwh12_8*rxp0_2*sj5))+(((0.0086684)*gclwh14_12*rxp1_2*sj5))+(((0.1399930041)*cj5*gclwh8_8*r21))+(((-0.138)*gclwh14_10*npx*pz))+(((-0.060762451837022)*gclwh14_12*r20))+(((0.060675767837022)*cj5*gclwh8_12*r21))+(((-0.00138)*gclwh14_10*rxp1_2*sj5)));
op[5]=((((-0.74858)*gclwh14_8*r22*rxp1_2*(cj5*cj5)))+(((0.002803860082)*gclwh12_4*npz*r21*sj5))+(((-0.04)*gclwh4_4*pz*(npz*npz)*(sj5*sj5)))+(((0.000442635354)*gclwh6_10*r20*sj5))+(((0.74858)*cj5*gclwh8_10*npz*rxp0_2))+((cj5*gclwh14_8*pp*r20*r22))+(((0.0074858)*gclwh6_3*pz*r20*sj5))+(((0.74858)*cj5*gclwh12_3*pz*rxp0_2))+(((-0.052323123504589)*cj5*gclwh4_3*sj5*(r22*r22)))+(((-1.0)*gclwh12_4*r21*(pp*pp)))+(((0.5603720164)*gclwh12_4*npz*rxp0_2*(cj5*cj5)))+(((-0.37429)*gclwh8_3*pp*r21*r22*(cj5*cj5)))+(((0.1397930041)*gclwh4_3*pz*r22*sj5))+(((0.008289612332433)*gclwh12_10*r21))+(((-0.0149716)*cj5*gclwh4_3*pz*r22))+(((-0.01)*gclwh12_3*pp*r21*r22*sj5))+(((0.0442635354)*gclwh10_10*rxp2_2*sj5))+(((0.74858)*gclwh8_3*pz*rxp0_2))+(((0.1401930041)*gclwh12_3*pz*r21))+(((0.008277786332433)*cj5*gclwh8_10*r21))+((cj5*gclwh6_3*pp*pz*r20))+(((-0.0074858)*cj5*gclwh8_8*r21*r22*sj5))+(((0.1399930041)*gclwh8_10*npz*r21*(cj5*cj5)))+(((-0.0149716)*gclwh10_4*npz*rxp2_2*(cj5*cj5)))+(((0.02)*cj5*gclwh6_3*npx*pz*r22*sj5))+(((0.37429)*cj5*gclwh14_3*pp*r20*r22))+(((-0.0074858)*cj5*gclwh6_14*r20*rxp2_2*sj5))+(((-0.1399930041)*gclwh8_8*r21*r22*(cj5*cj5)))+(((-1.0)*gclwh8_14*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.2801860082)*gclwh14_3*r22*rxp1_2*(cj5*cj5)))+(((-0.001399930041)*gclwh4_3*(r22*r22)*(sj5*sj5)))+(((-1.49716)*cj5*gclwh4_4*pz*sj5*(npz*npz)))+(((-0.11826)*cj5*gclwh8_10*npy*pz))+(((0.74858)*gclwh8_3*npy*pz*r22*(cj5*cj5)))+(((0.05913)*cj5*gclwh8_10*pp*r21))+(((0.02)*cj5*gclwh6_4*npz*pp*r20*sj5))+(((0.138)*gclwh12_3*npy*pz))+(((-1.49716)*cj5*gclwh12_4*npy*npz*pz))+(((-0.02)*gclwh14_4*pp*rxp1_2*sj5))+(((-0.1048417846)*cj5*gclwh8_4*npy*pz))+(((-1.0)*gclwh6_14*pp*r20*rxp2_2*(cj5*cj5)))+(((0.000149716)*gclwh8_4*npz*r21*(sj5*sj5)))+(((0.74858)*cj5*gclwh6_8*r22*rxp1_2))+(((0.74858)*gclwh8_4*npz*pp*r21*(cj5*cj5)))+(((-0.11826)*gclwh12_10*npy*pz))+(((0.02)*cj5*gclwh14_10*npz*rxp1_2*sj5))+(((0.00734904236913956)*gclwh12_4*r21))+(((-0.02)*cj5*gclwh4_8*pz*r22))+(((0.74858)*gclwh6_3*npx*pz*r22*(cj5*cj5)))+(((0.74858)*gclwh12_10*npz*rxp0_2*(cj5*cj5)))+(((-0.001401930041)*gclwh12_3*r21*r22*sj5))+(((0.1399930041)*cj5*gclwh8_3*pz*r21))+(((-0.74858)*gclwh6_3*pz*rxp1_2))+(((-1.0)*gclwh14_3*pp*pz*r20))+(((-0.0074858)*cj5*gclwh8_14*r21*rxp2_2*sj5))+(((-0.02)*cj5*gclwh14_8*r22*rxp1_2*sj5))+(((0.02)*cj5*gclwh12_10*npz*rxp0_2*sj5))+(((-0.0074858)*gclwh10_3*r22*rxp2_2*(sj5*sj5)))+(((-0.1048417846)*gclwh12_4*npy*pz))+(((0.138)*gclwh4_3*npz*pz*sj5))+((gclwh8_10*npz*pp*r21*(cj5*cj5)))+(((0.0149716)*cj5*gclwh4_4*npz*pz))+(((-0.5603720164)*cj5*gclwh6_4*npz*rxp1_2))+(((0.1401930041)*cj5*gclwh14_14*r20*rxp2_2))+(((-0.0074858)*gclwh8_4*pp*r21*sj5))+(((0.02)*cj5*gclwh10_4*pp*rxp2_2))+(((0.002799860082)*gclwh4_4*npz*r22*(sj5*sj5)))+(((-2.0)*cj5*gclwh14_14*npx*pz*rxp2_2))+(((-0.05165202)*gclwh10_3*rxp2_2*sj5))+(((-0.05165202)*cj5*gclwh12_3*rxp0_2))+(((2.0)*gclwh8_14*npy*pz*rxp2_2*(cj5*cj5)))+(((0.0877721118)*gclwh14_4*pp*r20))+(((0.001048417846)*gclwh4_4*pz))+(((-2.0)*gclwh14_4*npx*pp*pz))+(((-0.00138)*gclwh14_3*rxp1_2*sj5))+(((-1.0)*gclwh4_4*r22*sj5*(pp*pp)))+(((2.0)*cj5*gclwh12_14*npy*pz*rxp2_2))+(((0.00733855819067956)*gclwh4_4*r22*sj5))+(((-0.1399930041)*cj5*gclwh4_8*sj5*(r22*r22)))+(((-2.0)*gclwh8_10*npy*npz*pz*(cj5*cj5)))+(((-0.02)*gclwh12_4*pp*rxp0_2*sj5))+(((-0.001048417846)*cj5*gclwh10_4*rxp2_2))+(((-0.069)*cj5*gclwh8_3*pp*r21))+(((0.04)*gclwh14_4*npx*npz*pz*sj5))+(((-0.00138)*gclwh4_3*pz))+(((-0.74858)*gclwh10_4*pp*rxp2_2*sj5))+(((2.0)*cj5*gclwh6_4*npx*pp*pz))+(((0.069)*gclwh14_3*pp*r20))+(((-0.0005165202)*gclwh6_3*r20*sj5))+(((0.00039241231557934)*gclwh6_4*r20*sj5))+(((-0.04)*cj5*gclwh6_4*npx*npz*pz*sj5))+(((-0.05165202)*cj5*gclwh14_3*rxp1_2))+(((-0.052472839504589)*cj5*gclwh12_3*r21*r22))+(((0.039241231557934)*gclwh10_4*rxp2_2*sj5))+(((-0.069)*gclwh4_3*pp*r22*sj5))+(((-0.2801860082)*gclwh12_3*r22*rxp0_2*(cj5*cj5)))+(((-0.0074858)*gclwh8_3*r22*rxp0_2*sj5))+(((-0.2799860082)*cj5*gclwh10_3*r22*rxp2_2*sj5))+(((-0.01)*cj5*gclwh6_3*pp*r20*r22*sj5))+(((0.02)*gclwh4_3*(pz*pz)))+(((0.138)*cj5*gclwh6_3*npx*pz))+(((0.05165202)*gclwh6_3*rxp1_2))+(((0.001401930041)*gclwh14_3*r20*r22*sj5))+(((-0.37429)*gclwh6_3*pp*r20*r22*(cj5*cj5)))+(((1.49716)*cj5*gclwh14_4*npx*npz*pz))+(((-1.0)*cj5*gclwh4_8*pp*sj5*(r22*r22)))+(((2.0)*gclwh6_14*npx*pz*rxp2_2*(cj5*cj5)))+(((0.02)*gclwh12_3*pz*rxp0_2*sj5))+(((0.2801860082)*cj5*gclwh6_3*r22*rxp1_2))+(((-0.002803860082)*gclwh14_4*npz*r20*sj5))+(((-0.02)*gclwh14_3*npx*pz*r22*sj5))+(((-0.1399930041)*gclwh8_14*r21*rxp2_2*(cj5*cj5)))+(((0.039241231557934)*gclwh8_4*rxp0_2))+(((0.74858)*cj5*gclwh4_3*npz*pz*r22*sj5))+(((-0.74858)*gclwh14_14*rxp1_2*rxp2_2*(cj5*cj5)))+(((-0.0002)*gclwh14_3*r22*rxp1_2*(sj5*sj5)))+(((-0.052397981504589)*gclwh8_3*r21*r22*(cj5*cj5)))+(((-0.0011826)*cj5*gclwh10_10*rxp2_2))+(((-0.74858)*cj5*gclwh6_10*npz*rxp1_2))+(((-2.0)*gclwh4_3*npz*sj5*(pz*pz)))+(((2.0)*cj5*gclwh4_8*npz*pz*r22*sj5))+(((0.0074858)*cj5*gclwh4_4*pp*r22))+(((0.5603720164)*cj5*gclwh8_4*npz*rxp0_2))+(((-0.0875721118)*cj5*gclwh8_4*pp*r21))+(((-2.0)*gclwh12_3*npy*(pz*pz)))+((gclwh14_4*r20*(pp*pp)))+((cj5*gclwh12_10*npz*pp*r21))+(((-0.04)*cj5*gclwh8_4*npy*npz*pz*sj5))+(((-0.02)*gclwh4_4*pp*pz))+(((0.02)*gclwh4_4*npz*pp*r22*(sj5*sj5)))+(((-0.039241231557934)*gclwh6_4*rxp1_2))+(((0.02)*gclwh10_14*(cj5*cj5)*(rxp2_2*rxp2_2)))+(((0.1401930041)*cj5*gclwh12_10*npz*r21))+(((-0.00734904236913956)*gclwh14_4*r20))+(((0.74858)*cj5*gclwh12_4*npz*pp*r21))+(((0.0149716)*gclwh8_4*npz*rxp0_2*sj5))+(((0.0074858)*gclwh10_3*r22*rxp2_2*(cj5*cj5)))+(((-1.0)*gclwh8_8*pp*r21*r22*(cj5*cj5)))+(((0.0074858)*gclwh4_8*(cj5*cj5)*(r22*r22)))+(((-0.00039241231557934)*cj5*gclwh4_4*r22))+(((-0.1401930041)*cj5*gclwh12_14*r21*rxp2_2))+(((-0.069)*cj5*gclwh6_3*pp*r20))+(((-0.04)*gclwh12_4*npy*npz*pz*sj5))+(((-0.01)*cj5*gclwh8_3*pp*r21*r22*sj5))+(((-1.0)*cj5*gclwh12_14*pp*r21*rxp2_2))+(((0.74858)*gclwh6_4*npz*pp*r20*(cj5*cj5)))+(((-0.008289612332433)*gclwh14_10*r20))+(((-0.052397981504589)*gclwh6_3*r20*r22*(cj5*cj5)))+(((-0.1401930041)*cj5*gclwh14_10*npz*r20))+(((0.0074858)*gclwh8_3*pz*r21*sj5))+(((0.02)*cj5*gclwh8_3*npy*pz*r22*sj5))+(((-0.05165202)*gclwh8_3*rxp0_2))+(((0.1399930041)*gclwh6_10*npz*r20*(cj5*cj5)))+(((-2.0)*cj5*gclwh6_3*npx*(pz*pz)))+(((0.00733855819067956)*cj5*gclwh8_4*r21))+(((2.0)*gclwh4_4*npz*pp*pz*sj5))+(((-0.1399930041)*gclwh6_14*r20*rxp2_2*(cj5*cj5)))+(((0.02)*gclwh4_3*npz*pz*r22*(sj5*sj5)))+(((-0.02)*cj5*gclwh14_14*rxp1_2*rxp2_2*sj5))+(((-0.0005165202)*gclwh8_3*r21*sj5))+((gclwh6_10*npz*pp*r20*(cj5*cj5)))+(((0.74858)*cj5*gclwh10_10*npz*rxp2_2*sj5))+(((-0.00138)*gclwh12_3*rxp0_2*sj5))+(((2.0)*cj5*gclwh8_4*npy*pp*pz))+(((-0.02)*cj5*gclwh10_3*pz*rxp2_2))+(((-0.069)*gclwh12_3*pp*r21))+(((0.5603720164)*gclwh14_4*npz*rxp1_2*(cj5*cj5)))+(((-0.74858)*cj5*gclwh14_3*npx*pz*r22))+(((-0.74858)*gclwh8_4*pp*rxp0_2))+(((-0.01)*gclwh4_3*pp*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh8_8*npy*pz*r22*(cj5*cj5)))+(((0.01)*gclwh14_3*pp*r20*r22*sj5))+(((0.001048417846)*gclwh12_4*rxp0_2*sj5))+(((-0.004201790123)*cj5*gclwh8_3*r21*r22*sj5))+(((0.008403580246)*cj5*gclwh6_4*npz*r20*sj5))+(((0.0074858)*cj5*gclwh8_10*npz*r21*sj5))+(((-0.74858)*cj5*gclwh12_4*pp*rxp0_2))+(((0.74858)*cj5*gclwh6_14*rxp1_2*rxp2_2))+(((0.00039241231557934)*gclwh8_4*r21*sj5))+((gclwh12_3*pp*pz*r21))+(((0.5599720164)*cj5*gclwh10_4*npz*rxp2_2*sj5))+(((-0.05913)*gclwh14_10*pp*r20))+(((-0.74858)*cj5*gclwh14_4*pp*rxp1_2))+(((0.02)*cj5*gclwh8_4*npz*pp*r21*sj5))+(((-0.138)*gclwh14_3*npx*pz))+(((2.0)*cj5*gclwh12_8*npy*pz*r22))+(((0.02)*gclwh12_3*npy*pz*r22*sj5))+(((-0.1401930041)*cj5*gclwh12_8*r21*r22))+((cj5*gclwh14_14*pp*r20*rxp2_2))+(((-2.0)*gclwh6_10*npx*npz*pz*(cj5*cj5)))+(((-0.0096595172829)*gclwh4_3*r22*sj5))+(((0.0149716)*gclwh10_4*npz*rxp2_2*(sj5*sj5)))+(((-0.0074858)*cj5*gclwh6_8*r20*r22*sj5))+(((-1.0)*cj5*gclwh14_10*npz*pp*r20))+(((0.0004)*gclwh14_4*npz*rxp1_2*(sj5*sj5)))+(((0.74858)*gclwh14_10*npz*rxp1_2*(cj5*cj5)))+(((-0.005603720164)*gclwh4_4*npz*r22*(cj5*cj5)))+(((-0.02)*cj5*gclwh12_8*r22*rxp0_2*sj5))+(((0.0096733172829)*gclwh14_3*r20))+(((0.74858)*cj5*gclwh12_3*npy*pz*r22))+(((0.05913)*cj5*gclwh6_10*pp*r20))+(((-0.0877721118)*gclwh12_4*pp*r21))+(((-2.0)*cj5*gclwh12_10*npy*npz*pz))+(((-0.02)*gclwh14_4*npz*pp*r20*sj5))+(((0.0074858)*gclwh6_3*r22*rxp1_2*sj5))+(((0.138)*cj5*gclwh8_3*npy*pz))+(((0.104945679009178)*cj5*gclwh12_4*npz*r21))+(((0.02)*gclwh12_4*npz*pp*r21*sj5))+(((-0.1048417846)*cj5*gclwh6_4*npx*pz))+(((0.0442635354)*cj5*gclwh14_10*rxp1_2))+(((2.0)*gclwh12_4*npy*pp*pz))+(((0.0004)*gclwh12_4*npz*rxp0_2*(sj5*sj5)))+(((0.0442635354)*gclwh8_10*rxp0_2))+(((-0.74858)*cj5*gclwh10_14*sj5*(rxp2_2*rxp2_2)))+(((0.0299432)*cj5*gclwh12_4*npz*rxp0_2*sj5))+(((0.1048417846)*gclwh14_4*npx*pz))+(((0.0299432)*cj5*gclwh14_4*npz*rxp1_2*sj5))+(((-2.0)*cj5*gclwh8_3*npy*(pz*pz)))+(((-0.74858)*cj5*gclwh10_8*r22*rxp2_2*sj5))+(((-1.0)*cj5*gclwh12_8*pp*r21*r22))+(((2.0)*cj5*gclwh14_10*npx*npz*pz))+(((0.008277786332433)*cj5*gclwh6_10*r20))+(((-0.004201790123)*cj5*gclwh6_3*r20*r22*sj5))+(((-0.2801860082)*cj5*gclwh8_3*r22*rxp0_2))+(((-0.0875721118)*gclwh4_4*pp*r22*sj5))+(((0.104646247009178)*cj5*gclwh4_4*npz*r22*sj5))+(((0.0074858)*cj5*gclwh6_10*npz*r20*sj5))+(((-0.02)*gclwh10_10*npz*rxp2_2*(cj5*cj5)))+(((-0.37429)*cj5*gclwh4_3*pp*sj5*(r22*r22)))+(((-0.74858)*cj5*gclwh14_4*npz*pp*r20))+((gclwh4_3*pp*pz*r22*sj5))+((cj5*gclwh8_3*pp*pz*r21))+(((0.008403580246)*cj5*gclwh8_4*npz*r21*sj5))+(((0.104795963009178)*gclwh8_4*npz*r21*(cj5*cj5)))+(((-0.1399930041)*gclwh6_8*r20*r22*(cj5*cj5)))+(((0.0011826)*gclwh12_10*rxp0_2*sj5))+(((-0.1044417846)*gclwh4_4*npz*pz*sj5))+(((-0.0149716)*cj5*gclwh12_3*r22*rxp0_2*sj5))+(((-1.0)*cj5*gclwh8_4*r21*(pp*pp)))+(((0.039241231557934)*cj5*gclwh14_4*rxp1_2))+(((0.00138)*cj5*gclwh10_3*rxp2_2))+(((0.104795963009178)*gclwh6_4*npz*r20*(cj5*cj5)))+(((2.0)*gclwh14_3*npx*(pz*pz)))+(((-0.0149716)*gclwh6_4*npz*rxp1_2*sj5))+(((-0.0149716)*cj5*gclwh14_3*r22*rxp1_2*sj5))+(((0.74858)*cj5*gclwh14_3*pz*rxp1_2))+(((-7.4858e-5)*gclwh6_3*r20*r22*(sj5*sj5)))+(((0.05913)*gclwh12_10*pp*r21))+(((-0.0875721118)*cj5*gclwh6_4*pp*r20))+(((0.039241231557934)*cj5*gclwh12_4*rxp0_2))+(((-0.74858)*gclwh12_14*rxp0_2*rxp2_2*(cj5*cj5)))+(((-0.0096595172829)*cj5*gclwh8_3*r21))+(((0.0005165202)*cj5*gclwh4_3*r22))+(((-0.02)*cj5*gclwh12_14*rxp0_2*rxp2_2*sj5))+(((0.0442635354)*cj5*gclwh12_10*rxp0_2))+(((0.0011826)*gclwh14_10*rxp1_2*sj5))+(((0.1399930041)*cj5*gclwh6_3*pz*r20))+(((-0.11826)*cj5*gclwh6_10*npx*pz))+(((-0.1401930041)*gclwh14_3*pz*r20))+(((0.74858)*cj5*gclwh4_4*npz*pp*r22*sj5))+(((-0.0096733172829)*gclwh12_3*r21))+(((0.02)*gclwh14_3*pz*rxp1_2*sj5))+(((0.1401930041)*cj5*gclwh14_8*r20*r22))+(((0.001048417846)*gclwh14_4*rxp1_2*sj5))+(((-1.49716)*gclwh6_4*npx*npz*pz*(cj5*cj5)))+(((-1.0)*cj5*gclwh6_4*r20*(pp*pp)))+(((0.00733855819067956)*cj5*gclwh6_4*r20))+(((0.000442635354)*gclwh8_10*r21*sj5))+(((-0.74858)*cj5*gclwh8_14*rxp0_2*rxp2_2))+(((-7.4858e-5)*gclwh8_3*r21*r22*(sj5*sj5)))+(((-1.0)*gclwh6_8*pp*r20*r22*(cj5*cj5)))+(((-0.104945679009178)*cj5*gclwh14_4*npz*r20))+(((0.02)*gclwh10_8*r22*rxp2_2*(cj5*cj5)))+(((-0.74858)*gclwh12_8*r22*rxp0_2*(cj5*cj5)))+(((0.000149716)*gclwh6_4*npz*r20*(sj5*sj5)))+(((-0.37429)*cj5*gclwh12_3*pp*r21*r22))+(((0.002801860082)*gclwh4_3*(cj5*cj5)*(r22*r22)))+(((-0.74858)*cj5*gclwh8_8*r22*rxp0_2))+(((0.74858)*gclwh10_3*pz*rxp2_2*sj5))+(((0.052472839504589)*cj5*gclwh14_3*r20*r22))+(((-0.0096595172829)*cj5*gclwh6_3*r20))+(((2.0)*gclwh6_8*npx*pz*r22*(cj5*cj5)))+(((-2.0)*cj5*gclwh14_8*npx*pz*r22))+(((-0.0002)*gclwh12_3*r22*rxp0_2*(sj5*sj5)))+(((0.11826)*gclwh14_10*npx*pz))+(((0.74858)*gclwh6_4*pp*rxp1_2))+(((-0.0442635354)*gclwh6_10*rxp1_2))+(((-0.0074858)*gclwh6_4*pp*r20*sj5))+(((-1.49716)*gclwh8_4*npy*npz*pz*(cj5*cj5))));
IkReal x160=((1.49716)*rxp0_2);
IkReal x161=(gclwh5_6*sj5);
IkReal x162=((0.10330404)*cj5);
IkReal x163=(gclwh15_15*rxp1_2);
IkReal x164=(gclwh13_6*r21);
IkReal x165=((4.0)*pz);
IkReal x166=(gclwh15_6*r20);
IkReal x167=((0.276)*pz);
IkReal x168=(gclwh13_15*npy);
IkReal x169=((1.49716)*rxp1_2);
IkReal x170=((0.04)*sj5);
IkReal x171=(gclwh13_15*rxp0_2);
IkReal x172=((2.0)*pp);
IkReal x173=(r20*sj5);
IkReal x174=(cj5*gclwh7_15);
IkReal x175=(gclwh15_15*r20);
IkReal x176=((0.6488990872)*cj5);
IkReal x177=(cj5*rxp2_2);
IkReal x178=(cj5*npy);
IkReal x179=((0.138)*pp);
IkReal x180=(r21*sj5);
IkReal x181=((0.86684)*pp);
IkReal x182=(gclwh13_15*r21);
IkReal x183=(gclwh7_15*rxp1_2);
IkReal x184=((1.73368)*pz);
IkReal x185=(gclwh9_15*rxp0_2);
IkReal x186=(gclwh11_15*rxp2_2*sj5);
IkReal x187=(sj5*x171);
IkReal x188=(cj5*gclwh7_6*r20);
IkReal x189=(r20*x181);
IkReal x190=(cj5*gclwh9_15*r21);
IkReal x191=(cj5*gclwh9_6*r21);
IkReal x192=(npx*x184);
op[6]=((((0.02)*cj5*gclwh13_9*r22*rxp0_2*sj5))+(((-0.74858)*cj5*gclwh9_11*npz*rxp0_2))+(((0.2801860082)*cj5*gclwh7_0*r22*rxp1_2))+(((0.1401930041)*gclwh13_0*pz*r21))+(((0.02)*gclwh11_11*npz*rxp2_2*(cj5*cj5)))+(((-1.49716)*gclwh7_1*npx*npz*pz*(cj5*cj5)))+(((-1.61542)*cj5*gclwh7_11*npx*pz))+(((-0.37429)*cj5*gclwh13_0*pp*r21*r22))+(((-0.138)*cj5*gclwh7_0*npx*pz))+(((0.1399930041)*gclwh9_15*r21*rxp2_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh13_0*pz*rxp0_2))+(((-0.74858)*gclwh11_1*pp*rxp2_2*sj5))+(((-7.4858e-5)*gclwh7_0*r20*r22*(sj5*sj5)))+(((0.80771)*cj5*gclwh9_11*pp*r21))+(((0.001048417846)*gclwh15_1*rxp1_2*sj5))+(((0.02)*cj5*gclwh7_0*npx*pz*r22*sj5))+(((-0.1048417846)*cj5*gclwh7_1*npx*pz))+(((0.0161542)*gclwh13_11*rxp0_2*sj5))+(((0.00733855819067956)*cj5*gclwh7_1*r20))+(((0.74858)*cj5*gclwh11_9*r22*rxp2_2*sj5))+(((0.6046355518)*cj5*gclwh15_11*rxp1_2))+(((0.006046355518)*gclwh9_11*r21*sj5))+(((-7.4858e-5)*gclwh9_0*r21*r22*(sj5*sj5)))+(((2.0)*gclwh5_1*npz*pp*pz*sj5))+(((0.0149716)*gclwh11_1*npz*rxp2_2*(sj5*sj5)))+(((0.113073749341611)*cj5*gclwh7_11*r20))+(((0.001048417846)*gclwh13_1*rxp0_2*sj5))+(((0.1399930041)*gclwh7_15*r20*rxp2_2*(cj5*cj5)))+(((-0.2799860082)*cj5*gclwh11_0*r22*rxp2_2*sj5))+(((0.02)*cj5*gclwh9_0*npy*pz*r22*sj5))+(((0.02)*gclwh5_0*(pz*pz)))+(((0.74858)*gclwh9_0*pz*rxp0_2))+(((0.74858)*gclwh15_9*r22*rxp1_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh13_0*npy*pz*r22))+(((-0.0074858)*gclwh7_1*pp*r20*sj5))+(((-0.069)*gclwh15_0*pp*r20))+(((0.02)*cj5*gclwh13_15*rxp0_2*rxp2_2*sj5))+(((0.008403580246)*cj5*gclwh9_1*npz*r21*sj5))+(((-0.00039241231557934)*cj5*gclwh5_1*r22))+(((0.1401930041)*cj5*gclwh13_15*r21*rxp2_2))+(((-0.74858)*gclwh15_11*npz*rxp1_2*(cj5*cj5)))+(((0.02)*cj5*gclwh11_1*pp*rxp2_2))+(((0.00138)*gclwh13_0*rxp0_2*sj5))+(((0.5603720164)*gclwh15_1*npz*rxp1_2*(cj5*cj5)))+(((-1.49716)*gclwh9_1*npy*npz*pz*(cj5*cj5)))+(((0.0149716)*gclwh9_1*npz*rxp0_2*sj5))+((gclwh15_1*r20*(pp*pp)))+(((0.138)*gclwh15_0*npx*pz))+(((0.0074858)*cj5*gclwh7_15*r20*rxp2_2*sj5))+(((-0.0074858)*gclwh9_1*pp*r21*sj5))+(((0.002799860082)*gclwh5_1*npz*r22*(sj5*sj5)))+(((-0.104945679009178)*cj5*gclwh15_1*npz*r20))+(((-0.04)*cj5*gclwh9_1*npy*npz*pz*sj5))+(((0.00039241231557934)*gclwh9_1*r21*sj5))+(((0.74858)*cj5*gclwh5_1*npz*pp*r22*sj5))+(((0.00138)*gclwh15_0*rxp1_2*sj5))+(((0.069)*gclwh5_0*pp*r22*sj5))+(((0.0074858)*cj5*gclwh5_1*pp*r22))+(((0.1399930041)*cj5*gclwh5_9*sj5*(r22*r22)))+(((-0.0149716)*gclwh7_1*npz*rxp1_2*sj5))+(((-0.052397981504589)*gclwh7_0*r20*r22*(cj5*cj5)))+(((0.0074858)*gclwh7_0*pz*r20*sj5))+(((-0.02)*gclwh15_0*npx*pz*r22*sj5))+(((-0.74858)*cj5*gclwh13_1*pp*rxp0_2))+(((0.0074858)*gclwh9_0*pz*r21*sj5))+(((2.0)*gclwh7_11*npx*npz*pz*(cj5*cj5)))+(((0.113073749341611)*cj5*gclwh9_11*r21))+(((-0.052472839504589)*cj5*gclwh13_0*r21*r22))+(((0.74858)*cj5*gclwh15_0*pz*rxp1_2))+(((0.039241231557934)*gclwh9_1*rxp0_2))+(((0.02)*gclwh5_1*npz*pp*r22*(sj5*sj5)))+((cj5*gclwh7_0*pp*pz*r20))+(((-2.0)*cj5*gclwh9_0*npy*(pz*pz)))+(((-0.02)*gclwh5_1*pp*pz))+(((-2.0)*gclwh7_15*npx*pz*rxp2_2*(cj5*cj5)))+(((-0.001401930041)*gclwh13_0*r21*r22*sj5))+(((0.000149716)*gclwh7_1*npz*r20*(sj5*sj5)))+(((0.104945679009178)*cj5*gclwh13_1*npz*r21))+(((-0.0002)*gclwh13_0*r22*rxp0_2*(sj5*sj5)))+(((-0.74858)*cj5*gclwh7_15*rxp1_2*rxp2_2))+(((0.0096595172829)*cj5*gclwh9_0*r21))+(((0.74858)*cj5*gclwh13_1*npz*pp*r21))+(((0.6046355518)*cj5*gclwh13_11*rxp0_2))+(((-0.113235291341611)*gclwh15_11*r20))+(((0.02)*cj5*gclwh5_9*pz*r22))+(((-0.01)*gclwh13_0*pp*r21*r22*sj5))+(((-1.0)*cj5*gclwh15_9*pp*r20*r22))+(((0.74858)*gclwh7_1*npz*pp*r20*(cj5*cj5)))+(((-0.37429)*gclwh7_0*pp*r20*r22*(cj5*cj5)))+(((0.0096595172829)*cj5*gclwh7_0*r20))+(((0.069)*cj5*gclwh7_0*pp*r20))+(((-0.0149716)*cj5*gclwh5_0*pz*r22))+((gclwh13_0*pp*pz*r21))+(((0.0299432)*cj5*gclwh15_1*npz*rxp1_2*sj5))+(((-0.01)*cj5*gclwh7_0*pp*r20*r22*sj5))+(((0.74858)*gclwh13_9*r22*rxp0_2*(cj5*cj5)))+(((-0.02)*cj5*gclwh11_0*pz*rxp2_2))+(((-0.6046355518)*gclwh7_11*rxp1_2))+(((2.0)*cj5*gclwh9_1*npy*pp*pz))+(((0.01)*gclwh15_0*pp*r20*r22*sj5))+(((0.74858)*gclwh11_0*pz*rxp2_2*sj5))+(((-0.02)*cj5*gclwh13_11*npz*rxp0_2*sj5))+(((2.0)*cj5*gclwh7_1*npx*pp*pz))+(((-2.0)*cj5*gclwh13_9*npy*pz*r22))+(((0.1399930041)*gclwh9_9*r21*r22*(cj5*cj5)))+(((1.61542)*gclwh15_11*npx*pz))+(((-1.0)*cj5*gclwh9_1*r21*(pp*pp)))+(((-0.052397981504589)*gclwh9_0*r21*r22*(cj5*cj5)))+(((0.1399930041)*cj5*gclwh9_0*pz*r21))+(((0.00039241231557934)*gclwh7_1*r20*sj5))+(((0.039241231557934)*gclwh11_1*rxp2_2*sj5))+((gclwh5_0*pp*pz*r22*sj5))+(((0.6046355518)*gclwh9_11*rxp0_2))+(((-0.1044417846)*gclwh5_1*npz*pz*sj5))+(((-0.04)*gclwh5_1*pz*(npz*npz)*(sj5*sj5)))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((0.0161542)*gclwh15_11*rxp1_2*sj5))+(((-1.49716)*cj5*gclwh5_1*pz*sj5*(npz*npz)))+((gclwh9_15*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.001048417846)*cj5*gclwh11_1*rxp2_2))+((cj5*gclwh13_15*pp*r21*rxp2_2))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.0875721118)*cj5*gclwh7_1*pp*r20))+(((0.069)*gclwh13_0*pp*r21))+(((1.49716)*cj5*gclwh15_1*npx*npz*pz))+(((-0.052323123504589)*cj5*gclwh5_0*sj5*(r22*r22)))+(((-0.2801860082)*cj5*gclwh9_0*r22*rxp0_2))+(((0.0096595172829)*gclwh5_0*r22*sj5))+(((-0.138)*gclwh5_0*npz*pz*sj5))+(((-0.1401930041)*cj5*gclwh13_11*npz*r21))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.0875721118)*gclwh5_1*pp*r22*sj5))+(((-0.1399930041)*gclwh7_11*npz*r20*(cj5*cj5)))+(((-0.004201790123)*cj5*gclwh9_0*r21*r22*sj5))+(((0.1399930041)*cj5*gclwh7_0*pz*r20))+(((-0.1401930041)*gclwh15_0*pz*r20))+(((0.5603720164)*cj5*gclwh9_1*npz*rxp0_2))+(((0.02)*gclwh13_0*pz*rxp0_2*sj5))+(((0.052472839504589)*cj5*gclwh15_0*r20*r22))+((gclwh7_15*pp*r20*rxp2_2*(cj5*cj5)))+(((-0.2801860082)*gclwh13_0*r22*rxp0_2*(cj5*cj5)))+(((-0.37429)*cj5*gclwh5_0*pp*sj5*(r22*r22)))+(((0.05165202)*gclwh9_0*rxp0_2))+(((0.1397930041)*gclwh5_0*pz*r22*sj5))+(((-0.37429)*gclwh9_0*pp*r21*r22*(cj5*cj5)))+(((0.0074858)*gclwh7_0*r22*rxp1_2*sj5))+(((-0.138)*gclwh13_0*npy*pz))+(((0.74858)*gclwh7_0*npx*pz*r22*(cj5*cj5)))+((gclwh9_9*pp*r21*r22*(cj5*cj5)))+(((0.05165202)*cj5*gclwh13_0*rxp0_2))+(((-0.0149716)*gclwh11_1*npz*rxp2_2*(cj5*cj5)))+(((-0.74858)*cj5*gclwh15_1*npz*pp*r20))+(((-1.61542)*gclwh13_11*npy*pz))+(((-0.0074858)*gclwh5_9*(cj5*cj5)*(r22*r22)))+(((-0.02)*gclwh15_1*pp*rxp1_2*sj5))+(((-0.005603720164)*gclwh5_1*npz*r22*(cj5*cj5)))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((0.001048417846)*gclwh5_1*pz))+(((-0.0074858)*cj5*gclwh9_11*npz*r21*sj5))+(((0.039241231557934)*cj5*gclwh15_1*rxp1_2))+(((-0.1401930041)*cj5*gclwh15_15*r20*rxp2_2))+(((-0.02)*gclwh15_1*npz*pp*r20*sj5))+(((-0.04)*gclwh13_1*npy*npz*pz*sj5))+(((2.0)*cj5*gclwh13_11*npy*npz*pz))+(((-0.0875721118)*cj5*gclwh9_1*pp*r21))+(((0.104795963009178)*gclwh9_1*npz*r21*(cj5*cj5)))+(((-0.00734904236913956)*gclwh15_1*r20))+(((0.00734904236913956)*gclwh13_1*r21))+(((0.0149716)*cj5*gclwh5_1*npz*pz))+(((0.74858)*cj5*gclwh11_15*sj5*(rxp2_2*rxp2_2)))+((cj5*gclwh5_9*pp*sj5*(r22*r22)))+(((-0.5603720164)*cj5*gclwh7_1*npz*rxp1_2))+(((-2.0)*cj5*gclwh13_15*npy*pz*rxp2_2))+(((0.069)*cj5*gclwh9_0*pp*r21))+(((0.02)*cj5*gclwh15_9*r22*rxp1_2*sj5))+(((0.0074858)*cj5*gclwh9_15*r21*rxp2_2*sj5))+(((0.0004)*gclwh13_1*npz*rxp0_2*(sj5*sj5)))+(((0.74858)*gclwh13_15*rxp0_2*rxp2_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh7_1*r20*(pp*pp)))+(((0.006046355518)*gclwh7_11*r20*sj5))+(((-1.0)*cj5*gclwh13_11*npz*pp*r21))+(((-0.0002)*gclwh15_0*r22*rxp1_2*(sj5*sj5)))+(((2.0)*cj5*gclwh15_9*npx*pz*r22))+(((0.05165202)*cj5*gclwh15_0*rxp1_2))+(((-0.004201790123)*cj5*gclwh7_0*r20*r22*sj5))+(((0.113235291341611)*gclwh13_11*r21))+(((-1.0)*gclwh7_11*npz*pp*r20*(cj5*cj5)))+((gclwh7_9*pp*r20*r22*(cj5*cj5)))+(((0.02)*gclwh5_0*npz*pz*r22*(sj5*sj5)))+(((-1.0)*gclwh9_11*npz*pp*r21*(cj5*cj5)))+(((0.74858)*cj5*gclwh5_0*npz*pz*r22*sj5))+(((0.0877721118)*gclwh15_1*pp*r20))+(((-0.05165202)*gclwh7_0*rxp1_2))+(((0.74858)*gclwh9_1*npz*pp*r21*(cj5*cj5)))+(((-0.1401930041)*cj5*gclwh15_9*r20*r22))+(((0.6046355518)*gclwh11_11*rxp2_2*sj5))+(((0.008403580246)*cj5*gclwh7_1*npz*r20*sj5))+(((-0.0074858)*gclwh9_0*r22*rxp0_2*sj5))+(((-0.2801860082)*gclwh15_0*r22*rxp1_2*(cj5*cj5)))+(((-0.0877721118)*gclwh13_1*pp*r21))+(((-1.0)*gclwh5_1*r22*sj5*(pp*pp)))+(((0.5599720164)*cj5*gclwh11_1*npz*rxp2_2*sj5))+(((0.0074858)*cj5*gclwh7_9*r20*r22*sj5))+(((0.02)*cj5*gclwh15_15*rxp1_2*rxp2_2*sj5))+(((0.74858)*gclwh9_0*npy*pz*r22*(cj5*cj5)))+(((2.0)*cj5*gclwh15_15*npx*pz*rxp2_2))+((cj5*gclwh15_11*npz*pp*r20))+(((-0.74858)*gclwh13_11*npz*rxp0_2*(cj5*cj5)))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.01)*gclwh5_0*pp*(r22*r22)*(sj5*sj5)))+(((-1.61542)*cj5*gclwh9_11*npy*pz))+(((-0.0005165202)*cj5*gclwh5_0*r22))+(((0.74858)*gclwh7_1*pp*rxp1_2))+(((0.002801860082)*gclwh5_0*(cj5*cj5)*(r22*r22)))+(((-0.1399930041)*gclwh9_11*npz*r21*(cj5*cj5)))+(((0.104795963009178)*gclwh7_1*npz*r20*(cj5*cj5)))+(((0.74858)*cj5*gclwh9_15*rxp0_2*rxp2_2))+(((0.0074858)*gclwh11_0*r22*rxp2_2*(cj5*cj5)))+(((-0.002803860082)*gclwh15_1*npz*r20*sj5))+(((0.0299432)*cj5*gclwh13_1*npz*rxp0_2*sj5))+(((-2.0)*cj5*gclwh15_11*npx*npz*pz))+(((0.02)*cj5*gclwh7_1*npz*pp*r20*sj5))+(((0.37429)*cj5*gclwh15_0*pp*r20*r22))+(((-0.138)*cj5*gclwh9_0*npy*pz))+(((-0.74858)*cj5*gclwh11_11*npz*rxp2_2*sj5))+(((0.0005165202)*gclwh9_0*r21*sj5))+(((0.039241231557934)*cj5*gclwh13_1*rxp0_2))+(((0.00733855819067956)*cj5*gclwh9_1*r21))+(((0.02)*cj5*gclwh9_1*npz*pp*r21*sj5))+(((-0.74858)*cj5*gclwh15_1*pp*rxp1_2))+(((0.0004)*gclwh15_1*npz*rxp1_2*(sj5*sj5)))+((cj5*gclwh9_0*pp*pz*r21))+((cj5*gclwh13_9*pp*r21*r22))+(((0.001401930041)*gclwh15_0*r20*r22*sj5))+(((-0.0149716)*cj5*gclwh13_0*r22*rxp0_2*sj5))+(((-0.0096733172829)*gclwh15_0*r20))+(((-0.04)*cj5*gclwh7_1*npx*npz*pz*sj5))+(((0.104646247009178)*cj5*gclwh5_1*npz*r22*sj5))+(((0.80771)*gclwh13_11*pp*r21))+(((-0.00138)*cj5*gclwh11_0*rxp2_2))+(((0.02)*gclwh13_1*npz*pp*r21*sj5))+(((0.0096733172829)*gclwh13_0*r21))+(((-0.80771)*gclwh15_11*pp*r20))+(((0.74858)*cj5*gclwh7_11*npz*rxp1_2))+(((-0.1048417846)*cj5*gclwh9_1*npy*pz))+(((0.02)*gclwh13_0*npy*pz*r22*sj5))+(((0.002803860082)*gclwh13_1*npz*r21*sj5))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((0.74858)*cj5*gclwh9_9*r22*rxp0_2))+(((0.1401930041)*cj5*gclwh13_9*r21*r22))+(((0.00733855819067956)*gclwh5_1*r22*sj5))+(((0.1401930041)*cj5*gclwh15_11*npz*r20))+(((0.000149716)*gclwh9_1*npz*r21*(sj5*sj5)))+(((-0.02)*gclwh11_15*(cj5*cj5)*(rxp2_2*rxp2_2)))+(((2.0)*gclwh9_11*npy*npz*pz*(cj5*cj5)))+(((-0.74858)*cj5*gclwh7_9*r22*rxp1_2))+(((-0.02)*gclwh11_9*r22*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh9_15*npy*pz*rxp2_2*(cj5*cj5)))+(((0.00138)*gclwh5_0*pz))+(((0.1399930041)*gclwh7_9*r20*r22*(cj5*cj5)))+(((-0.74858)*gclwh7_0*pz*rxp1_2))+(((-2.0)*cj5*gclwh7_0*npx*(pz*pz)))+(((-0.0149716)*cj5*gclwh15_0*r22*rxp1_2*sj5))+(((0.05165202)*gclwh11_0*rxp2_2*sj5))+(((-0.0074858)*cj5*gclwh7_11*npz*r20*sj5))+(((-2.0)*cj5*gclwh5_9*npz*pz*r22*sj5))+(((-0.0074858)*gclwh11_0*r22*rxp2_2*(sj5*sj5)))+(((-0.0161542)*cj5*gclwh11_11*rxp2_2))+(((0.0005165202)*gclwh7_0*r20*sj5))+(((0.02)*gclwh15_0*pz*rxp1_2*sj5))+(((-2.0)*gclwh7_9*npx*pz*r22*(cj5*cj5)))+(((0.1048417846)*gclwh15_1*npx*pz))+(((-0.02)*cj5*gclwh15_11*npz*rxp1_2*sj5))+(((-0.01)*cj5*gclwh9_0*pp*r21*r22*sj5))+(((-1.0)*cj5*gclwh15_15*pp*r20*rxp2_2))+(((-0.039241231557934)*gclwh7_1*rxp1_2))+(((0.74858)*gclwh15_15*rxp1_2*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh5_0*npz*sj5*(pz*pz)))+(((-0.1048417846)*gclwh13_1*npy*pz))+(((0.04)*gclwh15_1*npx*npz*pz*sj5))+(((-0.001399930041)*gclwh5_0*(r22*r22)*(sj5*sj5)))+(((0.5603720164)*gclwh13_1*npz*rxp0_2*(cj5*cj5)))+(((0.0074858)*cj5*gclwh9_9*r21*r22*sj5))+(((-0.74858)*cj5*gclwh15_0*npx*pz*r22))+(((-0.74858)*gclwh9_1*pp*rxp0_2))+(((-0.02)*gclwh13_1*pp*rxp0_2*sj5))+(((-1.49716)*cj5*gclwh13_1*npy*npz*pz))+(((0.80771)*cj5*gclwh7_11*pp*r20))+(((-2.0)*gclwh9_9*npy*pz*r22*(cj5*cj5))));
op[7]=((((2.0)*gclwh15_9*npx*pz))+(((-2.0)*cj5*gclwh7_9*npx*pz))+(((0.3244495436)*gclwh7_13*rxp1_2))+(((-0.43342)*gclwh13_13*pp*r21))+(((0.05165202)*cj5*gclwh13_11*rxp0_2))+(((-0.060675767837022)*cj5*gclwh9_13*r21))+(((0.060762451837022)*gclwh15_13*r20))+(((0.069)*cj5*gclwh7_11*pp*r20))+(((0.0005165202)*gclwh7_11*r20*sj5))+(((0.0096595172829)*cj5*gclwh7_11*r20))+(((0.43342)*gclwh15_13*pp*r20))+(((-1.0)*gclwh15_9*pp*r20))+(((0.069)*cj5*gclwh9_11*pp*r21))+(((0.00138)*gclwh15_11*rxp1_2*sj5))+(((-0.3244495436)*cj5*gclwh13_13*rxp0_2))+(((0.74858)*cj5*gclwh13_9*rxp0_2))+(((0.86684)*cj5*gclwh7_13*npx*pz))+(((0.86684)*cj5*gclwh9_13*npy*pz))+(((-0.3244495436)*gclwh9_13*rxp0_2))+(((-0.00138)*cj5*gclwh11_11*rxp2_2))+(((-2.0)*gclwh5_9*npz*pz*sj5))+(((-0.0086684)*gclwh5_13*pz))+(((-0.43342)*cj5*gclwh7_13*pp*r20))+(((0.00138)*gclwh13_11*rxp0_2*sj5))+(((0.05165202)*gclwh11_11*rxp2_2*sj5))+(((-2.0)*cj5*gclwh9_9*npy*pz))+(((-0.0086684)*gclwh13_13*rxp0_2*sj5))+(((0.05165202)*cj5*gclwh15_11*rxp1_2))+(((-0.003244495436)*gclwh7_13*r20*sj5))+(((0.069)*gclwh13_11*pp*r21))+(((-0.86684)*gclwh15_13*npx*pz))+(((0.1401930041)*gclwh13_9*r21))+((gclwh5_9*pp*r22*sj5))+(((-0.0096733172829)*gclwh15_11*r20))+(((-0.138)*cj5*gclwh9_11*npy*pz))+(((-0.43342)*cj5*gclwh9_13*pp*r21))+(((-0.43342)*gclwh5_13*pp*r22*sj5))+(((-0.060762451837022)*gclwh13_13*r21))+(((-0.060675767837022)*cj5*gclwh7_13*r20))+(((0.74858)*gclwh9_9*rxp0_2))+(((-0.138)*gclwh13_11*npy*pz))+(((0.1399930041)*cj5*gclwh7_9*r20))+(((-0.3244495436)*cj5*gclwh15_13*rxp1_2))+(((0.74858)*gclwh11_9*rxp2_2*sj5))+(((-0.069)*gclwh15_11*pp*r20))+(((-0.060675767837022)*gclwh5_13*r22*sj5))+(((-0.0086684)*gclwh15_13*rxp1_2*sj5))+(((0.02)*gclwh15_9*rxp1_2*sj5))+(((-0.1401930041)*gclwh15_9*r20))+(((-0.003244495436)*gclwh9_13*r21*sj5))+(((0.86684)*gclwh5_13*npz*pz*sj5))+(((0.0096595172829)*cj5*gclwh9_11*r21))+(((0.02)*gclwh5_9*pz))+((cj5*gclwh9_9*pp*r21))+(((0.0096733172829)*gclwh13_11*r21))+(((0.0074858)*gclwh9_9*r21*sj5))+(((0.138)*gclwh15_11*npx*pz))+(((0.1399930041)*gclwh5_9*r22*sj5))+(((-0.0074858)*cj5*gclwh5_9*r22))+(((0.86684)*gclwh13_13*npy*pz))+(((0.003244495436)*cj5*gclwh5_13*r22))+(((0.02)*gclwh13_9*rxp0_2*sj5))+(((-2.0)*gclwh13_9*npy*pz))+(((-0.05165202)*gclwh7_11*rxp1_2))+(((0.0005165202)*gclwh9_11*r21*sj5))+((gclwh13_9*pp*r21))+(((-0.74858)*gclwh7_9*rxp1_2))+(((-0.138)*cj5*gclwh7_11*npx*pz))+(((0.0074858)*gclwh7_9*r20*sj5))+(((0.05165202)*gclwh9_11*rxp0_2))+(((0.1399930041)*cj5*gclwh9_9*r21))+(((0.0086684)*cj5*gclwh11_13*rxp2_2))+(((-0.02)*cj5*gclwh11_9*rxp2_2))+(((0.74858)*cj5*gclwh15_9*rxp1_2))+(((-0.3244495436)*gclwh11_13*rxp2_2*sj5))+((cj5*gclwh7_9*pp*r20)));
op[8]=((((-0.10330404)*x186))+(((-0.10330404)*x185))+((gclwh9_15*x167*x178))+(((0.10330404)*x183))+(((0.00276)*gclwh11_15*x177))+(((-0.0193466345658)*x182))+(((-1.0)*gclwh15_15*npx*x167))+(((-0.00276)*x187))+((x175*x179))+(((-0.0010330404)*gclwh9_15*x180))+(((-1.0)*x162*x171))+(((-1.0)*x162*x163))+(((0.0193466345658)*x175))+((x167*x168))+(((-0.0010330404)*gclwh7_15*x173))+(((-0.00276)*sj5*x163))+((npx*x167*x174))+(((-1.0)*x179*x182))+(((-1.0)*r20*x174*x179))+(((-1.0)*x179*x190))+(((-0.0193190345658)*x190))+(((-0.0193190345658)*r20*x174)));
op[9]=((-0.3852277928)+((gclwh7_6*x169))+(((-0.2799860082)*x188))+(((-1.0)*gclwh9_15*x178*x184))+(((-1.0)*cj5*gclwh15_6*x169))+((npz*x161*x165))+(((-0.04)*gclwh5_6*pz))+(((0.2803860082)*x166))+(((0.121351535674044)*x190))+(((0.0173368)*sj5*x163))+(((-0.0173368)*gclwh11_15*x177))+((x174*x189))+(((-0.2799860082)*r22*x161))+(((-0.0149716)*gclwh9_6*x180))+(((-1.0)*x168*x184))+(((-1.0)*gclwh15_6*npx*x165))+(((0.04)*gclwh11_6*x177))+((x166*x172))+(((0.121524903674044)*x182))+(((0.0149716)*cj5*gclwh5_6*r22))+((gclwh13_6*npy*x165))+(((-1.0)*gclwh13_6*rxp0_2*x170))+(((-1.0)*cj5*gclwh13_6*x160))+(((0.0173368)*x187))+((x171*x176))+((gclwh9_6*x165*x178))+(((0.121351535674044)*r20*x174))+(((-1.0)*x175*x181))+(((-1.0)*gclwh15_6*rxp1_2*x170))+(((-1.0)*r22*x161*x172))+(((-1.0)*x172*x191))+(((-1.49716)*gclwh11_6*rxp2_2*sj5))+(((-0.2803860082)*x164))+(((-0.6488990872)*x183))+(((0.006488990872)*gclwh9_15*x180))+(((-1.0)*x172*x188))+((gclwh15_15*x192))+(((-1.0)*x174*x192))+(((-1.0)*x164*x172))+((x181*x190))+((x163*x176))+(((0.6488990872)*x186))+(((0.6488990872)*x185))+((cj5*gclwh7_6*npx*x165))+((x181*x182))+(((-0.0149716)*gclwh7_6*x173))+(((-0.2799860082)*x191))+(((-0.121524903674044)*x175))+(((0.006488990872)*gclwh7_15*x173))+(((-1.0)*gclwh9_6*x160)));
op[10]=((((0.02)*cj5*gclwh13_9*r22*rxp0_2*sj5))+(((-0.74858)*cj5*gclwh9_11*npz*rxp0_2))+(((0.2801860082)*cj5*gclwh7_0*r22*rxp1_2))+(((0.1401930041)*gclwh13_0*pz*r21))+(((0.02)*gclwh11_11*npz*rxp2_2*(cj5*cj5)))+(((-1.49716)*gclwh7_1*npx*npz*pz*(cj5*cj5)))+(((-1.61542)*cj5*gclwh7_11*npx*pz))+(((-0.37429)*cj5*gclwh13_0*pp*r21*r22))+(((0.1399930041)*gclwh9_15*r21*rxp2_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh13_0*pz*rxp0_2))+(((-0.74858)*gclwh11_1*pp*rxp2_2*sj5))+(((-7.4858e-5)*gclwh7_0*r20*r22*(sj5*sj5)))+(((0.80771)*cj5*gclwh9_11*pp*r21))+(((0.001048417846)*gclwh15_1*rxp1_2*sj5))+(((0.02)*cj5*gclwh7_0*npx*pz*r22*sj5))+(((-0.1048417846)*cj5*gclwh7_1*npx*pz))+(((0.0161542)*gclwh13_11*rxp0_2*sj5))+(((0.00733855819067956)*cj5*gclwh7_1*r20))+(((0.74858)*cj5*gclwh11_9*r22*rxp2_2*sj5))+(((0.6046355518)*cj5*gclwh15_11*rxp1_2))+(((0.006046355518)*gclwh9_11*r21*sj5))+(((-7.4858e-5)*gclwh9_0*r21*r22*(sj5*sj5)))+(((2.0)*gclwh5_1*npz*pp*pz*sj5))+(((0.0149716)*gclwh11_1*npz*rxp2_2*(sj5*sj5)))+(((0.113073749341611)*cj5*gclwh7_11*r20))+(((-0.0096595172829)*gclwh5_0*r22*sj5))+(((0.001048417846)*gclwh13_1*rxp0_2*sj5))+(((0.1399930041)*gclwh7_15*r20*rxp2_2*(cj5*cj5)))+(((-0.2799860082)*cj5*gclwh11_0*r22*rxp2_2*sj5))+(((0.02)*cj5*gclwh9_0*npy*pz*r22*sj5))+(((0.02)*gclwh5_0*(pz*pz)))+(((0.138)*gclwh13_0*npy*pz))+(((0.74858)*gclwh9_0*pz*rxp0_2))+(((0.74858)*gclwh15_9*r22*rxp1_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh13_0*npy*pz*r22))+(((-0.0005165202)*gclwh7_0*r20*sj5))+(((-0.138)*gclwh15_0*npx*pz))+(((-0.0074858)*gclwh7_1*pp*r20*sj5))+(((0.02)*cj5*gclwh13_15*rxp0_2*rxp2_2*sj5))+(((0.008403580246)*cj5*gclwh9_1*npz*r21*sj5))+(((-0.00039241231557934)*cj5*gclwh5_1*r22))+(((0.1401930041)*cj5*gclwh13_15*r21*rxp2_2))+(((-0.74858)*gclwh15_11*npz*rxp1_2*(cj5*cj5)))+(((-0.05165202)*cj5*gclwh15_0*rxp1_2))+(((-0.05165202)*gclwh9_0*rxp0_2))+(((0.02)*cj5*gclwh11_1*pp*rxp2_2))+(((0.5603720164)*gclwh15_1*npz*rxp1_2*(cj5*cj5)))+(((-1.49716)*gclwh9_1*npy*npz*pz*(cj5*cj5)))+(((0.0149716)*gclwh9_1*npz*rxp0_2*sj5))+(((-0.0096595172829)*cj5*gclwh9_0*r21))+((gclwh15_1*r20*(pp*pp)))+(((0.0074858)*cj5*gclwh7_15*r20*rxp2_2*sj5))+(((-0.0074858)*gclwh9_1*pp*r21*sj5))+(((-0.069)*gclwh5_0*pp*r22*sj5))+(((0.002799860082)*gclwh5_1*npz*r22*(sj5*sj5)))+(((-0.104945679009178)*cj5*gclwh15_1*npz*r20))+(((-0.04)*cj5*gclwh9_1*npy*npz*pz*sj5))+(((0.00039241231557934)*gclwh9_1*r21*sj5))+(((0.74858)*cj5*gclwh5_1*npz*pp*r22*sj5))+(((0.0074858)*cj5*gclwh5_1*pp*r22))+(((0.1399930041)*cj5*gclwh5_9*sj5*(r22*r22)))+(((-0.0149716)*gclwh7_1*npz*rxp1_2*sj5))+(((-0.052397981504589)*gclwh7_0*r20*r22*(cj5*cj5)))+(((0.138)*gclwh5_0*npz*pz*sj5))+(((0.0074858)*gclwh7_0*pz*r20*sj5))+(((-0.02)*gclwh15_0*npx*pz*r22*sj5))+(((-0.74858)*cj5*gclwh13_1*pp*rxp0_2))+(((0.138)*cj5*gclwh9_0*npy*pz))+(((0.0074858)*gclwh9_0*pz*r21*sj5))+(((2.0)*gclwh7_11*npx*npz*pz*(cj5*cj5)))+(((0.113073749341611)*cj5*gclwh9_11*r21))+(((0.0096733172829)*gclwh15_0*r20))+(((-0.052472839504589)*cj5*gclwh13_0*r21*r22))+(((0.74858)*cj5*gclwh15_0*pz*rxp1_2))+(((0.039241231557934)*gclwh9_1*rxp0_2))+(((0.02)*gclwh5_1*npz*pp*r22*(sj5*sj5)))+((cj5*gclwh7_0*pp*pz*r20))+(((-2.0)*cj5*gclwh9_0*npy*(pz*pz)))+(((-0.02)*gclwh5_1*pp*pz))+(((-2.0)*gclwh7_15*npx*pz*rxp2_2*(cj5*cj5)))+(((-0.001401930041)*gclwh13_0*r21*r22*sj5))+(((0.000149716)*gclwh7_1*npz*r20*(sj5*sj5)))+(((0.104945679009178)*cj5*gclwh13_1*npz*r21))+(((-0.0002)*gclwh13_0*r22*rxp0_2*(sj5*sj5)))+(((-0.74858)*cj5*gclwh7_15*rxp1_2*rxp2_2))+(((0.74858)*cj5*gclwh13_1*npz*pp*r21))+(((0.6046355518)*cj5*gclwh13_11*rxp0_2))+(((-0.113235291341611)*gclwh15_11*r20))+(((0.02)*cj5*gclwh5_9*pz*r22))+(((-0.01)*gclwh13_0*pp*r21*r22*sj5))+(((-1.0)*cj5*gclwh15_9*pp*r20*r22))+(((-0.0005165202)*gclwh9_0*r21*sj5))+(((0.74858)*gclwh7_1*npz*pp*r20*(cj5*cj5)))+(((-0.37429)*gclwh7_0*pp*r20*r22*(cj5*cj5)))+(((-0.00138)*gclwh13_0*rxp0_2*sj5))+(((-0.0149716)*cj5*gclwh5_0*pz*r22))+((gclwh13_0*pp*pz*r21))+(((0.0299432)*cj5*gclwh15_1*npz*rxp1_2*sj5))+(((-0.01)*cj5*gclwh7_0*pp*r20*r22*sj5))+(((0.74858)*gclwh13_9*r22*rxp0_2*(cj5*cj5)))+(((-0.02)*cj5*gclwh11_0*pz*rxp2_2))+(((-0.6046355518)*gclwh7_11*rxp1_2))+(((2.0)*cj5*gclwh9_1*npy*pp*pz))+(((0.01)*gclwh15_0*pp*r20*r22*sj5))+(((-0.0096595172829)*cj5*gclwh7_0*r20))+(((0.74858)*gclwh11_0*pz*rxp2_2*sj5))+(((-0.02)*cj5*gclwh13_11*npz*rxp0_2*sj5))+(((2.0)*cj5*gclwh7_1*npx*pp*pz))+(((-2.0)*cj5*gclwh13_9*npy*pz*r22))+(((0.1399930041)*gclwh9_9*r21*r22*(cj5*cj5)))+(((1.61542)*gclwh15_11*npx*pz))+(((-1.0)*cj5*gclwh9_1*r21*(pp*pp)))+(((-0.069)*cj5*gclwh7_0*pp*r20))+(((-0.052397981504589)*gclwh9_0*r21*r22*(cj5*cj5)))+(((0.1399930041)*cj5*gclwh9_0*pz*r21))+(((0.00039241231557934)*gclwh7_1*r20*sj5))+(((0.039241231557934)*gclwh11_1*rxp2_2*sj5))+((gclwh5_0*pp*pz*r22*sj5))+(((0.069)*gclwh15_0*pp*r20))+(((-0.00138)*gclwh5_0*pz))+(((0.6046355518)*gclwh9_11*rxp0_2))+(((-0.1044417846)*gclwh5_1*npz*pz*sj5))+(((-0.04)*gclwh5_1*pz*(npz*npz)*(sj5*sj5)))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((0.0161542)*gclwh15_11*rxp1_2*sj5))+(((-1.49716)*cj5*gclwh5_1*pz*sj5*(npz*npz)))+((gclwh9_15*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.001048417846)*cj5*gclwh11_1*rxp2_2))+((cj5*gclwh13_15*pp*r21*rxp2_2))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.0875721118)*cj5*gclwh7_1*pp*r20))+(((1.49716)*cj5*gclwh15_1*npx*npz*pz))+(((-0.052323123504589)*cj5*gclwh5_0*sj5*(r22*r22)))+(((-0.2801860082)*cj5*gclwh9_0*r22*rxp0_2))+(((0.05165202)*gclwh7_0*rxp1_2))+(((-0.1401930041)*cj5*gclwh13_11*npz*r21))+(((-0.0096733172829)*gclwh13_0*r21))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.0875721118)*gclwh5_1*pp*r22*sj5))+(((-0.1399930041)*gclwh7_11*npz*r20*(cj5*cj5)))+(((-0.004201790123)*cj5*gclwh9_0*r21*r22*sj5))+(((0.1399930041)*cj5*gclwh7_0*pz*r20))+(((-0.1401930041)*gclwh15_0*pz*r20))+(((0.5603720164)*cj5*gclwh9_1*npz*rxp0_2))+(((0.02)*gclwh13_0*pz*rxp0_2*sj5))+(((0.052472839504589)*cj5*gclwh15_0*r20*r22))+((gclwh7_15*pp*r20*rxp2_2*(cj5*cj5)))+(((-0.2801860082)*gclwh13_0*r22*rxp0_2*(cj5*cj5)))+(((-0.37429)*cj5*gclwh5_0*pp*sj5*(r22*r22)))+(((0.1397930041)*gclwh5_0*pz*r22*sj5))+(((-0.37429)*gclwh9_0*pp*r21*r22*(cj5*cj5)))+(((0.0074858)*gclwh7_0*r22*rxp1_2*sj5))+(((0.74858)*gclwh7_0*npx*pz*r22*(cj5*cj5)))+((gclwh9_9*pp*r21*r22*(cj5*cj5)))+(((-0.0149716)*gclwh11_1*npz*rxp2_2*(cj5*cj5)))+(((-0.74858)*cj5*gclwh15_1*npz*pp*r20))+(((-1.61542)*gclwh13_11*npy*pz))+(((-0.0074858)*gclwh5_9*(cj5*cj5)*(r22*r22)))+(((-0.02)*gclwh15_1*pp*rxp1_2*sj5))+(((-0.005603720164)*gclwh5_1*npz*r22*(cj5*cj5)))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((0.001048417846)*gclwh5_1*pz))+(((-0.0074858)*cj5*gclwh9_11*npz*r21*sj5))+(((0.039241231557934)*cj5*gclwh15_1*rxp1_2))+(((-0.1401930041)*cj5*gclwh15_15*r20*rxp2_2))+(((-0.02)*gclwh15_1*npz*pp*r20*sj5))+(((-0.04)*gclwh13_1*npy*npz*pz*sj5))+(((2.0)*cj5*gclwh13_11*npy*npz*pz))+(((-0.0875721118)*cj5*gclwh9_1*pp*r21))+(((0.104795963009178)*gclwh9_1*npz*r21*(cj5*cj5)))+(((-0.00734904236913956)*gclwh15_1*r20))+(((0.00734904236913956)*gclwh13_1*r21))+(((0.0149716)*cj5*gclwh5_1*npz*pz))+(((0.74858)*cj5*gclwh11_15*sj5*(rxp2_2*rxp2_2)))+((cj5*gclwh5_9*pp*sj5*(r22*r22)))+(((0.0005165202)*cj5*gclwh5_0*r22))+(((-0.5603720164)*cj5*gclwh7_1*npz*rxp1_2))+(((-2.0)*cj5*gclwh13_15*npy*pz*rxp2_2))+(((0.02)*cj5*gclwh15_9*r22*rxp1_2*sj5))+(((0.0074858)*cj5*gclwh9_15*r21*rxp2_2*sj5))+(((0.0004)*gclwh13_1*npz*rxp0_2*(sj5*sj5)))+(((0.74858)*gclwh13_15*rxp0_2*rxp2_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh7_1*r20*(pp*pp)))+(((0.006046355518)*gclwh7_11*r20*sj5))+(((-1.0)*cj5*gclwh13_11*npz*pp*r21))+(((-0.0002)*gclwh15_0*r22*rxp1_2*(sj5*sj5)))+(((2.0)*cj5*gclwh15_9*npx*pz*r22))+(((-0.004201790123)*cj5*gclwh7_0*r20*r22*sj5))+(((0.113235291341611)*gclwh13_11*r21))+(((-1.0)*gclwh7_11*npz*pp*r20*(cj5*cj5)))+((gclwh7_9*pp*r20*r22*(cj5*cj5)))+(((0.02)*gclwh5_0*npz*pz*r22*(sj5*sj5)))+(((-0.069)*cj5*gclwh9_0*pp*r21))+(((-1.0)*gclwh9_11*npz*pp*r21*(cj5*cj5)))+(((0.74858)*cj5*gclwh5_0*npz*pz*r22*sj5))+(((0.0877721118)*gclwh15_1*pp*r20))+(((0.74858)*gclwh9_1*npz*pp*r21*(cj5*cj5)))+(((-0.1401930041)*cj5*gclwh15_9*r20*r22))+(((-0.00138)*gclwh15_0*rxp1_2*sj5))+(((0.6046355518)*gclwh11_11*rxp2_2*sj5))+(((0.008403580246)*cj5*gclwh7_1*npz*r20*sj5))+(((-0.0074858)*gclwh9_0*r22*rxp0_2*sj5))+(((0.138)*cj5*gclwh7_0*npx*pz))+(((-0.2801860082)*gclwh15_0*r22*rxp1_2*(cj5*cj5)))+(((-0.0877721118)*gclwh13_1*pp*r21))+(((-1.0)*gclwh5_1*r22*sj5*(pp*pp)))+(((0.5599720164)*cj5*gclwh11_1*npz*rxp2_2*sj5))+(((0.0074858)*cj5*gclwh7_9*r20*r22*sj5))+(((0.02)*cj5*gclwh15_15*rxp1_2*rxp2_2*sj5))+(((0.74858)*gclwh9_0*npy*pz*r22*(cj5*cj5)))+(((2.0)*cj5*gclwh15_15*npx*pz*rxp2_2))+((cj5*gclwh15_11*npz*pp*r20))+(((-0.74858)*gclwh13_11*npz*rxp0_2*(cj5*cj5)))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.01)*gclwh5_0*pp*(r22*r22)*(sj5*sj5)))+(((-1.61542)*cj5*gclwh9_11*npy*pz))+(((0.74858)*gclwh7_1*pp*rxp1_2))+(((0.002801860082)*gclwh5_0*(cj5*cj5)*(r22*r22)))+(((-0.1399930041)*gclwh9_11*npz*r21*(cj5*cj5)))+(((0.104795963009178)*gclwh7_1*npz*r20*(cj5*cj5)))+(((0.74858)*cj5*gclwh9_15*rxp0_2*rxp2_2))+(((0.0074858)*gclwh11_0*r22*rxp2_2*(cj5*cj5)))+(((-0.002803860082)*gclwh15_1*npz*r20*sj5))+(((0.0299432)*cj5*gclwh13_1*npz*rxp0_2*sj5))+(((-2.0)*cj5*gclwh15_11*npx*npz*pz))+(((0.02)*cj5*gclwh7_1*npz*pp*r20*sj5))+(((0.37429)*cj5*gclwh15_0*pp*r20*r22))+(((-0.74858)*cj5*gclwh11_11*npz*rxp2_2*sj5))+(((0.039241231557934)*cj5*gclwh13_1*rxp0_2))+(((-0.05165202)*gclwh11_0*rxp2_2*sj5))+(((0.00733855819067956)*cj5*gclwh9_1*r21))+(((0.02)*cj5*gclwh9_1*npz*pp*r21*sj5))+(((-0.74858)*cj5*gclwh15_1*pp*rxp1_2))+(((0.0004)*gclwh15_1*npz*rxp1_2*(sj5*sj5)))+((cj5*gclwh9_0*pp*pz*r21))+((cj5*gclwh13_9*pp*r21*r22))+(((0.001401930041)*gclwh15_0*r20*r22*sj5))+(((-0.0149716)*cj5*gclwh13_0*r22*rxp0_2*sj5))+(((-0.04)*cj5*gclwh7_1*npx*npz*pz*sj5))+(((0.104646247009178)*cj5*gclwh5_1*npz*r22*sj5))+(((0.80771)*gclwh13_11*pp*r21))+(((0.02)*gclwh13_1*npz*pp*r21*sj5))+(((-0.80771)*gclwh15_11*pp*r20))+(((0.74858)*cj5*gclwh7_11*npz*rxp1_2))+(((-0.05165202)*cj5*gclwh13_0*rxp0_2))+(((-0.1048417846)*cj5*gclwh9_1*npy*pz))+(((0.02)*gclwh13_0*npy*pz*r22*sj5))+(((0.002803860082)*gclwh13_1*npz*r21*sj5))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((0.74858)*cj5*gclwh9_9*r22*rxp0_2))+(((0.1401930041)*cj5*gclwh13_9*r21*r22))+(((0.00733855819067956)*gclwh5_1*r22*sj5))+(((0.1401930041)*cj5*gclwh15_11*npz*r20))+(((0.000149716)*gclwh9_1*npz*r21*(sj5*sj5)))+(((-0.02)*gclwh11_15*(cj5*cj5)*(rxp2_2*rxp2_2)))+(((2.0)*gclwh9_11*npy*npz*pz*(cj5*cj5)))+(((-0.74858)*cj5*gclwh7_9*r22*rxp1_2))+(((-0.02)*gclwh11_9*r22*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh9_15*npy*pz*rxp2_2*(cj5*cj5)))+(((0.1399930041)*gclwh7_9*r20*r22*(cj5*cj5)))+(((-0.069)*gclwh13_0*pp*r21))+(((-0.74858)*gclwh7_0*pz*rxp1_2))+(((-2.0)*cj5*gclwh7_0*npx*(pz*pz)))+(((-0.0149716)*cj5*gclwh15_0*r22*rxp1_2*sj5))+(((0.00138)*cj5*gclwh11_0*rxp2_2))+(((-0.0074858)*cj5*gclwh7_11*npz*r20*sj5))+(((-2.0)*cj5*gclwh5_9*npz*pz*r22*sj5))+(((-0.0074858)*gclwh11_0*r22*rxp2_2*(sj5*sj5)))+(((-0.0161542)*cj5*gclwh11_11*rxp2_2))+(((0.02)*gclwh15_0*pz*rxp1_2*sj5))+(((-2.0)*gclwh7_9*npx*pz*r22*(cj5*cj5)))+(((0.1048417846)*gclwh15_1*npx*pz))+(((-0.02)*cj5*gclwh15_11*npz*rxp1_2*sj5))+(((-0.01)*cj5*gclwh9_0*pp*r21*r22*sj5))+(((-1.0)*cj5*gclwh15_15*pp*r20*rxp2_2))+(((-0.039241231557934)*gclwh7_1*rxp1_2))+(((0.74858)*gclwh15_15*rxp1_2*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh5_0*npz*sj5*(pz*pz)))+(((-0.1048417846)*gclwh13_1*npy*pz))+(((0.04)*gclwh15_1*npx*npz*pz*sj5))+(((-0.001399930041)*gclwh5_0*(r22*r22)*(sj5*sj5)))+(((0.5603720164)*gclwh13_1*npz*rxp0_2*(cj5*cj5)))+(((0.0074858)*cj5*gclwh9_9*r21*r22*sj5))+(((-0.74858)*cj5*gclwh15_0*npx*pz*r22))+(((-0.74858)*gclwh9_1*pp*rxp0_2))+(((-0.02)*gclwh13_1*pp*rxp0_2*sj5))+(((-1.49716)*cj5*gclwh13_1*npy*npz*pz))+(((0.80771)*cj5*gclwh7_11*pp*r20))+(((-2.0)*gclwh9_9*npy*pz*r22*(cj5*cj5))));
IkReal x193=(gclwh10_14*r22);
IkReal x194=(rxp1_2*sj5);
IkReal x195=((1.49716)*cj5);
IkReal x196=(gclwh6_2*rxp0_2);
IkReal x197=(gclwh8_14*r20);
IkReal x198=(gclwh8_2*r20);
IkReal x199=(npy*pz);
IkReal x200=((0.138)*pp);
IkReal x201=((0.86684)*pp);
IkReal x202=(gclwh10_14*pz);
IkReal x203=(npz*sj5);
IkReal x204=((2.0)*pp);
IkReal x205=((0.10330404)*rxp0_2);
IkReal x206=(npx*pz);
IkReal x207=((1.73368)*cj5);
IkReal x208=(gclwh6_2*r21);
IkReal x209=(cj5*gclwh12_2);
IkReal x210=((0.6488990872)*rxp1_2);
IkReal x211=(cj5*gclwh6_14);
IkReal x212=((0.276)*cj5);
IkReal x213=(r21*sj5);
IkReal x214=(gclwh10_2*r22);
IkReal x215=(gclwh6_14*r21);
IkReal x216=(gclwh10_2*pz);
IkReal x217=(gclwh4_2*rxp2_2);
IkReal x218=((0.6488990872)*rxp0_2);
IkReal x219=(cj5*gclwh8_14);
IkReal x220=((0.10330404)*rxp1_2);
IkReal x221=(cj5*gclwh14_14*r21);
IkReal x222=(cj5*gclwh12_14*r20);
IkReal x223=(cj5*gclwh14_2*r21);
IkReal x224=(gclwh12_14*r20*sj5);
IkReal x225=(gclwh6_14*rxp0_2*sj5);
op[11]=((((0.060762451837022)*gclwh13_13*r21))+(((0.0086684)*gclwh13_13*rxp0_2*sj5))+(((0.05165202)*cj5*gclwh13_11*rxp0_2))+(((2.0)*cj5*gclwh9_9*npy*pz))+(((-0.1399930041)*gclwh5_9*r22*sj5))+(((2.0)*gclwh13_9*npy*pz))+(((0.43342)*cj5*gclwh9_13*pp*r21))+(((0.003244495436)*gclwh9_13*r21*sj5))+(((-0.0074858)*gclwh7_9*r20*sj5))+(((0.069)*cj5*gclwh7_11*pp*r20))+(((0.0005165202)*gclwh7_11*r20*sj5))+(((-0.1399930041)*cj5*gclwh9_9*r21))+(((0.0096595172829)*cj5*gclwh7_11*r20))+(((0.069)*cj5*gclwh9_11*pp*r21))+(((0.00138)*gclwh15_11*rxp1_2*sj5))+(((-0.02)*gclwh15_9*rxp1_2*sj5))+(((0.3244495436)*cj5*gclwh13_13*rxp0_2))+(((-0.00138)*cj5*gclwh11_11*rxp2_2))+(((0.0086684)*gclwh5_13*pz))+(((-0.003244495436)*cj5*gclwh5_13*r22))+(((-0.86684)*cj5*gclwh7_13*npx*pz))+(((-0.1399930041)*cj5*gclwh7_9*r20))+(((0.1401930041)*gclwh15_9*r20))+(((-0.060762451837022)*gclwh15_13*r20))+(((0.00138)*gclwh13_11*rxp0_2*sj5))+(((-0.86684)*gclwh5_13*npz*pz*sj5))+(((0.05165202)*gclwh11_11*rxp2_2*sj5))+(((0.003244495436)*gclwh7_13*r20*sj5))+(((0.0074858)*cj5*gclwh5_9*r22))+(((0.060675767837022)*gclwh5_13*r22*sj5))+(((-1.0)*cj5*gclwh9_9*pp*r21))+(((-0.0074858)*gclwh9_9*r21*sj5))+(((2.0)*cj5*gclwh7_9*npx*pz))+(((-0.0086684)*cj5*gclwh11_13*rxp2_2))+(((0.05165202)*cj5*gclwh15_11*rxp1_2))+(((-0.86684)*gclwh13_13*npy*pz))+(((0.86684)*gclwh15_13*npx*pz))+(((-0.02)*gclwh5_9*pz))+((gclwh15_9*pp*r20))+(((0.069)*gclwh13_11*pp*r21))+(((-0.74858)*cj5*gclwh13_9*rxp0_2))+(((-0.0096733172829)*gclwh15_11*r20))+(((-0.138)*cj5*gclwh9_11*npy*pz))+(((-0.1401930041)*gclwh13_9*r21))+(((-0.02)*gclwh13_9*rxp0_2*sj5))+(((-0.74858)*gclwh11_9*rxp2_2*sj5))+(((-2.0)*gclwh15_9*npx*pz))+(((-0.138)*gclwh13_11*npy*pz))+(((-0.3244495436)*gclwh7_13*rxp1_2))+(((-0.43342)*gclwh15_13*pp*r20))+(((0.43342)*gclwh5_13*pp*r22*sj5))+(((-0.069)*gclwh15_11*pp*r20))+(((0.74858)*gclwh7_9*rxp1_2))+(((-0.74858)*cj5*gclwh15_9*rxp1_2))+(((0.0096595172829)*cj5*gclwh9_11*r21))+(((0.0096733172829)*gclwh13_11*r21))+(((-0.86684)*cj5*gclwh9_13*npy*pz))+(((0.138)*gclwh15_11*npx*pz))+(((0.3244495436)*gclwh9_13*rxp0_2))+(((0.3244495436)*gclwh11_13*rxp2_2*sj5))+(((-1.0)*gclwh5_9*pp*r22*sj5))+(((-0.05165202)*gclwh7_11*rxp1_2))+(((-0.74858)*gclwh9_9*rxp0_2))+(((2.0)*gclwh5_9*npz*pz*sj5))+(((0.0005165202)*gclwh9_11*r21*sj5))+(((0.060675767837022)*cj5*gclwh9_13*r21))+(((0.02)*cj5*gclwh11_9*rxp2_2))+(((-1.0)*gclwh13_9*pp*r21))+(((0.060675767837022)*cj5*gclwh7_13*r20))+(((-0.138)*cj5*gclwh7_11*npx*pz))+(((0.05165202)*gclwh9_11*rxp0_2))+(((0.0086684)*gclwh15_13*rxp1_2*sj5))+(((-1.0)*cj5*gclwh7_9*pp*r20))+(((0.43342)*cj5*gclwh7_13*pp*r20))+(((0.3244495436)*cj5*gclwh15_13*rxp1_2))+(((0.43342)*gclwh13_13*pp*r21)));
op[12]=((0.1830918964)+(((0.86684)*cj5*gclwh12_12*npx*pz))+(((0.74858)*gclwh12_8*rxp1_2))+(((-0.060675767837022)*cj5*gclwh14_12*r21))+(((-0.1399930041)*cj5*gclwh14_8*r21))+(((-0.02)*cj5*gclwh4_8*rxp2_2))+(((0.3244495436)*cj5*gclwh6_12*rxp0_2))+(((-0.05165202)*gclwh14_10*rxp0_2))+(((-0.43342)*cj5*gclwh12_12*pp*r20))+(((0.138)*gclwh8_10*npx*pz))+(((2.0)*cj5*gclwh12_8*npx*pz))+(((0.0074858)*cj5*gclwh10_8*r22))+(((-2.0)*gclwh6_8*npy*pz))+(((0.138)*cj5*gclwh14_10*npy*pz))+(((0.74858)*cj5*gclwh8_8*rxp1_2))+(((0.74858)*gclwh4_8*rxp2_2*sj5))+(((-0.1399930041)*cj5*gclwh12_8*r20))+(((-0.0086684)*cj5*gclwh4_12*rxp2_2))+(((-0.060675767837022)*cj5*gclwh12_12*r20))+(((-0.1399930041)*gclwh10_8*r22*sj5))+(((-0.0096733172829)*gclwh8_10*r20))+(((-0.003244495436)*gclwh14_12*r21*sj5))+(((-0.74858)*gclwh14_8*rxp0_2))+(((0.05165202)*cj5*gclwh8_10*rxp1_2))+(((-1.0)*cj5*gclwh14_8*pp*r21))+(((-0.069)*cj5*gclwh12_10*pp*r20))+(((0.86684)*gclwh8_12*npx*pz))+(((-0.138)*gclwh6_10*npy*pz))+(((0.02)*gclwh8_8*rxp1_2*sj5))+(((0.138)*gclwh10_10*npz*pz*sj5))+(((0.0086684)*gclwh6_12*rxp0_2*sj5))+(((-0.43342)*gclwh8_12*pp*r20))+(((-0.02)*gclwh10_8*pz))+(((0.00138)*gclwh6_10*rxp0_2*sj5))+(((-0.0096595172829)*gclwh10_10*r22*sj5))+(((-0.0096595172829)*cj5*gclwh12_10*r20))+(((-0.86684)*gclwh6_12*npy*pz))+(((-0.003244495436)*gclwh12_12*r20*sj5))+((gclwh6_8*pp*r21))+(((-0.060675767837022)*gclwh10_12*r22*sj5))+(((0.02)*gclwh6_8*rxp0_2*sj5))+(((0.0086684)*gclwh8_12*rxp1_2*sj5))+(((-0.069)*gclwh10_10*pp*r22*sj5))+(((0.0005165202)*cj5*gclwh10_10*r22))+(((-0.0005165202)*gclwh12_10*r20*sj5))+(((0.060762451837022)*gclwh6_12*r21))+(((0.43342)*gclwh6_12*pp*r21))+(((-0.0074858)*gclwh14_8*r21*sj5))+(((0.3244495436)*gclwh12_12*rxp1_2))+(((0.86684)*cj5*gclwh14_12*npy*pz))+(((-0.43342)*gclwh10_12*pp*r22*sj5))+(((-1.0)*gclwh8_8*pp*r20))+(((-0.00138)*gclwh10_10*pz))+(((0.0096733172829)*gclwh6_10*r21))+(((0.05165202)*gclwh12_10*rxp1_2))+(((-0.1401930041)*gclwh8_8*r20))+(((0.3244495436)*gclwh4_12*rxp2_2*sj5))+(((-0.43342)*cj5*gclwh14_12*pp*r21))+(((2.0)*gclwh8_8*npx*pz))+(((0.05165202)*cj5*gclwh6_10*rxp0_2))+(((0.1401930041)*gclwh6_8*r21))+(((-0.069)*cj5*gclwh14_10*pp*r21))+(((0.003244495436)*cj5*gclwh10_12*r22))+(((-0.0096595172829)*cj5*gclwh14_10*r21))+(((0.3244495436)*cj5*gclwh8_12*rxp1_2))+(((-0.060762451837022)*gclwh8_12*r20))+(((-0.069)*gclwh8_10*pp*r20))+(((0.138)*cj5*gclwh12_10*npx*pz))+(((-0.0086684)*gclwh10_12*pz))+(((0.069)*gclwh6_10*pp*r21))+(((-0.0074858)*gclwh12_8*r20*sj5))+(((0.00138)*gclwh8_10*rxp1_2*sj5))+(((-0.3244495436)*gclwh14_12*rxp0_2))+(((-0.0005165202)*gclwh14_10*r21*sj5))+(((-1.0)*gclwh10_8*pp*r22*sj5))+(((2.0)*gclwh10_8*npz*pz*sj5))+(((0.86684)*gclwh10_12*npz*pz*sj5))+(((2.0)*cj5*gclwh14_8*npy*pz))+(((-1.0)*cj5*gclwh12_8*pp*r20))+(((0.74858)*cj5*gclwh6_8*rxp0_2)));
op[13]=((0.05981196)+((gclwh12_10*npz*pp*r20*(cj5*cj5)))+(((-0.001048417846)*gclwh3_4*rxp0_2))+(((-0.005603720164)*gclwh3_4*npz*r21*(cj5*cj5)))+(((-2.0)*cj5*gclwh8_10*npx*npz*pz))+(((0.0096595172829)*cj5*gclwh14_3*r21))+(((0.5603720164)*cj5*gclwh14_4*npz*rxp0_2))+((cj5*gclwh6_14*pp*r21*rxp2_2))+(((-0.001399930041)*gclwh3_3*r21*r22*(sj5*sj5)))+(((-2.0)*cj5*npz*pz))+(((0.000442635354)*gclwh12_10*r20*sj5))+(((-2.0)*gclwh8_3*npx*(pz*pz)))+(((-0.74858)*cj5*gclwh6_4*npz*pp*r21))+(((0.01)*gclwh6_3*pp*r21*r22*sj5))+(((-2.0)*cj5*gclwh14_3*npy*(pz*pz)))+(((0.0074858)*cj5*gclwh3_3*r22*rxp0_2))+(((0.00733855819067956)*gclwh1_4*r20*sj5))+(((0.02)*gclwh8_4*pp*rxp1_2*sj5))+(((-1.0)*cj5*gclwh6_10*npz*pp*r21))+(((0.05913)*gclwh8_10*pp*r20))+(((2.0)*gclwh10_4*npz*pp*pz*sj5))+(((-0.138)*gclwh10_3*npz*pz*sj5))+(((-0.0004)*gclwh6_4*npz*rxp0_2*(sj5*sj5)))+(((-0.05165202)*gclwh4_3*rxp2_2*sj5))+(((-0.02)*gclwh6_3*pz*rxp0_2*sj5))+(((-0.0299432)*cj5*gclwh8_4*npz*rxp1_2*sj5))+(((-0.02)*gclwh3_3*npy*pz*r22*(sj5*sj5)))+(((-2.0)*gclwh3_4*npy*pp*pz*sj5))+(((0.2801860082)*gclwh6_3*r22*rxp0_2*(cj5*cj5)))+(((0.1397930041)*gclwh10_3*pz*r22*sj5))+(((0.02)*cj5*gclwh14_4*npz*pp*r21*sj5))+(((-0.0442635354)*cj5*gclwh6_10*rxp0_2))+(((-0.069)*gclwh1_3*pp*r20*sj5))+(((-0.1048417846)*cj5*gclwh12_4*npx*pz))+(((-0.01)*gclwh10_3*pp*(r22*r22)*(sj5*sj5)))+(((-0.02)*gclwh10_4*pp*pz))+(((-0.00734904236913956)*gclwh6_4*r21))+(((2.0)*gclwh6_3*npy*(pz*pz)))+(((-2.0)*gclwh1_4*npx*pp*pz*sj5))+(((0.0002)*gclwh6_3*r22*rxp0_2*(sj5*sj5)))+(((-0.02)*gclwh3_4*npz*pp*r21*(sj5*sj5)))+(((-0.37429)*cj5*gclwh10_3*pp*sj5*(r22*r22)))+(((0.002799860082)*gclwh1_4*npz*r20*(sj5*sj5)))+(((0.04)*gclwh3_4*npy*npz*pz*(sj5*sj5)))+(((-1.0)*cj5*gclwh10_14*pp*r22*rxp2_2*sj5))+(((-0.00039241231557934)*cj5*gclwh1_4*r20))+(((-0.0149716)*cj5*gclwh3_4*npz*rxp0_2))+(((1.49716)*cj5*gclwh1_4*npx*npz*pz*sj5))+(((0.0074858)*gclwh12_3*pz*r20*sj5))+(((-1.0)*gclwh14_8*pp*r21*r22*(cj5*cj5)))+(((0.00733855819067956)*cj5*gclwh12_4*r20))+(((0.008277786332433)*cj5*gclwh14_10*r21))+(((-1.0)*gclwh3_3*pp*pz*r21*sj5))+(((0.0096595172829)*gclwh3_3*r21*sj5))+(((-0.02)*gclwh6_3*npy*pz*r22*sj5))+(((-0.0074858)*cj5*gclwh14_8*r21*r22*sj5))+(((0.02)*cj5*gclwh12_4*npz*pp*r20*sj5))+((gclwh10_3*pp*pz*r22*sj5))+(((-1.49716)*gclwh14_4*npy*npz*pz*(cj5*cj5)))+(((-0.0005165202)*cj5*gclwh10_3*r22))+(((-0.069)*gclwh3_3*pp*r21*sj5))+(((0.1399930041)*gclwh3_3*pz*r21*sj5))+(((-2.0)*cj5*gclwh6_14*npy*pz*rxp2_2))+(((2.0)*cj5*gclwh12_4*npx*pp*pz))+(((0.1401930041)*cj5*gclwh6_8*r21*r22))+(((-0.001401930041)*gclwh8_3*r20*r22*sj5))+(((0.74858)*cj5*gclwh12_8*r22*rxp1_2))+(((-0.1399930041)*gclwh12_14*r20*rxp2_2*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh12_8*r20*r22*sj5))+(((0.104646247009178)*cj5*gclwh1_4*npz*r20*sj5))+(((0.0074858)*cj5*gclwh10_4*pp*r22))+(((-0.0074858)*gclwh4_3*r22*rxp2_2*(cj5*cj5)))+(((0.00733855819067956)*cj5*gclwh14_4*r21))+(((0.0149716)*gclwh14_4*npz*rxp0_2*sj5))+(((-2.0)*gclwh14_10*npy*npz*pz*(cj5*cj5)))+(((-0.74858)*gclwh4_3*pz*rxp2_2*sj5))+(((0.00138)*cj5*gclwh4_3*rxp2_2))+(((-0.052323123504589)*cj5*gclwh1_3*r20*r22*sj5))+(((-1.0)*cj5*gclwh12_4*r20*(pp*pp)))+((cj5*gclwh12_3*pp*pz*r20))+(((0.02)*gclwh10_3*npz*pz*r22*(sj5*sj5)))+(((-0.1399930041)*cj5*r22))+(((-1.0)*cj5*gclwh14_4*r21*(pp*pp)))+(((-0.0074858)*gclwh14_3*r22*rxp0_2*sj5))+(((0.0096595172829)*gclwh10_3*r22*sj5))+(((0.74858)*gclwh4_4*pp*rxp2_2*sj5))+(((0.02)*gclwh10_3*(pz*pz)))+(((0.000442635354)*gclwh14_10*r21*sj5))+(((-0.37429)*gclwh12_3*pp*r20*r22*(cj5*cj5)))+(((0.1401930041)*cj5*gclwh6_14*r21*rxp2_2))+(((0.0074858)*gclwh4_3*r22*rxp2_2*(sj5*sj5)))+(((0.0074858)*gclwh14_3*pz*r21*sj5))+(((-0.02)*gclwh4_8*r22*rxp2_2*(cj5*cj5)))+(((0.104646247009178)*cj5*gclwh10_4*npz*r22*sj5))+(((0.1399930041)*cj5*gclwh14_3*pz*r21))+(((-0.0875721118)*gclwh10_4*pp*r22*sj5))+(((0.74858)*pz))+(((-0.069)*gclwh6_3*pp*r21))+(((0.37429)*cj5*gclwh6_3*pp*r21*r22))+(((0.00733855819067956)*gclwh3_4*r21*sj5))+(((0.74858)*cj5*gclwh4_8*r22*rxp2_2*sj5))+(((0.74858)*gclwh14_3*npy*pz*r22*(cj5*cj5)))+(((0.1399930041)*gclwh12_10*npz*r20*(cj5*cj5)))+(((0.069)*gclwh10_3*pp*r22*sj5))+(((-0.039241231557934)*cj5*gclwh6_4*rxp0_2))+(((-2.0)*cj5*gclwh12_3*npx*(pz*pz)))+(((0.0096595172829)*cj5*gclwh12_3*r20))+(((-0.02)*cj5*gclwh6_10*npz*rxp0_2*sj5))+(((-0.138)*gclwh8_3*npx*pz))+(((-0.0875721118)*cj5*gclwh14_4*pp*r21))+(((-0.0442635354)*cj5*gclwh8_10*rxp1_2))+(((-0.004201790123)*cj5*gclwh14_3*r21*r22*sj5))+(((0.74858)*cj5*gclwh8_4*npz*pp*r20))+(((-0.01)*gclwh8_3*pp*r20*r22*sj5))+(((-0.74858)*cj5*gclwh12_10*npz*rxp1_2))+(((-0.0875721118)*cj5*gclwh12_4*pp*r20))+(((-1.49716)*gclwh12_4*npx*npz*pz*(cj5*cj5)))+(((-0.02)*cj5*gclwh4_4*pp*rxp2_2))+(((-0.02)*gclwh1_4*pp*rxp1_2))+(((0.001048417846)*gclwh1_4*rxp1_2))+(((0.02)*gclwh8_4*npz*pp*r20*sj5))+(((-0.1401930041)*cj5*gclwh8_8*r20*r22))+(((0.069)*gclwh8_3*pp*r20))+(((-0.02)*gclwh1_3*npx*pz*r22*(sj5*sj5)))+((gclwh8_3*pp*pz*r20))+(((-1.0)*cj5*gclwh10_8*pp*sj5*(r22*r22)))+(((-0.052397981504589)*gclwh14_3*r21*r22*(cj5*cj5)))+(((0.02)*gclwh10_4*npz*pp*r22*(sj5*sj5)))+(((-0.0149716)*gclwh12_4*npz*rxp1_2*sj5))+(((-0.039241231557934)*cj5*gclwh8_4*rxp1_2))+(((-0.74858)*cj5*gclwh3_3*npy*pz*r22*sj5))+(((-0.0002)*gclwh1_3*r22*rxp1_2*sj5))+(((-0.02)*gclwh8_3*pz*rxp1_2*sj5))+(((0.02)*cj5*gclwh6_8*r22*rxp0_2*sj5))+(((0.0002)*gclwh8_3*r22*rxp1_2*(sj5*sj5)))+(((-0.37429)*cj5*gclwh8_3*pp*r20*r22))+(((0.74858)*gclwh14_4*npz*pp*r21*(cj5*cj5)))+(((-0.11826)*cj5*gclwh12_10*npx*pz))+(((-0.0074858)*cj5*gclwh12_14*r20*rxp2_2*sj5))+(((0.138)*gclwh6_3*npy*pz))+(((-0.00039241231557934)*cj5*gclwh3_4*r21))+(((-1.0)*cj5*gclwh8_14*pp*r20*rxp2_2))+(((-0.2801860082)*cj5*gclwh14_3*r22*rxp0_2))+(((0.002799860082)*gclwh10_4*npz*r22*(sj5*sj5)))+(((-0.0074858)*r22*sj5))+(((-0.0074858)*gclwh12_4*pp*r20*sj5))+(((0.37429)*cj5*gclwh3_3*pp*r21*r22*sj5))+(((-0.74858)*cj5*gclwh6_3*pz*rxp0_2))+(((-0.0299432)*cj5*gclwh6_4*npz*rxp0_2*sj5))+(((0.069)*cj5*gclwh12_3*pp*r20))+(((0.74858)*cj5*gclwh8_3*npx*pz*r22))+(((-0.02)*gclwh3_3*pz*rxp0_2))+(((0.0149716)*cj5*gclwh8_3*r22*rxp1_2*sj5))+(((-0.00138)*gclwh8_3*rxp1_2*sj5))+((gclwh6_4*r21*(pp*pp)))+(((-0.0149716)*cj5*gclwh10_3*pz*r22))+(((-0.1401930041)*cj5*gclwh6_10*npz*r21))+(((-0.1048417846)*cj5*gclwh14_4*npy*pz))+(((0.002803860082)*gclwh8_4*npz*r20*sj5))+(((-0.1399930041)*cj5*gclwh10_14*r22*rxp2_2*sj5))+(((-0.5603720164)*gclwh6_4*npz*rxp0_2*(cj5*cj5)))+(((-0.1399930041)*gclwh14_8*r21*r22*(cj5*cj5)))+(((-0.039241231557934)*gclwh4_4*rxp2_2*sj5))+(((2.0)*gclwh12_8*npx*pz*r22*(cj5*cj5)))+(((-1.0)*gclwh12_8*pp*r20*r22*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh1_3*pz*r20))+(((-0.05913)*gclwh6_10*pp*r21))+(((-1.0)*gclwh1_3*pp*pz*r20*sj5))+(((0.00039241231557934)*gclwh14_4*r21*sj5))+(((-0.1399930041)*gclwh14_14*r21*rxp2_2*(cj5*cj5)))+(((0.000149716)*gclwh12_4*npz*r20*(sj5*sj5)))+(((0.02)*cj5*gclwh6_14*rxp0_2*rxp2_2*sj5))+(((0.02)*gclwh3_4*pp*rxp0_2))+(((-0.11826)*cj5*gclwh14_10*npy*pz))+(((2.0)*cj5*gclwh14_4*npy*pp*pz))+(((-0.74858)*cj5*gclwh3_4*npz*pp*r21*sj5))+(((-0.1399930041)*cj5*gclwh10_8*sj5*(r22*r22)))+(((-0.0005165202)*cj5*gclwh3_3*r21))+(((-0.37429)*gclwh14_3*pp*r21*r22*(cj5*cj5)))+(((0.002801860082)*gclwh10_3*(cj5*cj5)*(r22*r22)))+(((-0.74858)*cj5*gclwh14_8*r22*rxp0_2))+(((-0.04)*cj5*gclwh14_4*npy*npz*pz*sj5))+((cj5*gclwh10_10*npz*pp*r22*sj5))+(((2.0)*gclwh1_3*npx*sj5*(pz*pz)))+(((-0.0074858)*gclwh10_10*npz*r22*(cj5*cj5)))+(((0.74858)*gclwh8_8*r22*rxp1_2*(cj5*cj5)))+(((0.2801860082)*cj5*gclwh12_3*r22*rxp1_2))+(((-0.02)*gclwh6_4*npz*pp*r21*sj5))+(((0.1401930041)*gclwh8_3*pz*r20))+(((0.00138)*gclwh1_3*rxp1_2))+(((0.0074858)*cj5*gclwh3_4*pp*r21))+(((-1.49716)*cj5*gclwh8_4*npx*npz*pz))+(((0.104795963009178)*gclwh14_4*npz*r21*(cj5*cj5)))+(((-0.0004)*gclwh8_4*npz*rxp1_2*(sj5*sj5)))+(((-0.0074858)*cj5*gclwh14_14*r21*rxp2_2*sj5))+(((-0.002803860082)*gclwh6_4*npz*r21*sj5))+(((-0.5603720164)*gclwh8_4*npz*rxp1_2*(cj5*cj5)))+(((0.0096595172829)*gclwh1_3*r20*sj5))+(((0.02)*cj5*gclwh4_3*pz*rxp2_2))+(((-0.1401930041)*cj5*gclwh8_14*r20*rxp2_2))+(((0.74858)*gclwh6_8*r22*rxp0_2*(cj5*cj5)))+(((-0.04)*gclwh10_4*pz*(npz*npz)*(sj5*sj5)))+(((-1.0)*gclwh14_14*pp*r21*rxp2_2*(cj5*cj5)))+(((-2.0)*cj5*gclwh6_8*npy*pz*r22))+(((-0.05165202)*cj5*gclwh8_3*rxp1_2))+(((0.0011826)*gclwh10_10*pz))+(((-1.0)*gclwh12_14*pp*r20*rxp2_2*(cj5*cj5)))+(((0.001048417846)*gclwh10_4*pz))+(((0.008403580246)*cj5*gclwh14_4*npz*r21*sj5))+(((-0.005603720164)*gclwh10_4*npz*r22*(cj5*cj5)))+(((0.00039241231557934)*gclwh12_4*r20*sj5))+((cj5*pp*r22))+(((-0.138)*cj5*gclwh14_3*npy*pz))+(((0.0074858)*gclwh10_14*r22*rxp2_2*(cj5*cj5)))+(((-0.005603720164)*gclwh1_4*npz*r20*(cj5*cj5)))+(((0.11826)*gclwh6_10*npy*pz))+(((0.0442635354)*gclwh14_10*rxp0_2))+(((-0.1401930041)*gclwh6_3*pz*r21))+(((-0.1924138964)*gclwh1_4*pp*r20*sj5))+(((-0.0096733172829)*gclwh6_3*r21))+(((-0.74858)*gclwh14_4*pp*rxp0_2))+(((-0.74858)*gclwh6_10*npz*rxp0_2*(cj5*cj5)))+(((0.04)*gclwh1_4*npx*npz*pz*(sj5*sj5)))+(((0.0877721118)*gclwh6_4*pp*r21))+(((0.069)*cj5*gclwh14_3*pp*r21))+(((0.008289612332433)*gclwh8_10*r20))+(((0.74858)*gclwh14_3*pz*rxp0_2))+(((0.104945679009178)*cj5*gclwh8_4*npz*r20))+(((0.0149716)*cj5*gclwh6_3*r22*rxp0_2*sj5))+(((0.052472839504589)*cj5*gclwh6_3*r21*r22))+((gclwh1_4*r20*sj5*(pp*pp)))+(((-0.052472839504589)*cj5*gclwh8_3*r20*r22))+(((0.0002)*gclwh3_3*r22*rxp0_2*sj5))+(((0.02)*gclwh8_3*npx*pz*r22*sj5))+(((0.05165202)*gclwh14_3*rxp0_2))+(((0.002799860082)*gclwh3_4*npz*r21*(sj5*sj5)))+(((0.1399930041)*gclwh14_10*npz*r21*(cj5*cj5)))+(((-0.001399930041)*gclwh10_3*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh14_8*npy*pz*r22*(cj5*cj5)))+(((-0.01)*cj5*gclwh14_3*pp*r21*r22*sj5))+(((1.49716)*cj5*gclwh3_4*npy*npz*pz*sj5))+(((0.138)*gclwh3_3*npy*pz*sj5))+(((-1.0)*gclwh8_4*r20*(pp*pp)))+(((0.001048417846)*cj5*gclwh4_4*rxp2_2))+(((0.002801860082)*gclwh1_3*r20*r22*(cj5*cj5)))+(((-0.74858)*cj5*gclwh8_3*pz*rxp1_2))+(((0.02)*cj5*gclwh14_3*npy*pz*r22*sj5))+(((-0.05165202)*gclwh12_3*rxp1_2))+(((-0.74858)*gclwh8_10*npz*rxp1_2*(cj5*cj5)))+(((0.0149716)*cj5*gclwh10_4*npz*pz))+(((-0.00039241231557934)*cj5*gclwh10_4*r22))+(((0.1399930041)*gclwh1_3*pz*r20*sj5))+(((0.008403580246)*cj5*gclwh12_4*npz*r20*sj5))+(((0.039241231557934)*gclwh14_4*rxp0_2))+(((-2.0)*gclwh12_10*npx*npz*pz*(cj5*cj5)))+(((2.0)*cj5*gclwh8_14*npx*pz*rxp2_2))+(((2.0)*gclwh14_14*npy*pz*rxp2_2*(cj5*cj5)))+(((-0.001048417846)*gclwh8_4*rxp1_2*sj5))+(((-0.0011826)*gclwh6_10*rxp0_2*sj5))+(((-0.74858)*cj5*gclwh1_4*npz*pp*r20*sj5))+(((0.74858)*gclwh8_14*rxp1_2*rxp2_2*(cj5*cj5)))+(((0.05913)*gclwh10_10*pp*r22*sj5))+(((0.1399930041)*cj5*gclwh12_3*pz*r20))+(((0.74858)*cj5*gclwh6_4*pp*rxp0_2))+(((-0.052323123504589)*cj5*gclwh10_3*sj5*(r22*r22)))+(((0.74858)*gclwh12_4*pp*rxp1_2))+(((-0.138)*cj5*gclwh12_3*npx*pz))+(((0.02)*gclwh1_3*pz*rxp1_2))+(((-0.008289612332433)*gclwh6_10*r21))+(((0.02)*cj5*gclwh12_3*npx*pz*r22*sj5))+(((-2.0)*gclwh6_4*npy*pp*pz))+(((-0.1048417846)*gclwh8_4*npx*pz))+(((-0.1924138964)*gclwh3_4*pp*r21*sj5))+(((0.0005165202)*gclwh12_3*r20*sj5))+(((2.0)*gclwh8_4*npx*pp*pz))+((cj5*gclwh14_3*pp*pz*r21))+(((0.104646247009178)*cj5*gclwh3_4*npz*r21*sj5))+(((0.1399930041)*cj5*gclwh10_10*npz*r22*sj5))+(((0.0005165202)*gclwh14_3*r21*sj5))+(((0.74858)*cj5*gclwh14_10*npz*rxp0_2))+(((-0.00138)*gclwh6_3*rxp0_2*sj5))+(((0.74858)*gclwh12_4*npz*pp*r20*(cj5*cj5)))+(((-0.000442635354)*cj5*gclwh10_10*r22))+(((0.05913)*cj5*gclwh12_10*pp*r20))+(((0.1401930041)*cj5*gclwh8_10*npz*r20))+(((0.1048417846)*gclwh1_4*npx*pz*sj5))+(((0.008277786332433)*gclwh10_10*r22*sj5))+(((0.02)*cj5*gclwh8_14*rxp1_2*rxp2_2*sj5))+(((-0.74858)*cj5*gclwh1_3*npx*pz*r22*sj5))+(((0.0004)*gclwh1_4*npz*rxp1_2*sj5))+(((1.49716)*cj5*gclwh6_4*npy*npz*pz))+(((0.74858)*cj5*gclwh10_3*npz*pz*r22*sj5))+(((0.00733855819067956)*gclwh10_4*r22*sj5))+(((-0.1044417846)*gclwh10_4*npz*pz*sj5))+(((-0.001399930041)*gclwh1_3*r20*r22*(sj5*sj5)))+(((0.74858)*cj5*gclwh10_4*npz*pp*r22*sj5))+(((0.0074858)*cj5*gclwh14_10*npz*r21*sj5))+(((-0.00138)*gclwh3_3*rxp0_2))+(((0.02)*gclwh6_4*pp*rxp0_2*sj5))+(((-0.0004)*gclwh3_4*npz*rxp0_2*sj5))+(((0.37429)*cj5*gclwh1_3*pp*r20*r22*sj5))+(((0.74858)*cj5*gclwh8_4*pp*rxp1_2))+(((0.0074858)*cj5*gclwh12_10*npz*r20*sj5))+(((-0.02)*cj5*gclwh10_8*pz*r22))+(((0.104795963009178)*gclwh12_4*npz*r20*(cj5*cj5)))+((gclwh14_10*npz*pp*r21*(cj5*cj5)))+(((0.74858)*gclwh12_3*npx*pz*r22*(cj5*cj5)))+(((0.008277786332433)*cj5*gclwh12_10*r20))+(((-0.01)*cj5*gclwh12_3*pp*r20*r22*sj5))+(((-0.11826)*gclwh10_10*npz*pz*sj5))+(((-0.0011826)*gclwh8_10*rxp1_2*sj5))+(((-2.0)*cj5*gclwh10_10*pz*sj5*(npz*npz)))+(((-0.02)*cj5*gclwh8_10*npz*rxp1_2*sj5))+(((-0.001048417846)*gclwh6_4*rxp0_2*sj5))+(((-1.0)*gclwh10_4*r22*sj5*(pp*pp)))+(((-0.02)*cj5*gclwh10_14*pz*rxp2_2))+(((-0.0442635354)*gclwh12_10*rxp1_2))+(((-0.0074858)*cj5*gclwh3_3*pz*r21))+(((-0.0005165202)*cj5*gclwh1_3*r20))+((cj5*gclwh6_8*pp*r21*r22))+(((2.0)*cj5*gclwh8_8*npx*pz*r22))+(((-0.1399930041)*gclwh12_8*r20*r22*(cj5*cj5)))+(((-1.0)*gclwh6_3*pp*pz*r21))+(((0.1048417846)*gclwh3_4*npy*pz*sj5))+(((0.0074858)*gclwh10_8*(cj5*cj5)*(r22*r22)))+(((0.01)*gclwh3_3*pp*r21*r22*(sj5*sj5)))+(((0.02)*cj5*gclwh8_8*r22*rxp1_2*sj5))+(((-7.4858e-5)*gclwh14_3*r21*r22*(sj5*sj5)))+(((-0.74858)*gclwh12_3*pz*rxp1_2))+(((2.0)*cj5*gclwh6_10*npy*npz*pz))+(((0.2801860082)*gclwh8_3*r22*rxp1_2*(cj5*cj5)))+(((-0.04)*gclwh8_4*npx*npz*pz*sj5))+(((2.0)*cj5*gclwh10_14*npz*pz*rxp2_2*sj5))+(((-0.0074858)*cj5*gclwh1_3*r22*rxp1_2))+(((-0.74858)*cj5*gclwh6_3*npy*pz*r22))+(((0.138)*gclwh1_3*npx*pz*sj5))+(((-2.0)*gclwh10_3*npz*sj5*(pz*pz)))+(((0.00138)*gclwh10_3*pz))+(((0.001401930041)*gclwh6_3*r21*r22*sj5))+(((-0.0074858)*gclwh14_4*pp*r21*sj5))+(((-0.74858)*cj5*gclwh14_14*rxp0_2*rxp2_2))+(((0.74858)*cj5*gclwh12_14*rxp1_2*rxp2_2))+(((-0.5603720164)*cj5*gclwh12_4*npz*rxp1_2))+(((-0.02)*gclwh1_4*npz*pp*r20*(sj5*sj5)))+(((0.02)*cj5*gclwh10_10*npz*pz))+(((-1.0)*cj5*gclwh8_8*pp*r20*r22))+(((-7.4858e-5)*gclwh12_3*r20*r22*(sj5*sj5)))+(((0.0149716)*cj5*gclwh1_4*npz*rxp1_2))+(((-0.052323123504589)*cj5*gclwh3_3*r21*r22*sj5))+(((-0.052397981504589)*gclwh12_3*r20*r22*(cj5*cj5)))+(((2.0)*cj5*gclwh10_8*npz*pz*r22*sj5))+(((0.2799860082)*cj5*gclwh4_3*r22*rxp2_2*sj5))+(((0.000149716)*gclwh14_4*npz*r21*(sj5*sj5)))+(((0.00734904236913956)*gclwh8_4*r20))+(((-0.0877721118)*gclwh8_4*pp*r20))+(((0.04)*gclwh6_4*npy*npz*pz*sj5))+(((0.0074858)*gclwh12_3*r22*rxp1_2*sj5))+(((-0.11826)*gclwh8_10*npx*pz))+(((-0.104945679009178)*cj5*gclwh6_4*npz*r21))+(((-0.004201790123)*cj5*gclwh12_3*r20*r22*sj5))+(((0.002801860082)*gclwh3_3*r21*r22*(cj5*cj5)))+(((-0.04)*cj5*gclwh12_4*npx*npz*pz*sj5))+(((-0.05165202)*cj5*gclwh6_3*rxp0_2))+(((-0.039241231557934)*gclwh12_4*rxp1_2))+(((0.0074858)*cj5*gclwh1_4*pp*r20))+(((0.0149716)*gclwh4_4*npz*rxp2_2*(cj5*cj5)))+(((-0.5599720164)*cj5*gclwh4_4*npz*rxp2_2*sj5))+(((2.0)*gclwh3_3*npy*sj5*(pz*pz)))+(((0.0096733172829)*gclwh8_3*r20))+(((2.0)*gclwh12_14*npx*pz*rxp2_2*(cj5*cj5)))+(((0.1048417846)*gclwh6_4*npy*pz))+((gclwh3_4*r21*sj5*(pp*pp)))+(((-0.0149716)*gclwh4_4*npz*rxp2_2*(sj5*sj5)))+((cj5*gclwh8_10*npz*pp*r20))+(((0.05913)*cj5*gclwh14_10*pp*r21))+(((0.01)*gclwh1_3*pp*r20*r22*(sj5*sj5)))+(((0.74858)*gclwh6_14*rxp0_2*rxp2_2*(cj5*cj5)))+(((-1.49716)*cj5*gclwh10_4*pz*sj5*(npz*npz))));
op[14]=(((gclwh12_14*x206*x207))+(((-1.73368)*gclwh6_14*x199))+((gclwh14_14*x199*x207))+(((-0.006488990872)*gclwh14_14*x213))+(((0.0173368)*gclwh8_14*x194))+(((-4.0)*gclwh6_2*x199))+((x210*x219))+(((-0.2799860082)*r20*x209))+(((1.73368)*gclwh8_14*x206))+(((1.49716)*gclwh12_2*rxp1_2))+(((-0.0149716)*gclwh14_2*x213))+(((-0.121351535674044)*sj5*x193))+(((-1.0)*x197*x201))+(((0.0149716)*cj5*x214))+(((0.006488990872)*cj5*x193))+(((-1.0)*gclwh14_14*x218))+((gclwh8_2*rxp1_2*x195))+(((-1.0)*r20*x204*x209))+(((0.2803860082)*x208))+(((-0.2799860082)*x223))+(((-1.0)*sj5*x193*x201))+(((1.73368)*x202*x203))+((x211*x218))+(((1.49716)*sj5*x217))+(((-0.04)*x216))+((gclwh12_14*x210))+(((4.0)*x206*x209))+((x204*x208))+((x195*x196))+(((0.04)*gclwh8_2*x194))+(((0.121524903674044)*x215))+(((-1.0)*x198*x204))+(((-1.0)*x201*x222))+(((-1.0)*x201*x221))+(((-1.49716)*gclwh14_2*rxp0_2))+(((-0.006488990872)*x224))+(((4.0)*cj5*gclwh14_2*x199))+(((4.0)*gclwh8_2*x206))+(((0.0173368)*x225))+(((0.04)*sj5*x196))+(((-0.04)*cj5*x217))+(((-1.0)*sj5*x204*x214))+(((-0.2799860082)*sj5*x214))+(((-0.121524903674044)*x197))+(((-0.0173368)*x202))+(((-1.0)*x204*x223))+(((4.0)*x203*x216))+(((-0.0149716)*gclwh12_2*r20*sj5))+(((-0.2803860082)*x198))+(((-0.121351535674044)*x222))+(((-0.121351535674044)*x221))+((x201*x215)));
op[15]=((((0.276)*x202*x203))+(((-0.00276)*x202))+(((-0.276)*gclwh6_14*x199))+(((-0.0010330404)*gclwh14_14*x213))+(((-0.0193190345658)*x222))+(((-0.0193190345658)*x221))+(((-1.0)*x197*x200))+(((-0.0193466345658)*x197))+((gclwh12_14*x206*x212))+(((-1.0)*sj5*x193*x200))+((x205*x211))+(((0.00276)*gclwh8_14*x194))+((x219*x220))+(((-1.0)*x200*x222))+(((-1.0)*x200*x221))+(((0.0193466345658)*x215))+(((0.00276)*x225))+(((0.276)*gclwh8_14*x206))+(((-0.0010330404)*x224))+((gclwh14_14*x199*x212))+(((-0.0193190345658)*sj5*x193))+(((0.0010330404)*cj5*x193))+(((-1.0)*gclwh14_14*x205))+((gclwh12_14*x220))+((x200*x215)));
op[16]=((-0.1830918964)+(((-0.02)*gclwh6_8*rxp0_2*sj5))+(((-0.05165202)*gclwh14_10*rxp0_2))+(((0.138)*gclwh8_10*npx*pz))+(((0.060675767837022)*cj5*gclwh14_12*r21))+(((0.43342)*gclwh8_12*pp*r20))+(((-0.43342)*gclwh6_12*pp*r21))+(((-0.86684)*gclwh10_12*npz*pz*sj5))+(((0.3244495436)*gclwh14_12*rxp0_2))+(((0.003244495436)*gclwh12_12*r20*sj5))+(((0.138)*cj5*gclwh14_10*npy*pz))+(((0.0086684)*cj5*gclwh4_12*rxp2_2))+(((0.1399930041)*cj5*gclwh12_8*r20))+((cj5*gclwh12_8*pp*r20))+(((-0.0086684)*gclwh8_12*rxp1_2*sj5))+(((-0.0096733172829)*gclwh8_10*r20))+(((0.43342)*cj5*gclwh12_12*pp*r20))+(((-0.74858)*cj5*gclwh6_8*rxp0_2))+(((0.05165202)*cj5*gclwh8_10*rxp1_2))+(((-2.0)*cj5*gclwh14_8*npy*pz))+(((-0.069)*cj5*gclwh12_10*pp*r20))+(((-0.138)*gclwh6_10*npy*pz))+(((-0.1401930041)*gclwh6_8*r21))+(((-0.3244495436)*cj5*gclwh6_12*rxp0_2))+(((0.138)*gclwh10_10*npz*pz*sj5))+(((-0.3244495436)*gclwh12_12*rxp1_2))+(((0.02)*cj5*gclwh4_8*rxp2_2))+(((-0.86684)*cj5*gclwh14_12*npy*pz))+(((0.0086684)*gclwh10_12*pz))+(((-2.0)*gclwh10_8*npz*pz*sj5))+(((0.00138)*gclwh6_10*rxp0_2*sj5))+(((2.0)*gclwh6_8*npy*pz))+(((-0.0096595172829)*gclwh10_10*r22*sj5))+(((0.1399930041)*cj5*gclwh14_8*r21))+(((-0.0096595172829)*cj5*gclwh12_10*r20))+(((0.003244495436)*gclwh14_12*r21*sj5))+(((0.0074858)*gclwh12_8*r20*sj5))+((cj5*gclwh14_8*pp*r21))+(((0.74858)*gclwh14_8*rxp0_2))+(((-0.0086684)*gclwh6_12*rxp0_2*sj5))+(((-0.3244495436)*gclwh4_12*rxp2_2*sj5))+(((0.1399930041)*gclwh10_8*r22*sj5))+(((-0.74858)*cj5*gclwh8_8*rxp1_2))+(((0.02)*gclwh10_8*pz))+(((0.0074858)*gclwh14_8*r21*sj5))+(((-0.003244495436)*cj5*gclwh10_12*r22))+(((-0.069)*gclwh10_10*pp*r22*sj5))+(((0.0005165202)*cj5*gclwh10_10*r22))+(((-0.0005165202)*gclwh12_10*r20*sj5))+(((-0.86684)*gclwh8_12*npx*pz))+(((-0.0074858)*cj5*gclwh10_8*r22))+(((-0.00138)*gclwh10_10*pz))+(((0.0096733172829)*gclwh6_10*r21))+(((-1.0)*gclwh6_8*pp*r21))+(((0.05165202)*gclwh12_10*rxp1_2))+(((0.060762451837022)*gclwh8_12*r20))+(((-2.0)*cj5*gclwh12_8*npx*pz))+(((0.060675767837022)*gclwh10_12*r22*sj5))+(((-0.02)*gclwh8_8*rxp1_2*sj5))+(((0.05165202)*cj5*gclwh6_10*rxp0_2))+(((-0.069)*cj5*gclwh14_10*pp*r21))+(((-0.3244495436)*cj5*gclwh8_12*rxp1_2))+(((-0.0096595172829)*cj5*gclwh14_10*r21))+(((0.86684)*gclwh6_12*npy*pz))+((gclwh10_8*pp*r22*sj5))+(((-0.74858)*gclwh4_8*rxp2_2*sj5))+(((-0.069)*gclwh8_10*pp*r20))+(((0.138)*cj5*gclwh12_10*npx*pz))+(((-0.060762451837022)*gclwh6_12*r21))+(((0.069)*gclwh6_10*pp*r21))+(((-2.0)*gclwh8_8*npx*pz))+((gclwh8_8*pp*r20))+(((0.00138)*gclwh8_10*rxp1_2*sj5))+(((0.060675767837022)*cj5*gclwh12_12*r20))+(((-0.0005165202)*gclwh14_10*r21*sj5))+(((0.43342)*gclwh10_12*pp*r22*sj5))+(((0.43342)*cj5*gclwh14_12*pp*r21))+(((-0.86684)*cj5*gclwh12_12*npx*pz))+(((-0.74858)*gclwh12_8*rxp1_2))+(((0.1401930041)*gclwh8_8*r20)));
op[17]=((-0.05981196)+(((0.0096733172829)*gclwh6_3*r21))+((gclwh12_10*npz*pp*r20*(cj5*cj5)))+(((-0.138)*gclwh6_3*npy*pz))+(((-0.001048417846)*gclwh3_4*rxp0_2))+(((-0.005603720164)*gclwh3_4*npz*r21*(cj5*cj5)))+(((-2.0)*cj5*gclwh8_10*npx*npz*pz))+(((0.5603720164)*cj5*gclwh14_4*npz*rxp0_2))+((cj5*gclwh6_14*pp*r21*rxp2_2))+(((-0.0096595172829)*gclwh3_3*r21*sj5))+(((-0.0096595172829)*cj5*gclwh14_3*r21))+(((-0.001399930041)*gclwh3_3*r21*r22*(sj5*sj5)))+(((-2.0)*cj5*npz*pz))+(((0.000442635354)*gclwh12_10*r20*sj5))+(((-0.069)*gclwh10_3*pp*r22*sj5))+(((-2.0)*gclwh8_3*npx*(pz*pz)))+(((-0.74858)*cj5*gclwh6_4*npz*pp*r21))+(((0.01)*gclwh6_3*pp*r21*r22*sj5))+(((-2.0)*cj5*gclwh14_3*npy*(pz*pz)))+(((0.069)*gclwh3_3*pp*r21*sj5))+(((0.0074858)*cj5*gclwh3_3*r22*rxp0_2))+(((0.00733855819067956)*gclwh1_4*r20*sj5))+(((0.02)*gclwh8_4*pp*rxp1_2*sj5))+(((-1.0)*cj5*gclwh6_10*npz*pp*r21))+(((0.05913)*gclwh8_10*pp*r20))+(((2.0)*gclwh10_4*npz*pp*pz*sj5))+(((-0.0004)*gclwh6_4*npz*rxp0_2*(sj5*sj5)))+(((-0.00138)*cj5*gclwh4_3*rxp2_2))+(((-0.02)*gclwh6_3*pz*rxp0_2*sj5))+(((-0.0299432)*cj5*gclwh8_4*npz*rxp1_2*sj5))+(((-0.02)*gclwh3_3*npy*pz*r22*(sj5*sj5)))+(((-2.0)*gclwh3_4*npy*pp*pz*sj5))+(((0.2801860082)*gclwh6_3*r22*rxp0_2*(cj5*cj5)))+(((0.1397930041)*gclwh10_3*pz*r22*sj5))+(((0.02)*cj5*gclwh14_4*npz*pp*r21*sj5))+(((-0.0442635354)*cj5*gclwh6_10*rxp0_2))+(((-0.1048417846)*cj5*gclwh12_4*npx*pz))+(((-0.01)*gclwh10_3*pp*(r22*r22)*(sj5*sj5)))+(((-0.0005165202)*gclwh14_3*r21*sj5))+(((-0.02)*gclwh10_4*pp*pz))+(((-0.00734904236913956)*gclwh6_4*r21))+(((2.0)*gclwh6_3*npy*(pz*pz)))+(((-2.0)*gclwh1_4*npx*pp*pz*sj5))+(((0.0002)*gclwh6_3*r22*rxp0_2*(sj5*sj5)))+(((-0.02)*gclwh3_4*npz*pp*r21*(sj5*sj5)))+(((-0.37429)*cj5*gclwh10_3*pp*sj5*(r22*r22)))+(((0.002799860082)*gclwh1_4*npz*r20*(sj5*sj5)))+(((0.04)*gclwh3_4*npy*npz*pz*(sj5*sj5)))+(((-1.0)*cj5*gclwh10_14*pp*r22*rxp2_2*sj5))+(((-0.00039241231557934)*cj5*gclwh1_4*r20))+(((-0.0149716)*cj5*gclwh3_4*npz*rxp0_2))+(((1.49716)*cj5*gclwh1_4*npx*npz*pz*sj5))+(((0.0074858)*gclwh12_3*pz*r20*sj5))+(((-1.0)*gclwh14_8*pp*r21*r22*(cj5*cj5)))+(((0.00733855819067956)*cj5*gclwh12_4*r20))+(((0.008277786332433)*cj5*gclwh14_10*r21))+(((-1.0)*gclwh3_3*pp*pz*r21*sj5))+(((-0.05165202)*gclwh14_3*rxp0_2))+(((-0.02)*gclwh6_3*npy*pz*r22*sj5))+(((-0.0074858)*cj5*gclwh14_8*r21*r22*sj5))+(((0.02)*cj5*gclwh12_4*npz*pp*r20*sj5))+((gclwh10_3*pp*pz*r22*sj5))+(((-1.49716)*gclwh14_4*npy*npz*pz*(cj5*cj5)))+(((-0.069)*cj5*gclwh12_3*pp*r20))+(((0.1399930041)*gclwh3_3*pz*r21*sj5))+(((-2.0)*cj5*gclwh6_14*npy*pz*rxp2_2))+(((2.0)*cj5*gclwh12_4*npx*pp*pz))+(((0.1401930041)*cj5*gclwh6_8*r21*r22))+(((-0.001401930041)*gclwh8_3*r20*r22*sj5))+(((0.74858)*cj5*gclwh12_8*r22*rxp1_2))+(((-0.1399930041)*gclwh12_14*r20*rxp2_2*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh12_8*r20*r22*sj5))+(((0.104646247009178)*cj5*gclwh1_4*npz*r20*sj5))+(((0.0074858)*cj5*gclwh10_4*pp*r22))+(((-0.0074858)*gclwh4_3*r22*rxp2_2*(cj5*cj5)))+(((0.00733855819067956)*cj5*gclwh14_4*r21))+(((0.0149716)*gclwh14_4*npz*rxp0_2*sj5))+(((-2.0)*gclwh14_10*npy*npz*pz*(cj5*cj5)))+(((-0.74858)*gclwh4_3*pz*rxp2_2*sj5))+(((-0.052323123504589)*cj5*gclwh1_3*r20*r22*sj5))+(((-1.0)*cj5*gclwh12_4*r20*(pp*pp)))+((cj5*gclwh12_3*pp*pz*r20))+(((0.02)*gclwh10_3*npz*pz*r22*(sj5*sj5)))+(((-0.1399930041)*cj5*r22))+(((-1.0)*cj5*gclwh14_4*r21*(pp*pp)))+(((-0.0074858)*gclwh14_3*r22*rxp0_2*sj5))+(((0.74858)*gclwh4_4*pp*rxp2_2*sj5))+(((-0.00138)*gclwh1_3*rxp1_2))+(((0.02)*gclwh10_3*(pz*pz)))+(((0.000442635354)*gclwh14_10*r21*sj5))+(((-0.0096733172829)*gclwh8_3*r20))+(((-0.37429)*gclwh12_3*pp*r20*r22*(cj5*cj5)))+(((0.1401930041)*cj5*gclwh6_14*r21*rxp2_2))+(((0.0074858)*gclwh4_3*r22*rxp2_2*(sj5*sj5)))+(((0.0074858)*gclwh14_3*pz*r21*sj5))+(((0.138)*cj5*gclwh12_3*npx*pz))+(((-0.02)*gclwh4_8*r22*rxp2_2*(cj5*cj5)))+(((0.104646247009178)*cj5*gclwh10_4*npz*r22*sj5))+(((0.1399930041)*cj5*gclwh14_3*pz*r21))+(((-0.0875721118)*gclwh10_4*pp*r22*sj5))+(((0.74858)*pz))+(((0.37429)*cj5*gclwh6_3*pp*r21*r22))+(((0.00733855819067956)*gclwh3_4*r21*sj5))+(((0.74858)*cj5*gclwh4_8*r22*rxp2_2*sj5))+(((0.74858)*gclwh14_3*npy*pz*r22*(cj5*cj5)))+(((0.1399930041)*gclwh12_10*npz*r20*(cj5*cj5)))+(((0.138)*gclwh10_3*npz*pz*sj5))+(((-0.039241231557934)*cj5*gclwh6_4*rxp0_2))+(((-2.0)*cj5*gclwh12_3*npx*(pz*pz)))+(((-0.02)*cj5*gclwh6_10*npz*rxp0_2*sj5))+(((-0.0875721118)*cj5*gclwh14_4*pp*r21))+(((-0.0442635354)*cj5*gclwh8_10*rxp1_2))+(((-0.004201790123)*cj5*gclwh14_3*r21*r22*sj5))+(((0.74858)*cj5*gclwh8_4*npz*pp*r20))+(((-0.01)*gclwh8_3*pp*r20*r22*sj5))+(((-0.74858)*cj5*gclwh12_10*npz*rxp1_2))+(((-0.0875721118)*cj5*gclwh12_4*pp*r20))+(((-1.49716)*gclwh12_4*npx*npz*pz*(cj5*cj5)))+(((-0.02)*cj5*gclwh4_4*pp*rxp2_2))+(((-0.02)*gclwh1_4*pp*rxp1_2))+(((0.001048417846)*gclwh1_4*rxp1_2))+(((0.02)*gclwh8_4*npz*pp*r20*sj5))+(((-0.1401930041)*cj5*gclwh8_8*r20*r22))+(((-0.02)*gclwh1_3*npx*pz*r22*(sj5*sj5)))+((gclwh8_3*pp*pz*r20))+(((-1.0)*cj5*gclwh10_8*pp*sj5*(r22*r22)))+(((-0.052397981504589)*gclwh14_3*r21*r22*(cj5*cj5)))+(((0.02)*gclwh10_4*npz*pp*r22*(sj5*sj5)))+(((-0.0149716)*gclwh12_4*npz*rxp1_2*sj5))+(((-0.039241231557934)*cj5*gclwh8_4*rxp1_2))+(((-0.74858)*cj5*gclwh3_3*npy*pz*r22*sj5))+(((-0.0002)*gclwh1_3*r22*rxp1_2*sj5))+(((-0.02)*gclwh8_3*pz*rxp1_2*sj5))+(((0.02)*cj5*gclwh6_8*r22*rxp0_2*sj5))+(((0.0002)*gclwh8_3*r22*rxp1_2*(sj5*sj5)))+(((-0.37429)*cj5*gclwh8_3*pp*r20*r22))+(((0.74858)*gclwh14_4*npz*pp*r21*(cj5*cj5)))+(((-0.11826)*cj5*gclwh12_10*npx*pz))+(((-0.0074858)*cj5*gclwh12_14*r20*rxp2_2*sj5))+(((-0.00039241231557934)*cj5*gclwh3_4*r21))+(((-1.0)*cj5*gclwh8_14*pp*r20*rxp2_2))+(((-0.069)*cj5*gclwh14_3*pp*r21))+(((-0.2801860082)*cj5*gclwh14_3*r22*rxp0_2))+(((0.002799860082)*gclwh10_4*npz*r22*(sj5*sj5)))+(((-0.0074858)*r22*sj5))+(((-0.0074858)*gclwh12_4*pp*r20*sj5))+(((0.37429)*cj5*gclwh3_3*pp*r21*r22*sj5))+(((-0.74858)*cj5*gclwh6_3*pz*rxp0_2))+(((-0.0299432)*cj5*gclwh6_4*npz*rxp0_2*sj5))+(((0.74858)*cj5*gclwh8_3*npx*pz*r22))+(((-0.02)*gclwh3_3*pz*rxp0_2))+(((0.0149716)*cj5*gclwh8_3*r22*rxp1_2*sj5))+((gclwh6_4*r21*(pp*pp)))+(((-0.0149716)*cj5*gclwh10_3*pz*r22))+(((-0.1401930041)*cj5*gclwh6_10*npz*r21))+(((-0.1048417846)*cj5*gclwh14_4*npy*pz))+(((0.002803860082)*gclwh8_4*npz*r20*sj5))+(((-0.1399930041)*cj5*gclwh10_14*r22*rxp2_2*sj5))+(((-0.5603720164)*gclwh6_4*npz*rxp0_2*(cj5*cj5)))+(((-0.1399930041)*gclwh14_8*r21*r22*(cj5*cj5)))+(((-0.039241231557934)*gclwh4_4*rxp2_2*sj5))+(((2.0)*gclwh12_8*npx*pz*r22*(cj5*cj5)))+(((-1.0)*gclwh12_8*pp*r20*r22*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh1_3*pz*r20))+(((0.00138)*gclwh8_3*rxp1_2*sj5))+(((-0.05913)*gclwh6_10*pp*r21))+(((-1.0)*gclwh1_3*pp*pz*r20*sj5))+(((0.00039241231557934)*gclwh14_4*r21*sj5))+(((-0.1399930041)*gclwh14_14*r21*rxp2_2*(cj5*cj5)))+(((0.000149716)*gclwh12_4*npz*r20*(sj5*sj5)))+(((0.02)*cj5*gclwh6_14*rxp0_2*rxp2_2*sj5))+(((0.02)*gclwh3_4*pp*rxp0_2))+(((-0.11826)*cj5*gclwh14_10*npy*pz))+(((2.0)*cj5*gclwh14_4*npy*pp*pz))+(((-0.74858)*cj5*gclwh3_4*npz*pp*r21*sj5))+(((-0.1399930041)*cj5*gclwh10_8*sj5*(r22*r22)))+(((-0.37429)*gclwh14_3*pp*r21*r22*(cj5*cj5)))+(((0.002801860082)*gclwh10_3*(cj5*cj5)*(r22*r22)))+(((-0.74858)*cj5*gclwh14_8*r22*rxp0_2))+(((-0.0096595172829)*gclwh1_3*r20*sj5))+(((0.05165202)*cj5*gclwh6_3*rxp0_2))+(((-0.04)*cj5*gclwh14_4*npy*npz*pz*sj5))+((cj5*gclwh10_10*npz*pp*r22*sj5))+(((2.0)*gclwh1_3*npx*sj5*(pz*pz)))+(((-0.0074858)*gclwh10_10*npz*r22*(cj5*cj5)))+(((0.74858)*gclwh8_8*r22*rxp1_2*(cj5*cj5)))+(((0.2801860082)*cj5*gclwh12_3*r22*rxp1_2))+(((-0.02)*gclwh6_4*npz*pp*r21*sj5))+(((0.1401930041)*gclwh8_3*pz*r20))+(((0.0074858)*cj5*gclwh3_4*pp*r21))+(((-1.49716)*cj5*gclwh8_4*npx*npz*pz))+(((0.104795963009178)*gclwh14_4*npz*r21*(cj5*cj5)))+(((-0.0004)*gclwh8_4*npz*rxp1_2*(sj5*sj5)))+(((-0.0074858)*cj5*gclwh14_14*r21*rxp2_2*sj5))+(((-0.002803860082)*gclwh6_4*npz*r21*sj5))+(((-0.138)*gclwh3_3*npy*pz*sj5))+(((-0.5603720164)*gclwh8_4*npz*rxp1_2*(cj5*cj5)))+(((-0.069)*gclwh8_3*pp*r20))+(((0.02)*cj5*gclwh4_3*pz*rxp2_2))+(((-0.1401930041)*cj5*gclwh8_14*r20*rxp2_2))+(((0.74858)*gclwh6_8*r22*rxp0_2*(cj5*cj5)))+(((-0.04)*gclwh10_4*pz*(npz*npz)*(sj5*sj5)))+(((-1.0)*gclwh14_14*pp*r21*rxp2_2*(cj5*cj5)))+(((-2.0)*cj5*gclwh6_8*npy*pz*r22))+(((0.0011826)*gclwh10_10*pz))+(((-1.0)*gclwh12_14*pp*r20*rxp2_2*(cj5*cj5)))+(((0.0005165202)*cj5*gclwh1_3*r20))+(((0.001048417846)*gclwh10_4*pz))+(((0.008403580246)*cj5*gclwh14_4*npz*r21*sj5))+(((-0.005603720164)*gclwh10_4*npz*r22*(cj5*cj5)))+(((0.00039241231557934)*gclwh12_4*r20*sj5))+((cj5*pp*r22))+(((0.0074858)*gclwh10_14*r22*rxp2_2*(cj5*cj5)))+(((-0.005603720164)*gclwh1_4*npz*r20*(cj5*cj5)))+(((0.11826)*gclwh6_10*npy*pz))+(((0.0442635354)*gclwh14_10*rxp0_2))+(((-0.1401930041)*gclwh6_3*pz*r21))+(((0.138)*cj5*gclwh14_3*npy*pz))+(((-0.1924138964)*gclwh1_4*pp*r20*sj5))+(((-0.74858)*gclwh14_4*pp*rxp0_2))+(((-0.74858)*gclwh6_10*npz*rxp0_2*(cj5*cj5)))+(((0.04)*gclwh1_4*npx*npz*pz*(sj5*sj5)))+(((0.0877721118)*gclwh6_4*pp*r21))+(((0.008289612332433)*gclwh8_10*r20))+(((0.74858)*gclwh14_3*pz*rxp0_2))+(((0.104945679009178)*cj5*gclwh8_4*npz*r20))+(((0.05165202)*cj5*gclwh8_3*rxp1_2))+(((0.0149716)*cj5*gclwh6_3*r22*rxp0_2*sj5))+(((0.052472839504589)*cj5*gclwh6_3*r21*r22))+((gclwh1_4*r20*sj5*(pp*pp)))+(((-0.052472839504589)*cj5*gclwh8_3*r20*r22))+(((-0.138)*gclwh1_3*npx*pz*sj5))+(((0.0002)*gclwh3_3*r22*rxp0_2*sj5))+(((0.00138)*gclwh3_3*rxp0_2))+(((0.02)*gclwh8_3*npx*pz*r22*sj5))+(((0.002799860082)*gclwh3_4*npz*r21*(sj5*sj5)))+(((0.1399930041)*gclwh14_10*npz*r21*(cj5*cj5)))+(((-0.001399930041)*gclwh10_3*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh14_8*npy*pz*r22*(cj5*cj5)))+(((-0.01)*cj5*gclwh14_3*pp*r21*r22*sj5))+(((1.49716)*cj5*gclwh3_4*npy*npz*pz*sj5))+(((-1.0)*gclwh8_4*r20*(pp*pp)))+(((0.001048417846)*cj5*gclwh4_4*rxp2_2))+(((0.002801860082)*gclwh1_3*r20*r22*(cj5*cj5)))+(((-0.74858)*cj5*gclwh8_3*pz*rxp1_2))+(((0.02)*cj5*gclwh14_3*npy*pz*r22*sj5))+(((-0.74858)*gclwh8_10*npz*rxp1_2*(cj5*cj5)))+(((0.0149716)*cj5*gclwh10_4*npz*pz))+(((-0.00039241231557934)*cj5*gclwh10_4*r22))+(((0.1399930041)*gclwh1_3*pz*r20*sj5))+(((0.008403580246)*cj5*gclwh12_4*npz*r20*sj5))+(((0.039241231557934)*gclwh14_4*rxp0_2))+(((-2.0)*gclwh12_10*npx*npz*pz*(cj5*cj5)))+(((2.0)*cj5*gclwh8_14*npx*pz*rxp2_2))+(((2.0)*gclwh14_14*npy*pz*rxp2_2*(cj5*cj5)))+(((-0.001048417846)*gclwh8_4*rxp1_2*sj5))+(((-0.0011826)*gclwh6_10*rxp0_2*sj5))+(((-0.74858)*cj5*gclwh1_4*npz*pp*r20*sj5))+(((0.74858)*gclwh8_14*rxp1_2*rxp2_2*(cj5*cj5)))+(((0.05913)*gclwh10_10*pp*r22*sj5))+(((0.1399930041)*cj5*gclwh12_3*pz*r20))+(((0.74858)*cj5*gclwh6_4*pp*rxp0_2))+(((-0.052323123504589)*cj5*gclwh10_3*sj5*(r22*r22)))+(((0.74858)*gclwh12_4*pp*rxp1_2))+(((0.02)*gclwh1_3*pz*rxp1_2))+(((-0.008289612332433)*gclwh6_10*r21))+(((0.069)*gclwh6_3*pp*r21))+(((0.02)*cj5*gclwh12_3*npx*pz*r22*sj5))+(((-2.0)*gclwh6_4*npy*pp*pz))+(((-0.1048417846)*gclwh8_4*npx*pz))+(((-0.1924138964)*gclwh3_4*pp*r21*sj5))+(((-0.0096595172829)*cj5*gclwh12_3*r20))+(((2.0)*gclwh8_4*npx*pp*pz))+((cj5*gclwh14_3*pp*pz*r21))+(((0.104646247009178)*cj5*gclwh3_4*npz*r21*sj5))+(((0.1399930041)*cj5*gclwh10_10*npz*r22*sj5))+(((0.74858)*cj5*gclwh14_10*npz*rxp0_2))+(((-0.0096595172829)*gclwh10_3*r22*sj5))+(((0.74858)*gclwh12_4*npz*pp*r20*(cj5*cj5)))+(((-0.000442635354)*cj5*gclwh10_10*r22))+(((0.05913)*cj5*gclwh12_10*pp*r20))+(((0.1401930041)*cj5*gclwh8_10*npz*r20))+(((0.1048417846)*gclwh1_4*npx*pz*sj5))+(((0.008277786332433)*gclwh10_10*r22*sj5))+(((0.02)*cj5*gclwh8_14*rxp1_2*rxp2_2*sj5))+(((-0.74858)*cj5*gclwh1_3*npx*pz*r22*sj5))+(((0.0004)*gclwh1_4*npz*rxp1_2*sj5))+(((1.49716)*cj5*gclwh6_4*npy*npz*pz))+(((0.74858)*cj5*gclwh10_3*npz*pz*r22*sj5))+(((0.00733855819067956)*gclwh10_4*r22*sj5))+(((-0.1044417846)*gclwh10_4*npz*pz*sj5))+(((-0.001399930041)*gclwh1_3*r20*r22*(sj5*sj5)))+(((0.74858)*cj5*gclwh10_4*npz*pp*r22*sj5))+(((0.0074858)*cj5*gclwh14_10*npz*r21*sj5))+(((0.02)*gclwh6_4*pp*rxp0_2*sj5))+(((-0.0004)*gclwh3_4*npz*rxp0_2*sj5))+(((0.0005165202)*cj5*gclwh10_3*r22))+(((0.37429)*cj5*gclwh1_3*pp*r20*r22*sj5))+(((0.74858)*cj5*gclwh8_4*pp*rxp1_2))+(((0.0074858)*cj5*gclwh12_10*npz*r20*sj5))+(((-0.02)*cj5*gclwh10_8*pz*r22))+(((0.00138)*gclwh6_3*rxp0_2*sj5))+(((-0.00138)*gclwh10_3*pz))+(((0.104795963009178)*gclwh12_4*npz*r20*(cj5*cj5)))+((gclwh14_10*npz*pp*r21*(cj5*cj5)))+(((0.74858)*gclwh12_3*npx*pz*r22*(cj5*cj5)))+(((0.008277786332433)*cj5*gclwh12_10*r20))+(((-0.01)*cj5*gclwh12_3*pp*r20*r22*sj5))+(((-0.11826)*gclwh10_10*npz*pz*sj5))+(((-0.0011826)*gclwh8_10*rxp1_2*sj5))+(((-2.0)*cj5*gclwh10_10*pz*sj5*(npz*npz)))+(((-0.02)*cj5*gclwh8_10*npz*rxp1_2*sj5))+(((-0.001048417846)*gclwh6_4*rxp0_2*sj5))+(((-1.0)*gclwh10_4*r22*sj5*(pp*pp)))+(((-0.02)*cj5*gclwh10_14*pz*rxp2_2))+(((-0.0442635354)*gclwh12_10*rxp1_2))+(((-0.0074858)*cj5*gclwh3_3*pz*r21))+((cj5*gclwh6_8*pp*r21*r22))+(((2.0)*cj5*gclwh8_8*npx*pz*r22))+(((-0.1399930041)*gclwh12_8*r20*r22*(cj5*cj5)))+(((-1.0)*gclwh6_3*pp*pz*r21))+(((0.1048417846)*gclwh3_4*npy*pz*sj5))+(((0.0074858)*gclwh10_8*(cj5*cj5)*(r22*r22)))+(((0.01)*gclwh3_3*pp*r21*r22*(sj5*sj5)))+(((-0.0005165202)*gclwh12_3*r20*sj5))+(((0.02)*cj5*gclwh8_8*r22*rxp1_2*sj5))+(((0.05165202)*gclwh12_3*rxp1_2))+(((-7.4858e-5)*gclwh14_3*r21*r22*(sj5*sj5)))+(((-0.74858)*gclwh12_3*pz*rxp1_2))+(((2.0)*cj5*gclwh6_10*npy*npz*pz))+(((0.2801860082)*gclwh8_3*r22*rxp1_2*(cj5*cj5)))+(((-0.04)*gclwh8_4*npx*npz*pz*sj5))+(((2.0)*cj5*gclwh10_14*npz*pz*rxp2_2*sj5))+(((-0.0074858)*cj5*gclwh1_3*r22*rxp1_2))+(((-0.74858)*cj5*gclwh6_3*npy*pz*r22))+(((-2.0)*gclwh10_3*npz*sj5*(pz*pz)))+(((0.001401930041)*gclwh6_3*r21*r22*sj5))+(((0.0005165202)*cj5*gclwh3_3*r21))+(((-0.0074858)*gclwh14_4*pp*r21*sj5))+(((-0.74858)*cj5*gclwh14_14*rxp0_2*rxp2_2))+(((0.138)*gclwh8_3*npx*pz))+(((0.74858)*cj5*gclwh12_14*rxp1_2*rxp2_2))+(((-0.5603720164)*cj5*gclwh12_4*npz*rxp1_2))+(((-0.02)*gclwh1_4*npz*pp*r20*(sj5*sj5)))+(((0.02)*cj5*gclwh10_10*npz*pz))+(((-1.0)*cj5*gclwh8_8*pp*r20*r22))+(((-7.4858e-5)*gclwh12_3*r20*r22*(sj5*sj5)))+(((0.0149716)*cj5*gclwh1_4*npz*rxp1_2))+(((-0.052323123504589)*cj5*gclwh3_3*r21*r22*sj5))+(((-0.052397981504589)*gclwh12_3*r20*r22*(cj5*cj5)))+(((2.0)*cj5*gclwh10_8*npz*pz*r22*sj5))+(((0.05165202)*gclwh4_3*rxp2_2*sj5))+(((0.2799860082)*cj5*gclwh4_3*r22*rxp2_2*sj5))+(((0.000149716)*gclwh14_4*npz*r21*(sj5*sj5)))+(((0.00734904236913956)*gclwh8_4*r20))+(((-0.0877721118)*gclwh8_4*pp*r20))+(((0.04)*gclwh6_4*npy*npz*pz*sj5))+(((0.0074858)*gclwh12_3*r22*rxp1_2*sj5))+(((-0.11826)*gclwh8_10*npx*pz))+(((-0.104945679009178)*cj5*gclwh6_4*npz*r21))+(((-0.004201790123)*cj5*gclwh12_3*r20*r22*sj5))+(((0.002801860082)*gclwh3_3*r21*r22*(cj5*cj5)))+(((-0.04)*cj5*gclwh12_4*npx*npz*pz*sj5))+(((-0.039241231557934)*gclwh12_4*rxp1_2))+(((0.069)*gclwh1_3*pp*r20*sj5))+(((0.0074858)*cj5*gclwh1_4*pp*r20))+(((0.0149716)*gclwh4_4*npz*rxp2_2*(cj5*cj5)))+(((-0.5599720164)*cj5*gclwh4_4*npz*rxp2_2*sj5))+(((2.0)*gclwh3_3*npy*sj5*(pz*pz)))+(((2.0)*gclwh12_14*npx*pz*rxp2_2*(cj5*cj5)))+(((0.1048417846)*gclwh6_4*npy*pz))+((gclwh3_4*r21*sj5*(pp*pp)))+(((-0.0149716)*gclwh4_4*npz*rxp2_2*(sj5*sj5)))+((cj5*gclwh8_10*npz*pp*r20))+(((0.05913)*cj5*gclwh14_10*pp*r21))+(((0.01)*gclwh1_3*pp*r20*r22*(sj5*sj5)))+(((0.74858)*gclwh6_14*rxp0_2*rxp2_2*(cj5*cj5)))+(((-1.49716)*cj5*gclwh10_4*pz*sj5*(npz*npz))));
IkReal x226=(gclwh11_6*r22);
IkReal x227=(cj5*r21);
IkReal x228=((4.0)*pz);
IkReal x229=((0.10330404)*rxp0_2);
IkReal x230=(gclwh13_15*r20);
IkReal x231=((0.006488990872)*sj5);
IkReal x232=((2.0)*pp);
IkReal x233=(gclwh7_6*r21);
IkReal x234=(cj5*gclwh7_15);
IkReal x235=(gclwh13_6*r20);
IkReal x236=((0.0149716)*sj5);
IkReal x237=(gclwh15_15*r21);
IkReal x238=(gclwh7_15*r21);
IkReal x239=(gclwh7_6*rxp0_2);
IkReal x240=((1.49716)*cj5);
IkReal x241=((0.6488990872)*rxp0_2);
IkReal x242=(npz*sj5);
IkReal x243=((0.0010330404)*sj5);
IkReal x244=(cj5*pz);
IkReal x245=(gclwh15_15*npy);
IkReal x246=(gclwh5_6*rxp2_2);
IkReal x247=((0.10330404)*rxp1_2);
IkReal x248=(gclwh13_15*npx);
IkReal x249=((0.138)*pp);
IkReal x250=(gclwh9_15*r20);
IkReal x251=((0.04)*sj5);
IkReal x252=(gclwh9_6*r20);
IkReal x253=(cj5*gclwh9_15);
IkReal x254=(gclwh9_6*rxp1_2);
IkReal x255=((1.73368)*pz);
IkReal x256=(gclwh7_15*npy);
IkReal x257=((0.86684)*pp);
IkReal x258=((0.276)*pz);
IkReal x259=(gclwh9_15*npx);
IkReal x260=(gclwh11_15*pz);
IkReal x261=((0.6488990872)*rxp1_2);
IkReal x262=(pp*r22*sj5);
IkReal x263=(gclwh11_15*r22*sj5);
IkReal x264=(gclwh9_15*rxp1_2*sj5);
IkReal x265=(cj5*gclwh11_15*r22);
IkReal x266=(gclwh7_15*rxp0_2*sj5);
op[18]=((0.05981196)+(((0.002801860082)*gclwh11_0*(cj5*cj5)*(r22*r22)))+(((-1.0)*gclwh0_1*r20*sj5*(pp*pp)))+(((-0.74858)*gclwh15_1*pp*rxp0_2))+((gclwh11_0*pp*pz*r22*sj5))+(((-7.4858e-5)*gclwh15_0*r21*r22*(sj5*sj5)))+(((0.02)*cj5*gclwh11_15*pz*rxp2_2))+(((-0.0875721118)*gclwh11_1*pp*r22*sj5))+(((-0.74858)*pz))+(((-0.5603720164)*gclwh7_1*npz*rxp0_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh9_11*npz*pp*r20))+(((-0.001048417846)*gclwh7_1*rxp0_2*sj5))+(((0.74858)*cj5*gclwh2_0*npy*pz*r22*sj5))+(((-0.1399930041)*gclwh15_11*npz*r21*(cj5*cj5)))+(((-0.02)*gclwh7_0*npy*pz*r22*sj5))+(((-0.6046355518)*cj5*gclwh9_11*rxp1_2))+(((2.0)*cj5*gclwh13_1*npx*pp*pz))+(((-0.0004)*gclwh0_1*npz*rxp1_2*sj5))+(((-1.61542)*cj5*gclwh15_11*npy*pz))+(((-0.1401930041)*cj5*gclwh7_15*r21*rxp2_2))+(((0.80771)*gclwh9_11*pp*r20))+(((-0.138)*gclwh11_0*npz*pz*sj5))+(((0.052472839504589)*cj5*gclwh7_0*r21*r22))+(((-1.49716)*cj5*gclwh11_1*pz*sj5*(npz*npz)))+(((0.05165202)*gclwh15_0*rxp0_2))+(((0.0004)*gclwh2_1*npz*rxp0_2*sj5))+(((-1.61542)*gclwh9_11*npx*pz))+(((0.002803860082)*gclwh9_1*npz*r20*sj5))+(((-0.113235291341611)*gclwh7_11*r21))+(((-0.00138)*gclwh7_0*rxp0_2*sj5))+(((0.0074858)*cj5*gclwh15_15*r21*rxp2_2*sj5))+(((-0.039241231557934)*cj5*gclwh7_1*rxp0_2))+(((0.74858)*cj5*gclwh13_11*npz*rxp1_2))+(((2.0)*gclwh13_11*npx*npz*pz*(cj5*cj5)))+(((-1.49716)*gclwh15_1*npy*npz*pz*(cj5*cj5)))+(((0.052323123504589)*cj5*gclwh0_0*r20*r22*sj5))+(((-0.00039241231557934)*cj5*gclwh11_1*r22))+(((0.1399930041)*cj5*gclwh11_9*sj5*(r22*r22)))+(((0.0074858)*cj5*gclwh13_9*r20*r22*sj5))+(((-0.039241231557934)*gclwh13_1*rxp1_2))+(((-0.5603720164)*cj5*gclwh13_1*npz*rxp1_2))+(((0.2801860082)*cj5*gclwh13_0*r22*rxp1_2))+(((-0.052397981504589)*gclwh13_0*r20*r22*(cj5*cj5)))+(((0.138)*gclwh7_0*npy*pz))+(((0.0074858)*gclwh11_11*npz*r22*(cj5*cj5)))+(((-1.0)*gclwh15_11*npz*pp*r21*(cj5*cj5)))+(((-0.0161542)*gclwh7_11*rxp0_2*sj5))+(((0.74858)*cj5*gclwh9_1*npz*pp*r20))+(((0.069)*gclwh2_0*pp*r21*sj5))+(((-0.0074858)*cj5*gclwh0_1*pp*r20))+(((0.74858)*cj5*gclwh15_15*rxp0_2*rxp2_2))+(((0.104795963009178)*gclwh15_1*npz*r21*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh2_1*pp*r21))+(((-0.04)*cj5*gclwh13_1*npx*npz*pz*sj5))+(((0.74858)*gclwh13_1*npz*pp*r20*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh2_0*r22*rxp0_2))+(((0.006046355518)*gclwh13_11*r20*sj5))+((gclwh15_9*pp*r21*r22*(cj5*cj5)))+(((-0.5603720164)*gclwh9_1*npz*rxp1_2*(cj5*cj5)))+(((-2.0)*cj5*gclwh9_15*npx*pz*rxp2_2))+(((0.74858)*gclwh5_1*pp*rxp2_2*sj5))+(((0.0877721118)*gclwh7_1*pp*r21))+(((0.74858)*cj5*gclwh11_1*npz*pp*r22*sj5))+(((-0.00733855819067956)*gclwh0_1*r20*sj5))+(((0.0074858)*gclwh15_0*pz*r21*sj5))+(((0.0074858)*gclwh5_0*r22*rxp2_2*(sj5*sj5)))+(((-0.1401930041)*gclwh7_0*pz*r21))+(((-0.05165202)*gclwh13_0*rxp1_2))+(((0.006046355518)*gclwh15_11*r21*sj5))+(((-0.01)*cj5*gclwh15_0*pp*r21*r22*sj5))+(((0.02)*cj5*gclwh7_11*npz*rxp0_2*sj5))+(((0.069)*gclwh11_0*pp*r22*sj5))+(((-0.37429)*gclwh13_0*pp*r20*r22*(cj5*cj5)))+(((-0.0299432)*cj5*gclwh7_1*npz*rxp0_2*sj5))+(((0.02)*gclwh11_1*npz*pp*r22*(sj5*sj5)))+(((-2.0)*gclwh15_9*npy*pz*r22*(cj5*cj5)))+(((-1.0)*gclwh11_1*r22*sj5*(pp*pp)))+(((0.02)*gclwh2_0*pz*rxp0_2))+(((-0.104945679009178)*cj5*gclwh7_1*npz*r21))+(((-0.04)*gclwh2_1*npy*npz*pz*(sj5*sj5)))+(((0.02)*gclwh2_1*npz*pp*r21*(sj5*sj5)))+((cj5*gclwh9_9*pp*r20*r22))+(((-0.0074858)*gclwh11_9*(cj5*cj5)*(r22*r22)))+(((0.113073749341611)*gclwh11_11*r22*sj5))+(((-0.052323123504589)*cj5*gclwh11_0*sj5*(r22*r22)))+(((0.001401930041)*gclwh7_0*r21*r22*sj5))+(((-0.01)*gclwh2_0*pp*r21*r22*(sj5*sj5)))+(((2.0)*cj5*gclwh9_11*npx*npz*pz))+(((-2.0)*gclwh11_0*npz*sj5*(pz*pz)))+(((0.2799860082)*cj5*gclwh5_0*r22*rxp2_2*sj5))+(((0.000149716)*gclwh15_1*npz*r21*(sj5*sj5)))+(((0.74858)*cj5*gclwh11_0*npz*pz*r22*sj5))+(((0.2801860082)*gclwh9_0*r22*rxp1_2*(cj5*cj5)))+(((0.02)*gclwh11_0*npz*pz*r22*(sj5*sj5)))+(((-0.02)*cj5*gclwh9_9*r22*rxp1_2*sj5))+(((0.104646247009178)*cj5*gclwh11_1*npz*r22*sj5))+(((0.104945679009178)*cj5*gclwh9_1*npz*r20))+(((-0.052472839504589)*cj5*gclwh9_0*r20*r22))+(((0.0149716)*cj5*gclwh11_1*npz*pz))+(((-0.138)*gclwh9_0*npx*pz))+(((0.74858)*gclwh15_0*npy*pz*r22*(cj5*cj5)))+(((0.069)*cj5*gclwh13_0*pp*r20))+(((-0.74858)*cj5*gclwh13_9*r22*rxp1_2))+(((0.0096595172829)*gclwh11_0*r22*sj5))+(((-0.0005165202)*cj5*gclwh11_0*r22))+((gclwh7_1*r21*(pp*pp)))+(((-0.1048417846)*gclwh9_1*npx*pz))+(((0.74858)*cj5*gclwh2_1*npz*pp*r21*sj5))+(((0.04)*gclwh7_1*npy*npz*pz*sj5))+(((-0.74858)*gclwh9_15*rxp1_2*rxp2_2*(cj5*cj5)))+(((0.74858)*gclwh15_1*npz*pp*r21*(cj5*cj5)))+(((-0.5599720164)*cj5*gclwh5_1*npz*rxp2_2*sj5))+(((-0.0877721118)*gclwh9_1*pp*r20))+(((-0.005603720164)*gclwh11_1*npz*r22*(cj5*cj5)))+(((-0.002799860082)*gclwh2_1*npz*r21*(sj5*sj5)))+(((0.000149716)*gclwh13_1*npz*r20*(sj5*sj5)))+(((0.74858)*cj5*gclwh9_0*npx*pz*r22))+(((-0.74858)*gclwh9_9*r22*rxp1_2*(cj5*cj5)))+(((0.02)*gclwh5_9*r22*rxp2_2*(cj5*cj5)))+(((0.02)*cj5*gclwh15_1*npz*pp*r21*sj5))+(((0.0002)*gclwh0_0*r22*rxp1_2*sj5))+((cj5*gclwh7_11*npz*pp*r21))+(((-7.4858e-5)*gclwh13_0*r20*r22*(sj5*sj5)))+(((0.00039241231557934)*cj5*gclwh2_1*r21))+(((-2.0)*cj5*gclwh11_9*npz*pz*r22*sj5))+(((-0.1048417846)*gclwh0_1*npx*pz*sj5))+(((0.74858)*gclwh15_0*pz*rxp0_2))+(((-0.74858)*cj5*gclwh7_1*npz*pp*r21))+(((0.0005165202)*gclwh13_0*r20*sj5))+(((-0.039241231557934)*gclwh5_1*rxp2_2*sj5))+(((-0.6046355518)*cj5*gclwh7_11*rxp0_2))+(((0.104795963009178)*gclwh13_1*npz*r20*(cj5*cj5)))+(((-0.104646247009178)*cj5*gclwh2_1*npz*r21*sj5))+(((-2.0)*cj5*gclwh15_0*npy*(pz*pz)))+(((0.02)*gclwh7_1*pp*rxp0_2*sj5))+(((0.1399930041)*gclwh15_9*r21*r22*(cj5*cj5)))+(((0.0074858)*cj5*gclwh2_0*pz*r21))+(((0.74858)*gclwh7_11*npz*rxp0_2*(cj5*cj5)))+(((0.0074858)*cj5*gclwh13_15*r20*rxp2_2*sj5))+(((-1.49716)*cj5*gclwh0_1*npx*npz*pz*sj5))+(((0.0074858)*gclwh13_0*pz*r20*sj5))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.005603720164)*gclwh0_1*npz*r20*(cj5*cj5)))+(((-0.02)*gclwh9_0*pz*rxp1_2*sj5))+(((0.0074858)*cj5*gclwh11_1*pp*r22))+(((-2.0)*cj5*gclwh13_0*npx*(pz*pz)))+(((-1.0)*cj5*gclwh11_11*npz*pp*r22*sj5))+(((0.0002)*gclwh7_0*r22*rxp0_2*(sj5*sj5)))+((gclwh2_0*pp*pz*r21*sj5))+(((-1.0)*cj5*pp*r22))+(((2.0)*gclwh15_11*npy*npz*pz*(cj5*cj5)))+(((-0.0299432)*cj5*gclwh9_1*npz*rxp1_2*sj5))+(((0.1399930041)*gclwh13_15*r20*rxp2_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh7_15*pp*r21*rxp2_2))+(((-0.74858)*cj5*gclwh7_0*pz*rxp0_2))+(((-0.74858)*cj5*gclwh5_9*r22*rxp2_2*sj5))+(((0.02)*cj5*gclwh11_9*pz*r22))+(((-0.001048417846)*gclwh0_1*rxp1_2))+(((-0.1401930041)*cj5*gclwh7_9*r21*r22))+(((-0.0074858)*gclwh5_0*r22*rxp2_2*(cj5*cj5)))+(((0.113073749341611)*cj5*gclwh15_11*r21))+(((-1.49716)*cj5*gclwh2_1*npy*npz*pz*sj5))+(((0.0074858)*cj5*gclwh15_9*r21*r22*sj5))+(((-0.138)*cj5*gclwh15_0*npy*pz))+(((-0.052397981504589)*gclwh15_0*r21*r22*(cj5*cj5)))+(((-0.0096595172829)*gclwh0_0*r20*sj5))+(((0.0005165202)*cj5*gclwh2_0*r21))+(((-0.0002)*gclwh2_0*r22*rxp0_2*sj5))+((gclwh13_15*pp*r20*rxp2_2*(cj5*cj5)))+(((-0.01)*gclwh11_0*pp*(r22*r22)*(sj5*sj5)))+(((0.1924138964)*gclwh0_1*pp*r20*sj5))+(((-0.04)*gclwh11_1*pz*(npz*npz)*(sj5*sj5)))+(((0.1401930041)*cj5*gclwh9_15*r20*rxp2_2))+(((-0.00138)*gclwh9_0*rxp1_2*sj5))+(((0.0074858)*r22*sj5))+(((-0.1048417846)*gclwh2_1*npy*pz*sj5))+(((2.0)*gclwh9_1*npx*pp*pz))+(((0.02)*gclwh9_1*pp*rxp1_2*sj5))+(((2.0)*cj5*gclwh7_15*npy*pz*rxp2_2))+(((-0.02)*cj5*gclwh11_11*npz*pz))+(((0.1401930041)*cj5*gclwh9_9*r20*r22))+(((-0.1048417846)*cj5*gclwh15_1*npy*pz))+((cj5*gclwh9_15*pp*r20*rxp2_2))+(((-0.02)*gclwh7_1*npz*pp*r21*sj5))+(((-0.0149716)*cj5*gclwh0_1*npz*rxp1_2))+(((-0.74858)*cj5*gclwh7_0*npy*pz*r22))+(((-0.0149716)*cj5*gclwh11_0*pz*r22))+(((-0.1399930041)*cj5*gclwh11_11*npz*r22*sj5))+(((-0.001048417846)*gclwh9_1*rxp1_2*sj5))+(((0.008403580246)*cj5*gclwh13_1*npz*r20*sj5))+(((0.001048417846)*gclwh11_1*pz))+(((-1.61542)*gclwh11_11*npz*pz*sj5))+(((-0.01)*cj5*gclwh13_0*pp*r20*r22*sj5))+((gclwh15_15*pp*r21*rxp2_2*(cj5*cj5)))+(((0.00733855819067956)*gclwh11_1*r22*sj5))+(((-0.05165202)*gclwh5_0*rxp2_2*sj5))+(((-0.05165202)*cj5*gclwh7_0*rxp0_2))+(((-0.0149716)*gclwh13_1*npz*rxp1_2*sj5))+(((-0.004201790123)*cj5*gclwh13_0*r20*r22*sj5))+(((-0.039241231557934)*cj5*gclwh9_1*rxp1_2))+(((0.069)*cj5*gclwh15_0*pp*r21))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.02)*gclwh0_0*npx*pz*r22*(sj5*sj5)))+(((-0.05165202)*cj5*gclwh9_0*rxp1_2))+(((-0.04)*gclwh9_1*npx*npz*pz*sj5))+(((0.1399930041)*cj5*gclwh11_15*r22*rxp2_2*sj5))+(((0.5603720164)*cj5*gclwh15_1*npz*rxp0_2))+(((-0.02)*gclwh7_0*pz*rxp0_2*sj5))+(((-0.1401930041)*cj5*gclwh9_11*npz*r20))+(((-1.0)*cj5*gclwh15_1*r21*(pp*pp)))+(((-0.04)*cj5*gclwh15_1*npy*npz*pz*sj5))+((gclwh0_0*pp*pz*r20*sj5))+(((-2.0)*gclwh2_0*npy*sj5*(pz*pz)))+(((0.02)*gclwh9_0*npx*pz*r22*sj5))+(((-0.002803860082)*gclwh7_1*npz*r21*sj5))+(((-0.00733855819067956)*gclwh2_1*r21*sj5))+(((0.052323123504589)*cj5*gclwh2_0*r21*r22*sj5))+(((-0.138)*cj5*gclwh13_0*npx*pz))+(((-0.138)*gclwh0_0*npx*pz*sj5))+(((0.6046355518)*gclwh15_11*rxp0_2))+(((1.49716)*cj5*gclwh7_1*npy*npz*pz))+(((-0.02)*gclwh0_0*pz*rxp1_2))+(((-2.0)*cj5*gclwh11_15*npz*pz*rxp2_2*sj5))+(((-0.004201790123)*cj5*gclwh15_0*r21*r22*sj5))+(((0.1399930041)*gclwh13_9*r20*r22*(cj5*cj5)))+(((-0.1399930041)*gclwh13_11*npz*r20*(cj5*cj5)))+(((0.001399930041)*gclwh2_0*r21*r22*(sj5*sj5)))+(((0.00733855819067956)*cj5*gclwh15_1*r21))+(((-2.0)*cj5*gclwh7_11*npy*npz*pz))+(((0.001048417846)*cj5*gclwh5_1*rxp2_2))+(((0.039241231557934)*gclwh15_1*rxp0_2))+(((-0.0074858)*cj5*gclwh15_11*npz*r21*sj5))+(((-0.37429)*cj5*gclwh11_0*pp*sj5*(r22*r22)))+(((-0.0096595172829)*gclwh2_0*r21*sj5))+(((-0.02)*cj5*gclwh7_15*rxp0_2*rxp2_2*sj5))+(((-0.1399930041)*gclwh0_0*pz*r20*sj5))+(((0.1401930041)*gclwh9_0*pz*r20))+(((0.0074858)*gclwh13_0*r22*rxp1_2*sj5))+(((0.0149716)*gclwh15_1*npz*rxp0_2*sj5))+(((0.00138)*cj5*gclwh5_0*rxp2_2))+(((-0.0074858)*gclwh15_0*r22*rxp0_2*sj5))+(((0.0005165202)*cj5*gclwh0_0*r20))+(((0.1048417846)*gclwh7_1*npy*pz))+(((0.74858)*cj5*gclwh15_9*r22*rxp0_2))+(((0.02)*cj5*gclwh13_0*npx*pz*r22*sj5))+(((2.0)*cj5*npz*pz))+(((0.00733855819067956)*cj5*gclwh13_1*r20))+(((-1.0)*cj5*gclwh13_1*r20*(pp*pp)))+((cj5*gclwh15_0*pp*pz*r21))+(((2.0)*cj5*gclwh15_1*npy*pp*pz))+(((0.02)*cj5*gclwh5_0*pz*rxp2_2))+(((2.0)*gclwh2_1*npy*pp*pz*sj5))+(((2.0)*cj5*gclwh7_9*npy*pz*r22))+(((0.113073749341611)*cj5*gclwh13_11*r20))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-0.00138)*gclwh0_0*rxp1_2))+(((0.1924138964)*gclwh2_1*pp*r21*sj5))+(((-0.0004)*gclwh7_1*npz*rxp0_2*(sj5*sj5)))+(((-0.02)*cj5*gclwh7_9*r22*rxp0_2*sj5))+(((0.74858)*cj5*gclwh9_1*pp*rxp1_2))+(((-0.2801860082)*cj5*gclwh15_0*r22*rxp0_2))+(((0.005603720164)*gclwh2_1*npz*r21*(cj5*cj5)))+(((0.0149716)*cj5*gclwh7_0*r22*rxp0_2*sj5))+(((0.02)*gclwh0_1*npz*pp*r20*(sj5*sj5)))+(((0.1399930041)*cj5*r22))+(((0.00138)*gclwh2_0*rxp0_2))+(((-0.02)*gclwh2_1*pp*rxp0_2))+(((0.0096595172829)*cj5*gclwh13_0*r20))+(((-0.01)*gclwh0_0*pp*r20*r22*(sj5*sj5)))+(((-0.1044417846)*gclwh11_1*npz*pz*sj5))+(((0.02)*gclwh2_0*npy*pz*r22*(sj5*sj5)))+(((-0.37429)*cj5*gclwh2_0*pp*r21*r22*sj5))+(((0.74858)*gclwh13_0*npx*pz*r22*(cj5*cj5)))+(((-0.01)*gclwh9_0*pp*r20*r22*sj5))+(((-0.74858)*cj5*gclwh15_11*npz*rxp0_2))+(((-2.0)*gclwh0_0*npx*sj5*(pz*pz)))+(((-0.02)*cj5*gclwh9_15*rxp1_2*rxp2_2*sj5))+(((0.80771)*gclwh11_11*pp*r22*sj5))+(((-0.0074858)*gclwh11_15*r22*rxp2_2*(cj5*cj5)))+(((-0.04)*gclwh0_1*npx*npz*pz*(sj5*sj5)))+(((0.0074858)*cj5*gclwh0_0*r22*rxp1_2))+(((-0.006046355518)*cj5*gclwh11_11*r22))+(((-1.61542)*cj5*gclwh13_11*npx*pz))+(((-0.002801860082)*gclwh2_0*r21*r22*(cj5*cj5)))+(((-0.37429)*cj5*gclwh0_0*pp*r20*r22*sj5))+(((0.74858)*gclwh9_11*npz*rxp1_2*(cj5*cj5)))+(((-0.00734904236913956)*gclwh7_1*r21))+(((-2.0)*gclwh15_15*npy*pz*rxp2_2*(cj5*cj5)))+(((-1.0)*gclwh2_1*r21*sj5*(pp*pp)))+(((0.02)*cj5*gclwh9_11*npz*rxp1_2*sj5))+(((0.00039241231557934)*gclwh13_1*r20*sj5))+(((-0.138)*gclwh2_0*npy*pz*sj5))+(((0.1399930041)*gclwh15_15*r21*rxp2_2*(cj5*cj5)))+(((-0.74858)*gclwh5_0*pz*rxp2_2*sj5))+(((0.0149716)*cj5*gclwh2_1*npz*rxp0_2))+(((-0.104646247009178)*cj5*gclwh0_1*npz*r20*sj5))+(((0.02)*cj5*gclwh15_0*npy*pz*r22*sj5))+(((0.0074858)*cj5*gclwh0_0*pz*r20))+(((0.02)*gclwh9_1*npz*pp*r20*sj5))+(((0.02)*gclwh0_1*pp*rxp1_2))+(((-0.80771)*gclwh7_11*pp*r21))+(((-1.49716)*cj5*gclwh9_1*npx*npz*pz))+(((0.069)*gclwh0_0*pp*r20*sj5))+(((-0.74858)*gclwh13_0*pz*rxp1_2))+(((0.0096595172829)*cj5*gclwh15_0*r21))+(((0.74858)*gclwh13_1*pp*rxp1_2))+(((0.00734904236913956)*gclwh9_1*r20))+(((-0.0004)*gclwh9_1*npz*rxp1_2*(sj5*sj5)))+(((0.00138)*gclwh11_0*pz))+(((-0.0875721118)*cj5*gclwh13_1*pp*r20))+(((2.0)*cj5*gclwh11_11*pz*sj5*(npz*npz)))+(((0.0096733172829)*gclwh9_0*r20))+(((-0.001401930041)*gclwh9_0*r20*r22*sj5))+(((0.069)*gclwh9_0*pp*r20))+(((2.0)*gclwh0_1*npx*pp*pz*sj5))+(((-0.069)*gclwh7_0*pp*r21))+((cj5*gclwh13_0*pp*pz*r20))+(((-0.1399930041)*gclwh2_0*pz*r21*sj5))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.1399930041)*cj5*gclwh13_0*pz*r20))+(((0.00039241231557934)*gclwh15_1*r21*sj5))+(((0.00039241231557934)*cj5*gclwh0_1*r20))+(((-0.37429)*gclwh15_0*pp*r21*r22*(cj5*cj5)))+(((0.008403580246)*cj5*gclwh15_1*npz*r21*sj5))+(((-0.002801860082)*gclwh0_0*r20*r22*(cj5*cj5)))+(((1.61542)*gclwh7_11*npy*pz))+(((0.74858)*cj5*gclwh0_1*npz*pp*r20*sj5))+(((0.74858)*cj5*gclwh0_0*npx*pz*r22*sj5))+(((0.0005165202)*gclwh15_0*r21*sj5))+(((-0.74858)*cj5*gclwh13_15*rxp1_2*rxp2_2))+(((0.37429)*cj5*gclwh7_0*pp*r21*r22))+(((-0.0161542)*gclwh9_11*rxp1_2*sj5))+((cj5*gclwh11_9*pp*sj5*(r22*r22)))+(((-0.02)*gclwh11_1*pp*pz))+(((0.1399930041)*cj5*gclwh15_0*pz*r21))+(((0.001048417846)*gclwh2_1*rxp0_2))+(((-0.37429)*cj5*gclwh9_0*pp*r20*r22))+(((-0.0074858)*gclwh13_1*pp*r20*sj5))+(((0.80771)*cj5*gclwh15_11*pp*r21))+((gclwh13_9*pp*r20*r22*(cj5*cj5)))+(((-0.74858)*gclwh7_15*rxp0_2*rxp2_2*(cj5*cj5)))+(((-0.0074858)*gclwh15_1*pp*r21*sj5))+((cj5*gclwh11_15*pp*r22*rxp2_2*sj5))+(((0.0002)*gclwh9_0*r22*rxp1_2*(sj5*sj5)))+(((-2.0)*gclwh13_15*npx*pz*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh13_9*npx*pz*r22*(cj5*cj5)))+(((-0.002799860082)*gclwh0_1*npz*r20*(sj5*sj5)))+(((-0.0074858)*cj5*gclwh13_11*npz*r20*sj5))+(((0.002799860082)*gclwh11_1*npz*r22*(sj5*sj5)))+(((0.0149716)*cj5*gclwh9_0*r22*rxp1_2*sj5))+(((-0.1048417846)*cj5*gclwh13_1*npx*pz))+(((0.01)*gclwh7_0*pp*r21*r22*sj5))+(((-2.0)*cj5*gclwh9_9*npx*pz*r22))+(((0.02)*cj5*gclwh13_1*npz*pp*r20*sj5))+(((-0.74858)*gclwh7_9*r22*rxp0_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh7_1*pp*rxp0_2))+(((-0.0875721118)*cj5*gclwh15_1*pp*r21))+(((-0.0096733172829)*gclwh7_0*r21))+(((-0.02)*cj5*gclwh5_1*pp*rxp2_2))+(((-1.0)*gclwh13_11*npz*pp*r20*(cj5*cj5)))+(((0.0149716)*gclwh5_1*npz*rxp2_2*(cj5*cj5)))+(((-0.0149716)*gclwh5_1*npz*rxp2_2*(sj5*sj5)))+(((0.2801860082)*gclwh7_0*r22*rxp0_2*(cj5*cj5)))+(((-0.001399930041)*gclwh11_0*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((0.001399930041)*gclwh0_0*r20*r22*(sj5*sj5)))+(((2.0)*gclwh11_1*npz*pp*pz*sj5))+(((0.1397930041)*gclwh11_0*pz*r22*sj5))+((gclwh9_0*pp*pz*r20))+(((0.1401930041)*cj5*gclwh7_11*npz*r21))+(((0.80771)*cj5*gclwh13_11*pp*r20))+(((0.113235291341611)*gclwh9_11*r20))+(((-1.0)*cj5*gclwh7_9*pp*r21*r22))+(((0.02)*gclwh11_0*(pz*pz)))+(((-1.49716)*gclwh13_1*npx*npz*pz*(cj5*cj5)))+(((-0.74858)*cj5*gclwh9_0*pz*rxp1_2))+(((-0.6046355518)*gclwh13_11*rxp1_2))+(((0.0161542)*gclwh11_11*pz)));
op[19]=((-0.1830918964)+(((-0.74858)*gclwh13_9*rxp1_2))+(((0.86684)*cj5*gclwh13_13*npx*pz))+(((0.0074858)*gclwh15_9*r21*sj5))+(((-0.43342)*gclwh11_13*pp*r22*sj5))+(((-0.43342)*cj5*gclwh13_13*pp*r20))+(((0.86684)*gclwh9_13*npx*pz))+(((0.003244495436)*cj5*gclwh11_13*r22))+(((-0.138)*cj5*gclwh15_11*npy*pz))+(((-2.0)*gclwh9_9*npx*pz))+(((-0.86684)*gclwh7_13*npy*pz))+(((0.02)*cj5*gclwh5_9*rxp2_2))+(((-0.1401930041)*gclwh7_9*r21))+(((0.86684)*cj5*gclwh15_13*npy*pz))+((gclwh9_9*pp*r20))+(((0.069)*gclwh11_11*pp*r22*sj5))+((gclwh11_9*pp*r22*sj5))+(((0.0005165202)*gclwh13_11*r20*sj5))+(((-0.0096733172829)*gclwh7_11*r21))+(((-0.138)*cj5*gclwh13_11*npx*pz))+(((0.1399930041)*gclwh11_9*r22*sj5))+(((-2.0)*cj5*gclwh13_9*npx*pz))+(((0.069)*cj5*gclwh15_11*pp*r21))+(((0.138)*gclwh7_11*npy*pz))+(((-0.060675767837022)*cj5*gclwh13_13*r20))+(((0.3244495436)*gclwh5_13*rxp2_2*sj5))+(((0.0005165202)*gclwh15_11*r21*sj5))+((cj5*gclwh13_9*pp*r20))+(((0.1401930041)*gclwh9_9*r20))+(((0.3244495436)*gclwh13_13*rxp1_2))+(((-0.0086684)*gclwh11_13*pz))+(((0.0096595172829)*cj5*gclwh15_11*r21))+(((-0.74858)*cj5*gclwh9_9*rxp1_2))+(((-0.02)*gclwh9_9*rxp1_2*sj5))+(((0.3244495436)*cj5*gclwh9_13*rxp1_2))+(((-0.02)*gclwh7_9*rxp0_2*sj5))+(((0.02)*gclwh11_9*pz))+(((0.1399930041)*cj5*gclwh15_9*r21))+(((0.0096733172829)*gclwh9_11*r20))+(((0.0096595172829)*gclwh11_11*r22*sj5))+(((-0.05165202)*cj5*gclwh9_11*rxp1_2))+(((0.86684)*gclwh11_13*npz*pz*sj5))+(((0.1399930041)*cj5*gclwh13_9*r20))+(((0.0096595172829)*cj5*gclwh13_11*r20))+(((2.0)*gclwh7_9*npy*pz))+(((0.060762451837022)*gclwh7_13*r21))+(((-0.3244495436)*gclwh15_13*rxp0_2))+(((-0.00138)*gclwh7_11*rxp0_2*sj5))+(((-0.43342)*cj5*gclwh15_13*pp*r21))+(((0.00138)*gclwh11_11*pz))+(((-0.0005165202)*cj5*gclwh11_11*r22))+(((-2.0)*gclwh11_9*npz*pz*sj5))+(((-1.0)*gclwh7_9*pp*r21))+(((0.43342)*gclwh7_13*pp*r21))+(((0.3244495436)*cj5*gclwh7_13*rxp0_2))+(((-0.05165202)*gclwh13_11*rxp1_2))+(((-0.0086684)*cj5*gclwh5_13*rxp2_2))+(((-0.74858)*gclwh5_9*rxp2_2*sj5))+(((-0.00138)*gclwh9_11*rxp1_2*sj5))+(((-0.060675767837022)*gclwh11_13*r22*sj5))+(((0.0086684)*gclwh7_13*rxp0_2*sj5))+((cj5*gclwh15_9*pp*r21))+(((-0.138)*gclwh9_11*npx*pz))+(((-0.060762451837022)*gclwh9_13*r20))+(((-0.05165202)*cj5*gclwh7_11*rxp0_2))+(((0.069)*gclwh9_11*pp*r20))+(((-0.138)*gclwh11_11*npz*pz*sj5))+(((-0.0074858)*cj5*gclwh11_9*r22))+(((0.069)*cj5*gclwh13_11*pp*r20))+(((-2.0)*cj5*gclwh15_9*npy*pz))+(((0.0086684)*gclwh9_13*rxp1_2*sj5))+(((0.74858)*gclwh15_9*rxp0_2))+(((-0.069)*gclwh7_11*pp*r21))+(((0.0074858)*gclwh13_9*r20*sj5))+(((0.05165202)*gclwh15_11*rxp0_2))+(((-0.74858)*cj5*gclwh7_9*rxp0_2))+(((-0.003244495436)*gclwh13_13*r20*sj5))+(((-0.060675767837022)*cj5*gclwh15_13*r21))+(((-0.43342)*gclwh9_13*pp*r20))+(((-0.003244495436)*gclwh15_13*r21*sj5)));
op[20]=((((0.0193466345658)*x238))+(((-1.0)*cj5*x230*x249))+((x229*x234))+(((0.0010330404)*x265))+(((-1.0)*gclwh15_15*x227*x249))+(((-1.0)*x249*x263))+((gclwh11_15*x242*x258))+((x238*x249))+(((-1.0)*x256*x258))+(((-0.0193466345658)*x250))+(((-1.0)*x237*x243))+(((-0.00276)*x260))+(((-1.0)*x230*x243))+((gclwh13_15*x247))+(((-0.0193190345658)*gclwh15_15*x227))+(((-0.0193190345658)*cj5*x230))+(((-1.0)*x249*x250))+(((-0.0193190345658)*x263))+(((-1.0)*gclwh15_15*x229))+(((0.00276)*x264))+(((0.00276)*x266))+(((0.276)*x244*x248))+(((0.276)*x244*x245))+((x258*x259))+((x247*x253)));
op[21]=((((-0.2799860082)*cj5*x235))+(((0.121524903674044)*x250))+(((-1.0)*sj5*x226*x232))+(((0.121351535674044)*gclwh15_15*x227))+((gclwh9_6*npx*x228))+((gclwh11_6*x228*x242))+(((-0.0173368)*x264))+(((-0.0173368)*x266))+((cj5*gclwh13_6*npx*x228))+(((1.49716)*sj5*x246))+((cj5*x230*x257))+(((-1.73368)*x244*x245))+(((-1.73368)*x244*x248))+(((-1.0)*x232*x252))+(((-1.0)*x235*x236))+(((-1.0)*gclwh13_15*x261))+((x232*x233))+((gclwh15_15*x227*x257))+(((-1.0)*x255*x259))+((x251*x254))+(((0.0149716)*cj5*x226))+(((-1.0)*gclwh7_6*npy*x228))+(((-1.49716)*gclwh15_6*rxp0_2))+(((-1.0)*gclwh15_6*r21*x236))+(((-1.0)*gclwh15_6*x227*x232))+(((-1.0)*x234*x241))+(((-0.006488990872)*x265))+(((0.2803860082)*x233))+(((0.121351535674044)*cj5*x230))+(((-0.2803860082)*x252))+((x230*x231))+((gclwh15_15*x241))+(((-1.0)*x253*x261))+((x250*x257))+(((-1.0)*cj5*x232*x235))+((cj5*gclwh15_6*npy*x228))+((x239*x240))+(((0.0173368)*x260))+(((-1.0)*x238*x257))+(((0.121351535674044)*x263))+(((-0.2799860082)*sj5*x226))+(((-0.121524903674044)*x238))+(((-0.04)*gclwh11_6*pz))+(((1.49716)*gclwh13_6*rxp1_2))+((x257*x263))+(((-0.04)*cj5*x246))+((x240*x254))+(((-0.2799860082)*gclwh15_6*x227))+((x255*x256))+((x231*x237))+(((-1.0)*gclwh11_15*x242*x255))+((x239*x251)));
op[22]=((-0.05981196)+(((0.002801860082)*gclwh11_0*(cj5*cj5)*(r22*r22)))+(((-1.0)*gclwh0_1*r20*sj5*(pp*pp)))+(((-0.74858)*gclwh15_1*pp*rxp0_2))+((gclwh11_0*pp*pz*r22*sj5))+(((-7.4858e-5)*gclwh15_0*r21*r22*(sj5*sj5)))+(((0.02)*cj5*gclwh11_15*pz*rxp2_2))+(((-0.0875721118)*gclwh11_1*pp*r22*sj5))+(((-0.74858)*pz))+(((-0.5603720164)*gclwh7_1*npz*rxp0_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh9_11*npz*pp*r20))+(((-0.001048417846)*gclwh7_1*rxp0_2*sj5))+(((0.74858)*cj5*gclwh2_0*npy*pz*r22*sj5))+(((0.05165202)*gclwh13_0*rxp1_2))+(((-0.138)*gclwh7_0*npy*pz))+(((-0.1399930041)*gclwh15_11*npz*r21*(cj5*cj5)))+(((-0.02)*gclwh7_0*npy*pz*r22*sj5))+(((-0.6046355518)*cj5*gclwh9_11*rxp1_2))+(((2.0)*cj5*gclwh13_1*npx*pp*pz))+(((-0.0004)*gclwh0_1*npz*rxp1_2*sj5))+(((-1.61542)*cj5*gclwh15_11*npy*pz))+(((-0.1401930041)*cj5*gclwh7_15*r21*rxp2_2))+(((0.80771)*gclwh9_11*pp*r20))+(((0.052472839504589)*cj5*gclwh7_0*r21*r22))+(((-1.49716)*cj5*gclwh11_1*pz*sj5*(npz*npz)))+(((0.0004)*gclwh2_1*npz*rxp0_2*sj5))+(((-1.61542)*gclwh9_11*npx*pz))+(((0.002803860082)*gclwh9_1*npz*r20*sj5))+(((-0.113235291341611)*gclwh7_11*r21))+(((0.0074858)*cj5*gclwh15_15*r21*rxp2_2*sj5))+(((-0.039241231557934)*cj5*gclwh7_1*rxp0_2))+(((0.74858)*cj5*gclwh13_11*npz*rxp1_2))+(((2.0)*gclwh13_11*npx*npz*pz*(cj5*cj5)))+(((-1.49716)*gclwh15_1*npy*npz*pz*(cj5*cj5)))+(((0.052323123504589)*cj5*gclwh0_0*r20*r22*sj5))+(((-0.00039241231557934)*cj5*gclwh11_1*r22))+(((0.0096595172829)*gclwh0_0*r20*sj5))+(((0.1399930041)*cj5*gclwh11_9*sj5*(r22*r22)))+(((0.0074858)*cj5*gclwh13_9*r20*r22*sj5))+(((-0.039241231557934)*gclwh13_1*rxp1_2))+(((-0.5603720164)*cj5*gclwh13_1*npz*rxp1_2))+(((0.2801860082)*cj5*gclwh13_0*r22*rxp1_2))+(((-0.052397981504589)*gclwh13_0*r20*r22*(cj5*cj5)))+(((0.0074858)*gclwh11_11*npz*r22*(cj5*cj5)))+(((-1.0)*gclwh15_11*npz*pp*r21*(cj5*cj5)))+(((-0.0161542)*gclwh7_11*rxp0_2*sj5))+(((0.74858)*cj5*gclwh9_1*npz*pp*r20))+(((-0.0074858)*cj5*gclwh0_1*pp*r20))+(((0.74858)*cj5*gclwh15_15*rxp0_2*rxp2_2))+(((0.104795963009178)*gclwh15_1*npz*r21*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh2_1*pp*r21))+(((-0.04)*cj5*gclwh13_1*npx*npz*pz*sj5))+(((0.74858)*gclwh13_1*npz*pp*r20*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh2_0*r22*rxp0_2))+(((0.006046355518)*gclwh13_11*r20*sj5))+((gclwh15_9*pp*r21*r22*(cj5*cj5)))+(((-0.5603720164)*gclwh9_1*npz*rxp1_2*(cj5*cj5)))+(((-2.0)*cj5*gclwh9_15*npx*pz*rxp2_2))+(((0.74858)*gclwh5_1*pp*rxp2_2*sj5))+(((0.0877721118)*gclwh7_1*pp*r21))+(((0.74858)*cj5*gclwh11_1*npz*pp*r22*sj5))+(((-0.00733855819067956)*gclwh0_1*r20*sj5))+(((0.0074858)*gclwh15_0*pz*r21*sj5))+(((0.0074858)*gclwh5_0*r22*rxp2_2*(sj5*sj5)))+(((-0.1401930041)*gclwh7_0*pz*r21))+(((0.006046355518)*gclwh15_11*r21*sj5))+(((-0.0096733172829)*gclwh9_0*r20))+(((-0.01)*cj5*gclwh15_0*pp*r21*r22*sj5))+(((0.02)*cj5*gclwh7_11*npz*rxp0_2*sj5))+(((-0.37429)*gclwh13_0*pp*r20*r22*(cj5*cj5)))+(((-0.0299432)*cj5*gclwh7_1*npz*rxp0_2*sj5))+(((0.02)*gclwh11_1*npz*pp*r22*(sj5*sj5)))+(((-2.0)*gclwh15_9*npy*pz*r22*(cj5*cj5)))+(((-1.0)*gclwh11_1*r22*sj5*(pp*pp)))+(((0.02)*gclwh2_0*pz*rxp0_2))+(((-0.104945679009178)*cj5*gclwh7_1*npz*r21))+(((-0.04)*gclwh2_1*npy*npz*pz*(sj5*sj5)))+(((0.02)*gclwh2_1*npz*pp*r21*(sj5*sj5)))+((cj5*gclwh9_9*pp*r20*r22))+(((-0.069)*gclwh2_0*pp*r21*sj5))+(((-0.0074858)*gclwh11_9*(cj5*cj5)*(r22*r22)))+(((0.113073749341611)*gclwh11_11*r22*sj5))+(((-0.052323123504589)*cj5*gclwh11_0*sj5*(r22*r22)))+(((0.001401930041)*gclwh7_0*r21*r22*sj5))+(((-0.01)*gclwh2_0*pp*r21*r22*(sj5*sj5)))+(((2.0)*cj5*gclwh9_11*npx*npz*pz))+(((-0.069)*gclwh9_0*pp*r20))+(((-2.0)*gclwh11_0*npz*sj5*(pz*pz)))+(((0.2799860082)*cj5*gclwh5_0*r22*rxp2_2*sj5))+(((0.000149716)*gclwh15_1*npz*r21*(sj5*sj5)))+(((0.74858)*cj5*gclwh11_0*npz*pz*r22*sj5))+(((0.2801860082)*gclwh9_0*r22*rxp1_2*(cj5*cj5)))+(((0.02)*gclwh11_0*npz*pz*r22*(sj5*sj5)))+(((-0.02)*cj5*gclwh9_9*r22*rxp1_2*sj5))+(((0.104646247009178)*cj5*gclwh11_1*npz*r22*sj5))+(((0.104945679009178)*cj5*gclwh9_1*npz*r20))+(((-0.052472839504589)*cj5*gclwh9_0*r20*r22))+(((0.0149716)*cj5*gclwh11_1*npz*pz))+(((0.74858)*gclwh15_0*npy*pz*r22*(cj5*cj5)))+(((-0.74858)*cj5*gclwh13_9*r22*rxp1_2))+((gclwh7_1*r21*(pp*pp)))+(((-0.1048417846)*gclwh9_1*npx*pz))+(((0.05165202)*cj5*gclwh9_0*rxp1_2))+(((0.74858)*cj5*gclwh2_1*npz*pp*r21*sj5))+(((0.04)*gclwh7_1*npy*npz*pz*sj5))+(((-0.74858)*gclwh9_15*rxp1_2*rxp2_2*(cj5*cj5)))+(((0.74858)*gclwh15_1*npz*pp*r21*(cj5*cj5)))+(((-0.5599720164)*cj5*gclwh5_1*npz*rxp2_2*sj5))+(((-0.0877721118)*gclwh9_1*pp*r20))+(((-0.005603720164)*gclwh11_1*npz*r22*(cj5*cj5)))+(((-0.002799860082)*gclwh2_1*npz*r21*(sj5*sj5)))+(((0.000149716)*gclwh13_1*npz*r20*(sj5*sj5)))+(((0.74858)*cj5*gclwh9_0*npx*pz*r22))+(((-0.74858)*gclwh9_9*r22*rxp1_2*(cj5*cj5)))+(((0.02)*gclwh5_9*r22*rxp2_2*(cj5*cj5)))+(((0.02)*cj5*gclwh15_1*npz*pp*r21*sj5))+(((0.0002)*gclwh0_0*r22*rxp1_2*sj5))+((cj5*gclwh7_11*npz*pp*r21))+(((0.138)*cj5*gclwh13_0*npx*pz))+(((-0.069)*cj5*gclwh15_0*pp*r21))+(((-0.0005165202)*cj5*gclwh2_0*r21))+(((-7.4858e-5)*gclwh13_0*r20*r22*(sj5*sj5)))+(((0.00039241231557934)*cj5*gclwh2_1*r21))+(((-2.0)*cj5*gclwh11_9*npz*pz*r22*sj5))+(((-0.1048417846)*gclwh0_1*npx*pz*sj5))+(((0.74858)*gclwh15_0*pz*rxp0_2))+(((-0.069)*gclwh0_0*pp*r20*sj5))+(((-0.74858)*cj5*gclwh7_1*npz*pp*r21))+(((0.138)*gclwh2_0*npy*pz*sj5))+(((-0.039241231557934)*gclwh5_1*rxp2_2*sj5))+(((-0.6046355518)*cj5*gclwh7_11*rxp0_2))+(((0.104795963009178)*gclwh13_1*npz*r20*(cj5*cj5)))+(((-0.0096595172829)*cj5*gclwh13_0*r20))+(((-0.104646247009178)*cj5*gclwh2_1*npz*r21*sj5))+(((-2.0)*cj5*gclwh15_0*npy*(pz*pz)))+(((-0.069)*cj5*gclwh13_0*pp*r20))+(((0.02)*gclwh7_1*pp*rxp0_2*sj5))+(((0.1399930041)*gclwh15_9*r21*r22*(cj5*cj5)))+(((0.0074858)*cj5*gclwh2_0*pz*r21))+(((0.05165202)*gclwh5_0*rxp2_2*sj5))+(((0.74858)*gclwh7_11*npz*rxp0_2*(cj5*cj5)))+(((0.0074858)*cj5*gclwh13_15*r20*rxp2_2*sj5))+(((-1.49716)*cj5*gclwh0_1*npx*npz*pz*sj5))+(((0.0074858)*gclwh13_0*pz*r20*sj5))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.005603720164)*gclwh0_1*npz*r20*(cj5*cj5)))+(((-0.02)*gclwh9_0*pz*rxp1_2*sj5))+(((0.0074858)*cj5*gclwh11_1*pp*r22))+(((-2.0)*cj5*gclwh13_0*npx*(pz*pz)))+(((-1.0)*cj5*gclwh11_11*npz*pp*r22*sj5))+(((0.0002)*gclwh7_0*r22*rxp0_2*(sj5*sj5)))+((gclwh2_0*pp*pz*r21*sj5))+(((0.00138)*gclwh9_0*rxp1_2*sj5))+(((-1.0)*cj5*pp*r22))+(((2.0)*gclwh15_11*npy*npz*pz*(cj5*cj5)))+(((-0.0299432)*cj5*gclwh9_1*npz*rxp1_2*sj5))+(((0.1399930041)*gclwh13_15*r20*rxp2_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh7_15*pp*r21*rxp2_2))+(((0.05165202)*cj5*gclwh7_0*rxp0_2))+(((-0.74858)*cj5*gclwh7_0*pz*rxp0_2))+(((-0.74858)*cj5*gclwh5_9*r22*rxp2_2*sj5))+(((0.02)*cj5*gclwh11_9*pz*r22))+(((-0.001048417846)*gclwh0_1*rxp1_2))+(((-0.1401930041)*cj5*gclwh7_9*r21*r22))+(((-0.0074858)*gclwh5_0*r22*rxp2_2*(cj5*cj5)))+(((0.113073749341611)*cj5*gclwh15_11*r21))+(((-1.49716)*cj5*gclwh2_1*npy*npz*pz*sj5))+(((0.0074858)*cj5*gclwh15_9*r21*r22*sj5))+(((-0.052397981504589)*gclwh15_0*r21*r22*(cj5*cj5)))+(((-0.0002)*gclwh2_0*r22*rxp0_2*sj5))+((gclwh13_15*pp*r20*rxp2_2*(cj5*cj5)))+(((-0.01)*gclwh11_0*pp*(r22*r22)*(sj5*sj5)))+(((0.1924138964)*gclwh0_1*pp*r20*sj5))+(((-0.04)*gclwh11_1*pz*(npz*npz)*(sj5*sj5)))+(((0.1401930041)*cj5*gclwh9_15*r20*rxp2_2))+(((0.0074858)*r22*sj5))+(((-0.1048417846)*gclwh2_1*npy*pz*sj5))+(((-0.0096595172829)*cj5*gclwh15_0*r21))+(((2.0)*gclwh9_1*npx*pp*pz))+(((0.02)*gclwh9_1*pp*rxp1_2*sj5))+(((2.0)*cj5*gclwh7_15*npy*pz*rxp2_2))+(((-0.02)*cj5*gclwh11_11*npz*pz))+(((0.1401930041)*cj5*gclwh9_9*r20*r22))+(((-0.1048417846)*cj5*gclwh15_1*npy*pz))+((cj5*gclwh9_15*pp*r20*rxp2_2))+(((-0.02)*gclwh7_1*npz*pp*r21*sj5))+(((-0.0149716)*cj5*gclwh0_1*npz*rxp1_2))+(((-0.74858)*cj5*gclwh7_0*npy*pz*r22))+(((-0.0149716)*cj5*gclwh11_0*pz*r22))+(((-0.1399930041)*cj5*gclwh11_11*npz*r22*sj5))+(((-0.001048417846)*gclwh9_1*rxp1_2*sj5))+(((0.008403580246)*cj5*gclwh13_1*npz*r20*sj5))+(((0.001048417846)*gclwh11_1*pz))+(((-1.61542)*gclwh11_11*npz*pz*sj5))+(((-0.01)*cj5*gclwh13_0*pp*r20*r22*sj5))+((gclwh15_15*pp*r21*rxp2_2*(cj5*cj5)))+(((0.138)*gclwh0_0*npx*pz*sj5))+(((-0.00138)*cj5*gclwh5_0*rxp2_2))+(((0.00733855819067956)*gclwh11_1*r22*sj5))+(((-0.0149716)*gclwh13_1*npz*rxp1_2*sj5))+(((-0.004201790123)*cj5*gclwh13_0*r20*r22*sj5))+(((-0.039241231557934)*cj5*gclwh9_1*rxp1_2))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.02)*gclwh0_0*npx*pz*r22*(sj5*sj5)))+(((-0.04)*gclwh9_1*npx*npz*pz*sj5))+(((0.0096733172829)*gclwh7_0*r21))+(((0.1399930041)*cj5*gclwh11_15*r22*rxp2_2*sj5))+(((0.5603720164)*cj5*gclwh15_1*npz*rxp0_2))+(((-0.02)*gclwh7_0*pz*rxp0_2*sj5))+(((-0.1401930041)*cj5*gclwh9_11*npz*r20))+(((0.138)*gclwh11_0*npz*pz*sj5))+(((-1.0)*cj5*gclwh15_1*r21*(pp*pp)))+(((-0.04)*cj5*gclwh15_1*npy*npz*pz*sj5))+((gclwh0_0*pp*pz*r20*sj5))+(((-2.0)*gclwh2_0*npy*sj5*(pz*pz)))+(((-0.00138)*gclwh11_0*pz))+(((0.02)*gclwh9_0*npx*pz*r22*sj5))+(((-0.002803860082)*gclwh7_1*npz*r21*sj5))+(((-0.00733855819067956)*gclwh2_1*r21*sj5))+(((0.052323123504589)*cj5*gclwh2_0*r21*r22*sj5))+(((0.0096595172829)*gclwh2_0*r21*sj5))+(((0.6046355518)*gclwh15_11*rxp0_2))+(((1.49716)*cj5*gclwh7_1*npy*npz*pz))+(((-0.05165202)*gclwh15_0*rxp0_2))+(((-0.02)*gclwh0_0*pz*rxp1_2))+(((-2.0)*cj5*gclwh11_15*npz*pz*rxp2_2*sj5))+(((-0.004201790123)*cj5*gclwh15_0*r21*r22*sj5))+(((0.1399930041)*gclwh13_9*r20*r22*(cj5*cj5)))+(((-0.1399930041)*gclwh13_11*npz*r20*(cj5*cj5)))+(((0.138)*gclwh9_0*npx*pz))+(((0.001399930041)*gclwh2_0*r21*r22*(sj5*sj5)))+(((0.00733855819067956)*cj5*gclwh15_1*r21))+(((-2.0)*cj5*gclwh7_11*npy*npz*pz))+(((0.001048417846)*cj5*gclwh5_1*rxp2_2))+(((0.039241231557934)*gclwh15_1*rxp0_2))+(((-0.0074858)*cj5*gclwh15_11*npz*r21*sj5))+(((-0.37429)*cj5*gclwh11_0*pp*sj5*(r22*r22)))+(((-0.02)*cj5*gclwh7_15*rxp0_2*rxp2_2*sj5))+(((-0.1399930041)*gclwh0_0*pz*r20*sj5))+(((0.1401930041)*gclwh9_0*pz*r20))+(((0.0074858)*gclwh13_0*r22*rxp1_2*sj5))+(((0.0149716)*gclwh15_1*npz*rxp0_2*sj5))+(((-0.0074858)*gclwh15_0*r22*rxp0_2*sj5))+(((0.1048417846)*gclwh7_1*npy*pz))+(((0.74858)*cj5*gclwh15_9*r22*rxp0_2))+(((0.02)*cj5*gclwh13_0*npx*pz*r22*sj5))+(((2.0)*cj5*npz*pz))+(((0.00733855819067956)*cj5*gclwh13_1*r20))+(((-1.0)*cj5*gclwh13_1*r20*(pp*pp)))+((cj5*gclwh15_0*pp*pz*r21))+(((2.0)*cj5*gclwh15_1*npy*pp*pz))+(((0.02)*cj5*gclwh5_0*pz*rxp2_2))+(((2.0)*gclwh2_1*npy*pp*pz*sj5))+(((2.0)*cj5*gclwh7_9*npy*pz*r22))+(((0.113073749341611)*cj5*gclwh13_11*r20))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.1924138964)*gclwh2_1*pp*r21*sj5))+(((-0.0004)*gclwh7_1*npz*rxp0_2*(sj5*sj5)))+(((-0.02)*cj5*gclwh7_9*r22*rxp0_2*sj5))+(((0.74858)*cj5*gclwh9_1*pp*rxp1_2))+(((-0.2801860082)*cj5*gclwh15_0*r22*rxp0_2))+(((0.005603720164)*gclwh2_1*npz*r21*(cj5*cj5)))+(((0.0149716)*cj5*gclwh7_0*r22*rxp0_2*sj5))+(((0.02)*gclwh0_1*npz*pp*r20*(sj5*sj5)))+(((0.069)*gclwh7_0*pp*r21))+(((0.1399930041)*cj5*r22))+(((-0.02)*gclwh2_1*pp*rxp0_2))+(((-0.01)*gclwh0_0*pp*r20*r22*(sj5*sj5)))+(((-0.1044417846)*gclwh11_1*npz*pz*sj5))+(((0.02)*gclwh2_0*npy*pz*r22*(sj5*sj5)))+(((-0.37429)*cj5*gclwh2_0*pp*r21*r22*sj5))+(((0.74858)*gclwh13_0*npx*pz*r22*(cj5*cj5)))+(((-0.01)*gclwh9_0*pp*r20*r22*sj5))+(((-0.00138)*gclwh2_0*rxp0_2))+(((-0.74858)*cj5*gclwh15_11*npz*rxp0_2))+(((-2.0)*gclwh0_0*npx*sj5*(pz*pz)))+(((-0.0005165202)*cj5*gclwh0_0*r20))+(((-0.02)*cj5*gclwh9_15*rxp1_2*rxp2_2*sj5))+(((0.80771)*gclwh11_11*pp*r22*sj5))+(((-0.0074858)*gclwh11_15*r22*rxp2_2*(cj5*cj5)))+(((-0.04)*gclwh0_1*npx*npz*pz*(sj5*sj5)))+(((0.0074858)*cj5*gclwh0_0*r22*rxp1_2))+(((-0.006046355518)*cj5*gclwh11_11*r22))+(((-1.61542)*cj5*gclwh13_11*npx*pz))+(((-0.002801860082)*gclwh2_0*r21*r22*(cj5*cj5)))+(((-0.37429)*cj5*gclwh0_0*pp*r20*r22*sj5))+(((0.74858)*gclwh9_11*npz*rxp1_2*(cj5*cj5)))+(((-0.00734904236913956)*gclwh7_1*r21))+(((-2.0)*gclwh15_15*npy*pz*rxp2_2*(cj5*cj5)))+(((-1.0)*gclwh2_1*r21*sj5*(pp*pp)))+(((0.02)*cj5*gclwh9_11*npz*rxp1_2*sj5))+(((0.00039241231557934)*gclwh13_1*r20*sj5))+(((0.1399930041)*gclwh15_15*r21*rxp2_2*(cj5*cj5)))+(((-0.0005165202)*gclwh15_0*r21*sj5))+(((-0.74858)*gclwh5_0*pz*rxp2_2*sj5))+(((0.0149716)*cj5*gclwh2_1*npz*rxp0_2))+(((-0.104646247009178)*cj5*gclwh0_1*npz*r20*sj5))+(((0.02)*cj5*gclwh15_0*npy*pz*r22*sj5))+(((0.0074858)*cj5*gclwh0_0*pz*r20))+(((0.02)*gclwh9_1*npz*pp*r20*sj5))+(((0.02)*gclwh0_1*pp*rxp1_2))+(((-0.80771)*gclwh7_11*pp*r21))+(((-1.49716)*cj5*gclwh9_1*npx*npz*pz))+(((-0.74858)*gclwh13_0*pz*rxp1_2))+(((0.74858)*gclwh13_1*pp*rxp1_2))+(((0.00734904236913956)*gclwh9_1*r20))+(((-0.0004)*gclwh9_1*npz*rxp1_2*(sj5*sj5)))+(((-0.0875721118)*cj5*gclwh13_1*pp*r20))+(((2.0)*cj5*gclwh11_11*pz*sj5*(npz*npz)))+(((-0.001401930041)*gclwh9_0*r20*r22*sj5))+(((-0.069)*gclwh11_0*pp*r22*sj5))+(((-0.0005165202)*gclwh13_0*r20*sj5))+(((2.0)*gclwh0_1*npx*pp*pz*sj5))+((cj5*gclwh13_0*pp*pz*r20))+(((-0.1399930041)*gclwh2_0*pz*r21*sj5))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.1399930041)*cj5*gclwh13_0*pz*r20))+(((0.00039241231557934)*gclwh15_1*r21*sj5))+(((0.00039241231557934)*cj5*gclwh0_1*r20))+(((-0.37429)*gclwh15_0*pp*r21*r22*(cj5*cj5)))+(((0.008403580246)*cj5*gclwh15_1*npz*r21*sj5))+(((-0.002801860082)*gclwh0_0*r20*r22*(cj5*cj5)))+(((1.61542)*gclwh7_11*npy*pz))+(((0.74858)*cj5*gclwh0_1*npz*pp*r20*sj5))+(((0.74858)*cj5*gclwh0_0*npx*pz*r22*sj5))+(((-0.74858)*cj5*gclwh13_15*rxp1_2*rxp2_2))+(((0.37429)*cj5*gclwh7_0*pp*r21*r22))+(((0.0005165202)*cj5*gclwh11_0*r22))+(((-0.0161542)*gclwh9_11*rxp1_2*sj5))+((cj5*gclwh11_9*pp*sj5*(r22*r22)))+(((-0.02)*gclwh11_1*pp*pz))+(((0.1399930041)*cj5*gclwh15_0*pz*r21))+(((0.001048417846)*gclwh2_1*rxp0_2))+(((-0.37429)*cj5*gclwh9_0*pp*r20*r22))+(((-0.0074858)*gclwh13_1*pp*r20*sj5))+(((0.80771)*cj5*gclwh15_11*pp*r21))+((gclwh13_9*pp*r20*r22*(cj5*cj5)))+(((-0.74858)*gclwh7_15*rxp0_2*rxp2_2*(cj5*cj5)))+(((-0.0074858)*gclwh15_1*pp*r21*sj5))+((cj5*gclwh11_15*pp*r22*rxp2_2*sj5))+(((0.0002)*gclwh9_0*r22*rxp1_2*(sj5*sj5)))+(((-2.0)*gclwh13_15*npx*pz*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh13_9*npx*pz*r22*(cj5*cj5)))+(((-0.002799860082)*gclwh0_1*npz*r20*(sj5*sj5)))+(((-0.0074858)*cj5*gclwh13_11*npz*r20*sj5))+(((0.002799860082)*gclwh11_1*npz*r22*(sj5*sj5)))+(((0.0149716)*cj5*gclwh9_0*r22*rxp1_2*sj5))+(((-0.1048417846)*cj5*gclwh13_1*npx*pz))+(((0.01)*gclwh7_0*pp*r21*r22*sj5))+(((0.00138)*gclwh0_0*rxp1_2))+(((-2.0)*cj5*gclwh9_9*npx*pz*r22))+(((0.02)*cj5*gclwh13_1*npz*pp*r20*sj5))+(((-0.74858)*gclwh7_9*r22*rxp0_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh7_1*pp*rxp0_2))+(((-0.0875721118)*cj5*gclwh15_1*pp*r21))+(((-0.02)*cj5*gclwh5_1*pp*rxp2_2))+(((-1.0)*gclwh13_11*npz*pp*r20*(cj5*cj5)))+(((0.0149716)*gclwh5_1*npz*rxp2_2*(cj5*cj5)))+(((-0.0149716)*gclwh5_1*npz*rxp2_2*(sj5*sj5)))+(((0.2801860082)*gclwh7_0*r22*rxp0_2*(cj5*cj5)))+(((-0.001399930041)*gclwh11_0*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((0.001399930041)*gclwh0_0*r20*r22*(sj5*sj5)))+(((2.0)*gclwh11_1*npz*pp*pz*sj5))+(((0.00138)*gclwh7_0*rxp0_2*sj5))+(((0.1397930041)*gclwh11_0*pz*r22*sj5))+((gclwh9_0*pp*pz*r20))+(((0.1401930041)*cj5*gclwh7_11*npz*r21))+(((0.138)*cj5*gclwh15_0*npy*pz))+(((0.80771)*cj5*gclwh13_11*pp*r20))+(((0.113235291341611)*gclwh9_11*r20))+(((-1.0)*cj5*gclwh7_9*pp*r21*r22))+(((0.02)*gclwh11_0*(pz*pz)))+(((-1.49716)*gclwh13_1*npx*npz*pz*(cj5*cj5)))+(((-0.74858)*cj5*gclwh9_0*pz*rxp1_2))+(((-0.0096595172829)*gclwh11_0*r22*sj5))+(((-0.6046355518)*gclwh13_11*rxp1_2))+(((0.0161542)*gclwh11_11*pz)));
IkReal x267=(cj5*gclwh7_13);
IkReal x268=(r22*sj5);
IkReal x269=((0.276)*pp);
IkReal x270=(gclwh14_5*r20);
IkReal x271=(cj5*rxp2_2);
IkReal x272=((0.00552)*gclwh10_5);
IkReal x273=(gclwh13_13*r21);
IkReal x274=(gclwh6_5*sj5);
IkReal x275=((0.00552)*rxp0_2);
IkReal x276=(gclwh6_5*r21);
IkReal x277=((0.0020660808)*r20);
IkReal x278=(rxp1_2*sj5);
IkReal x279=(gclwh15_7*r20);
IkReal x280=(rxp2_2*sj5);
IkReal x281=((0.00276)*gclwh10_10);
IkReal x282=((0.00276)*gclwh4_12);
IkReal x283=((0.10330404)*rxp0_2);
IkReal x284=((0.138)*pp);
IkReal x285=(cj5*r21);
IkReal x286=((0.0193466345658)*r21);
IkReal x287=(cj5*gclwh7_7);
IkReal x288=((0.0386380691316)*r20);
IkReal x289=(r21*sj5);
IkReal x290=(gclwh13_7*r21);
IkReal x291=((0.20660808)*rxp1_2);
IkReal x292=(gclwh12_5*sj5);
IkReal x293=((0.10330404)*rxp1_2);
IkReal x294=(gclwh12_5*r21);
IkReal x295=(npy*pz);
IkReal x296=((0.0193466345658)*r20);
IkReal x297=(cj5*gclwh12_12);
IkReal x298=((0.00276)*gclwh10_12);
IkReal x299=(cj5*gclwh12_10);
IkReal x300=(gclwh8_5*r20);
IkReal x301=((0.00552)*pz);
IkReal x302=(cj5*gclwh6_5);
IkReal x303=((0.20660808)*rxp0_2);
IkReal x304=(cj5*gclwh14_5);
IkReal x305=((0.552)*cj5);
IkReal x306=(cj5*gclwh6_10);
IkReal x307=(cj5*gclwh12_5);
IkReal x308=(cj5*gclwh6_12);
IkReal x309=(gclwh8_12*x283);
IkReal x310=(pz*x282);
IkReal x311=(gclwh12_12*x286);
IkReal x312=(gclwh14_10*x296);
IkReal x313=(gclwh6_10*x293);
IkReal x314=(gclwh8_10*x283);
IkReal x315=(gclwh14_12*x296);
IkReal x316=(gclwh12_10*x286);
IkReal x317=(gclwh6_12*x293);
IkReal x318=((0.0193466345658)*x273);
IkReal x319=(gclwh9_13*x283);
IkReal x320=(gclwh13_11*x286);
IkReal x321=(gclwh9_11*x283);
IkReal x322=((0.00276)*gclwh5_13*pz);
IkReal x323=(gclwh7_13*x293);
IkReal x324=(gclwh7_11*x293);
IkReal x325=(gclwh15_13*x296);
IkReal x326=(gclwh15_11*x296);
IkReal x327=((0.276)*npx*pz);
IkReal x328=((0.00276)*rxp0_2*sj5);
IkReal x329=((0.0193190345658)*x285);
IkReal x330=((0.0010330404)*cj5*r22);
IkReal x331=(npz*pz*sj5);
IkReal x332=((0.0193190345658)*cj5*r20);
IkReal x333=((0.0020660808)*cj5*r22);
IkReal x334=((0.552)*npx*pz);
IkReal x335=((0.0010330404)*r20*sj5);
IkReal x336=(gclwh14_10*r20*x284);
IkReal x337=(gclwh6_12*x335);
IkReal x338=(gclwh8_12*x329);
IkReal x339=((0.276)*gclwh12_10*x295);
IkReal x340=(gclwh12_12*r21*x284);
IkReal x341=((0.0193190345658)*r20*x308);
IkReal x342=(x283*x297);
IkReal x343=(x271*x281);
IkReal x344=((0.00276)*gclwh14_12*x278);
IkReal x345=(gclwh12_12*x328);
IkReal x346=((0.10330404)*gclwh10_12*x280);
IkReal x347=(gclwh14_12*x327);
IkReal x348=(cj5*gclwh14_12*x293);
IkReal x349=((0.0010330404)*gclwh8_12*x289);
IkReal x350=((0.0193190345658)*gclwh4_12*x268);
IkReal x351=(cj5*gclwh14_10*x293);
IkReal x352=((0.0193190345658)*r20*x306);
IkReal x353=(gclwh8_10*x329);
IkReal x354=(x283*x299);
IkReal x355=(gclwh14_12*r20*x284);
IkReal x356=((0.00276)*gclwh14_10*x278);
IkReal x357=(gclwh12_10*x328);
IkReal x358=(gclwh4_12*x330);
IkReal x359=((0.0010330404)*gclwh8_10*x289);
IkReal x360=(x271*x298);
IkReal x361=(gclwh14_10*x327);
IkReal x362=((0.276)*gclwh12_12*x295);
IkReal x363=(gclwh12_10*r21*x284);
IkReal x364=((0.10330404)*gclwh10_10*x280);
IkReal x365=(gclwh6_10*x335);
IkReal x366=((0.0010330404)*gclwh9_11*x289);
IkReal x367=(cj5*gclwh13_11*x283);
IkReal x368=(gclwh7_13*x335);
IkReal x369=(gclwh7_11*x332);
IkReal x370=(gclwh7_11*x335);
IkReal x371=(gclwh13_11*r21*x284);
IkReal x372=((0.10330404)*gclwh11_13*x280);
IkReal x373=(gclwh15_13*x327);
IkReal x374=(gclwh15_11*x327);
IkReal x375=((0.00276)*gclwh15_11*x278);
IkReal x376=((0.0193190345658)*gclwh5_13*x268);
IkReal x377=(gclwh13_13*x328);
IkReal x378=((0.10330404)*gclwh11_11*x280);
IkReal x379=(cj5*gclwh15_11*x293);
IkReal x380=(cj5*gclwh13_13*x283);
IkReal x381=(gclwh13_11*x328);
IkReal x382=(x273*x284);
IkReal x383=((0.00276)*gclwh15_13*x278);
IkReal x384=(gclwh9_13*x329);
IkReal x385=(cj5*gclwh15_13*x293);
IkReal x386=(gclwh9_11*x329);
IkReal x387=((0.0010330404)*gclwh9_13*x289);
IkReal x388=((0.0193190345658)*r20*x267);
IkReal x389=(gclwh5_13*x330);
IkReal x390=((0.276)*gclwh13_13*x295);
IkReal x391=((0.00276)*gclwh11_13*x271);
IkReal x392=((0.00276)*gclwh11_11*x271);
IkReal x393=(gclwh15_11*r20*x284);
IkReal x394=((0.276)*gclwh13_11*x295);
IkReal x395=(gclwh15_13*r20*x284);
IkReal x396=(cj5*r20*x284);
IkReal x397=((0.276)*cj5*x295);
IkReal x398=(gclwh8_12*x284*x285);
IkReal x399=(x306*x327);
IkReal x400=(r20*x284*x308);
IkReal x401=(gclwh4_12*x268*x284);
IkReal x402=(gclwh8_10*x397);
IkReal x403=(r20*x284*x306);
IkReal x404=((0.276)*gclwh4_12*x331);
IkReal x405=(gclwh8_10*x284*x285);
IkReal x406=(x308*x327);
IkReal x407=(gclwh8_12*x397);
IkReal x408=(gclwh9_11*x284*x285);
IkReal x409=(gclwh7_11*x396);
IkReal x410=(gclwh5_13*x268*x284);
IkReal x411=(r20*x267*x284);
IkReal x412=(gclwh9_13*x284*x285);
IkReal x413=(gclwh9_11*x397);
IkReal x414=(gclwh9_13*x397);
IkReal x415=(x267*x327);
IkReal x416=(cj5*gclwh7_11*x327);
IkReal x417=((0.276)*gclwh5_13*x331);
IkReal x418=(x324+x326+x394+x393+x392+x413+x416);
IkReal x419=(x339+x336+x313+x312+x343+x399+x402);
IkReal x420=(x325+x323+x389+x395+x391+x390+x417+x414+x415);
IkReal x421=(x355+x358+x315+x317+x360+x362+x404+x407+x406);
IkReal x422=(x320+x321+x386+x381+x379+x378+x375+x374+x371+x370+x369+x366+x367+x409+x408);
IkReal x423=(x351+x353+x352+x354+x357+x356+x359+x314+x316+x361+x363+x364+x365+x403+x405);
IkReal x424=(x322+x319+x318+x387+x384+x385+x382+x383+x380+x388+x377+x376+x373+x372+x368+x412+x410+x411);
IkReal x425=(x309+x338+x337+x350+x311+x310+x342+x340+x341+x346+x347+x344+x345+x348+x349+x398+x401+x400);
op[23]=((0.1830918964)+(((-0.060762451837022)*gclwh7_13*r21))+(((-0.3244495436)*gclwh5_13*rxp2_2*sj5))+(((-0.86684)*gclwh9_13*npx*pz))+(((-0.0074858)*gclwh13_9*r20*sj5))+(((-0.138)*cj5*gclwh15_11*npy*pz))+(((-0.0086684)*gclwh9_13*rxp1_2*sj5))+(((0.060675767837022)*gclwh11_13*r22*sj5))+(((2.0)*gclwh9_9*npx*pz))+(((0.3244495436)*gclwh15_13*rxp0_2))+(((0.069)*gclwh11_11*pp*r22*sj5))+(((0.0005165202)*gclwh13_11*r20*sj5))+(((-0.0096733172829)*gclwh7_11*r21))+(((0.003244495436)*gclwh15_13*r21*sj5))+(((-0.138)*cj5*gclwh13_11*npx*pz))+(((-1.0)*gclwh9_9*pp*r20))+(((0.86684)*gclwh7_13*npy*pz))+(((-0.1401930041)*gclwh9_9*r20))+(((-0.1399930041)*cj5*gclwh13_9*r20))+(((0.069)*cj5*gclwh15_11*pp*r21))+(((-2.0)*gclwh7_9*npy*pz))+(((-1.0)*cj5*gclwh15_9*pp*r21))+(((0.1401930041)*gclwh7_9*r21))+(((0.138)*gclwh7_11*npy*pz))+(((0.0005165202)*gclwh15_11*r21*sj5))+(((2.0)*cj5*gclwh15_9*npy*pz))+(((-0.43342)*gclwh7_13*pp*r21))+(((2.0)*gclwh11_9*npz*pz*sj5))+(((0.0086684)*gclwh11_13*pz))+(((0.74858)*gclwh13_9*rxp1_2))+(((0.43342)*gclwh11_13*pp*r22*sj5))+(((0.060675767837022)*cj5*gclwh15_13*r21))+(((0.0096595172829)*cj5*gclwh15_11*r21))+(((-0.0086684)*gclwh7_13*rxp0_2*sj5))+(((0.060675767837022)*cj5*gclwh13_13*r20))+(((-0.1399930041)*cj5*gclwh15_9*r21))+(((2.0)*cj5*gclwh13_9*npx*pz))+(((-0.0074858)*gclwh15_9*r21*sj5))+((gclwh7_9*pp*r21))+(((-0.86684)*cj5*gclwh15_13*npy*pz))+(((0.060762451837022)*gclwh9_13*r20))+(((0.0096733172829)*gclwh9_11*r20))+(((0.0096595172829)*gclwh11_11*r22*sj5))+(((-0.02)*cj5*gclwh5_9*rxp2_2))+(((-0.05165202)*cj5*gclwh9_11*rxp1_2))+(((0.0096595172829)*cj5*gclwh13_11*r20))+(((-0.00138)*gclwh7_11*rxp0_2*sj5))+(((0.0074858)*cj5*gclwh11_9*r22))+(((-1.0)*gclwh11_9*pp*r22*sj5))+(((0.02)*gclwh7_9*rxp0_2*sj5))+(((0.00138)*gclwh11_11*pz))+(((-0.0005165202)*cj5*gclwh11_11*r22))+(((0.74858)*cj5*gclwh9_9*rxp1_2))+(((-0.3244495436)*gclwh13_13*rxp1_2))+(((-0.05165202)*gclwh13_11*rxp1_2))+(((-0.86684)*cj5*gclwh13_13*npx*pz))+(((-0.00138)*gclwh9_11*rxp1_2*sj5))+(((0.02)*gclwh9_9*rxp1_2*sj5))+(((0.43342)*cj5*gclwh13_13*pp*r20))+(((0.74858)*cj5*gclwh7_9*rxp0_2))+(((-0.138)*gclwh9_11*npx*pz))+(((-0.05165202)*cj5*gclwh7_11*rxp0_2))+(((0.069)*gclwh9_11*pp*r20))+(((-0.138)*gclwh11_11*npz*pz*sj5))+(((0.069)*cj5*gclwh13_11*pp*r20))+(((-1.0)*cj5*gclwh13_9*pp*r20))+(((-0.1399930041)*gclwh11_9*r22*sj5))+(((0.43342)*cj5*gclwh15_13*pp*r21))+(((0.43342)*gclwh9_13*pp*r20))+(((-0.003244495436)*cj5*gclwh11_13*r22))+(((-0.74858)*gclwh15_9*rxp0_2))+(((0.74858)*gclwh5_9*rxp2_2*sj5))+(((-0.069)*gclwh7_11*pp*r21))+(((0.05165202)*gclwh15_11*rxp0_2))+(((-0.3244495436)*cj5*gclwh9_13*rxp1_2))+(((-0.3244495436)*cj5*gclwh7_13*rxp0_2))+(((-0.86684)*gclwh11_13*npz*pz*sj5))+(((-0.02)*gclwh11_9*pz))+(((0.0086684)*cj5*gclwh5_13*rxp2_2))+(((0.003244495436)*gclwh13_13*r20*sj5)));
op[24]=((((-1.0)*x421))+x425+x423+(((-1.0)*x419)));
op[25]=((((2.0)*cj5*gclwh8_8*pp*r21))+(((-0.72884)*gclwh14_3*pp*r20))+(((-2.0)*gclwh14_8*pp*r20))+(((0.102178269108244)*gclwh12_3*r21))+(((0.038088)*gclwh12_4*npy*pz))+(((0.0145768)*gclwh12_3*rxp0_2*sj5))+(((0.72884)*cj5*gclwh6_3*pp*r20))+(((1.49716)*gclwh10_8*rxp2_2*sj5))+(((-0.0026660267700804)*cj5*gclwh6_4*r20))+(((-0.0001425595752)*gclwh8_4*r21*sj5))+(((2.0)*cj5*gclwh6_8*pp*r20))+(((-0.005455950472)*cj5*gclwh4_3*r22))+(((0.04)*gclwh4_8*pz))+(((-0.0026698355700804)*gclwh12_4*r21))+(((0.04)*gclwh14_8*rxp1_2*sj5))+(((0.00038088)*cj5*gclwh10_4*rxp2_2))+(((0.0149716)*gclwh6_8*r20*sj5))+(((-1.45768)*gclwh12_3*npy*pz))+(((-0.00038088)*gclwh12_4*rxp0_2*sj5))+(((-0.01425595752)*gclwh8_4*rxp0_2))+(((0.5455950472)*cj5*gclwh12_3*rxp0_2))+(((1.45768)*gclwh14_3*npx*pz))+(((-4.0)*cj5*gclwh8_8*npy*pz))+(((0.04)*gclwh12_8*rxp0_2*sj5))+(((-0.019044)*gclwh12_4*pp*r21))+(((0.102032501108244)*cj5*gclwh8_3*r21))+(((-1.45768)*gclwh4_3*npz*pz*sj5))+(((0.102032501108244)*cj5*gclwh6_3*r20))+(((0.2799860082)*cj5*gclwh8_8*r21))+(((-0.102178269108244)*gclwh14_3*r20))+(((2.0)*gclwh12_8*pp*r21))+(((0.5455950472)*cj5*gclwh14_3*rxp1_2))+(((-0.00038088)*gclwh4_4*pz))+(((-0.0145768)*cj5*gclwh10_3*rxp2_2))+(((0.0145768)*gclwh4_3*pz))+(((0.0026698355700804)*gclwh14_4*r20))+(((-0.01425595752)*cj5*gclwh14_4*rxp1_2))+(((-0.019044)*gclwh4_4*pp*r22*sj5))+(((0.038088)*cj5*gclwh8_4*npy*pz))+(((-4.0)*gclwh4_8*npz*pz*sj5))+(((0.01425595752)*gclwh6_4*rxp1_2))+(((1.49716)*cj5*gclwh12_8*rxp0_2))+(((-0.0026660267700804)*cj5*gclwh8_4*r21))+(((-0.01425595752)*cj5*gclwh12_4*rxp0_2))+(((0.2799860082)*gclwh4_8*r22*sj5))+(((-0.0149716)*cj5*gclwh4_8*r22))+(((-4.0)*cj5*gclwh6_8*npx*pz))+(((0.0149716)*gclwh8_8*r21*sj5))+(((-0.01425595752)*gclwh10_4*rxp2_2*sj5))+(((0.019044)*gclwh14_4*pp*r20))+(((4.0)*gclwh14_8*npx*pz))+(((-0.04)*cj5*gclwh10_8*rxp2_2))+(((0.2799860082)*cj5*gclwh6_8*r20))+(((0.005455950472)*gclwh6_3*r20*sj5))+(((1.49716)*cj5*gclwh14_8*rxp1_2))+(((0.5455950472)*gclwh10_3*rxp2_2*sj5))+(((-0.0026660267700804)*gclwh4_4*r22*sj5))+(((1.49716)*gclwh8_8*rxp0_2))+(((-0.5455950472)*gclwh6_3*rxp1_2))+(((0.5455950472)*gclwh8_3*rxp0_2))+(((-0.019044)*cj5*gclwh8_4*pp*r21))+(((0.0145768)*gclwh14_3*rxp1_2*sj5))+(((-4.0)*gclwh12_8*npy*pz))+(((0.038088)*gclwh4_4*npz*pz*sj5))+(((0.0001425595752)*cj5*gclwh4_4*r22))+(((0.2803860082)*gclwh12_8*r21))+(((2.0)*gclwh4_8*pp*r22*sj5))+(((-0.00038088)*gclwh14_4*rxp1_2*sj5))+(((-0.038088)*gclwh14_4*npx*pz))+(((-1.45768)*cj5*gclwh8_3*npy*pz))+(((0.038088)*cj5*gclwh6_4*npx*pz))+(((0.72884)*gclwh4_3*pp*r22*sj5))+(((-0.0001425595752)*gclwh6_4*r20*sj5))+(((-1.45768)*cj5*gclwh6_3*npx*pz))+(((0.72884)*gclwh12_3*pp*r21))+(((-1.49716)*gclwh6_8*rxp1_2))+(((0.72884)*cj5*gclwh8_3*pp*r21))+(((-0.2803860082)*gclwh14_8*r20))+(((-0.019044)*cj5*gclwh6_4*pp*r20))+(((0.005455950472)*gclwh8_3*r21*sj5))+(((0.102032501108244)*gclwh4_3*r22*sj5)));
op[26]=((((-0.0020660808)*gclwh8_5*x289))+(((-1.0)*x274*x277))+(((0.552)*gclwh12_5*x295))+(((0.552)*gclwh4_5*x331))+((x271*x272))+(((-1.0)*gclwh8_5*x269*x285))+((gclwh6_5*x291))+(((-1.0)*x303*x307))+(((-1.0)*x275*x292))+(((-1.0)*x269*x294))+(((-1.0)*gclwh14_5*x334))+(((-1.0)*gclwh8_5*x303))+(((-1.0)*x288*x302))+(((-0.00552)*gclwh14_5*x278))+((x302*x334))+(((-0.0386932691316)*x294))+(((0.0386932691316)*x270))+(((-0.0386380691316)*gclwh4_5*x268))+((gclwh4_5*x333))+(((-1.0)*gclwh4_5*x268*x269))+(((-1.0)*r20*x269*x302))+((gclwh8_5*x295*x305))+(((-0.0386380691316)*gclwh8_5*x285))+((x269*x270))+(((-1.0)*x291*x304))+(((-0.20660808)*gclwh10_5*x280))+(((-1.0)*gclwh4_5*x301)));
op[27]=0;
op[28]=((((-1.0)*x421))+(((-1.0)*x423))+x419+x425);
op[29]=((((0.01425595752)*cj5*gclwh12_4*rxp0_2))+(((0.0001425595752)*gclwh6_4*r20*sj5))+(((0.0026660267700804)*gclwh4_4*r22*sj5))+(((2.0)*cj5*gclwh8_8*pp*r21))+(((-0.038088)*gclwh4_4*npz*pz*sj5))+(((-0.72884)*gclwh14_3*pp*r20))+(((-2.0)*gclwh14_8*pp*r20))+(((-0.038088)*cj5*gclwh8_4*npy*pz))+(((0.102178269108244)*gclwh12_3*r21))+(((0.0026698355700804)*gclwh12_4*r21))+(((0.0026660267700804)*cj5*gclwh8_4*r21))+(((0.0145768)*gclwh12_3*rxp0_2*sj5))+(((0.72884)*cj5*gclwh6_3*pp*r20))+(((1.49716)*gclwh10_8*rxp2_2*sj5))+(((2.0)*cj5*gclwh6_8*pp*r20))+(((-0.005455950472)*cj5*gclwh4_3*r22))+(((0.019044)*cj5*gclwh6_4*pp*r20))+(((0.04)*gclwh4_8*pz))+(((0.04)*gclwh14_8*rxp1_2*sj5))+(((-0.019044)*gclwh14_4*pp*r20))+(((0.0149716)*gclwh6_8*r20*sj5))+(((-1.45768)*gclwh12_3*npy*pz))+(((0.00038088)*gclwh14_4*rxp1_2*sj5))+(((0.5455950472)*cj5*gclwh12_3*rxp0_2))+(((1.45768)*gclwh14_3*npx*pz))+(((0.00038088)*gclwh12_4*rxp0_2*sj5))+(((0.019044)*cj5*gclwh8_4*pp*r21))+(((-4.0)*cj5*gclwh8_8*npy*pz))+(((0.04)*gclwh12_8*rxp0_2*sj5))+(((0.102032501108244)*cj5*gclwh8_3*r21))+(((-1.45768)*gclwh4_3*npz*pz*sj5))+(((0.00038088)*gclwh4_4*pz))+(((-0.038088)*cj5*gclwh6_4*npx*pz))+(((0.102032501108244)*cj5*gclwh6_3*r20))+(((0.038088)*gclwh14_4*npx*pz))+(((0.2799860082)*cj5*gclwh8_8*r21))+(((0.0026660267700804)*cj5*gclwh6_4*r20))+(((0.01425595752)*cj5*gclwh14_4*rxp1_2))+(((-0.102178269108244)*gclwh14_3*r20))+(((2.0)*gclwh12_8*pp*r21))+(((0.5455950472)*cj5*gclwh14_3*rxp1_2))+(((-0.0145768)*cj5*gclwh10_3*rxp2_2))+(((0.0145768)*gclwh4_3*pz))+(((-4.0)*gclwh4_8*npz*pz*sj5))+(((0.019044)*gclwh12_4*pp*r21))+(((1.49716)*cj5*gclwh12_8*rxp0_2))+(((0.019044)*gclwh4_4*pp*r22*sj5))+(((0.2799860082)*gclwh4_8*r22*sj5))+(((-0.0149716)*cj5*gclwh4_8*r22))+(((-4.0)*cj5*gclwh6_8*npx*pz))+(((0.0149716)*gclwh8_8*r21*sj5))+(((4.0)*gclwh14_8*npx*pz))+(((-0.01425595752)*gclwh6_4*rxp1_2))+(((-0.04)*cj5*gclwh10_8*rxp2_2))+(((-0.0026698355700804)*gclwh14_4*r20))+(((0.2799860082)*cj5*gclwh6_8*r20))+(((0.005455950472)*gclwh6_3*r20*sj5))+(((1.49716)*cj5*gclwh14_8*rxp1_2))+(((0.5455950472)*gclwh10_3*rxp2_2*sj5))+(((0.01425595752)*gclwh8_4*rxp0_2))+(((0.0001425595752)*gclwh8_4*r21*sj5))+(((1.49716)*gclwh8_8*rxp0_2))+(((-0.5455950472)*gclwh6_3*rxp1_2))+(((0.5455950472)*gclwh8_3*rxp0_2))+(((0.01425595752)*gclwh10_4*rxp2_2*sj5))+(((0.0145768)*gclwh14_3*rxp1_2*sj5))+(((-4.0)*gclwh12_8*npy*pz))+(((0.2803860082)*gclwh12_8*r21))+(((-0.00038088)*cj5*gclwh10_4*rxp2_2))+(((2.0)*gclwh4_8*pp*r22*sj5))+(((-1.45768)*cj5*gclwh8_3*npy*pz))+(((-0.0001425595752)*cj5*gclwh4_4*r22))+(((0.72884)*gclwh4_3*pp*r22*sj5))+(((-1.45768)*cj5*gclwh6_3*npx*pz))+(((0.72884)*gclwh12_3*pp*r21))+(((-1.49716)*gclwh6_8*rxp1_2))+(((0.72884)*cj5*gclwh8_3*pp*r21))+(((-0.2803860082)*gclwh14_8*r20))+(((-0.038088)*gclwh12_4*npy*pz))+(((0.005455950472)*gclwh8_3*r21*sj5))+(((0.102032501108244)*gclwh4_3*r22*sj5)));
op[30]=((((-0.01425595752)*gclwh11_1*rxp2_2*sj5))+(((0.04)*gclwh15_9*rxp1_2*sj5))+(((-0.0026660267700804)*cj5*gclwh7_1*r20))+(((4.0)*gclwh15_9*npx*pz))+(((2.0)*cj5*gclwh7_9*pp*r20))+(((2.0)*gclwh13_9*pp*r21))+(((0.0149716)*gclwh7_9*r20*sj5))+(((-0.01425595752)*cj5*gclwh15_1*rxp1_2))+(((0.038088)*cj5*gclwh9_1*npy*pz))+(((1.49716)*gclwh11_9*rxp2_2*sj5))+(((0.2799860082)*cj5*gclwh9_9*r21))+(((-0.72884)*gclwh15_0*pp*r20))+(((1.49716)*gclwh9_9*rxp0_2))+(((0.0001425595752)*cj5*gclwh5_1*r22))+(((-0.038088)*gclwh15_1*npx*pz))+(((-1.45768)*cj5*gclwh7_0*npx*pz))+(((0.01425595752)*gclwh7_1*rxp1_2))+(((0.72884)*cj5*gclwh9_0*pp*r21))+(((-0.019044)*cj5*gclwh9_1*pp*r21))+(((0.2803860082)*gclwh13_9*r21))+(((-0.00038088)*gclwh5_1*pz))+(((0.5455950472)*cj5*gclwh13_0*rxp0_2))+(((-0.019044)*cj5*gclwh7_1*pp*r20))+(((-0.102178269108244)*gclwh15_0*r20))+(((0.005455950472)*gclwh7_0*r20*sj5))+(((-2.0)*gclwh15_9*pp*r20))+(((-0.0026660267700804)*cj5*gclwh9_1*r21))+(((0.019044)*gclwh15_1*pp*r20))+(((0.038088)*gclwh13_1*npy*pz))+(((-0.0149716)*cj5*gclwh5_9*r22))+(((2.0)*cj5*gclwh9_9*pp*r21))+(((1.49716)*cj5*gclwh15_9*rxp1_2))+(((0.102032501108244)*cj5*gclwh7_0*r20))+(((-0.0145768)*cj5*gclwh11_0*rxp2_2))+(((-1.45768)*gclwh13_0*npy*pz))+(((-0.019044)*gclwh13_1*pp*r21))+(((-0.00038088)*gclwh15_1*rxp1_2*sj5))+(((-0.5455950472)*gclwh7_0*rxp1_2))+(((0.005455950472)*gclwh9_0*r21*sj5))+(((1.49716)*cj5*gclwh13_9*rxp0_2))+(((-1.45768)*cj5*gclwh9_0*npy*pz))+(((0.2799860082)*gclwh5_9*r22*sj5))+(((-1.45768)*gclwh5_0*npz*pz*sj5))+(((1.45768)*gclwh15_0*npx*pz))+(((0.04)*gclwh13_9*rxp0_2*sj5))+(((0.72884)*gclwh13_0*pp*r21))+(((0.038088)*cj5*gclwh7_1*npx*pz))+(((0.72884)*cj5*gclwh7_0*pp*r20))+(((0.00038088)*cj5*gclwh11_1*rxp2_2))+(((0.0026698355700804)*gclwh15_1*r20))+(((0.2799860082)*cj5*gclwh7_9*r20))+(((-4.0)*gclwh5_9*npz*pz*sj5))+(((0.102178269108244)*gclwh13_0*r21))+(((0.5455950472)*gclwh11_0*rxp2_2*sj5))+(((-4.0)*gclwh13_9*npy*pz))+(((-0.005455950472)*cj5*gclwh5_0*r22))+(((0.04)*gclwh5_9*pz))+(((0.0145768)*gclwh5_0*pz))+(((0.0145768)*gclwh15_0*rxp1_2*sj5))+(((0.0149716)*gclwh9_9*r21*sj5))+(((-0.0001425595752)*gclwh7_1*r20*sj5))+(((0.72884)*gclwh5_0*pp*r22*sj5))+(((2.0)*gclwh5_9*pp*r22*sj5))+(((-0.01425595752)*gclwh9_1*rxp0_2))+(((-4.0)*cj5*gclwh9_9*npy*pz))+(((-4.0)*cj5*gclwh7_9*npx*pz))+(((0.102032501108244)*cj5*gclwh9_0*r21))+(((-0.04)*cj5*gclwh11_9*rxp2_2))+(((0.0145768)*gclwh13_0*rxp0_2*sj5))+(((-0.01425595752)*cj5*gclwh13_1*rxp0_2))+(((0.102032501108244)*gclwh5_0*r22*sj5))+(((-0.2803860082)*gclwh15_9*r20))+(((-0.0001425595752)*gclwh9_1*r21*sj5))+(((-0.0026698355700804)*gclwh13_1*r21))+(((-1.49716)*gclwh7_9*rxp1_2))+(((0.5455950472)*cj5*gclwh15_0*rxp1_2))+(((0.038088)*gclwh5_1*npz*pz*sj5))+(((-0.0026660267700804)*gclwh5_1*r22*sj5))+(((0.5455950472)*gclwh9_0*rxp0_2))+(((-0.00038088)*gclwh13_1*rxp0_2*sj5))+(((-0.019044)*gclwh5_1*pp*r22*sj5)));
op[31]=((((-1.0)*x420))+(((-1.0)*x422))+x418+x424);
op[32]=0;
op[33]=((((-1.0)*gclwh9_7*x269*x285))+(((-1.0)*x287*x288))+(((-0.0386380691316)*gclwh5_7*x268))+((gclwh7_7*x291))+((gclwh9_7*x295*x305))+(((-0.00552)*gclwh15_7*x278))+((gclwh5_7*x333))+(((0.552)*gclwh5_7*x331))+(((-0.0386380691316)*gclwh9_7*x285))+(((-1.0)*cj5*gclwh13_7*x303))+(((-1.0)*gclwh5_7*x268*x269))+(((-1.0)*gclwh15_7*x334))+(((-1.0)*x269*x290))+(((0.00552)*gclwh11_7*x271))+(((-1.0)*r20*x269*x287))+(((-1.0)*gclwh13_7*sj5*x275))+((x287*x334))+(((-1.0)*cj5*gclwh15_7*x291))+(((-0.0386932691316)*x290))+(((0.0386932691316)*x279))+(((-0.0020660808)*gclwh9_7*x289))+(((-1.0)*gclwh9_7*x303))+((x269*x279))+(((-0.20660808)*gclwh11_7*x280))+(((-1.0)*gclwh5_7*x301))+(((0.552)*gclwh13_7*x295))+(((-1.0)*gclwh7_7*sj5*x277)));
op[34]=((((0.04)*gclwh15_9*rxp1_2*sj5))+(((0.0001425595752)*gclwh9_1*r21*sj5))+(((4.0)*gclwh15_9*npx*pz))+(((2.0)*cj5*gclwh7_9*pp*r20))+(((2.0)*gclwh13_9*pp*r21))+(((0.0149716)*gclwh7_9*r20*sj5))+(((1.49716)*gclwh11_9*rxp2_2*sj5))+(((0.2799860082)*cj5*gclwh9_9*r21))+(((-0.72884)*gclwh15_0*pp*r20))+(((-0.00038088)*cj5*gclwh11_1*rxp2_2))+(((0.019044)*cj5*gclwh9_1*pp*r21))+(((1.49716)*gclwh9_9*rxp0_2))+(((-1.45768)*cj5*gclwh7_0*npx*pz))+(((0.72884)*cj5*gclwh9_0*pp*r21))+(((0.2803860082)*gclwh13_9*r21))+(((0.5455950472)*cj5*gclwh13_0*rxp0_2))+(((0.0026660267700804)*cj5*gclwh7_1*r20))+(((0.019044)*cj5*gclwh7_1*pp*r20))+(((-0.102178269108244)*gclwh15_0*r20))+(((0.005455950472)*gclwh7_0*r20*sj5))+(((-2.0)*gclwh15_9*pp*r20))+(((0.0026660267700804)*gclwh5_1*r22*sj5))+(((-0.019044)*gclwh15_1*pp*r20))+(((-0.0149716)*cj5*gclwh5_9*r22))+(((0.00038088)*gclwh13_1*rxp0_2*sj5))+(((-0.01425595752)*gclwh7_1*rxp1_2))+(((2.0)*cj5*gclwh9_9*pp*r21))+(((1.49716)*cj5*gclwh15_9*rxp1_2))+(((0.102032501108244)*cj5*gclwh7_0*r20))+(((0.01425595752)*cj5*gclwh15_1*rxp1_2))+(((-0.0145768)*cj5*gclwh11_0*rxp2_2))+(((-1.45768)*gclwh13_0*npy*pz))+(((-0.5455950472)*gclwh7_0*rxp1_2))+(((0.005455950472)*gclwh9_0*r21*sj5))+(((1.49716)*cj5*gclwh13_9*rxp0_2))+(((-1.45768)*cj5*gclwh9_0*npy*pz))+(((0.2799860082)*gclwh5_9*r22*sj5))+(((-1.45768)*gclwh5_0*npz*pz*sj5))+(((0.01425595752)*gclwh9_1*rxp0_2))+(((1.45768)*gclwh15_0*npx*pz))+(((0.04)*gclwh13_9*rxp0_2*sj5))+(((0.72884)*gclwh13_0*pp*r21))+(((0.72884)*cj5*gclwh7_0*pp*r20))+(((0.2799860082)*cj5*gclwh7_9*r20))+(((-4.0)*gclwh5_9*npz*pz*sj5))+(((0.019044)*gclwh5_1*pp*r22*sj5))+(((-0.038088)*cj5*gclwh9_1*npy*pz))+(((0.102178269108244)*gclwh13_0*r21))+(((0.038088)*gclwh15_1*npx*pz))+(((0.019044)*gclwh13_1*pp*r21))+(((0.01425595752)*gclwh11_1*rxp2_2*sj5))+(((0.5455950472)*gclwh11_0*rxp2_2*sj5))+(((-0.038088)*gclwh5_1*npz*pz*sj5))+(((-4.0)*gclwh13_9*npy*pz))+(((-0.005455950472)*cj5*gclwh5_0*r22))+(((0.0001425595752)*gclwh7_1*r20*sj5))+(((0.04)*gclwh5_9*pz))+(((0.0145768)*gclwh5_0*pz))+(((0.0145768)*gclwh15_0*rxp1_2*sj5))+(((0.00038088)*gclwh15_1*rxp1_2*sj5))+(((0.0149716)*gclwh9_9*r21*sj5))+(((-0.038088)*gclwh13_1*npy*pz))+(((-0.038088)*cj5*gclwh7_1*npx*pz))+(((0.72884)*gclwh5_0*pp*r22*sj5))+(((2.0)*gclwh5_9*pp*r22*sj5))+(((0.00038088)*gclwh5_1*pz))+(((-4.0)*cj5*gclwh9_9*npy*pz))+(((-4.0)*cj5*gclwh7_9*npx*pz))+(((0.102032501108244)*cj5*gclwh9_0*r21))+(((-0.04)*cj5*gclwh11_9*rxp2_2))+(((0.0145768)*gclwh13_0*rxp0_2*sj5))+(((0.01425595752)*cj5*gclwh13_1*rxp0_2))+(((0.102032501108244)*gclwh5_0*r22*sj5))+(((-0.2803860082)*gclwh15_9*r20))+(((-0.0026698355700804)*gclwh15_1*r20))+(((0.0026698355700804)*gclwh13_1*r21))+(((-0.0001425595752)*cj5*gclwh5_1*r22))+(((-1.49716)*gclwh7_9*rxp1_2))+(((0.5455950472)*cj5*gclwh15_0*rxp1_2))+(((0.0026660267700804)*cj5*gclwh9_1*r21))+(((0.5455950472)*gclwh9_0*rxp0_2)));
op[35]=((((-1.0)*x420))+x424+x422+(((-1.0)*x418)));
op[36]=((-0.10057992)+(((0.276)*gclwh6_10*x295))+(((-1.0)*gclwh10_10*x330))+((gclwh12_12*x335))+(((0.0010330404)*gclwh14_10*x289))+(((-1.0)*cj5*gclwh8_10*x293))+((gclwh14_12*x329))+(((-0.00276)*gclwh8_10*x278))+((gclwh14_10*x284*x285))+((gclwh12_10*x335))+(((0.0193190345658)*gclwh10_12*x268))+(((-1.0)*gclwh6_12*x286))+(((-1.0)*gclwh14_10*x397))+(((-0.10330404)*gclwh4_12*x280))+((gclwh14_12*x284*x285))+(((-1.0)*cj5*gclwh8_12*x293))+(((-1.0)*gclwh6_10*x328))+(((-1.0)*gclwh8_12*x327))+(((-1.0)*x299*x327))+((gclwh14_10*x329))+(((-1.0)*gclwh14_12*x397))+((gclwh14_12*x283))+(((0.0193190345658)*r20*x297))+(((0.0193190345658)*r20*x299))+(((0.0010330404)*gclwh14_12*x289))+((pz*x298))+(((0.0193190345658)*gclwh10_10*x268))+((x271*x282))+(((-0.276)*gclwh10_12*x331))+((r20*x284*x299))+((r20*x284*x297))+(((-1.0)*gclwh12_12*x293))+(((-1.0)*gclwh6_10*r21*x284))+((gclwh10_12*x268*x284))+((gclwh8_12*x296))+((gclwh8_10*r20*x284))+(((-1.0)*gclwh6_12*x328))+(((-1.0)*gclwh12_10*x293))+(((-1.0)*gclwh8_10*x327))+((gclwh10_10*x268*x284))+((gclwh14_10*x283))+((gclwh8_12*r20*x284))+((gclwh8_10*x296))+(((-1.0)*x297*x327))+(((-1.0)*gclwh6_10*x286))+(((0.276)*gclwh6_12*x295))+(((-0.00276)*gclwh8_12*x278))+(((-1.0)*gclwh10_12*x330))+((pz*x281))+(((-0.276)*gclwh10_10*x331))+(((-1.0)*x283*x308))+(((-1.0)*x283*x306))+(((-1.0)*gclwh6_12*r21*x284)));
op[37]=((0.2465598728)+(((0.04)*cj5*gclwh4_8*rxp2_2))+(((-1.49716)*gclwh4_8*rxp2_2*sj5))+(((0.0149716)*gclwh12_8*r20*sj5))+(((-1.45768)*gclwh10_3*npz*pz*sj5))+(((0.0026698355700804)*gclwh6_4*r21))+(((-0.0001425595752)*gclwh14_4*r21*sj5))+(((0.72884)*gclwh8_3*pp*r20))+(((-0.00038088)*gclwh10_4*pz))+(((0.01425595752)*cj5*gclwh8_4*rxp1_2))+(((0.0145768)*gclwh10_3*pz))+(((0.5455950472)*gclwh14_3*rxp0_2))+(((0.0145768)*cj5*gclwh4_3*rxp2_2))+(((-0.72884)*gclwh6_3*pp*r21))+(((-0.00038088)*cj5*gclwh4_4*rxp2_2))+(((-0.019044)*cj5*gclwh12_4*pp*r20))+(((-4.0)*cj5*gclwh14_8*npy*pz))+(((1.45768)*gclwh6_3*npy*pz))+(((-0.0145768)*gclwh6_3*rxp0_2*sj5))+(((-0.2803860082)*gclwh6_8*r21))+(((0.038088)*cj5*gclwh12_4*npx*pz))+(((-0.038088)*gclwh1_4*npx*pz*sj5))+(((0.72884)*cj5*gclwh12_3*pp*r20))+(((0.102178269108244)*gclwh8_3*r20))+(((0.2803860082)*gclwh8_8*r20))+(((-0.72884)*gclwh3_3*pp*r21*sj5))+(((-0.005455950472)*cj5*gclwh1_3*r20))+(((-0.0149716)*cj5*gclwh10_8*r22))+(((0.01425595752)*cj5*gclwh6_4*rxp0_2))+(((0.102032501108244)*gclwh3_3*r21*sj5))+(((0.0001425595752)*cj5*gclwh3_4*r21))+(((2.0)*gclwh10_8*pp*r22*sj5))+(((-0.5455950472)*cj5*gclwh8_3*rxp1_2))+(((-1.45768)*cj5*gclwh12_3*npx*pz))+(((-4.0)*gclwh8_8*npx*pz))+(((0.038088)*gclwh10_4*npz*pz*sj5))+(((-1.45768)*gclwh8_3*npx*pz))+(((-0.0001425595752)*gclwh12_4*r20*sj5))+(((0.72884)*cj5*gclwh14_3*pp*r21))+(((-2.0)*gclwh6_8*pp*r21))+(((0.102032501108244)*cj5*gclwh14_3*r21))+(((-4.0)*cj5*gclwh12_8*npx*pz))+(((-0.01425595752)*gclwh14_4*rxp0_2))+(((0.102032501108244)*gclwh10_3*r22*sj5))+(((0.72884)*gclwh10_3*pp*r22*sj5))+(((0.005455950472)*gclwh12_3*r20*sj5))+(((2.0)*gclwh8_8*pp*r20))+(((-0.0026660267700804)*gclwh3_4*r21*sj5))+(((2.0)*cj5*gclwh14_8*pp*r21))+(((0.00038088)*gclwh8_4*rxp1_2*sj5))+(((-0.0026660267700804)*gclwh10_4*r22*sj5))+(((0.0145768)*gclwh1_3*rxp1_2))+(((-0.0026660267700804)*cj5*gclwh14_4*r21))+(((-0.102178269108244)*gclwh6_3*r21))+(((1.45768)*gclwh3_3*npy*pz*sj5))+(((0.038088)*cj5*gclwh14_4*npy*pz))+(((0.019044)*gclwh6_4*pp*r21))+(((0.04)*gclwh10_8*pz))+(((-0.72884)*gclwh1_3*pp*r20*sj5))+(((0.00038088)*gclwh3_4*rxp0_2))+(((-0.00038088)*gclwh1_4*rxp1_2))+(((-0.04)*gclwh6_8*rxp0_2*sj5))+(((-0.019044)*gclwh8_4*pp*r20))+(((-0.019044)*gclwh10_4*pp*r22*sj5))+(((0.2799860082)*cj5*gclwh12_8*r20))+(((-0.5455950472)*gclwh4_3*rxp2_2*sj5))+(((-1.45768)*cj5*gclwh14_3*npy*pz))+(((4.0)*gclwh6_8*npy*pz))+(((-0.0026660267700804)*cj5*gclwh12_4*r20))+(((-0.0145768)*gclwh3_3*rxp0_2))+(((-0.5455950472)*gclwh12_3*rxp1_2))+(((0.0149716)*gclwh14_8*r21*sj5))+(((-1.49716)*cj5*gclwh8_8*rxp1_2))+(((0.2799860082)*cj5*gclwh14_8*r21))+(((-0.0145768)*gclwh8_3*rxp1_2*sj5))+(((0.2799860082)*gclwh10_8*r22*sj5))+(((1.45768)*gclwh1_3*npx*pz*sj5))+(((-0.005455950472)*cj5*gclwh10_3*r22))+(((-1.49716)*gclwh12_8*rxp1_2))+(((1.49716)*gclwh14_8*rxp0_2))+(((-4.0)*gclwh10_8*npz*pz*sj5))+(((-0.5455950472)*cj5*gclwh6_3*rxp0_2))+(((-0.019044)*cj5*gclwh14_4*pp*r21))+(((-0.038088)*gclwh6_4*npy*pz))+(((0.00038088)*gclwh6_4*rxp0_2*sj5))+(((0.102032501108244)*gclwh1_3*r20*sj5))+(((-0.04)*gclwh8_8*rxp1_2*sj5))+(((0.019044)*gclwh3_4*pp*r21*sj5))+(((0.038088)*gclwh8_4*npx*pz))+(((0.0001425595752)*cj5*gclwh10_4*r22))+(((-1.49716)*cj5*gclwh6_8*rxp0_2))+(((0.01425595752)*gclwh12_4*rxp1_2))+(((-0.0026660267700804)*gclwh1_4*r20*sj5))+(((0.01425595752)*gclwh4_4*rxp2_2*sj5))+(((-0.0026698355700804)*gclwh8_4*r20))+(((0.102032501108244)*cj5*gclwh12_3*r20))+(((-0.005455950472)*cj5*gclwh3_3*r21))+(((0.019044)*gclwh1_4*pp*r20*sj5))+(((-0.038088)*gclwh3_4*npy*pz*sj5))+(((0.005455950472)*gclwh14_3*r21*sj5))+(((2.0)*cj5*gclwh12_8*pp*r20))+(((0.0001425595752)*cj5*gclwh1_4*r20)));
op[38]=((((0.552)*x295*x304))+(((-1.0)*pz*x272))+(((-0.0386380691316)*gclwh14_5*x285))+(((-0.552)*gclwh6_5*x295))+(((-0.0386932691316)*x300))+((cj5*gclwh8_5*x291))+(((-1.0)*x269*x300))+((x274*x275))+(((-1.0)*x288*x307))+((gclwh8_5*x334))+(((0.00552)*gclwh8_5*x278))+(((-1.0)*gclwh14_5*x269*x285))+((gclwh10_5*x333))+(((-1.0)*gclwh14_5*x303))+(((0.0386932691316)*x276))+(((0.552)*gclwh10_5*x331))+(((-1.0)*x277*x292))+((x302*x303))+(((-0.00552)*gclwh4_5*x271))+(((0.20660808)*gclwh4_5*x280))+((gclwh12_5*npx*pz*x305))+(((-1.0)*r20*x269*x307))+(((-0.0020660808)*gclwh14_5*x289))+((x269*x276))+(((-0.0386380691316)*gclwh10_5*x268))+(((-1.0)*gclwh10_5*x268*x269))+((gclwh12_5*x291)));
IkReal x426=((0.276)*pp);
IkReal x427=(gclwh7_7*r21);
IkReal x428=(cj5*gclwh13_7);
IkReal x429=((0.0193466345658)*r21);
IkReal x430=((0.552)*pz);
IkReal x431=(cj5*npy);
IkReal x432=((0.00276)*pz);
IkReal x433=((0.20660808)*rxp1_2);
IkReal x434=(gclwh9_7*r20);
IkReal x435=(rxp1_2*sj5);
IkReal x436=((0.138)*pp);
IkReal x437=(gclwh11_11*sj5);
IkReal x438=(cj5*r21);
IkReal x439=((0.20660808)*rxp0_2);
IkReal x440=((0.276)*pz);
IkReal x441=((0.10330404)*rxp0_2);
IkReal x442=(gclwh9_11*r20);
IkReal x443=((0.0193466345658)*r20);
IkReal x444=((0.10330404)*rxp1_2);
IkReal x445=(cj5*r20);
IkReal x446=(npz*sj5);
IkReal x447=(r20*sj5);
IkReal x448=(cj5*npx);
IkReal x449=(gclwh5_7*rxp2_2);
IkReal x450=(r22*sj5);
IkReal x451=(gclwh5_13*rxp2_2);
IkReal x452=((0.10330404)*sj5);
IkReal x453=((0.00276)*cj5);
IkReal x454=(gclwh4_12*rxp2_2);
IkReal x455=((0.0193466345658)*x442);
IkReal x456=(gclwh15_13*x441);
IkReal x457=(gclwh15_11*x441);
IkReal x458=(gclwh9_13*x443);
IkReal x459=(gclwh11_11*x432);
IkReal x460=(gclwh11_13*x432);
IkReal x461=(gclwh13_13*x444);
IkReal x462=(gclwh13_11*x444);
IkReal x463=(gclwh7_11*x429);
IkReal x464=(gclwh7_13*x429);
IkReal x465=((0.0193190345658)*x450);
IkReal x466=((0.0010330404)*r21*sj5);
IkReal x467=(cj5*x444);
IkReal x468=((0.00276)*rxp0_2*sj5);
IkReal x469=((0.0010330404)*cj5*r22);
IkReal x470=((0.0193190345658)*r22*x437);
IkReal x471=((0.0010330404)*gclwh13_11*x447);
IkReal x472=((0.0193190345658)*gclwh15_11*x438);
IkReal x473=(gclwh7_11*npy*x440);
IkReal x474=((0.0193190345658)*gclwh13_11*x445);
IkReal x475=((0.0010330404)*gclwh13_13*x447);
IkReal x476=(x451*x453);
IkReal x477=((0.0193190345658)*gclwh13_13*x445);
IkReal x478=(gclwh7_13*npy*x440);
IkReal x479=((0.0193190345658)*gclwh15_13*x438);
IkReal x480=(x436*x442);
IkReal x481=(gclwh15_11*x466);
IkReal x482=(gclwh11_13*x465);
IkReal x483=(gclwh9_13*r20*x436);
IkReal x484=(gclwh15_13*x466);
IkReal x485=(gclwh7_11*x468);
IkReal x486=(gclwh9_11*x467);
IkReal x487=(gclwh11_13*x469);
IkReal x488=(cj5*gclwh7_13*x441);
IkReal x489=(gclwh9_11*npx*x440);
IkReal x490=(x451*x452);
IkReal x491=(gclwh7_11*r21*x436);
IkReal x492=(gclwh9_13*x467);
IkReal x493=(gclwh7_13*x468);
IkReal x494=(cj5*gclwh7_11*x441);
IkReal x495=(gclwh7_13*r21*x436);
IkReal x496=(gclwh9_13*npx*x440);
IkReal x497=(gclwh11_11*x469);
IkReal x498=((0.00276)*gclwh9_11*x435);
IkReal x499=((0.00276)*gclwh9_13*x435);
IkReal x500=(gclwh15_11*x436*x438);
IkReal x501=(gclwh15_13*x436*x438);
IkReal x502=(gclwh13_11*x436*x445);
IkReal x503=(gclwh11_13*x436*x450);
IkReal x504=(gclwh13_13*x436*x445);
IkReal x505=(r22*x436*x437);
IkReal x506=(gclwh13_13*x440*x448);
IkReal x507=(gclwh13_11*x440*x448);
IkReal x508=(npz*x437*x440);
IkReal x509=(gclwh11_13*x440*x446);
IkReal x510=(gclwh15_11*x431*x440);
IkReal x511=(gclwh15_13*x431*x440);
IkReal x512=(x489+x485+x486+x498+x491+x497+x494+x463+x462+x508+x507+x510);
IkReal x513=(x481+x480+x459+x457+x455+x474+x470+x471+x472+x473+x500+x502+x505);
IkReal x514=(x488+x487+x499+x492+x493+x490+x496+x495+x461+x464+x509+x506+x511);
IkReal x515=((0.10057992)+x483+x482+x484+x458+x456+x460+x475+x476+x477+x478+x479+x501+x503+x504);
op[39]=0;
op[40]=((-0.10057992)+((gclwh6_10*x468))+(((-1.0)*gclwh12_12*x440*x448))+((gclwh12_12*x436*x445))+(((-1.0)*gclwh10_12*x440*x446))+(((-1.0)*gclwh6_12*r21*x436))+(((-1.0)*cj5*gclwh6_12*x441))+((gclwh14_12*x441))+((gclwh12_10*x440*x448))+(((-1.0)*gclwh10_10*x432))+(((-0.0193190345658)*gclwh12_10*x445))+((gclwh6_10*r21*x436))+(((-1.0)*gclwh6_10*npy*x440))+(((-1.0)*gclwh8_12*npx*x440))+(((-0.0193190345658)*gclwh14_10*x438))+((gclwh10_12*x432))+((gclwh10_10*x469))+((x453*x454))+(((-1.0)*gclwh6_12*x429))+((gclwh14_10*x431*x440))+(((0.0010330404)*gclwh12_12*x447))+(((-1.0)*gclwh8_10*r20*x436))+((cj5*gclwh6_10*x441))+(((-0.00276)*gclwh8_12*x435))+((gclwh8_10*x467))+(((-1.0)*gclwh12_10*x436*x445))+((gclwh6_12*npy*x440))+(((0.0193190345658)*gclwh12_12*x445))+((gclwh10_10*x440*x446))+(((-1.0)*gclwh12_12*x444))+((gclwh14_12*x466))+(((-1.0)*gclwh6_12*x468))+(((-0.0010330404)*gclwh12_10*x447))+((gclwh14_12*x436*x438))+(((-1.0)*gclwh8_10*x443))+((gclwh8_12*x443))+(((-1.0)*x452*x454))+(((-1.0)*gclwh8_12*x467))+((gclwh10_12*x436*x450))+((gclwh8_10*npx*x440))+(((-1.0)*gclwh10_10*x465))+(((-1.0)*gclwh14_10*x466))+(((-1.0)*gclwh10_12*x469))+(((0.0193190345658)*gclwh14_12*x438))+((gclwh6_10*x429))+(((-1.0)*gclwh14_10*x441))+(((-1.0)*gclwh14_12*x431*x440))+(((0.00276)*gclwh8_10*x435))+((gclwh8_12*r20*x436))+(((-1.0)*gclwh14_10*x436*x438))+((gclwh12_10*x444))+(((-1.0)*gclwh10_10*x436*x450))+((gclwh10_12*x465)));
op[41]=((0.2465598728)+(((0.04)*cj5*gclwh4_8*rxp2_2))+(((-1.49716)*gclwh4_8*rxp2_2*sj5))+(((0.0149716)*gclwh12_8*r20*sj5))+(((-1.45768)*gclwh10_3*npz*pz*sj5))+(((0.019044)*cj5*gclwh14_4*pp*r21))+(((0.0026660267700804)*cj5*gclwh14_4*r21))+(((-0.0001425595752)*cj5*gclwh3_4*r21))+(((0.72884)*gclwh8_3*pp*r20))+(((0.0145768)*gclwh10_3*pz))+(((0.5455950472)*gclwh14_3*rxp0_2))+(((0.0001425595752)*gclwh14_4*r21*sj5))+(((0.0145768)*cj5*gclwh4_3*rxp2_2))+(((-0.72884)*gclwh6_3*pp*r21))+(((0.00038088)*cj5*gclwh4_4*rxp2_2))+(((-4.0)*cj5*gclwh14_8*npy*pz))+(((1.45768)*gclwh6_3*npy*pz))+(((-0.0145768)*gclwh6_3*rxp0_2*sj5))+(((-0.2803860082)*gclwh6_8*r21))+(((0.0026660267700804)*gclwh3_4*r21*sj5))+(((0.72884)*cj5*gclwh12_3*pp*r20))+(((0.102178269108244)*gclwh8_3*r20))+(((0.2803860082)*gclwh8_8*r20))+(((-0.019044)*gclwh6_4*pp*r21))+(((-0.72884)*gclwh3_3*pp*r21*sj5))+(((0.038088)*gclwh6_4*npy*pz))+(((-0.005455950472)*cj5*gclwh1_3*r20))+(((-0.0149716)*cj5*gclwh10_8*r22))+(((-0.0001425595752)*cj5*gclwh1_4*r20))+(((0.102032501108244)*gclwh3_3*r21*sj5))+(((2.0)*gclwh10_8*pp*r22*sj5))+(((-0.5455950472)*cj5*gclwh8_3*rxp1_2))+(((-1.45768)*cj5*gclwh12_3*npx*pz))+(((-4.0)*gclwh8_8*npx*pz))+(((-1.45768)*gclwh8_3*npx*pz))+(((0.72884)*cj5*gclwh14_3*pp*r21))+(((0.0026660267700804)*gclwh10_4*r22*sj5))+(((0.038088)*gclwh1_4*npx*pz*sj5))+(((-2.0)*gclwh6_8*pp*r21))+(((0.102032501108244)*cj5*gclwh14_3*r21))+(((-4.0)*cj5*gclwh12_8*npx*pz))+(((0.102032501108244)*gclwh10_3*r22*sj5))+(((0.72884)*gclwh10_3*pp*r22*sj5))+(((0.019044)*gclwh10_4*pp*r22*sj5))+(((0.005455950472)*gclwh12_3*r20*sj5))+(((2.0)*gclwh8_8*pp*r20))+(((-0.00038088)*gclwh3_4*rxp0_2))+(((2.0)*cj5*gclwh14_8*pp*r21))+(((-0.0026698355700804)*gclwh6_4*r21))+(((-0.038088)*gclwh10_4*npz*pz*sj5))+(((0.0145768)*gclwh1_3*rxp1_2))+(((0.0001425595752)*gclwh12_4*r20*sj5))+(((-0.102178269108244)*gclwh6_3*r21))+(((-0.038088)*cj5*gclwh12_4*npx*pz))+(((1.45768)*gclwh3_3*npy*pz*sj5))+(((0.0026698355700804)*gclwh8_4*r20))+(((0.0026660267700804)*cj5*gclwh12_4*r20))+(((-0.01425595752)*gclwh12_4*rxp1_2))+(((-0.00038088)*gclwh8_4*rxp1_2*sj5))+(((-0.038088)*gclwh8_4*npx*pz))+(((0.04)*gclwh10_8*pz))+(((-0.72884)*gclwh1_3*pp*r20*sj5))+(((-0.0001425595752)*cj5*gclwh10_4*r22))+(((-0.01425595752)*cj5*gclwh6_4*rxp0_2))+(((-0.019044)*gclwh3_4*pp*r21*sj5))+(((-0.04)*gclwh6_8*rxp0_2*sj5))+(((0.019044)*gclwh8_4*pp*r20))+(((0.038088)*gclwh3_4*npy*pz*sj5))+(((0.2799860082)*cj5*gclwh12_8*r20))+(((-0.5455950472)*gclwh4_3*rxp2_2*sj5))+(((-0.01425595752)*gclwh4_4*rxp2_2*sj5))+(((-1.45768)*cj5*gclwh14_3*npy*pz))+(((4.0)*gclwh6_8*npy*pz))+(((-0.0145768)*gclwh3_3*rxp0_2))+(((0.00038088)*gclwh10_4*pz))+(((-0.5455950472)*gclwh12_3*rxp1_2))+(((0.0149716)*gclwh14_8*r21*sj5))+(((-1.49716)*cj5*gclwh8_8*rxp1_2))+(((0.2799860082)*cj5*gclwh14_8*r21))+(((-0.0145768)*gclwh8_3*rxp1_2*sj5))+(((0.2799860082)*gclwh10_8*r22*sj5))+(((-0.00038088)*gclwh6_4*rxp0_2*sj5))+(((1.45768)*gclwh1_3*npx*pz*sj5))+(((-0.01425595752)*cj5*gclwh8_4*rxp1_2))+(((0.00038088)*gclwh1_4*rxp1_2))+(((-0.005455950472)*cj5*gclwh10_3*r22))+(((-1.49716)*gclwh12_8*rxp1_2))+(((1.49716)*gclwh14_8*rxp0_2))+(((-4.0)*gclwh10_8*npz*pz*sj5))+(((-0.5455950472)*cj5*gclwh6_3*rxp0_2))+(((0.0026660267700804)*gclwh1_4*r20*sj5))+(((-0.038088)*cj5*gclwh14_4*npy*pz))+(((0.102032501108244)*gclwh1_3*r20*sj5))+(((-0.04)*gclwh8_8*rxp1_2*sj5))+(((-0.019044)*gclwh1_4*pp*r20*sj5))+(((-1.49716)*cj5*gclwh6_8*rxp0_2))+(((0.019044)*cj5*gclwh12_4*pp*r20))+(((0.102032501108244)*cj5*gclwh12_3*r20))+(((-0.005455950472)*cj5*gclwh3_3*r21))+(((0.005455950472)*gclwh14_3*r21*sj5))+(((2.0)*cj5*gclwh12_8*pp*r20))+(((0.01425595752)*gclwh14_4*rxp0_2)));
op[42]=((0.2465598728)+(((-1.45768)*gclwh11_0*npz*pz*sj5))+(((0.0145768)*gclwh11_0*pz))+(((0.72884)*gclwh2_0*pp*r21*sj5))+(((0.01425595752)*cj5*gclwh9_1*rxp1_2))+(((0.0149716)*gclwh13_9*r20*sj5))+(((-0.0001425595752)*cj5*gclwh2_1*r21))+(((-0.0145768)*gclwh0_0*rxp1_2))+(((1.49716)*gclwh15_9*rxp0_2))+(((-0.00038088)*gclwh2_1*rxp0_2))+(((2.0)*gclwh11_9*pp*r22*sj5))+(((-1.49716)*cj5*gclwh9_9*rxp1_2))+(((0.00038088)*gclwh7_1*rxp0_2*sj5))+(((0.0026660267700804)*gclwh2_1*r21*sj5))+(((0.04)*cj5*gclwh5_9*rxp2_2))+(((-0.0149716)*cj5*gclwh11_9*r22))+(((0.005455950472)*gclwh15_0*r21*sj5))+(((-0.102032501108244)*gclwh0_0*r20*sj5))+(((-0.019044)*gclwh2_1*pp*r21*sj5))+(((-0.04)*gclwh7_9*rxp0_2*sj5))+(((0.72884)*gclwh0_0*pp*r20*sj5))+(((-1.45768)*cj5*gclwh13_0*npx*pz))+(((-0.00038088)*gclwh11_1*pz))+(((-0.038088)*gclwh7_1*npy*pz))+(((0.0145768)*gclwh2_0*rxp0_2))+(((-0.0001425595752)*gclwh15_1*r21*sj5))+(((-4.0)*gclwh11_9*npz*pz*sj5))+(((0.0026698355700804)*gclwh7_1*r21))+(((0.72884)*gclwh9_0*pp*r20))+(((-0.0026660267700804)*gclwh11_1*r22*sj5))+(((-1.49716)*gclwh13_9*rxp1_2))+(((0.01425595752)*gclwh13_1*rxp1_2))+(((-1.45768)*gclwh9_0*npx*pz))+(((-0.019044)*gclwh11_1*pp*r22*sj5))+(((0.0149716)*gclwh15_9*r21*sj5))+(((-0.0001425595752)*cj5*gclwh0_1*r20))+(((1.45768)*gclwh7_0*npy*pz))+(((-0.04)*gclwh9_9*rxp1_2*sj5))+(((0.0026660267700804)*gclwh0_1*r20*sj5))+(((0.038088)*cj5*gclwh13_1*npx*pz))+(((0.102032501108244)*cj5*gclwh13_0*r20))+(((0.038088)*cj5*gclwh15_1*npy*pz))+(((0.01425595752)*cj5*gclwh7_1*rxp0_2))+(((-0.005455950472)*cj5*gclwh11_0*r22))+(((-1.45768)*gclwh0_0*npx*pz*sj5))+(((-0.0145768)*gclwh7_0*rxp0_2*sj5))+(((-0.0001425595752)*gclwh13_1*r20*sj5))+(((-1.49716)*cj5*gclwh7_9*rxp0_2))+(((-0.019044)*cj5*gclwh13_1*pp*r20))+(((0.038088)*gclwh11_1*npz*pz*sj5))+(((0.01425595752)*gclwh5_1*rxp2_2*sj5))+(((0.038088)*gclwh0_1*npx*pz*sj5))+(((4.0)*gclwh7_9*npy*pz))+(((-0.019044)*cj5*gclwh15_1*pp*r21))+(((0.2799860082)*cj5*gclwh13_9*r20))+(((-2.0)*gclwh7_9*pp*r21))+(((0.2799860082)*gclwh11_9*r22*sj5))+(((0.2799860082)*cj5*gclwh15_9*r21))+(((-0.0145768)*gclwh9_0*rxp1_2*sj5))+(((0.04)*gclwh11_9*pz))+(((-0.00038088)*cj5*gclwh5_1*rxp2_2))+(((2.0)*gclwh9_9*pp*r20))+(((-4.0)*cj5*gclwh15_9*npy*pz))+(((-0.019044)*gclwh0_1*pp*r20*sj5))+(((-4.0)*gclwh9_9*npx*pz))+(((-1.45768)*gclwh2_0*npy*pz*sj5))+(((0.038088)*gclwh9_1*npx*pz))+(((-0.019044)*gclwh9_1*pp*r20))+(((0.019044)*gclwh7_1*pp*r21))+(((0.2803860082)*gclwh9_9*r20))+(((0.005455950472)*gclwh13_0*r20*sj5))+(((0.102032501108244)*cj5*gclwh15_0*r21))+(((-0.2803860082)*gclwh7_9*r21))+(((0.005455950472)*cj5*gclwh0_0*r20))+(((0.102032501108244)*gclwh11_0*r22*sj5))+(((-0.5455950472)*gclwh5_0*rxp2_2*sj5))+(((-0.01425595752)*gclwh15_1*rxp0_2))+(((-1.45768)*cj5*gclwh15_0*npy*pz))+(((2.0)*cj5*gclwh15_9*pp*r21))+(((0.005455950472)*cj5*gclwh2_0*r21))+(((-0.72884)*gclwh7_0*pp*r21))+(((0.0001425595752)*cj5*gclwh11_1*r22))+(((0.00038088)*gclwh9_1*rxp1_2*sj5))+(((2.0)*cj5*gclwh13_9*pp*r20))+(((0.102178269108244)*gclwh9_0*r20))+(((-0.102178269108244)*gclwh7_0*r21))+(((0.038088)*gclwh2_1*npy*pz*sj5))+(((-1.49716)*gclwh5_9*rxp2_2*sj5))+(((-4.0)*cj5*gclwh13_9*npx*pz))+(((0.0145768)*cj5*gclwh5_0*rxp2_2))+(((0.72884)*cj5*gclwh13_0*pp*r20))+(((-0.5455950472)*gclwh13_0*rxp1_2))+(((-0.0026660267700804)*cj5*gclwh13_1*r20))+(((-0.0026660267700804)*cj5*gclwh15_1*r21))+(((-0.5455950472)*cj5*gclwh9_0*rxp1_2))+(((-0.5455950472)*cj5*gclwh7_0*rxp0_2))+(((0.72884)*gclwh11_0*pp*r22*sj5))+(((0.00038088)*gclwh0_1*rxp1_2))+(((0.72884)*cj5*gclwh15_0*pp*r21))+(((0.5455950472)*gclwh15_0*rxp0_2))+(((-0.0026698355700804)*gclwh9_1*r20))+(((-0.102032501108244)*gclwh2_0*r21*sj5)));
op[43]=(x515+x512+(((-1.0)*x513))+(((-1.0)*x514)));
op[44]=0;
op[45]=(((x426*x427))+(((-1.0)*gclwh7_7*npy*x430))+((cj5*gclwh9_7*x433))+(((-0.00552)*gclwh11_7*pz))+((npx*x428*x430))+(((0.00552)*gclwh9_7*x435))+(((-0.0386380691316)*r20*x428))+((cj5*gclwh7_7*x439))+(((0.00552)*gclwh7_7*rxp0_2*sj5))+(((-0.0386932691316)*x434))+(((-1.0)*gclwh11_7*x426*x450))+(((0.0386932691316)*x427))+(((-1.0)*x426*x434))+(((-0.00552)*cj5*x449))+(((0.20660808)*sj5*x449))+(((-0.0020660808)*gclwh15_7*r21*sj5))+(((-0.0386380691316)*gclwh15_7*x438))+((gclwh13_7*x433))+((gclwh15_7*x430*x431))+(((-1.0)*r20*x426*x428))+(((0.0020660808)*cj5*gclwh11_7*r22))+(((-1.0)*gclwh15_7*x426*x438))+((gclwh9_7*npx*x430))+(((-1.0)*gclwh15_7*x439))+(((-0.0020660808)*gclwh13_7*x447))+((gclwh11_7*x430*x446))+(((-0.0386380691316)*gclwh11_7*x450)));
op[46]=((0.2465598728)+(((0.038088)*gclwh7_1*npy*pz))+(((-1.45768)*gclwh11_0*npz*pz*sj5))+(((0.0145768)*gclwh11_0*pz))+(((0.72884)*gclwh2_0*pp*r21*sj5))+(((0.0149716)*gclwh13_9*r20*sj5))+(((0.0001425595752)*gclwh15_1*r21*sj5))+(((-0.0145768)*gclwh0_0*rxp1_2))+(((1.49716)*gclwh15_9*rxp0_2))+(((-0.0001425595752)*cj5*gclwh11_1*r22))+(((0.019044)*gclwh11_1*pp*r22*sj5))+(((2.0)*gclwh11_9*pp*r22*sj5))+(((-1.49716)*cj5*gclwh9_9*rxp1_2))+(((-0.038088)*gclwh11_1*npz*pz*sj5))+(((0.04)*cj5*gclwh5_9*rxp2_2))+(((-0.038088)*cj5*gclwh15_1*npy*pz))+(((-0.0149716)*cj5*gclwh11_9*r22))+(((0.005455950472)*gclwh15_0*r21*sj5))+(((-0.102032501108244)*gclwh0_0*r20*sj5))+(((-0.04)*gclwh7_9*rxp0_2*sj5))+(((-0.019044)*gclwh7_1*pp*r21))+(((0.72884)*gclwh0_0*pp*r20*sj5))+(((-0.0026698355700804)*gclwh7_1*r21))+(((-1.45768)*cj5*gclwh13_0*npx*pz))+(((0.0145768)*gclwh2_0*rxp0_2))+(((-0.00038088)*gclwh7_1*rxp0_2*sj5))+(((-0.038088)*gclwh9_1*npx*pz))+(((0.0026698355700804)*gclwh9_1*r20))+(((0.019044)*cj5*gclwh13_1*pp*r20))+(((-4.0)*gclwh11_9*npz*pz*sj5))+(((0.00038088)*cj5*gclwh5_1*rxp2_2))+(((0.72884)*gclwh9_0*pp*r20))+(((-1.49716)*gclwh13_9*rxp1_2))+(((-1.45768)*gclwh9_0*npx*pz))+(((0.0149716)*gclwh15_9*r21*sj5))+(((0.00038088)*gclwh11_1*pz))+(((1.45768)*gclwh7_0*npy*pz))+(((-0.04)*gclwh9_9*rxp1_2*sj5))+(((0.102032501108244)*cj5*gclwh13_0*r20))+(((0.0026660267700804)*cj5*gclwh15_1*r21))+(((-0.005455950472)*cj5*gclwh11_0*r22))+(((-1.45768)*gclwh0_0*npx*pz*sj5))+(((-0.01425595752)*cj5*gclwh9_1*rxp1_2))+(((-0.0145768)*gclwh7_0*rxp0_2*sj5))+(((-1.49716)*cj5*gclwh7_9*rxp0_2))+(((-0.01425595752)*gclwh13_1*rxp1_2))+(((4.0)*gclwh7_9*npy*pz))+(((0.019044)*gclwh9_1*pp*r20))+(((0.019044)*gclwh0_1*pp*r20*sj5))+(((0.2799860082)*cj5*gclwh13_9*r20))+(((-2.0)*gclwh7_9*pp*r21))+(((0.2799860082)*gclwh11_9*r22*sj5))+(((0.019044)*gclwh2_1*pp*r21*sj5))+(((0.0001425595752)*cj5*gclwh2_1*r21))+(((0.2799860082)*cj5*gclwh15_9*r21))+(((0.00038088)*gclwh2_1*rxp0_2))+(((-0.0145768)*gclwh9_0*rxp1_2*sj5))+(((-0.0026660267700804)*gclwh0_1*r20*sj5))+(((-0.038088)*cj5*gclwh13_1*npx*pz))+(((0.04)*gclwh11_9*pz))+(((2.0)*gclwh9_9*pp*r20))+(((-4.0)*cj5*gclwh15_9*npy*pz))+(((-0.038088)*gclwh0_1*npx*pz*sj5))+(((-4.0)*gclwh9_9*npx*pz))+(((-1.45768)*gclwh2_0*npy*pz*sj5))+(((0.2803860082)*gclwh9_9*r20))+(((0.005455950472)*gclwh13_0*r20*sj5))+(((0.01425595752)*gclwh15_1*rxp0_2))+(((0.102032501108244)*cj5*gclwh15_0*r21))+(((-0.2803860082)*gclwh7_9*r21))+(((0.005455950472)*cj5*gclwh0_0*r20))+(((0.102032501108244)*gclwh11_0*r22*sj5))+(((-0.5455950472)*gclwh5_0*rxp2_2*sj5))+(((-1.45768)*cj5*gclwh15_0*npy*pz))+(((2.0)*cj5*gclwh15_9*pp*r21))+(((0.005455950472)*cj5*gclwh2_0*r21))+(((-0.72884)*gclwh7_0*pp*r21))+(((-0.038088)*gclwh2_1*npy*pz*sj5))+(((-0.00038088)*gclwh9_1*rxp1_2*sj5))+(((0.0001425595752)*cj5*gclwh0_1*r20))+(((0.0001425595752)*gclwh13_1*r20*sj5))+(((2.0)*cj5*gclwh13_9*pp*r20))+(((0.102178269108244)*gclwh9_0*r20))+(((-0.102178269108244)*gclwh7_0*r21))+(((-1.49716)*gclwh5_9*rxp2_2*sj5))+(((-4.0)*cj5*gclwh13_9*npx*pz))+(((0.0026660267700804)*cj5*gclwh13_1*r20))+(((0.0145768)*cj5*gclwh5_0*rxp2_2))+(((0.019044)*cj5*gclwh15_1*pp*r21))+(((-0.01425595752)*gclwh5_1*rxp2_2*sj5))+(((0.72884)*cj5*gclwh13_0*pp*r20))+(((-0.01425595752)*cj5*gclwh7_1*rxp0_2))+(((-0.5455950472)*gclwh13_0*rxp1_2))+(((0.0026660267700804)*gclwh11_1*r22*sj5))+(((-0.00038088)*gclwh0_1*rxp1_2))+(((-0.0026660267700804)*gclwh2_1*r21*sj5))+(((-0.5455950472)*cj5*gclwh9_0*rxp1_2))+(((-0.5455950472)*cj5*gclwh7_0*rxp0_2))+(((0.72884)*gclwh11_0*pp*r22*sj5))+(((0.72884)*cj5*gclwh15_0*pp*r21))+(((0.5455950472)*gclwh15_0*rxp0_2))+(((-0.102032501108244)*gclwh2_0*r21*sj5)));
op[47]=(x515+x513+(((-1.0)*x512))+(((-1.0)*x514)));
op[48]=((((0.29542)*cj5*gclwh8_12*pp*r21))+(((-2.0)*cj5*gclwh8_8*npy*pz))+(((0.74858)*cj5*gclwh14_8*rxp1_2))+(((-0.0096595172829)*cj5*gclwh8_10*r21))+(((-0.0096733172829)*gclwh12_10*r21))+(((-0.0059084)*cj5*gclwh10_12*rxp2_2))+(((0.1401930041)*gclwh12_8*r21))+(((0.138)*gclwh12_10*npy*pz))+(((0.29542)*cj5*gclwh6_12*pp*r20))+(((0.0059084)*gclwh4_12*pz))+(((0.1399930041)*gclwh4_8*r22*sj5))+(((-0.069)*gclwh12_10*pp*r21))+(((-0.05165202)*gclwh8_10*rxp0_2))+(((-1.0)*gclwh14_8*pp*r20))+(((0.29542)*gclwh12_12*pp*r21))+(((-0.59084)*cj5*gclwh8_12*npy*pz))+(((-0.74858)*gclwh6_8*rxp1_2))+(((0.2211455036)*cj5*gclwh12_12*rxp0_2))+(((-0.0096595172829)*cj5*gclwh6_10*r20))+(((0.02)*gclwh4_8*pz))+(((-0.0074858)*cj5*gclwh4_8*r22))+(((-2.0)*cj5*gclwh6_8*npx*pz))+(((-0.0005165202)*gclwh6_10*r20*sj5))+(((0.041356733271222)*cj5*gclwh6_12*r20))+(((0.0074858)*gclwh8_8*r21*sj5))+(((-0.05165202)*cj5*gclwh12_10*rxp0_2))+(((-0.041415817271222)*gclwh14_12*r20))+(((-0.05165202)*gclwh10_10*rxp2_2*sj5))+(((0.29542)*gclwh4_12*pp*r22*sj5))+(((0.05165202)*gclwh6_10*rxp1_2))+((cj5*gclwh8_8*pp*r21))+(((-2.0)*gclwh12_8*npy*pz))+(((0.0074858)*gclwh6_8*r20*sj5))+(((0.2211455036)*gclwh8_12*rxp0_2))+(((0.041415817271222)*gclwh12_12*r21))+(((0.59084)*gclwh14_12*npx*pz))+(((0.2211455036)*gclwh10_12*rxp2_2*sj5))+(((0.138)*cj5*gclwh8_10*npy*pz))+(((-0.00138)*gclwh12_10*rxp0_2*sj5))+((gclwh12_8*pp*r21))+(((-0.069)*cj5*gclwh8_10*pp*r21))+(((-0.069)*cj5*gclwh6_10*pp*r20))+(((0.74858)*cj5*gclwh12_8*rxp0_2))+(((-0.59084)*gclwh4_12*npz*pz*sj5))+(((0.00138)*cj5*gclwh10_10*rxp2_2))+(((0.2211455036)*cj5*gclwh14_12*rxp1_2))+(((-0.0005165202)*gclwh8_10*r21*sj5))+((gclwh4_8*pp*r22*sj5))+(((0.02)*gclwh14_8*rxp1_2*sj5))+(((0.0059084)*gclwh14_12*rxp1_2*sj5))+(((2.0)*gclwh14_8*npx*pz))+(((0.069)*gclwh14_10*pp*r20))+(((-0.1401930041)*gclwh14_8*r20))+(((-0.2211455036)*gclwh6_12*rxp1_2))+(((0.0096733172829)*gclwh14_10*r20))+(((0.74858)*gclwh8_8*rxp0_2))+(((-0.59084)*gclwh12_12*npy*pz))+((cj5*gclwh6_8*pp*r20))+(((-2.0)*gclwh4_8*npz*pz*sj5))+(((0.041356733271222)*gclwh4_12*r22*sj5))+(((-0.05165202)*cj5*gclwh14_10*rxp1_2))+(((0.74858)*gclwh10_8*rxp2_2*sj5))+(((-0.02)*cj5*gclwh10_8*rxp2_2))+(((-0.29542)*gclwh14_12*pp*r20))+(((0.138)*cj5*gclwh6_10*npx*pz))+(((0.002211455036)*gclwh6_12*r20*sj5))+(((0.1399930041)*cj5*gclwh6_8*r20))+(((0.02)*gclwh12_8*rxp0_2*sj5))+(((-0.59084)*cj5*gclwh6_12*npx*pz))+(((-0.002211455036)*cj5*gclwh4_12*r22))+(((0.1399930041)*cj5*gclwh8_8*r21))+(((-0.138)*gclwh14_10*npx*pz))+(((0.002211455036)*gclwh8_12*r21*sj5))+(((0.0059084)*gclwh12_12*rxp0_2*sj5))+(((0.041356733271222)*cj5*gclwh8_12*r21))+(((-0.00138)*gclwh14_10*rxp1_2*sj5)));
op[49]=((((-0.74858)*gclwh14_8*r22*rxp1_2*(cj5*cj5)))+(((0.002803860082)*gclwh12_4*npz*r21*sj5))+(((-0.04)*gclwh4_4*pz*(npz*npz)*(sj5*sj5)))+(((0.74858)*cj5*gclwh8_10*npz*rxp0_2))+((cj5*gclwh14_8*pp*r20*r22))+(((0.0074858)*gclwh6_3*pz*r20*sj5))+(((0.74858)*cj5*gclwh12_3*pz*rxp0_2))+(((-0.052323123504589)*cj5*gclwh4_3*sj5*(r22*r22)))+(((-1.0)*gclwh12_4*r21*(pp*pp)))+(((0.5603720164)*gclwh12_4*npz*rxp0_2*(cj5*cj5)))+(((-0.37429)*gclwh8_3*pp*r21*r22*(cj5*cj5)))+(((0.1397930041)*gclwh4_3*pz*r22*sj5))+(((-0.0149716)*cj5*gclwh4_3*pz*r22))+(((-0.01)*gclwh12_3*pp*r21*r22*sj5))+(((0.74858)*gclwh8_3*pz*rxp0_2))+(((0.1401930041)*gclwh12_3*pz*r21))+((cj5*gclwh6_3*pp*pz*r20))+(((-0.0074858)*cj5*gclwh8_8*r21*r22*sj5))+(((0.011057022233367)*gclwh14_10*r20))+(((-0.011041248233367)*cj5*gclwh8_10*r21))+(((-0.00675155876779811)*gclwh12_4*r21))+(((0.1399930041)*gclwh8_10*npz*r21*(cj5*cj5)))+(((-0.0149716)*gclwh10_4*npz*rxp2_2*(cj5*cj5)))+(((0.02)*cj5*gclwh6_3*npx*pz*r22*sj5))+(((0.37429)*cj5*gclwh14_3*pp*r20*r22))+(((-0.0074858)*cj5*gclwh6_14*r20*rxp2_2*sj5))+(((-0.1399930041)*gclwh8_8*r21*r22*(cj5*cj5)))+(((-1.0)*gclwh8_14*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.2801860082)*gclwh14_3*r22*rxp1_2*(cj5*cj5)))+(((-0.001399930041)*gclwh4_3*(r22*r22)*(sj5*sj5)))+(((-1.49716)*cj5*gclwh4_4*pz*sj5*(npz*npz)))+(((0.74858)*gclwh8_3*npy*pz*r22*(cj5*cj5)))+(((-0.036050884955666)*cj5*gclwh14_4*rxp1_2))+(((0.02)*cj5*gclwh6_4*npz*pp*r20*sj5))+(((0.138)*gclwh12_3*npy*pz))+(((-1.49716)*cj5*gclwh12_4*npy*npz*pz))+(((-0.02)*gclwh14_4*pp*rxp1_2*sj5))+(((-1.0)*gclwh6_14*pp*r20*rxp2_2*(cj5*cj5)))+(((0.000149716)*gclwh8_4*npz*r21*(sj5*sj5)))+(((0.74858)*cj5*gclwh6_8*r22*rxp1_2))+(((0.74858)*gclwh8_4*npz*pp*r21*(cj5*cj5)))+(((-0.0015774)*gclwh14_10*rxp1_2*sj5))+(((0.02)*cj5*gclwh14_10*npz*rxp1_2*sj5))+(((-0.02)*cj5*gclwh4_8*pz*r22))+(((0.74858)*gclwh6_3*npx*pz*r22*(cj5*cj5)))+(((0.74858)*gclwh12_10*npz*rxp0_2*(cj5*cj5)))+(((-0.001401930041)*gclwh12_3*r21*r22*sj5))+(((0.1399930041)*cj5*gclwh8_3*pz*r21))+(((-0.74858)*gclwh6_3*pz*rxp1_2))+(((-1.0)*gclwh14_3*pp*pz*r20))+(((-0.0074858)*cj5*gclwh8_14*r21*rxp2_2*sj5))+(((-0.0590405046)*cj5*gclwh14_10*rxp1_2))+(((-0.02)*cj5*gclwh14_8*r22*rxp1_2*sj5))+(((0.02)*cj5*gclwh12_10*npz*rxp0_2*sj5))+(((-0.0074858)*gclwh10_3*r22*rxp2_2*(sj5*sj5)))+(((0.138)*gclwh4_3*npz*pz*sj5))+((gclwh8_10*npz*pp*r21*(cj5*cj5)))+(((-0.000963180554)*gclwh4_4*pz))+(((0.0149716)*cj5*gclwh4_4*npz*pz))+(((-0.5603720164)*cj5*gclwh6_4*npz*rxp1_2))+(((0.1401930041)*cj5*gclwh14_14*r20*rxp2_2))+(((-0.0074858)*gclwh8_4*pp*r21*sj5))+(((0.02)*cj5*gclwh10_4*pp*rxp2_2))+(((0.002799860082)*gclwh4_4*npz*r22*(sj5*sj5)))+(((-2.0)*cj5*gclwh14_14*npx*pz*rxp2_2))+(((-0.05165202)*gclwh10_3*rxp2_2*sj5))+(((-0.05165202)*cj5*gclwh12_3*rxp0_2))+(((2.0)*gclwh8_14*npy*pz*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh14_4*npx*pp*pz))+(((-0.00138)*gclwh14_3*rxp1_2*sj5))+(((-1.0)*gclwh4_4*r22*sj5*(pp*pp)))+(((2.0)*cj5*gclwh12_14*npy*pz*rxp2_2))+(((-0.1399930041)*cj5*gclwh4_8*sj5*(r22*r22)))+(((-2.0)*gclwh8_10*npy*npz*pz*(cj5*cj5)))+(((-0.02)*gclwh12_4*pp*rxp0_2*sj5))+(((-0.069)*cj5*gclwh8_3*pp*r21))+(((-0.011057022233367)*gclwh12_10*r21))+(((0.04)*gclwh14_4*npx*npz*pz*sj5))+(((-0.00138)*gclwh4_3*pz))+(((-0.74858)*gclwh10_4*pp*rxp2_2*sj5))+(((2.0)*cj5*gclwh6_4*npx*pp*pz))+(((0.069)*gclwh14_3*pp*r20))+(((-0.0005165202)*gclwh6_3*r20*sj5))+(((-0.04)*cj5*gclwh6_4*npx*npz*pz*sj5))+(((-0.05165202)*cj5*gclwh14_3*rxp1_2))+(((-0.052472839504589)*cj5*gclwh12_3*r21*r22))+(((-0.069)*gclwh4_3*pp*r22*sj5))+(((-0.2801860082)*gclwh12_3*r22*rxp0_2*(cj5*cj5)))+(((-0.00036050884955666)*gclwh8_4*r21*sj5))+(((-0.0074858)*gclwh8_3*r22*rxp0_2*sj5))+(((-0.2799860082)*cj5*gclwh10_3*r22*rxp2_2*sj5))+(((-0.01)*cj5*gclwh6_3*pp*r20*r22*sj5))+(((0.15774)*cj5*gclwh6_10*npx*pz))+(((0.02)*gclwh4_3*(pz*pz)))+(((0.138)*cj5*gclwh6_3*npx*pz))+(((0.05165202)*gclwh6_3*rxp1_2))+(((0.001401930041)*gclwh14_3*r20*r22*sj5))+(((-0.37429)*gclwh6_3*pp*r20*r22*(cj5*cj5)))+(((1.49716)*cj5*gclwh14_4*npx*npz*pz))+(((-1.0)*cj5*gclwh4_8*pp*sj5*(r22*r22)))+(((2.0)*gclwh6_14*npx*pz*rxp2_2*(cj5*cj5)))+(((0.02)*gclwh12_3*pz*rxp0_2*sj5))+(((0.2801860082)*cj5*gclwh6_3*r22*rxp1_2))+(((-0.002803860082)*gclwh14_4*npz*r20*sj5))+(((-0.02)*gclwh14_3*npx*pz*r22*sj5))+(((-0.1399930041)*gclwh8_14*r21*rxp2_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh4_3*npz*pz*r22*sj5))+(((-0.74858)*gclwh14_14*rxp1_2*rxp2_2*(cj5*cj5)))+(((-0.0002)*gclwh14_3*r22*rxp1_2*(sj5*sj5)))+(((-0.052397981504589)*gclwh8_3*r21*r22*(cj5*cj5)))+(((-0.74858)*cj5*gclwh6_10*npz*rxp1_2))+(((-2.0)*gclwh4_3*npz*sj5*(pz*pz)))+(((2.0)*cj5*gclwh4_8*npz*pz*r22*sj5))+(((-0.00674192696225811)*gclwh4_4*r22*sj5))+(((-0.036050884955666)*gclwh8_4*rxp0_2))+(((0.0074858)*cj5*gclwh4_4*pp*r22))+(((0.5603720164)*cj5*gclwh8_4*npz*rxp0_2))+(((-0.000590405046)*gclwh6_10*r20*sj5))+(((-2.0)*gclwh12_3*npy*(pz*pz)))+((gclwh14_4*r20*(pp*pp)))+((cj5*gclwh12_10*npz*pp*r21))+(((0.0963180554)*cj5*gclwh8_4*npy*pz))+(((-0.04)*cj5*gclwh8_4*npy*npz*pz*sj5))+(((-0.02)*gclwh4_4*pp*pz))+(((0.02)*gclwh4_4*npz*pp*r22*(sj5*sj5)))+(((0.02)*gclwh10_14*(cj5*cj5)*(rxp2_2*rxp2_2)))+(((0.1401930041)*cj5*gclwh12_10*npz*r21))+(((0.74858)*cj5*gclwh12_4*npz*pp*r21))+(((0.0149716)*gclwh8_4*npz*rxp0_2*sj5))+(((0.0074858)*gclwh10_3*r22*rxp2_2*(cj5*cj5)))+(((-1.0)*gclwh8_8*pp*r21*r22*(cj5*cj5)))+(((0.0074858)*gclwh4_8*(cj5*cj5)*(r22*r22)))+(((-0.1401930041)*cj5*gclwh12_14*r21*rxp2_2))+(((-0.069)*cj5*gclwh6_3*pp*r20))+(((-0.04)*gclwh12_4*npy*npz*pz*sj5))+(((-0.07887)*cj5*gclwh8_10*pp*r21))+(((-0.01)*cj5*gclwh8_3*pp*r21*r22*sj5))+(((-0.0590405046)*gclwh8_10*rxp0_2))+(((-1.0)*cj5*gclwh12_14*pp*r21*rxp2_2))+(((0.74858)*gclwh6_4*npz*pp*r20*(cj5*cj5)))+(((-0.052397981504589)*gclwh6_3*r20*r22*(cj5*cj5)))+(((-0.1401930041)*cj5*gclwh14_10*npz*r20))+(((0.0074858)*gclwh8_3*pz*r21*sj5))+(((0.02)*cj5*gclwh8_3*npy*pz*r22*sj5))+(((-0.1881520318)*cj5*gclwh8_4*pp*r21))+(((-0.05165202)*gclwh8_3*rxp0_2))+(((0.1399930041)*gclwh6_10*npz*r20*(cj5*cj5)))+(((-2.0)*cj5*gclwh6_3*npx*(pz*pz)))+(((2.0)*gclwh4_4*npz*pp*pz*sj5))+(((-0.1399930041)*gclwh6_14*r20*rxp2_2*(cj5*cj5)))+(((0.02)*gclwh4_3*npz*pz*r22*(sj5*sj5)))+(((-0.02)*cj5*gclwh14_14*rxp1_2*rxp2_2*sj5))+(((0.07887)*gclwh14_10*pp*r20))+(((-0.0005165202)*gclwh8_3*r21*sj5))+((gclwh6_10*npz*pp*r20*(cj5*cj5)))+(((-0.036050884955666)*cj5*gclwh12_4*rxp0_2))+(((0.74858)*cj5*gclwh10_10*npz*rxp2_2*sj5))+(((-0.00138)*gclwh12_3*rxp0_2*sj5))+(((2.0)*cj5*gclwh8_4*npy*pp*pz))+(((0.15774)*cj5*gclwh8_10*npy*pz))+(((-0.02)*cj5*gclwh10_3*pz*rxp2_2))+(((-0.069)*gclwh12_3*pp*r21))+(((0.5603720164)*gclwh14_4*npz*rxp1_2*(cj5*cj5)))+(((-0.74858)*cj5*gclwh14_3*npx*pz*r22))+(((-0.00036050884955666)*gclwh6_4*r20*sj5))+(((0.000963180554)*cj5*gclwh10_4*rxp2_2))+(((-0.74858)*gclwh8_4*pp*rxp0_2))+(((-0.01)*gclwh4_3*pp*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh8_8*npy*pz*r22*(cj5*cj5)))+(((0.01)*gclwh14_3*pp*r20*r22*sj5))+(((-0.004201790123)*cj5*gclwh8_3*r21*r22*sj5))+(((0.008403580246)*cj5*gclwh6_4*npz*r20*sj5))+(((0.0074858)*cj5*gclwh8_10*npz*r21*sj5))+(((-0.74858)*cj5*gclwh12_4*pp*rxp0_2))+(((0.74858)*cj5*gclwh6_14*rxp1_2*rxp2_2))+((gclwh12_3*pp*pz*r21))+(((0.5599720164)*cj5*gclwh10_4*npz*rxp2_2*sj5))+(((0.0590405046)*gclwh6_10*rxp1_2))+(((-0.74858)*cj5*gclwh14_4*pp*rxp1_2))+(((0.02)*cj5*gclwh8_4*npz*pp*r21*sj5))+(((-0.138)*gclwh14_3*npx*pz))+(((2.0)*cj5*gclwh12_8*npy*pz*r22))+(((0.02)*gclwh12_3*npy*pz*r22*sj5))+(((-0.1401930041)*cj5*gclwh12_8*r21*r22))+((cj5*gclwh14_14*pp*r20*rxp2_2))+(((-2.0)*gclwh6_10*npx*npz*pz*(cj5*cj5)))+(((-0.0096595172829)*gclwh4_3*r22*sj5))+(((0.0149716)*gclwh10_4*npz*rxp2_2*(sj5*sj5)))+(((-0.0074858)*cj5*gclwh6_8*r20*r22*sj5))+(((-0.000590405046)*gclwh8_10*r21*sj5))+(((-1.0)*cj5*gclwh14_10*npz*pp*r20))+(((0.0004)*gclwh14_4*npz*rxp1_2*(sj5*sj5)))+(((0.15774)*gclwh12_10*npy*pz))+(((0.74858)*gclwh14_10*npz*rxp1_2*(cj5*cj5)))+(((0.0963180554)*gclwh12_4*npy*pz))+(((-0.1881520318)*gclwh4_4*pp*r22*sj5))+(((-0.005603720164)*gclwh4_4*npz*r22*(cj5*cj5)))+(((-0.02)*cj5*gclwh12_8*r22*rxp0_2*sj5))+(((0.0096733172829)*gclwh14_3*r20))+(((0.74858)*cj5*gclwh12_3*npy*pz*r22))+(((-2.0)*cj5*gclwh12_10*npy*npz*pz))+(((-0.02)*gclwh14_4*npz*pp*r20*sj5))+(((0.0074858)*gclwh6_3*r22*rxp1_2*sj5))+(((0.138)*cj5*gclwh8_3*npy*pz))+(((0.104945679009178)*cj5*gclwh12_4*npz*r21))+(((0.02)*gclwh12_4*npz*pp*r21*sj5))+(((2.0)*gclwh12_4*npy*pp*pz))+(((0.0004)*gclwh12_4*npz*rxp0_2*(sj5*sj5)))+(((-0.0590405046)*gclwh10_10*rxp2_2*sj5))+(((-0.74858)*cj5*gclwh10_14*sj5*(rxp2_2*rxp2_2)))+(((0.0299432)*cj5*gclwh12_4*npz*rxp0_2*sj5))+(((0.0299432)*cj5*gclwh14_4*npz*rxp1_2*sj5))+(((-2.0)*cj5*gclwh8_3*npy*(pz*pz)))+(((-0.74858)*cj5*gclwh10_8*r22*rxp2_2*sj5))+(((-1.0)*cj5*gclwh12_8*pp*r21*r22))+(((2.0)*cj5*gclwh14_10*npx*npz*pz))+(((-0.004201790123)*cj5*gclwh6_3*r20*r22*sj5))+(((-0.0015774)*gclwh12_10*rxp0_2*sj5))+(((-0.2801860082)*cj5*gclwh8_3*r22*rxp0_2))+(((0.104646247009178)*cj5*gclwh4_4*npz*r22*sj5))+(((0.0074858)*cj5*gclwh6_10*npz*r20*sj5))+(((-0.02)*gclwh10_10*npz*rxp2_2*(cj5*cj5)))+(((-0.00674192696225811)*cj5*gclwh6_4*r20))+(((-0.37429)*cj5*gclwh4_3*pp*sj5*(r22*r22)))+(((-0.74858)*cj5*gclwh14_4*npz*pp*r20))+((gclwh4_3*pp*pz*r22*sj5))+(((-0.15774)*gclwh14_10*npx*pz))+((cj5*gclwh8_3*pp*pz*r21))+(((0.00675155876779811)*gclwh14_4*r20))+(((0.008403580246)*cj5*gclwh8_4*npz*r21*sj5))+(((0.104795963009178)*gclwh8_4*npz*r21*(cj5*cj5)))+(((-0.1399930041)*gclwh6_8*r20*r22*(cj5*cj5)))+(((-0.0149716)*cj5*gclwh12_3*r22*rxp0_2*sj5))+(((-1.0)*cj5*gclwh8_4*r21*(pp*pp)))+(((0.00138)*cj5*gclwh10_3*rxp2_2))+(((0.104795963009178)*gclwh6_4*npz*r20*(cj5*cj5)))+(((2.0)*gclwh14_3*npx*(pz*pz)))+(((-0.0149716)*gclwh6_4*npz*rxp1_2*sj5))+(((0.0963180554)*cj5*gclwh6_4*npx*pz))+(((-0.0149716)*cj5*gclwh14_3*r22*rxp1_2*sj5))+(((0.74858)*cj5*gclwh14_3*pz*rxp1_2))+(((-7.4858e-5)*gclwh6_3*r20*r22*(sj5*sj5)))+(((0.00036050884955666)*cj5*gclwh4_4*r22))+(((-0.74858)*gclwh12_14*rxp0_2*rxp2_2*(cj5*cj5)))+(((-0.0096595172829)*cj5*gclwh8_3*r21))+(((0.0005165202)*cj5*gclwh4_3*r22))+(((-0.02)*cj5*gclwh12_14*rxp0_2*rxp2_2*sj5))+(((-0.0963180554)*gclwh14_4*npx*pz))+(((-0.07887)*cj5*gclwh6_10*pp*r20))+(((-0.07887)*gclwh12_10*pp*r21))+(((-0.1883520318)*gclwh12_4*pp*r21))+(((0.1399930041)*cj5*gclwh6_3*pz*r20))+(((-0.1401930041)*gclwh14_3*pz*r20))+(((-0.000963180554)*gclwh12_4*rxp0_2*sj5))+(((-0.1881520318)*cj5*gclwh6_4*pp*r20))+(((0.74858)*cj5*gclwh4_4*npz*pp*r22*sj5))+(((0.0015774)*cj5*gclwh10_10*rxp2_2))+(((-0.0096733172829)*gclwh12_3*r21))+(((0.02)*gclwh14_3*pz*rxp1_2*sj5))+(((0.1401930041)*cj5*gclwh14_8*r20*r22))+(((-0.036050884955666)*gclwh10_4*rxp2_2*sj5))+(((-1.49716)*gclwh6_4*npx*npz*pz*(cj5*cj5)))+(((-1.0)*cj5*gclwh6_4*r20*(pp*pp)))+(((0.0967180554)*gclwh4_4*npz*pz*sj5))+(((-0.74858)*cj5*gclwh8_14*rxp0_2*rxp2_2))+(((-7.4858e-5)*gclwh8_3*r21*r22*(sj5*sj5)))+(((-1.0)*gclwh6_8*pp*r20*r22*(cj5*cj5)))+(((-0.104945679009178)*cj5*gclwh14_4*npz*r20))+(((0.02)*gclwh10_8*r22*rxp2_2*(cj5*cj5)))+(((-0.74858)*gclwh12_8*r22*rxp0_2*(cj5*cj5)))+(((0.000149716)*gclwh6_4*npz*r20*(sj5*sj5)))+(((-0.37429)*cj5*gclwh12_3*pp*r21*r22))+(((-0.000963180554)*gclwh14_4*rxp1_2*sj5))+(((-0.00674192696225811)*cj5*gclwh8_4*r21))+(((-0.011041248233367)*cj5*gclwh6_10*r20))+(((0.002801860082)*gclwh4_3*(cj5*cj5)*(r22*r22)))+(((-0.74858)*cj5*gclwh8_8*r22*rxp0_2))+(((0.74858)*gclwh10_3*pz*rxp2_2*sj5))+(((-0.0590405046)*cj5*gclwh12_10*rxp0_2))+(((0.052472839504589)*cj5*gclwh14_3*r20*r22))+(((-0.0096595172829)*cj5*gclwh6_3*r20))+(((2.0)*gclwh6_8*npx*pz*r22*(cj5*cj5)))+(((-2.0)*cj5*gclwh14_8*npx*pz*r22))+(((0.1883520318)*gclwh14_4*pp*r20))+(((-0.0002)*gclwh12_3*r22*rxp0_2*(sj5*sj5)))+(((0.74858)*gclwh6_4*pp*rxp1_2))+(((0.036050884955666)*gclwh6_4*rxp1_2))+(((-0.0074858)*gclwh6_4*pp*r20*sj5))+(((-1.49716)*gclwh8_4*npy*npz*pz*(cj5*cj5))));
IkReal x516=(gclwh12_14*r21);
IkReal x517=((0.138)*pp);
IkReal x518=(gclwh4_2*pz);
IkReal x519=(gclwh14_14*r20);
IkReal x520=(gclwh12_2*rxp0_2);
IkReal x521=((0.04)*sj5);
IkReal x522=(cj5*gclwh6_14);
IkReal x523=((2.0)*pp);
IkReal x524=((1.49716)*cj5);
IkReal x525=((0.59084)*pp);
IkReal x526=(gclwh12_14*rxp0_2);
IkReal x527=((0.4422910072)*cj5);
IkReal x528=(npy*pz);
IkReal x529=(gclwh12_2*r21);
IkReal x530=(r21*sj5);
IkReal x531=(cj5*gclwh6_2);
IkReal x532=(cj5*gclwh8_14);
IkReal x533=(gclwh10_2*rxp2_2);
IkReal x534=(npx*pz);
IkReal x535=(gclwh6_14*rxp1_2);
IkReal x536=((0.00276)*sj5);
IkReal x537=(gclwh14_14*rxp1_2);
IkReal x538=(gclwh14_2*r20);
IkReal x539=(gclwh14_2*rxp1_2);
IkReal x540=(gclwh8_14*rxp0_2);
IkReal x541=((0.0118168)*sj5);
IkReal x542=((0.10330404)*cj5);
IkReal x543=((1.18168)*x534);
IkReal x544=(r21*x532);
IkReal x545=(gclwh10_14*rxp2_2*sj5);
IkReal x546=(gclwh4_2*r22*sj5);
IkReal x547=(cj5*gclwh10_14*rxp2_2);
IkReal x548=(cj5*gclwh8_2*r21);
IkReal x549=(gclwh6_14*r20*sj5);
op[50]=((0.1840679528)+((r20*x522*x525))+(((0.2799860082)*r20*x531))+(((0.04)*x518))+(((-4.0)*gclwh12_2*x528))+(((0.2803860082)*x529))+((x526*x541))+(((0.004422910072)*gclwh8_14*x530))+(((-0.2803860082)*x538))+(((-0.082831634542444)*x519))+(((-1.0)*x523*x538))+(((0.0149716)*gclwh6_2*r20*sj5))+((r20*x523*x531))+((x526*x527))+(((4.0)*gclwh14_2*x534))+((x516*x525))+(((-0.4422910072)*x535))+(((0.4422910072)*x540))+(((0.4422910072)*x545))+(((-0.0118168)*x547))+((x525*x544))+((x521*x539))+((x537*x541))+(((0.082831634542444)*x516))+(((-1.49716)*gclwh6_2*rxp1_2))+(((-0.0149716)*cj5*gclwh4_2*r22))+((x520*x521))+((x520*x524))+((x523*x546))+((x523*x548))+((x524*x539))+(((0.004422910072)*x549))+((x523*x529))+((gclwh14_14*x543))+(((0.082713466542444)*x544))+(((1.49716)*sj5*x533))+(((0.2799860082)*x546))+(((0.2799860082)*x548))+(((0.082713466542444)*r20*x522))+((x527*x537))+(((-0.04)*cj5*x533))+(((-4.0)*cj5*gclwh8_2*x528))+(((-1.18168)*x528*x532))+(((-1.0)*x522*x543))+(((-1.18168)*gclwh12_14*x528))+(((-4.0)*npz*sj5*x518))+(((-1.0)*x519*x525))+(((-4.0)*x531*x534))+(((1.49716)*gclwh8_2*rxp0_2))+(((0.0149716)*gclwh8_2*x530)));
op[51]=((((0.10330404)*x545))+(((0.10330404)*x540))+(((0.0193190345658)*x544))+((x526*x542))+((x526*x536))+(((0.0010330404)*x549))+((r20*x517*x522))+((x536*x537))+(((-1.0)*x517*x519))+((x517*x544))+(((0.0010330404)*gclwh8_14*x530))+((x537*x542))+((x516*x517))+(((0.0193466345658)*x516))+(((-0.276)*gclwh12_14*x528))+(((0.276)*gclwh14_14*x534))+(((-0.00276)*x547))+(((-0.0193466345658)*x519))+(((-0.276)*x522*x534))+(((-0.10330404)*x535))+(((-0.276)*x528*x532))+(((0.0193190345658)*r20*x522)));
op[52]=((((-0.59084)*gclwh14_12*npx*pz))+(((-1.0)*cj5*gclwh8_8*pp*r21))+(((-0.0096595172829)*cj5*gclwh8_10*r21))+(((2.0)*cj5*gclwh6_8*npx*pz))+(((2.0)*gclwh4_8*npz*pz*sj5))+(((-0.74858)*cj5*gclwh14_8*rxp1_2))+(((-0.0096733172829)*gclwh12_10*r21))+(((-0.74858)*cj5*gclwh12_8*rxp0_2))+(((0.138)*gclwh12_10*npy*pz))+(((-0.29542)*cj5*gclwh8_12*pp*r21))+(((-0.1399930041)*gclwh4_8*r22*sj5))+(((-0.002211455036)*gclwh8_12*r21*sj5))+(((-0.29542)*cj5*gclwh6_12*pp*r20))+(((-0.1399930041)*cj5*gclwh6_8*r20))+(((-0.069)*gclwh12_10*pp*r21))+(((-0.05165202)*gclwh8_10*rxp0_2))+(((-0.2211455036)*cj5*gclwh14_12*rxp1_2))+(((0.2211455036)*gclwh6_12*rxp1_2))+(((-0.2211455036)*gclwh10_12*rxp2_2*sj5))+(((-0.74858)*gclwh10_8*rxp2_2*sj5))+(((-0.0096595172829)*cj5*gclwh6_10*r20))+(((-0.0059084)*gclwh14_12*rxp1_2*sj5))+(((-0.0005165202)*gclwh6_10*r20*sj5))+(((-0.0059084)*gclwh4_12*pz))+(((-0.29542)*gclwh4_12*pp*r22*sj5))+(((-1.0)*gclwh4_8*pp*r22*sj5))+(((-0.05165202)*cj5*gclwh12_10*rxp0_2))+(((-0.05165202)*gclwh10_10*rxp2_2*sj5))+(((-1.0)*gclwh12_8*pp*r21))+(((-0.29542)*gclwh12_12*pp*r21))+(((-0.2211455036)*cj5*gclwh12_12*rxp0_2))+(((-1.0)*cj5*gclwh6_8*pp*r20))+(((2.0)*gclwh12_8*npy*pz))+(((0.05165202)*gclwh6_10*rxp1_2))+(((-0.041356733271222)*cj5*gclwh8_12*r21))+((gclwh14_8*pp*r20))+(((-0.041356733271222)*cj5*gclwh6_12*r20))+(((0.59084)*cj5*gclwh8_12*npy*pz))+(((-0.2211455036)*gclwh8_12*rxp0_2))+(((-2.0)*gclwh14_8*npx*pz))+(((0.138)*cj5*gclwh8_10*npy*pz))+(((-0.00138)*gclwh12_10*rxp0_2*sj5))+(((-0.069)*cj5*gclwh8_10*pp*r21))+(((-0.02)*gclwh14_8*rxp1_2*sj5))+(((-0.041356733271222)*gclwh4_12*r22*sj5))+(((0.59084)*gclwh4_12*npz*pz*sj5))+(((-0.069)*cj5*gclwh6_10*pp*r20))+(((-0.1399930041)*cj5*gclwh8_8*r21))+(((0.00138)*cj5*gclwh10_10*rxp2_2))+(((-0.041415817271222)*gclwh12_12*r21))+(((-0.0005165202)*gclwh8_10*r21*sj5))+(((0.1401930041)*gclwh14_8*r20))+(((0.0059084)*cj5*gclwh10_12*rxp2_2))+(((0.59084)*cj5*gclwh6_12*npx*pz))+(((-0.0059084)*gclwh12_12*rxp0_2*sj5))+(((0.069)*gclwh14_10*pp*r20))+(((2.0)*cj5*gclwh8_8*npy*pz))+(((0.0096733172829)*gclwh14_10*r20))+(((-0.74858)*gclwh8_8*rxp0_2))+(((0.74858)*gclwh6_8*rxp1_2))+(((-0.05165202)*cj5*gclwh14_10*rxp1_2))+(((0.02)*cj5*gclwh10_8*rxp2_2))+(((-0.02)*gclwh4_8*pz))+(((-0.1401930041)*gclwh12_8*r21))+(((0.138)*cj5*gclwh6_10*npx*pz))+(((0.29542)*gclwh14_12*pp*r20))+(((0.041415817271222)*gclwh14_12*r20))+(((-0.02)*gclwh12_8*rxp0_2*sj5))+(((-0.138)*gclwh14_10*npx*pz))+(((-0.0074858)*gclwh8_8*r21*sj5))+(((-0.0074858)*gclwh6_8*r20*sj5))+(((0.59084)*gclwh12_12*npy*pz))+(((-0.002211455036)*gclwh6_12*r20*sj5))+(((-0.00138)*gclwh14_10*rxp1_2*sj5))+(((0.002211455036)*cj5*gclwh4_12*r22))+(((0.0074858)*cj5*gclwh4_8*r22)));
op[53]=((((-0.74858)*gclwh14_8*r22*rxp1_2*(cj5*cj5)))+(((0.002803860082)*gclwh12_4*npz*r21*sj5))+(((-0.04)*gclwh4_4*pz*(npz*npz)*(sj5*sj5)))+(((0.74858)*cj5*gclwh8_10*npz*rxp0_2))+((cj5*gclwh14_8*pp*r20*r22))+(((0.0074858)*gclwh6_3*pz*r20*sj5))+(((0.74858)*cj5*gclwh12_3*pz*rxp0_2))+(((-0.052323123504589)*cj5*gclwh4_3*sj5*(r22*r22)))+(((-1.0)*gclwh12_4*r21*(pp*pp)))+(((0.5603720164)*gclwh12_4*npz*rxp0_2*(cj5*cj5)))+(((-0.37429)*gclwh8_3*pp*r21*r22*(cj5*cj5)))+(((0.1397930041)*gclwh4_3*pz*r22*sj5))+(((-0.0149716)*cj5*gclwh4_3*pz*r22))+(((-0.01)*gclwh12_3*pp*r21*r22*sj5))+(((0.74858)*gclwh8_3*pz*rxp0_2))+(((0.1401930041)*gclwh12_3*pz*r21))+((cj5*gclwh6_3*pp*pz*r20))+(((0.05165202)*gclwh10_3*rxp2_2*sj5))+(((-0.0074858)*cj5*gclwh8_8*r21*r22*sj5))+(((0.011057022233367)*gclwh14_10*r20))+(((-0.011041248233367)*cj5*gclwh8_10*r21))+(((-0.00675155876779811)*gclwh12_4*r21))+(((0.1399930041)*gclwh8_10*npz*r21*(cj5*cj5)))+(((-0.0149716)*gclwh10_4*npz*rxp2_2*(cj5*cj5)))+(((0.02)*cj5*gclwh6_3*npx*pz*r22*sj5))+(((0.37429)*cj5*gclwh14_3*pp*r20*r22))+(((-0.0074858)*cj5*gclwh6_14*r20*rxp2_2*sj5))+(((-0.1399930041)*gclwh8_8*r21*r22*(cj5*cj5)))+(((-1.0)*gclwh8_14*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.2801860082)*gclwh14_3*r22*rxp1_2*(cj5*cj5)))+(((-0.001399930041)*gclwh4_3*(r22*r22)*(sj5*sj5)))+(((-1.49716)*cj5*gclwh4_4*pz*sj5*(npz*npz)))+(((0.74858)*gclwh8_3*npy*pz*r22*(cj5*cj5)))+(((-0.036050884955666)*cj5*gclwh14_4*rxp1_2))+(((0.0096595172829)*cj5*gclwh8_3*r21))+(((0.02)*cj5*gclwh6_4*npz*pp*r20*sj5))+(((-1.49716)*cj5*gclwh12_4*npy*npz*pz))+(((-0.02)*gclwh14_4*pp*rxp1_2*sj5))+(((-1.0)*gclwh6_14*pp*r20*rxp2_2*(cj5*cj5)))+(((0.000149716)*gclwh8_4*npz*r21*(sj5*sj5)))+(((0.74858)*cj5*gclwh6_8*r22*rxp1_2))+(((0.74858)*gclwh8_4*npz*pp*r21*(cj5*cj5)))+(((-0.0015774)*gclwh14_10*rxp1_2*sj5))+(((0.02)*cj5*gclwh14_10*npz*rxp1_2*sj5))+(((0.069)*cj5*gclwh6_3*pp*r20))+(((-0.02)*cj5*gclwh4_8*pz*r22))+(((0.74858)*gclwh6_3*npx*pz*r22*(cj5*cj5)))+(((0.74858)*gclwh12_10*npz*rxp0_2*(cj5*cj5)))+(((-0.001401930041)*gclwh12_3*r21*r22*sj5))+(((0.1399930041)*cj5*gclwh8_3*pz*r21))+(((-0.74858)*gclwh6_3*pz*rxp1_2))+(((0.138)*gclwh14_3*npx*pz))+(((-1.0)*gclwh14_3*pp*pz*r20))+(((-0.0074858)*cj5*gclwh8_14*r21*rxp2_2*sj5))+(((-0.0590405046)*cj5*gclwh14_10*rxp1_2))+(((-0.02)*cj5*gclwh14_8*r22*rxp1_2*sj5))+(((0.02)*cj5*gclwh12_10*npz*rxp0_2*sj5))+(((-0.0074858)*gclwh10_3*r22*rxp2_2*(sj5*sj5)))+((gclwh8_10*npz*pp*r21*(cj5*cj5)))+(((-0.000963180554)*gclwh4_4*pz))+(((0.0149716)*cj5*gclwh4_4*npz*pz))+(((-0.5603720164)*cj5*gclwh6_4*npz*rxp1_2))+(((0.1401930041)*cj5*gclwh14_14*r20*rxp2_2))+(((-0.0074858)*gclwh8_4*pp*r21*sj5))+(((0.02)*cj5*gclwh10_4*pp*rxp2_2))+(((0.002799860082)*gclwh4_4*npz*r22*(sj5*sj5)))+(((-2.0)*cj5*gclwh14_14*npx*pz*rxp2_2))+(((2.0)*gclwh8_14*npy*pz*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh14_4*npx*pp*pz))+(((-1.0)*gclwh4_4*r22*sj5*(pp*pp)))+(((2.0)*cj5*gclwh12_14*npy*pz*rxp2_2))+(((-0.1399930041)*cj5*gclwh4_8*sj5*(r22*r22)))+(((-2.0)*gclwh8_10*npy*npz*pz*(cj5*cj5)))+(((0.05165202)*gclwh8_3*rxp0_2))+(((-0.02)*gclwh12_4*pp*rxp0_2*sj5))+(((-0.011057022233367)*gclwh12_10*r21))+(((0.04)*gclwh14_4*npx*npz*pz*sj5))+(((-0.74858)*gclwh10_4*pp*rxp2_2*sj5))+(((2.0)*cj5*gclwh6_4*npx*pp*pz))+(((-0.04)*cj5*gclwh6_4*npx*npz*pz*sj5))+(((-0.052472839504589)*cj5*gclwh12_3*r21*r22))+(((-0.2801860082)*gclwh12_3*r22*rxp0_2*(cj5*cj5)))+(((-0.00036050884955666)*gclwh8_4*r21*sj5))+(((-0.0074858)*gclwh8_3*r22*rxp0_2*sj5))+(((0.0096595172829)*gclwh4_3*r22*sj5))+(((-0.2799860082)*cj5*gclwh10_3*r22*rxp2_2*sj5))+(((-0.01)*cj5*gclwh6_3*pp*r20*r22*sj5))+(((0.15774)*cj5*gclwh6_10*npx*pz))+(((0.02)*gclwh4_3*(pz*pz)))+(((0.001401930041)*gclwh14_3*r20*r22*sj5))+(((-0.37429)*gclwh6_3*pp*r20*r22*(cj5*cj5)))+(((1.49716)*cj5*gclwh14_4*npx*npz*pz))+(((-1.0)*cj5*gclwh4_8*pp*sj5*(r22*r22)))+(((2.0)*gclwh6_14*npx*pz*rxp2_2*(cj5*cj5)))+(((0.02)*gclwh12_3*pz*rxp0_2*sj5))+(((0.2801860082)*cj5*gclwh6_3*r22*rxp1_2))+(((-0.002803860082)*gclwh14_4*npz*r20*sj5))+(((-0.02)*gclwh14_3*npx*pz*r22*sj5))+(((-0.1399930041)*gclwh8_14*r21*rxp2_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh4_3*npz*pz*r22*sj5))+(((-0.74858)*gclwh14_14*rxp1_2*rxp2_2*(cj5*cj5)))+(((0.00138)*gclwh14_3*rxp1_2*sj5))+(((-0.0002)*gclwh14_3*r22*rxp1_2*(sj5*sj5)))+(((-0.052397981504589)*gclwh8_3*r21*r22*(cj5*cj5)))+(((-0.74858)*cj5*gclwh6_10*npz*rxp1_2))+(((-2.0)*gclwh4_3*npz*sj5*(pz*pz)))+(((2.0)*cj5*gclwh4_8*npz*pz*r22*sj5))+(((-0.00674192696225811)*gclwh4_4*r22*sj5))+(((-0.036050884955666)*gclwh8_4*rxp0_2))+(((0.0074858)*cj5*gclwh4_4*pp*r22))+(((0.5603720164)*cj5*gclwh8_4*npz*rxp0_2))+(((-0.000590405046)*gclwh6_10*r20*sj5))+(((-2.0)*gclwh12_3*npy*(pz*pz)))+(((0.069)*cj5*gclwh8_3*pp*r21))+(((0.0005165202)*gclwh6_3*r20*sj5))+((gclwh14_4*r20*(pp*pp)))+((cj5*gclwh12_10*npz*pp*r21))+(((0.0963180554)*cj5*gclwh8_4*npy*pz))+(((-0.04)*cj5*gclwh8_4*npy*npz*pz*sj5))+(((-0.02)*gclwh4_4*pp*pz))+(((0.02)*gclwh4_4*npz*pp*r22*(sj5*sj5)))+(((0.02)*gclwh10_14*(cj5*cj5)*(rxp2_2*rxp2_2)))+(((0.1401930041)*cj5*gclwh12_10*npz*r21))+(((0.74858)*cj5*gclwh12_4*npz*pp*r21))+(((0.0149716)*gclwh8_4*npz*rxp0_2*sj5))+(((0.0074858)*gclwh10_3*r22*rxp2_2*(cj5*cj5)))+(((-1.0)*gclwh8_8*pp*r21*r22*(cj5*cj5)))+(((0.0074858)*gclwh4_8*(cj5*cj5)*(r22*r22)))+(((-0.1401930041)*cj5*gclwh12_14*r21*rxp2_2))+(((0.0096733172829)*gclwh12_3*r21))+(((-0.04)*gclwh12_4*npy*npz*pz*sj5))+(((-0.07887)*cj5*gclwh8_10*pp*r21))+(((-0.01)*cj5*gclwh8_3*pp*r21*r22*sj5))+(((-0.0590405046)*gclwh8_10*rxp0_2))+(((-1.0)*cj5*gclwh12_14*pp*r21*rxp2_2))+(((0.74858)*gclwh6_4*npz*pp*r20*(cj5*cj5)))+(((-0.052397981504589)*gclwh6_3*r20*r22*(cj5*cj5)))+(((-0.1401930041)*cj5*gclwh14_10*npz*r20))+(((0.0074858)*gclwh8_3*pz*r21*sj5))+(((0.02)*cj5*gclwh8_3*npy*pz*r22*sj5))+(((-0.1881520318)*cj5*gclwh8_4*pp*r21))+(((0.1399930041)*gclwh6_10*npz*r20*(cj5*cj5)))+(((-2.0)*cj5*gclwh6_3*npx*(pz*pz)))+(((2.0)*gclwh4_4*npz*pp*pz*sj5))+(((-0.1399930041)*gclwh6_14*r20*rxp2_2*(cj5*cj5)))+(((0.02)*gclwh4_3*npz*pz*r22*(sj5*sj5)))+(((-0.02)*cj5*gclwh14_14*rxp1_2*rxp2_2*sj5))+(((0.07887)*gclwh14_10*pp*r20))+((gclwh6_10*npz*pp*r20*(cj5*cj5)))+(((-0.036050884955666)*cj5*gclwh12_4*rxp0_2))+(((-0.069)*gclwh14_3*pp*r20))+(((0.74858)*cj5*gclwh10_10*npz*rxp2_2*sj5))+(((2.0)*cj5*gclwh8_4*npy*pp*pz))+(((0.15774)*cj5*gclwh8_10*npy*pz))+(((-0.02)*cj5*gclwh10_3*pz*rxp2_2))+(((0.0096595172829)*cj5*gclwh6_3*r20))+(((0.5603720164)*gclwh14_4*npz*rxp1_2*(cj5*cj5)))+(((-0.74858)*cj5*gclwh14_3*npx*pz*r22))+(((-0.00036050884955666)*gclwh6_4*r20*sj5))+(((0.000963180554)*cj5*gclwh10_4*rxp2_2))+(((0.05165202)*cj5*gclwh14_3*rxp1_2))+(((-0.74858)*gclwh8_4*pp*rxp0_2))+(((-0.01)*gclwh4_3*pp*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh8_8*npy*pz*r22*(cj5*cj5)))+(((0.01)*gclwh14_3*pp*r20*r22*sj5))+(((-0.004201790123)*cj5*gclwh8_3*r21*r22*sj5))+(((0.008403580246)*cj5*gclwh6_4*npz*r20*sj5))+(((0.0074858)*cj5*gclwh8_10*npz*r21*sj5))+(((-0.74858)*cj5*gclwh12_4*pp*rxp0_2))+(((0.74858)*cj5*gclwh6_14*rxp1_2*rxp2_2))+((gclwh12_3*pp*pz*r21))+(((0.5599720164)*cj5*gclwh10_4*npz*rxp2_2*sj5))+(((0.0590405046)*gclwh6_10*rxp1_2))+(((-0.74858)*cj5*gclwh14_4*pp*rxp1_2))+(((0.02)*cj5*gclwh8_4*npz*pp*r21*sj5))+(((2.0)*cj5*gclwh12_8*npy*pz*r22))+(((0.02)*gclwh12_3*npy*pz*r22*sj5))+(((-0.1401930041)*cj5*gclwh12_8*r21*r22))+((cj5*gclwh14_14*pp*r20*rxp2_2))+(((-2.0)*gclwh6_10*npx*npz*pz*(cj5*cj5)))+(((0.0149716)*gclwh10_4*npz*rxp2_2*(sj5*sj5)))+(((-0.0096733172829)*gclwh14_3*r20))+(((-0.0074858)*cj5*gclwh6_8*r20*r22*sj5))+(((-0.000590405046)*gclwh8_10*r21*sj5))+(((-1.0)*cj5*gclwh14_10*npz*pp*r20))+(((0.069)*gclwh12_3*pp*r21))+(((0.0004)*gclwh14_4*npz*rxp1_2*(sj5*sj5)))+(((0.15774)*gclwh12_10*npy*pz))+(((0.74858)*gclwh14_10*npz*rxp1_2*(cj5*cj5)))+(((-0.0005165202)*cj5*gclwh4_3*r22))+(((0.0963180554)*gclwh12_4*npy*pz))+(((-0.1881520318)*gclwh4_4*pp*r22*sj5))+(((-0.005603720164)*gclwh4_4*npz*r22*(cj5*cj5)))+(((-0.02)*cj5*gclwh12_8*r22*rxp0_2*sj5))+(((0.0005165202)*gclwh8_3*r21*sj5))+(((0.74858)*cj5*gclwh12_3*npy*pz*r22))+(((-2.0)*cj5*gclwh12_10*npy*npz*pz))+(((-0.02)*gclwh14_4*npz*pp*r20*sj5))+(((0.0074858)*gclwh6_3*r22*rxp1_2*sj5))+(((-0.138)*cj5*gclwh8_3*npy*pz))+(((0.104945679009178)*cj5*gclwh12_4*npz*r21))+(((0.02)*gclwh12_4*npz*pp*r21*sj5))+(((2.0)*gclwh12_4*npy*pp*pz))+(((0.0004)*gclwh12_4*npz*rxp0_2*(sj5*sj5)))+(((-0.0590405046)*gclwh10_10*rxp2_2*sj5))+(((-0.74858)*cj5*gclwh10_14*sj5*(rxp2_2*rxp2_2)))+(((0.0299432)*cj5*gclwh12_4*npz*rxp0_2*sj5))+(((0.0299432)*cj5*gclwh14_4*npz*rxp1_2*sj5))+(((-2.0)*cj5*gclwh8_3*npy*(pz*pz)))+(((-0.74858)*cj5*gclwh10_8*r22*rxp2_2*sj5))+(((-0.138)*gclwh4_3*npz*pz*sj5))+(((-1.0)*cj5*gclwh12_8*pp*r21*r22))+(((2.0)*cj5*gclwh14_10*npx*npz*pz))+(((-0.004201790123)*cj5*gclwh6_3*r20*r22*sj5))+(((-0.0015774)*gclwh12_10*rxp0_2*sj5))+(((-0.2801860082)*cj5*gclwh8_3*r22*rxp0_2))+(((0.05165202)*cj5*gclwh12_3*rxp0_2))+(((0.104646247009178)*cj5*gclwh4_4*npz*r22*sj5))+(((0.0074858)*cj5*gclwh6_10*npz*r20*sj5))+(((-0.00138)*cj5*gclwh10_3*rxp2_2))+(((-0.02)*gclwh10_10*npz*rxp2_2*(cj5*cj5)))+(((-0.00674192696225811)*cj5*gclwh6_4*r20))+(((-0.37429)*cj5*gclwh4_3*pp*sj5*(r22*r22)))+(((-0.138)*cj5*gclwh6_3*npx*pz))+(((-0.74858)*cj5*gclwh14_4*npz*pp*r20))+((gclwh4_3*pp*pz*r22*sj5))+(((-0.15774)*gclwh14_10*npx*pz))+((cj5*gclwh8_3*pp*pz*r21))+(((0.00675155876779811)*gclwh14_4*r20))+(((0.008403580246)*cj5*gclwh8_4*npz*r21*sj5))+(((0.104795963009178)*gclwh8_4*npz*r21*(cj5*cj5)))+(((-0.1399930041)*gclwh6_8*r20*r22*(cj5*cj5)))+(((-0.138)*gclwh12_3*npy*pz))+(((-0.0149716)*cj5*gclwh12_3*r22*rxp0_2*sj5))+(((-1.0)*cj5*gclwh8_4*r21*(pp*pp)))+(((0.00138)*gclwh12_3*rxp0_2*sj5))+(((0.104795963009178)*gclwh6_4*npz*r20*(cj5*cj5)))+(((2.0)*gclwh14_3*npx*(pz*pz)))+(((-0.0149716)*gclwh6_4*npz*rxp1_2*sj5))+(((0.00138)*gclwh4_3*pz))+(((0.0963180554)*cj5*gclwh6_4*npx*pz))+(((-0.0149716)*cj5*gclwh14_3*r22*rxp1_2*sj5))+(((0.74858)*cj5*gclwh14_3*pz*rxp1_2))+(((-7.4858e-5)*gclwh6_3*r20*r22*(sj5*sj5)))+(((0.00036050884955666)*cj5*gclwh4_4*r22))+(((0.069)*gclwh4_3*pp*r22*sj5))+(((-0.74858)*gclwh12_14*rxp0_2*rxp2_2*(cj5*cj5)))+(((-0.02)*cj5*gclwh12_14*rxp0_2*rxp2_2*sj5))+(((-0.0963180554)*gclwh14_4*npx*pz))+(((-0.07887)*cj5*gclwh6_10*pp*r20))+(((-0.07887)*gclwh12_10*pp*r21))+(((-0.1883520318)*gclwh12_4*pp*r21))+(((0.1399930041)*cj5*gclwh6_3*pz*r20))+(((-0.1401930041)*gclwh14_3*pz*r20))+(((-0.000963180554)*gclwh12_4*rxp0_2*sj5))+(((-0.1881520318)*cj5*gclwh6_4*pp*r20))+(((0.74858)*cj5*gclwh4_4*npz*pp*r22*sj5))+(((0.0015774)*cj5*gclwh10_10*rxp2_2))+(((0.02)*gclwh14_3*pz*rxp1_2*sj5))+(((0.1401930041)*cj5*gclwh14_8*r20*r22))+(((-0.036050884955666)*gclwh10_4*rxp2_2*sj5))+(((-1.49716)*gclwh6_4*npx*npz*pz*(cj5*cj5)))+(((-1.0)*cj5*gclwh6_4*r20*(pp*pp)))+(((0.0967180554)*gclwh4_4*npz*pz*sj5))+(((-0.74858)*cj5*gclwh8_14*rxp0_2*rxp2_2))+(((-7.4858e-5)*gclwh8_3*r21*r22*(sj5*sj5)))+(((-1.0)*gclwh6_8*pp*r20*r22*(cj5*cj5)))+(((-0.104945679009178)*cj5*gclwh14_4*npz*r20))+(((0.02)*gclwh10_8*r22*rxp2_2*(cj5*cj5)))+(((-0.74858)*gclwh12_8*r22*rxp0_2*(cj5*cj5)))+(((0.000149716)*gclwh6_4*npz*r20*(sj5*sj5)))+(((-0.37429)*cj5*gclwh12_3*pp*r21*r22))+(((-0.000963180554)*gclwh14_4*rxp1_2*sj5))+(((-0.00674192696225811)*cj5*gclwh8_4*r21))+(((-0.011041248233367)*cj5*gclwh6_10*r20))+(((0.002801860082)*gclwh4_3*(cj5*cj5)*(r22*r22)))+(((-0.74858)*cj5*gclwh8_8*r22*rxp0_2))+(((0.74858)*gclwh10_3*pz*rxp2_2*sj5))+(((-0.0590405046)*cj5*gclwh12_10*rxp0_2))+(((-0.05165202)*gclwh6_3*rxp1_2))+(((0.052472839504589)*cj5*gclwh14_3*r20*r22))+(((2.0)*gclwh6_8*npx*pz*r22*(cj5*cj5)))+(((-2.0)*cj5*gclwh14_8*npx*pz*r22))+(((0.1883520318)*gclwh14_4*pp*r20))+(((-0.0002)*gclwh12_3*r22*rxp0_2*(sj5*sj5)))+(((0.74858)*gclwh6_4*pp*rxp1_2))+(((0.036050884955666)*gclwh6_4*rxp1_2))+(((-0.0074858)*gclwh6_4*pp*r20*sj5))+(((-1.49716)*gclwh8_4*npy*npz*pz*(cj5*cj5))));
op[54]=((((0.02)*cj5*gclwh13_9*r22*rxp0_2*sj5))+(((-0.74858)*cj5*gclwh9_11*npz*rxp0_2))+(((0.2801860082)*cj5*gclwh7_0*r22*rxp1_2))+(((0.036050884955666)*gclwh7_1*rxp1_2))+(((0.1401930041)*gclwh13_0*pz*r21))+(((0.02)*gclwh11_11*npz*rxp2_2*(cj5*cj5)))+(((-1.49716)*gclwh7_1*npx*npz*pz*(cj5*cj5)))+(((-0.37429)*cj5*gclwh13_0*pp*r21*r22))+(((0.1399930041)*gclwh9_15*r21*rxp2_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh13_0*pz*rxp0_2))+(((-0.74858)*gclwh11_1*pp*rxp2_2*sj5))+(((-7.4858e-5)*gclwh7_0*r20*r22*(sj5*sj5)))+(((0.00675155876779811)*gclwh15_1*r20))+(((-0.66971)*gclwh15_11*pp*r20))+(((0.5013315118)*cj5*gclwh13_11*rxp0_2))+(((0.02)*cj5*gclwh7_0*npx*pz*r22*sj5))+(((0.005013315118)*gclwh9_11*r21*sj5))+(((-0.036050884955666)*cj5*gclwh13_1*rxp0_2))+(((0.74858)*cj5*gclwh11_9*r22*rxp2_2*sj5))+(((-7.4858e-5)*gclwh9_0*r21*r22*(sj5*sj5)))+(((2.0)*gclwh5_1*npz*pp*pz*sj5))+(((0.0149716)*gclwh11_1*npz*rxp2_2*(sj5*sj5)))+(((-0.0096595172829)*gclwh5_0*r22*sj5))+(((0.1399930041)*gclwh7_15*r20*rxp2_2*(cj5*cj5)))+(((-0.2799860082)*cj5*gclwh11_0*r22*rxp2_2*sj5))+(((0.02)*cj5*gclwh9_0*npy*pz*r22*sj5))+(((0.02)*gclwh5_0*(pz*pz)))+(((0.138)*gclwh13_0*npy*pz))+(((0.74858)*gclwh9_0*pz*rxp0_2))+(((0.74858)*gclwh15_9*r22*rxp1_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh13_0*npy*pz*r22))+(((-0.0005165202)*gclwh7_0*r20*sj5))+(((-0.138)*gclwh15_0*npx*pz))+(((-0.0074858)*gclwh7_1*pp*r20*sj5))+(((0.02)*cj5*gclwh13_15*rxp0_2*rxp2_2*sj5))+(((0.008403580246)*cj5*gclwh9_1*npz*r21*sj5))+(((-0.00674192696225811)*gclwh5_1*r22*sj5))+(((0.1401930041)*cj5*gclwh13_15*r21*rxp2_2))+(((-0.74858)*gclwh15_11*npz*rxp1_2*(cj5*cj5)))+(((-0.05165202)*cj5*gclwh15_0*rxp1_2))+(((0.0963180554)*gclwh13_1*npy*pz))+(((-0.05165202)*gclwh9_0*rxp0_2))+(((0.02)*cj5*gclwh11_1*pp*rxp2_2))+(((0.5603720164)*gclwh15_1*npz*rxp1_2*(cj5*cj5)))+(((-1.49716)*gclwh9_1*npy*npz*pz*(cj5*cj5)))+(((0.0149716)*gclwh9_1*npz*rxp0_2*sj5))+(((-0.0096595172829)*cj5*gclwh9_0*r21))+((gclwh15_1*r20*(pp*pp)))+(((0.0074858)*cj5*gclwh7_15*r20*rxp2_2*sj5))+(((-0.0074858)*gclwh9_1*pp*r21*sj5))+(((-0.069)*gclwh5_0*pp*r22*sj5))+(((0.002799860082)*gclwh5_1*npz*r22*(sj5*sj5)))+(((-0.104945679009178)*cj5*gclwh15_1*npz*r20))+(((-0.00674192696225811)*cj5*gclwh9_1*r21))+(((-1.33942)*cj5*gclwh9_11*npy*pz))+(((-0.04)*cj5*gclwh9_1*npy*npz*pz*sj5))+(((0.74858)*cj5*gclwh5_1*npz*pp*r22*sj5))+(((0.0074858)*cj5*gclwh5_1*pp*r22))+(((0.1399930041)*cj5*gclwh5_9*sj5*(r22*r22)))+(((-0.0149716)*gclwh7_1*npz*rxp1_2*sj5))+(((-0.052397981504589)*gclwh7_0*r20*r22*(cj5*cj5)))+(((0.138)*gclwh5_0*npz*pz*sj5))+(((0.0074858)*gclwh7_0*pz*r20*sj5))+(((-0.02)*gclwh15_0*npx*pz*r22*sj5))+(((-0.74858)*cj5*gclwh13_1*pp*rxp0_2))+(((0.138)*cj5*gclwh9_0*npy*pz))+(((0.0074858)*gclwh9_0*pz*r21*sj5))+(((2.0)*gclwh7_11*npx*npz*pz*(cj5*cj5)))+(((0.0096733172829)*gclwh15_0*r20))+(((-0.052472839504589)*cj5*gclwh13_0*r21*r22))+(((-1.33942)*cj5*gclwh7_11*npx*pz))+(((0.74858)*cj5*gclwh15_0*pz*rxp1_2))+(((0.02)*gclwh5_1*npz*pp*r22*(sj5*sj5)))+((cj5*gclwh7_0*pp*pz*r20))+(((-2.0)*cj5*gclwh9_0*npy*(pz*pz)))+(((-0.02)*gclwh5_1*pp*pz))+(((-2.0)*gclwh7_15*npx*pz*rxp2_2*(cj5*cj5)))+(((-0.001401930041)*gclwh13_0*r21*r22*sj5))+(((0.000149716)*gclwh7_1*npz*r20*(sj5*sj5)))+(((0.104945679009178)*cj5*gclwh13_1*npz*r21))+(((-0.0002)*gclwh13_0*r22*rxp0_2*(sj5*sj5)))+(((-0.1883520318)*gclwh13_1*pp*r21))+(((-0.74858)*cj5*gclwh7_15*rxp1_2*rxp2_2))+(((0.74858)*cj5*gclwh13_1*npz*pp*r21))+(((-0.1881520318)*gclwh5_1*pp*r22*sj5))+(((0.02)*cj5*gclwh5_9*pz*r22))+(((-0.01)*gclwh13_0*pp*r21*r22*sj5))+(((-1.0)*cj5*gclwh15_9*pp*r20*r22))+(((-0.0005165202)*gclwh9_0*r21*sj5))+(((0.74858)*gclwh7_1*npz*pp*r20*(cj5*cj5)))+(((-0.37429)*gclwh7_0*pp*r20*r22*(cj5*cj5)))+(((-0.00138)*gclwh13_0*rxp0_2*sj5))+(((-1.33942)*gclwh13_11*npy*pz))+(((-0.1881520318)*cj5*gclwh7_1*pp*r20))+(((0.093754714775811)*cj5*gclwh9_11*r21))+(((-0.0149716)*cj5*gclwh5_0*pz*r22))+((gclwh13_0*pp*pz*r21))+(((0.0299432)*cj5*gclwh15_1*npz*rxp1_2*sj5))+(((-0.01)*cj5*gclwh7_0*pp*r20*r22*sj5))+(((0.74858)*gclwh13_9*r22*rxp0_2*(cj5*cj5)))+(((-0.02)*cj5*gclwh11_0*pz*rxp2_2))+(((2.0)*cj5*gclwh9_1*npy*pp*pz))+(((0.01)*gclwh15_0*pp*r20*r22*sj5))+(((-0.0096595172829)*cj5*gclwh7_0*r20))+(((0.74858)*gclwh11_0*pz*rxp2_2*sj5))+(((-0.02)*cj5*gclwh13_11*npz*rxp0_2*sj5))+(((0.66971)*gclwh13_11*pp*r21))+(((2.0)*cj5*gclwh7_1*npx*pp*pz))+(((-2.0)*cj5*gclwh13_9*npy*pz*r22))+(((0.5013315118)*cj5*gclwh15_11*rxp1_2))+(((0.1883520318)*gclwh15_1*pp*r20))+(((0.1399930041)*gclwh9_9*r21*r22*(cj5*cj5)))+(((-1.0)*cj5*gclwh9_1*r21*(pp*pp)))+(((-0.069)*cj5*gclwh7_0*pp*r20))+(((-0.052397981504589)*gclwh9_0*r21*r22*(cj5*cj5)))+(((0.0963180554)*cj5*gclwh9_1*npy*pz))+(((0.1399930041)*cj5*gclwh9_0*pz*r21))+((gclwh5_0*pp*pz*r22*sj5))+(((0.069)*gclwh15_0*pp*r20))+(((-0.0133942)*cj5*gclwh11_11*rxp2_2))+(((-0.00138)*gclwh5_0*pz))+(((-0.0963180554)*gclwh15_1*npx*pz))+(((-0.04)*gclwh5_1*pz*(npz*npz)*(sj5*sj5)))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-1.49716)*cj5*gclwh5_1*pz*sj5*(npz*npz)))+((gclwh9_15*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.00675155876779811)*gclwh13_1*r21))+((cj5*gclwh13_15*pp*r21*rxp2_2))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((1.49716)*cj5*gclwh15_1*npx*npz*pz))+(((-0.052323123504589)*cj5*gclwh5_0*sj5*(r22*r22)))+(((-0.2801860082)*cj5*gclwh9_0*r22*rxp0_2))+(((0.05165202)*gclwh7_0*rxp1_2))+(((-0.1401930041)*cj5*gclwh13_11*npz*r21))+(((-0.1881520318)*cj5*gclwh9_1*pp*r21))+(((-0.0096733172829)*gclwh13_0*r21))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.1399930041)*gclwh7_11*npz*r20*(cj5*cj5)))+(((-0.004201790123)*cj5*gclwh9_0*r21*r22*sj5))+(((0.1399930041)*cj5*gclwh7_0*pz*r20))+(((-0.1401930041)*gclwh15_0*pz*r20))+(((0.5603720164)*cj5*gclwh9_1*npz*rxp0_2))+(((0.02)*gclwh13_0*pz*rxp0_2*sj5))+(((0.052472839504589)*cj5*gclwh15_0*r20*r22))+((gclwh7_15*pp*r20*rxp2_2*(cj5*cj5)))+(((-0.2801860082)*gclwh13_0*r22*rxp0_2*(cj5*cj5)))+(((-0.37429)*cj5*gclwh5_0*pp*sj5*(r22*r22)))+(((0.0963180554)*cj5*gclwh7_1*npx*pz))+(((0.1397930041)*gclwh5_0*pz*r22*sj5))+(((-0.37429)*gclwh9_0*pp*r21*r22*(cj5*cj5)))+(((0.0074858)*gclwh7_0*r22*rxp1_2*sj5))+(((0.74858)*gclwh7_0*npx*pz*r22*(cj5*cj5)))+((gclwh9_9*pp*r21*r22*(cj5*cj5)))+(((-0.0149716)*gclwh11_1*npz*rxp2_2*(cj5*cj5)))+(((-0.74858)*cj5*gclwh15_1*npz*pp*r20))+(((-0.036050884955666)*cj5*gclwh15_1*rxp1_2))+(((-0.0074858)*gclwh5_9*(cj5*cj5)*(r22*r22)))+(((-0.02)*gclwh15_1*pp*rxp1_2*sj5))+(((-0.005603720164)*gclwh5_1*npz*r22*(cj5*cj5)))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-0.0074858)*cj5*gclwh9_11*npz*r21*sj5))+(((-0.1401930041)*cj5*gclwh15_15*r20*rxp2_2))+(((0.093754714775811)*cj5*gclwh7_11*r20))+(((-0.02)*gclwh15_1*npz*pp*r20*sj5))+(((-0.04)*gclwh13_1*npy*npz*pz*sj5))+(((2.0)*cj5*gclwh13_11*npy*npz*pz))+(((0.104795963009178)*gclwh9_1*npz*r21*(cj5*cj5)))+(((0.0149716)*cj5*gclwh5_1*npz*pz))+(((0.74858)*cj5*gclwh11_15*sj5*(rxp2_2*rxp2_2)))+(((0.66971)*cj5*gclwh7_11*pp*r20))+((cj5*gclwh5_9*pp*sj5*(r22*r22)))+(((0.0005165202)*cj5*gclwh5_0*r22))+(((0.5013315118)*gclwh11_11*rxp2_2*sj5))+(((-0.000963180554)*gclwh13_1*rxp0_2*sj5))+(((-0.5603720164)*cj5*gclwh7_1*npz*rxp1_2))+(((-2.0)*cj5*gclwh13_15*npy*pz*rxp2_2))+(((0.02)*cj5*gclwh15_9*r22*rxp1_2*sj5))+(((0.0074858)*cj5*gclwh9_15*r21*rxp2_2*sj5))+(((0.0004)*gclwh13_1*npz*rxp0_2*(sj5*sj5)))+(((0.74858)*gclwh13_15*rxp0_2*rxp2_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh7_1*r20*(pp*pp)))+(((0.0967180554)*gclwh5_1*npz*pz*sj5))+(((-1.0)*cj5*gclwh13_11*npz*pp*r21))+(((-0.0002)*gclwh15_0*r22*rxp1_2*(sj5*sj5)))+(((2.0)*cj5*gclwh15_9*npx*pz*r22))+(((-0.004201790123)*cj5*gclwh7_0*r20*r22*sj5))+(((-1.0)*gclwh7_11*npz*pp*r20*(cj5*cj5)))+((gclwh7_9*pp*r20*r22*(cj5*cj5)))+(((0.02)*gclwh5_0*npz*pz*r22*(sj5*sj5)))+(((0.0133942)*gclwh13_11*rxp0_2*sj5))+(((-0.069)*cj5*gclwh9_0*pp*r21))+(((-1.0)*gclwh9_11*npz*pp*r21*(cj5*cj5)))+(((0.74858)*cj5*gclwh5_0*npz*pz*r22*sj5))+(((0.74858)*gclwh9_1*npz*pp*r21*(cj5*cj5)))+(((-0.1401930041)*cj5*gclwh15_9*r20*r22))+(((-0.00138)*gclwh15_0*rxp1_2*sj5))+(((0.008403580246)*cj5*gclwh7_1*npz*r20*sj5))+(((-0.0074858)*gclwh9_0*r22*rxp0_2*sj5))+(((0.138)*cj5*gclwh7_0*npx*pz))+(((0.093888656775811)*gclwh13_11*r21))+(((-0.2801860082)*gclwh15_0*r22*rxp1_2*(cj5*cj5)))+(((-1.0)*gclwh5_1*r22*sj5*(pp*pp)))+(((0.5599720164)*cj5*gclwh11_1*npz*rxp2_2*sj5))+(((0.0074858)*cj5*gclwh7_9*r20*r22*sj5))+(((0.02)*cj5*gclwh15_15*rxp1_2*rxp2_2*sj5))+(((0.74858)*gclwh9_0*npy*pz*r22*(cj5*cj5)))+(((2.0)*cj5*gclwh15_15*npx*pz*rxp2_2))+((cj5*gclwh15_11*npz*pp*r20))+(((-0.74858)*gclwh13_11*npz*rxp0_2*(cj5*cj5)))+(((-0.036050884955666)*gclwh9_1*rxp0_2))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.01)*gclwh5_0*pp*(r22*r22)*(sj5*sj5)))+(((0.5013315118)*gclwh9_11*rxp0_2))+(((0.74858)*gclwh7_1*pp*rxp1_2))+(((0.002801860082)*gclwh5_0*(cj5*cj5)*(r22*r22)))+(((-0.1399930041)*gclwh9_11*npz*r21*(cj5*cj5)))+(((0.104795963009178)*gclwh7_1*npz*r20*(cj5*cj5)))+(((-0.036050884955666)*gclwh11_1*rxp2_2*sj5))+(((0.74858)*cj5*gclwh9_15*rxp0_2*rxp2_2))+(((0.0074858)*gclwh11_0*r22*rxp2_2*(cj5*cj5)))+(((-0.002803860082)*gclwh15_1*npz*r20*sj5))+(((0.0299432)*cj5*gclwh13_1*npz*rxp0_2*sj5))+(((-2.0)*cj5*gclwh15_11*npx*npz*pz))+(((1.33942)*gclwh15_11*npx*pz))+(((0.02)*cj5*gclwh7_1*npz*pp*r20*sj5))+(((0.37429)*cj5*gclwh15_0*pp*r20*r22))+(((0.000963180554)*cj5*gclwh11_1*rxp2_2))+(((-0.74858)*cj5*gclwh11_11*npz*rxp2_2*sj5))+(((-0.00036050884955666)*gclwh7_1*r20*sj5))+(((-0.05165202)*gclwh11_0*rxp2_2*sj5))+(((0.0133942)*gclwh15_11*rxp1_2*sj5))+(((0.02)*cj5*gclwh9_1*npz*pp*r21*sj5))+(((-0.74858)*cj5*gclwh15_1*pp*rxp1_2))+(((0.0004)*gclwh15_1*npz*rxp1_2*(sj5*sj5)))+((cj5*gclwh9_0*pp*pz*r21))+((cj5*gclwh13_9*pp*r21*r22))+(((0.001401930041)*gclwh15_0*r20*r22*sj5))+(((-0.0149716)*cj5*gclwh13_0*r22*rxp0_2*sj5))+(((-0.04)*cj5*gclwh7_1*npx*npz*pz*sj5))+(((0.104646247009178)*cj5*gclwh5_1*npz*r22*sj5))+(((0.02)*gclwh13_1*npz*pp*r21*sj5))+(((-0.000963180554)*gclwh5_1*pz))+(((0.74858)*cj5*gclwh7_11*npz*rxp1_2))+(((-0.05165202)*cj5*gclwh13_0*rxp0_2))+(((0.02)*gclwh13_0*npy*pz*r22*sj5))+(((0.002803860082)*gclwh13_1*npz*r21*sj5))+(((-0.5013315118)*gclwh7_11*rxp1_2))+(((-0.00036050884955666)*gclwh9_1*r21*sj5))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((0.74858)*cj5*gclwh9_9*r22*rxp0_2))+(((0.1401930041)*cj5*gclwh13_9*r21*r22))+(((0.1401930041)*cj5*gclwh15_11*npz*r20))+(((0.000149716)*gclwh9_1*npz*r21*(sj5*sj5)))+(((0.005013315118)*gclwh7_11*r20*sj5))+(((-0.02)*gclwh11_15*(cj5*cj5)*(rxp2_2*rxp2_2)))+(((2.0)*gclwh9_11*npy*npz*pz*(cj5*cj5)))+(((-0.74858)*cj5*gclwh7_9*r22*rxp1_2))+(((-0.02)*gclwh11_9*r22*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh9_15*npy*pz*rxp2_2*(cj5*cj5)))+(((-0.000963180554)*gclwh15_1*rxp1_2*sj5))+(((0.1399930041)*gclwh7_9*r20*r22*(cj5*cj5)))+(((-0.069)*gclwh13_0*pp*r21))+(((-0.74858)*gclwh7_0*pz*rxp1_2))+(((-0.093888656775811)*gclwh15_11*r20))+(((-2.0)*cj5*gclwh7_0*npx*(pz*pz)))+(((-0.0149716)*cj5*gclwh15_0*r22*rxp1_2*sj5))+(((0.00138)*cj5*gclwh11_0*rxp2_2))+(((-0.0074858)*cj5*gclwh7_11*npz*r20*sj5))+(((-2.0)*cj5*gclwh5_9*npz*pz*r22*sj5))+(((-0.0074858)*gclwh11_0*r22*rxp2_2*(sj5*sj5)))+(((0.02)*gclwh15_0*pz*rxp1_2*sj5))+(((-2.0)*gclwh7_9*npx*pz*r22*(cj5*cj5)))+(((-0.02)*cj5*gclwh15_11*npz*rxp1_2*sj5))+(((-0.01)*cj5*gclwh9_0*pp*r21*r22*sj5))+(((-1.0)*cj5*gclwh15_15*pp*r20*rxp2_2))+(((0.74858)*gclwh15_15*rxp1_2*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh5_0*npz*sj5*(pz*pz)))+(((-0.00674192696225811)*cj5*gclwh7_1*r20))+(((0.66971)*cj5*gclwh9_11*pp*r21))+(((0.04)*gclwh15_1*npx*npz*pz*sj5))+(((-0.001399930041)*gclwh5_0*(r22*r22)*(sj5*sj5)))+(((0.5603720164)*gclwh13_1*npz*rxp0_2*(cj5*cj5)))+(((0.0074858)*cj5*gclwh9_9*r21*r22*sj5))+(((-0.74858)*cj5*gclwh15_0*npx*pz*r22))+(((-0.74858)*gclwh9_1*pp*rxp0_2))+(((-0.02)*gclwh13_1*pp*rxp0_2*sj5))+(((-1.49716)*cj5*gclwh13_1*npy*npz*pz))+(((0.00036050884955666)*cj5*gclwh5_1*r22))+(((-2.0)*gclwh9_9*npy*pz*r22*(cj5*cj5))));
IkReal x550=((1.49716)*rxp0_2);
IkReal x551=(gclwh15_6*r20);
IkReal x552=(cj5*rxp1_2);
IkReal x553=(gclwh11_15*rxp2_2);
IkReal x554=(gclwh13_6*r21);
IkReal x555=(gclwh7_15*rxp1_2);
IkReal x556=(gclwh5_6*pz);
IkReal x557=(gclwh7_6*r20);
IkReal x558=((0.0149716)*sj5);
IkReal x559=(gclwh9_15*r21);
IkReal x560=((0.004422910072)*sj5);
IkReal x561=((0.276)*pz);
IkReal x562=(gclwh13_15*npy);
IkReal x563=(gclwh13_15*rxp0_2);
IkReal x564=((0.00276)*sj5);
IkReal x565=((0.0118168)*sj5);
IkReal x566=(cj5*pp);
IkReal x567=((0.2799860082)*cj5);
IkReal x568=(cj5*gclwh7_15);
IkReal x569=((1.18168)*pz);
IkReal x570=(cj5*npy);
IkReal x571=(gclwh15_15*r20);
IkReal x572=(gclwh7_15*r20);
IkReal x573=((0.0010330404)*sj5);
IkReal x574=((0.04)*sj5);
IkReal x575=((4.0)*pz);
IkReal x576=(gclwh5_6*r22);
IkReal x577=((2.0)*pp);
IkReal x578=(gclwh15_15*rxp1_2);
IkReal x579=(gclwh9_6*r21);
IkReal x580=(gclwh13_15*r21);
IkReal x581=(gclwh9_15*rxp0_2);
IkReal x582=(gclwh11_6*rxp2_2);
IkReal x583=((0.138)*pp);
IkReal x584=((0.59084)*pp);
IkReal x585=(gclwh15_15*npx);
op[55]=((((-0.0059084)*cj5*gclwh11_13*rxp2_2))+(((-0.29542)*gclwh15_13*pp*r20))+(((-0.2211455036)*gclwh7_13*rxp1_2))+(((-0.59084)*gclwh13_13*npy*pz))+(((0.05165202)*cj5*gclwh13_11*rxp0_2))+(((2.0)*cj5*gclwh9_9*npy*pz))+(((0.0059084)*gclwh15_13*rxp1_2*sj5))+(((-0.1399930041)*gclwh5_9*r22*sj5))+(((2.0)*gclwh13_9*npy*pz))+(((-0.0074858)*gclwh7_9*r20*sj5))+(((-0.59084)*gclwh5_13*npz*pz*sj5))+(((0.069)*cj5*gclwh7_11*pp*r20))+(((0.0005165202)*gclwh7_11*r20*sj5))+(((-0.1399930041)*cj5*gclwh9_9*r21))+(((0.0096595172829)*cj5*gclwh7_11*r20))+(((0.59084)*gclwh15_13*npx*pz))+(((0.069)*cj5*gclwh9_11*pp*r21))+(((0.00138)*gclwh15_11*rxp1_2*sj5))+(((-0.02)*gclwh15_9*rxp1_2*sj5))+(((-0.00138)*cj5*gclwh11_11*rxp2_2))+(((-0.1399930041)*cj5*gclwh7_9*r20))+(((0.29542)*cj5*gclwh9_13*pp*r21))+(((0.1401930041)*gclwh15_9*r20))+(((0.00138)*gclwh13_11*rxp0_2*sj5))+(((0.05165202)*gclwh11_11*rxp2_2*sj5))+(((0.2211455036)*cj5*gclwh15_13*rxp1_2))+(((0.0074858)*cj5*gclwh5_9*r22))+(((-1.0)*cj5*gclwh9_9*pp*r21))+(((0.2211455036)*cj5*gclwh13_13*rxp0_2))+(((-0.0074858)*gclwh9_9*r21*sj5))+(((2.0)*cj5*gclwh7_9*npx*pz))+(((0.05165202)*cj5*gclwh15_11*rxp1_2))+(((0.002211455036)*gclwh7_13*r20*sj5))+(((-0.02)*gclwh5_9*pz))+((gclwh15_9*pp*r20))+(((0.041415817271222)*gclwh13_13*r21))+(((0.069)*gclwh13_11*pp*r21))+(((-0.74858)*cj5*gclwh13_9*rxp0_2))+(((0.29542)*cj5*gclwh7_13*pp*r20))+(((0.041356733271222)*cj5*gclwh9_13*r21))+(((-0.0096733172829)*gclwh15_11*r20))+(((-0.138)*cj5*gclwh9_11*npy*pz))+(((0.2211455036)*gclwh11_13*rxp2_2*sj5))+(((-0.1401930041)*gclwh13_9*r21))+(((-0.02)*gclwh13_9*rxp0_2*sj5))+(((-0.74858)*gclwh11_9*rxp2_2*sj5))+(((0.29542)*gclwh5_13*pp*r22*sj5))+(((-0.002211455036)*cj5*gclwh5_13*r22))+(((0.0059084)*gclwh13_13*rxp0_2*sj5))+(((-2.0)*gclwh15_9*npx*pz))+(((0.041356733271222)*cj5*gclwh7_13*r20))+(((0.29542)*gclwh13_13*pp*r21))+(((0.0059084)*gclwh5_13*pz))+(((-0.138)*gclwh13_11*npy*pz))+(((-0.59084)*cj5*gclwh9_13*npy*pz))+(((-0.041415817271222)*gclwh15_13*r20))+(((0.002211455036)*gclwh9_13*r21*sj5))+(((-0.069)*gclwh15_11*pp*r20))+(((0.74858)*gclwh7_9*rxp1_2))+(((-0.74858)*cj5*gclwh15_9*rxp1_2))+(((0.0096595172829)*cj5*gclwh9_11*r21))+(((0.0096733172829)*gclwh13_11*r21))+(((0.138)*gclwh15_11*npx*pz))+(((0.041356733271222)*gclwh5_13*r22*sj5))+(((-1.0)*gclwh5_9*pp*r22*sj5))+(((-0.05165202)*gclwh7_11*rxp1_2))+(((-0.74858)*gclwh9_9*rxp0_2))+(((2.0)*gclwh5_9*npz*pz*sj5))+(((0.0005165202)*gclwh9_11*r21*sj5))+(((0.02)*cj5*gclwh11_9*rxp2_2))+(((-0.59084)*cj5*gclwh7_13*npx*pz))+(((0.2211455036)*gclwh9_13*rxp0_2))+(((-1.0)*gclwh13_9*pp*r21))+(((-0.138)*cj5*gclwh7_11*npx*pz))+(((0.05165202)*gclwh9_11*rxp0_2))+(((-1.0)*cj5*gclwh7_9*pp*r20)));
op[56]=(((x559*x573))+(((-0.10330404)*x555))+(((0.10330404)*cj5*x563))+(((0.138)*x566*x572))+((x580*x583))+((x561*x585))+(((0.0193190345658)*r20*x568))+((x563*x564))+(((0.10330404)*gclwh15_15*x552))+(((0.138)*x559*x566))+(((0.10330404)*sj5*x553))+(((-1.0)*gclwh9_15*x561*x570))+(((0.0193190345658)*cj5*x559))+(((-1.0)*x571*x583))+((x564*x578))+(((0.0193466345658)*x580))+(((-1.0)*npx*x561*x568))+(((-0.00276)*cj5*x553))+(((0.10330404)*x581))+((x572*x573))+(((-1.0)*x561*x562))+(((-0.0193466345658)*x571)));
op[57]=((0.1840679528)+(((1.49716)*sj5*x582))+(((-0.082713466542444)*cj5*x559))+(((-0.4422910072)*cj5*x563))+(((0.2803860082)*x554))+(((-1.0)*x580*x584))+(((-0.2803860082)*x551))+(((-0.4422910072)*gclwh15_15*x552))+(((-1.49716)*gclwh7_6*rxp1_2))+((x567*x579))+(((-0.59084)*x566*x572))+((x554*x577))+(((-0.0149716)*cj5*x576))+((npx*x568*x569))+(((1.49716)*gclwh15_6*x552))+((x557*x558))+((x562*x569))+(((-0.4422910072)*x581))+(((0.04)*x556))+(((-0.082713466542444)*r20*x568))+(((0.0118168)*cj5*x553))+(((2.0)*x566*x579))+((gclwh9_6*x550))+((gclwh15_6*rxp1_2*x574))+(((-0.082831634542444)*x580))+((gclwh9_15*x569*x570))+(((0.4422910072)*x555))+(((-1.0)*x560*x572))+(((-1.0)*x565*x578))+(((-1.0)*cj5*gclwh7_6*npx*x575))+(((2.0)*x557*x566))+(((-1.0)*gclwh13_6*npy*x575))+(((-0.59084)*x559*x566))+((gclwh13_6*rxp0_2*x574))+(((-0.4422910072)*sj5*x553))+(((-1.0)*x559*x560))+((gclwh15_6*npx*x575))+((sj5*x576*x577))+(((-1.0)*gclwh9_6*x570*x575))+(((0.082831634542444)*x571))+(((-1.0)*x563*x565))+(((0.2799860082)*sj5*x576))+((x571*x584))+((x557*x567))+(((-4.0)*npz*sj5*x556))+(((-1.0)*x569*x585))+((x558*x579))+(((-1.0)*x551*x577))+((cj5*gclwh13_6*x550))+(((-0.04)*cj5*x582)));
op[58]=((((0.02)*cj5*gclwh13_9*r22*rxp0_2*sj5))+(((-0.74858)*cj5*gclwh9_11*npz*rxp0_2))+(((0.2801860082)*cj5*gclwh7_0*r22*rxp1_2))+(((0.036050884955666)*gclwh7_1*rxp1_2))+(((0.1401930041)*gclwh13_0*pz*r21))+(((0.02)*gclwh11_11*npz*rxp2_2*(cj5*cj5)))+(((-1.49716)*gclwh7_1*npx*npz*pz*(cj5*cj5)))+(((-0.37429)*cj5*gclwh13_0*pp*r21*r22))+(((-0.138)*cj5*gclwh7_0*npx*pz))+(((0.1399930041)*gclwh9_15*r21*rxp2_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh13_0*pz*rxp0_2))+(((-0.74858)*gclwh11_1*pp*rxp2_2*sj5))+(((-7.4858e-5)*gclwh7_0*r20*r22*(sj5*sj5)))+(((0.00675155876779811)*gclwh15_1*r20))+(((-0.66971)*gclwh15_11*pp*r20))+(((0.5013315118)*cj5*gclwh13_11*rxp0_2))+(((0.02)*cj5*gclwh7_0*npx*pz*r22*sj5))+(((0.005013315118)*gclwh9_11*r21*sj5))+(((-0.036050884955666)*cj5*gclwh13_1*rxp0_2))+(((0.74858)*cj5*gclwh11_9*r22*rxp2_2*sj5))+(((-7.4858e-5)*gclwh9_0*r21*r22*(sj5*sj5)))+(((2.0)*gclwh5_1*npz*pp*pz*sj5))+(((0.0149716)*gclwh11_1*npz*rxp2_2*(sj5*sj5)))+(((0.1399930041)*gclwh7_15*r20*rxp2_2*(cj5*cj5)))+(((-0.2799860082)*cj5*gclwh11_0*r22*rxp2_2*sj5))+(((0.02)*cj5*gclwh9_0*npy*pz*r22*sj5))+(((0.02)*gclwh5_0*(pz*pz)))+(((0.74858)*gclwh9_0*pz*rxp0_2))+(((0.74858)*gclwh15_9*r22*rxp1_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh13_0*npy*pz*r22))+(((-0.0074858)*gclwh7_1*pp*r20*sj5))+(((-0.069)*gclwh15_0*pp*r20))+(((0.02)*cj5*gclwh13_15*rxp0_2*rxp2_2*sj5))+(((0.008403580246)*cj5*gclwh9_1*npz*r21*sj5))+(((-0.00674192696225811)*gclwh5_1*r22*sj5))+(((0.1401930041)*cj5*gclwh13_15*r21*rxp2_2))+(((-0.74858)*gclwh15_11*npz*rxp1_2*(cj5*cj5)))+(((0.0963180554)*gclwh13_1*npy*pz))+(((0.02)*cj5*gclwh11_1*pp*rxp2_2))+(((0.00138)*gclwh13_0*rxp0_2*sj5))+(((0.5603720164)*gclwh15_1*npz*rxp1_2*(cj5*cj5)))+(((-1.49716)*gclwh9_1*npy*npz*pz*(cj5*cj5)))+(((0.0149716)*gclwh9_1*npz*rxp0_2*sj5))+((gclwh15_1*r20*(pp*pp)))+(((0.138)*gclwh15_0*npx*pz))+(((0.0074858)*cj5*gclwh7_15*r20*rxp2_2*sj5))+(((-0.0074858)*gclwh9_1*pp*r21*sj5))+(((0.002799860082)*gclwh5_1*npz*r22*(sj5*sj5)))+(((-0.104945679009178)*cj5*gclwh15_1*npz*r20))+(((-0.00674192696225811)*cj5*gclwh9_1*r21))+(((-1.33942)*cj5*gclwh9_11*npy*pz))+(((-0.04)*cj5*gclwh9_1*npy*npz*pz*sj5))+(((0.74858)*cj5*gclwh5_1*npz*pp*r22*sj5))+(((0.00138)*gclwh15_0*rxp1_2*sj5))+(((0.069)*gclwh5_0*pp*r22*sj5))+(((0.0074858)*cj5*gclwh5_1*pp*r22))+(((0.1399930041)*cj5*gclwh5_9*sj5*(r22*r22)))+(((-0.0149716)*gclwh7_1*npz*rxp1_2*sj5))+(((-0.052397981504589)*gclwh7_0*r20*r22*(cj5*cj5)))+(((0.0074858)*gclwh7_0*pz*r20*sj5))+(((-0.02)*gclwh15_0*npx*pz*r22*sj5))+(((-0.74858)*cj5*gclwh13_1*pp*rxp0_2))+(((0.0074858)*gclwh9_0*pz*r21*sj5))+(((2.0)*gclwh7_11*npx*npz*pz*(cj5*cj5)))+(((-0.052472839504589)*cj5*gclwh13_0*r21*r22))+(((-1.33942)*cj5*gclwh7_11*npx*pz))+(((0.74858)*cj5*gclwh15_0*pz*rxp1_2))+(((0.02)*gclwh5_1*npz*pp*r22*(sj5*sj5)))+((cj5*gclwh7_0*pp*pz*r20))+(((-2.0)*cj5*gclwh9_0*npy*(pz*pz)))+(((-0.02)*gclwh5_1*pp*pz))+(((-2.0)*gclwh7_15*npx*pz*rxp2_2*(cj5*cj5)))+(((-0.001401930041)*gclwh13_0*r21*r22*sj5))+(((0.000149716)*gclwh7_1*npz*r20*(sj5*sj5)))+(((0.104945679009178)*cj5*gclwh13_1*npz*r21))+(((-0.0002)*gclwh13_0*r22*rxp0_2*(sj5*sj5)))+(((-0.1883520318)*gclwh13_1*pp*r21))+(((-0.74858)*cj5*gclwh7_15*rxp1_2*rxp2_2))+(((0.0096595172829)*cj5*gclwh9_0*r21))+(((0.74858)*cj5*gclwh13_1*npz*pp*r21))+(((-0.1881520318)*gclwh5_1*pp*r22*sj5))+(((0.02)*cj5*gclwh5_9*pz*r22))+(((-0.01)*gclwh13_0*pp*r21*r22*sj5))+(((-1.0)*cj5*gclwh15_9*pp*r20*r22))+(((0.74858)*gclwh7_1*npz*pp*r20*(cj5*cj5)))+(((-0.37429)*gclwh7_0*pp*r20*r22*(cj5*cj5)))+(((-1.33942)*gclwh13_11*npy*pz))+(((0.0096595172829)*cj5*gclwh7_0*r20))+(((-0.1881520318)*cj5*gclwh7_1*pp*r20))+(((0.093754714775811)*cj5*gclwh9_11*r21))+(((0.069)*cj5*gclwh7_0*pp*r20))+(((-0.0149716)*cj5*gclwh5_0*pz*r22))+((gclwh13_0*pp*pz*r21))+(((0.0299432)*cj5*gclwh15_1*npz*rxp1_2*sj5))+(((-0.01)*cj5*gclwh7_0*pp*r20*r22*sj5))+(((0.74858)*gclwh13_9*r22*rxp0_2*(cj5*cj5)))+(((-0.02)*cj5*gclwh11_0*pz*rxp2_2))+(((2.0)*cj5*gclwh9_1*npy*pp*pz))+(((0.01)*gclwh15_0*pp*r20*r22*sj5))+(((0.74858)*gclwh11_0*pz*rxp2_2*sj5))+(((-0.02)*cj5*gclwh13_11*npz*rxp0_2*sj5))+(((0.66971)*gclwh13_11*pp*r21))+(((2.0)*cj5*gclwh7_1*npx*pp*pz))+(((-2.0)*cj5*gclwh13_9*npy*pz*r22))+(((0.5013315118)*cj5*gclwh15_11*rxp1_2))+(((0.1883520318)*gclwh15_1*pp*r20))+(((0.1399930041)*gclwh9_9*r21*r22*(cj5*cj5)))+(((-1.0)*cj5*gclwh9_1*r21*(pp*pp)))+(((-0.052397981504589)*gclwh9_0*r21*r22*(cj5*cj5)))+(((0.0963180554)*cj5*gclwh9_1*npy*pz))+(((0.1399930041)*cj5*gclwh9_0*pz*r21))+((gclwh5_0*pp*pz*r22*sj5))+(((-0.0133942)*cj5*gclwh11_11*rxp2_2))+(((-0.0963180554)*gclwh15_1*npx*pz))+(((-0.04)*gclwh5_1*pz*(npz*npz)*(sj5*sj5)))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-1.49716)*cj5*gclwh5_1*pz*sj5*(npz*npz)))+((gclwh9_15*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.00675155876779811)*gclwh13_1*r21))+((cj5*gclwh13_15*pp*r21*rxp2_2))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((0.069)*gclwh13_0*pp*r21))+(((1.49716)*cj5*gclwh15_1*npx*npz*pz))+(((-0.052323123504589)*cj5*gclwh5_0*sj5*(r22*r22)))+(((-0.2801860082)*cj5*gclwh9_0*r22*rxp0_2))+(((0.0096595172829)*gclwh5_0*r22*sj5))+(((-0.138)*gclwh5_0*npz*pz*sj5))+(((-0.1401930041)*cj5*gclwh13_11*npz*r21))+(((-0.1881520318)*cj5*gclwh9_1*pp*r21))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.1399930041)*gclwh7_11*npz*r20*(cj5*cj5)))+(((-0.004201790123)*cj5*gclwh9_0*r21*r22*sj5))+(((0.1399930041)*cj5*gclwh7_0*pz*r20))+(((-0.1401930041)*gclwh15_0*pz*r20))+(((0.5603720164)*cj5*gclwh9_1*npz*rxp0_2))+(((0.02)*gclwh13_0*pz*rxp0_2*sj5))+(((0.052472839504589)*cj5*gclwh15_0*r20*r22))+((gclwh7_15*pp*r20*rxp2_2*(cj5*cj5)))+(((-0.2801860082)*gclwh13_0*r22*rxp0_2*(cj5*cj5)))+(((-0.37429)*cj5*gclwh5_0*pp*sj5*(r22*r22)))+(((0.0963180554)*cj5*gclwh7_1*npx*pz))+(((0.05165202)*gclwh9_0*rxp0_2))+(((0.1397930041)*gclwh5_0*pz*r22*sj5))+(((-0.37429)*gclwh9_0*pp*r21*r22*(cj5*cj5)))+(((0.0074858)*gclwh7_0*r22*rxp1_2*sj5))+(((-0.138)*gclwh13_0*npy*pz))+(((0.74858)*gclwh7_0*npx*pz*r22*(cj5*cj5)))+((gclwh9_9*pp*r21*r22*(cj5*cj5)))+(((0.05165202)*cj5*gclwh13_0*rxp0_2))+(((-0.0149716)*gclwh11_1*npz*rxp2_2*(cj5*cj5)))+(((-0.74858)*cj5*gclwh15_1*npz*pp*r20))+(((-0.036050884955666)*cj5*gclwh15_1*rxp1_2))+(((-0.0074858)*gclwh5_9*(cj5*cj5)*(r22*r22)))+(((-0.02)*gclwh15_1*pp*rxp1_2*sj5))+(((-0.005603720164)*gclwh5_1*npz*r22*(cj5*cj5)))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-0.0074858)*cj5*gclwh9_11*npz*r21*sj5))+(((-0.1401930041)*cj5*gclwh15_15*r20*rxp2_2))+(((0.093754714775811)*cj5*gclwh7_11*r20))+(((-0.02)*gclwh15_1*npz*pp*r20*sj5))+(((-0.04)*gclwh13_1*npy*npz*pz*sj5))+(((2.0)*cj5*gclwh13_11*npy*npz*pz))+(((0.104795963009178)*gclwh9_1*npz*r21*(cj5*cj5)))+(((0.0149716)*cj5*gclwh5_1*npz*pz))+(((0.74858)*cj5*gclwh11_15*sj5*(rxp2_2*rxp2_2)))+(((0.66971)*cj5*gclwh7_11*pp*r20))+((cj5*gclwh5_9*pp*sj5*(r22*r22)))+(((0.5013315118)*gclwh11_11*rxp2_2*sj5))+(((-0.000963180554)*gclwh13_1*rxp0_2*sj5))+(((-0.5603720164)*cj5*gclwh7_1*npz*rxp1_2))+(((-2.0)*cj5*gclwh13_15*npy*pz*rxp2_2))+(((0.069)*cj5*gclwh9_0*pp*r21))+(((0.02)*cj5*gclwh15_9*r22*rxp1_2*sj5))+(((0.0074858)*cj5*gclwh9_15*r21*rxp2_2*sj5))+(((0.0004)*gclwh13_1*npz*rxp0_2*(sj5*sj5)))+(((0.74858)*gclwh13_15*rxp0_2*rxp2_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh7_1*r20*(pp*pp)))+(((0.0967180554)*gclwh5_1*npz*pz*sj5))+(((-1.0)*cj5*gclwh13_11*npz*pp*r21))+(((-0.0002)*gclwh15_0*r22*rxp1_2*(sj5*sj5)))+(((2.0)*cj5*gclwh15_9*npx*pz*r22))+(((0.05165202)*cj5*gclwh15_0*rxp1_2))+(((-0.004201790123)*cj5*gclwh7_0*r20*r22*sj5))+(((-1.0)*gclwh7_11*npz*pp*r20*(cj5*cj5)))+((gclwh7_9*pp*r20*r22*(cj5*cj5)))+(((0.02)*gclwh5_0*npz*pz*r22*(sj5*sj5)))+(((0.0133942)*gclwh13_11*rxp0_2*sj5))+(((-1.0)*gclwh9_11*npz*pp*r21*(cj5*cj5)))+(((0.74858)*cj5*gclwh5_0*npz*pz*r22*sj5))+(((-0.05165202)*gclwh7_0*rxp1_2))+(((0.74858)*gclwh9_1*npz*pp*r21*(cj5*cj5)))+(((-0.1401930041)*cj5*gclwh15_9*r20*r22))+(((0.008403580246)*cj5*gclwh7_1*npz*r20*sj5))+(((-0.0074858)*gclwh9_0*r22*rxp0_2*sj5))+(((0.093888656775811)*gclwh13_11*r21))+(((-0.2801860082)*gclwh15_0*r22*rxp1_2*(cj5*cj5)))+(((-1.0)*gclwh5_1*r22*sj5*(pp*pp)))+(((0.5599720164)*cj5*gclwh11_1*npz*rxp2_2*sj5))+(((0.0074858)*cj5*gclwh7_9*r20*r22*sj5))+(((0.02)*cj5*gclwh15_15*rxp1_2*rxp2_2*sj5))+(((0.74858)*gclwh9_0*npy*pz*r22*(cj5*cj5)))+(((2.0)*cj5*gclwh15_15*npx*pz*rxp2_2))+((cj5*gclwh15_11*npz*pp*r20))+(((-0.74858)*gclwh13_11*npz*rxp0_2*(cj5*cj5)))+(((-0.036050884955666)*gclwh9_1*rxp0_2))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.01)*gclwh5_0*pp*(r22*r22)*(sj5*sj5)))+(((-0.0005165202)*cj5*gclwh5_0*r22))+(((0.5013315118)*gclwh9_11*rxp0_2))+(((0.74858)*gclwh7_1*pp*rxp1_2))+(((0.002801860082)*gclwh5_0*(cj5*cj5)*(r22*r22)))+(((-0.1399930041)*gclwh9_11*npz*r21*(cj5*cj5)))+(((0.104795963009178)*gclwh7_1*npz*r20*(cj5*cj5)))+(((-0.036050884955666)*gclwh11_1*rxp2_2*sj5))+(((0.74858)*cj5*gclwh9_15*rxp0_2*rxp2_2))+(((0.0074858)*gclwh11_0*r22*rxp2_2*(cj5*cj5)))+(((-0.002803860082)*gclwh15_1*npz*r20*sj5))+(((0.0299432)*cj5*gclwh13_1*npz*rxp0_2*sj5))+(((-2.0)*cj5*gclwh15_11*npx*npz*pz))+(((1.33942)*gclwh15_11*npx*pz))+(((0.02)*cj5*gclwh7_1*npz*pp*r20*sj5))+(((0.37429)*cj5*gclwh15_0*pp*r20*r22))+(((0.000963180554)*cj5*gclwh11_1*rxp2_2))+(((-0.138)*cj5*gclwh9_0*npy*pz))+(((-0.74858)*cj5*gclwh11_11*npz*rxp2_2*sj5))+(((0.0005165202)*gclwh9_0*r21*sj5))+(((-0.00036050884955666)*gclwh7_1*r20*sj5))+(((0.0133942)*gclwh15_11*rxp1_2*sj5))+(((0.02)*cj5*gclwh9_1*npz*pp*r21*sj5))+(((-0.74858)*cj5*gclwh15_1*pp*rxp1_2))+(((0.0004)*gclwh15_1*npz*rxp1_2*(sj5*sj5)))+((cj5*gclwh9_0*pp*pz*r21))+((cj5*gclwh13_9*pp*r21*r22))+(((0.001401930041)*gclwh15_0*r20*r22*sj5))+(((-0.0149716)*cj5*gclwh13_0*r22*rxp0_2*sj5))+(((-0.0096733172829)*gclwh15_0*r20))+(((-0.04)*cj5*gclwh7_1*npx*npz*pz*sj5))+(((0.104646247009178)*cj5*gclwh5_1*npz*r22*sj5))+(((-0.00138)*cj5*gclwh11_0*rxp2_2))+(((0.02)*gclwh13_1*npz*pp*r21*sj5))+(((0.0096733172829)*gclwh13_0*r21))+(((-0.000963180554)*gclwh5_1*pz))+(((0.74858)*cj5*gclwh7_11*npz*rxp1_2))+(((0.02)*gclwh13_0*npy*pz*r22*sj5))+(((0.002803860082)*gclwh13_1*npz*r21*sj5))+(((-0.5013315118)*gclwh7_11*rxp1_2))+(((-0.00036050884955666)*gclwh9_1*r21*sj5))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((0.74858)*cj5*gclwh9_9*r22*rxp0_2))+(((0.1401930041)*cj5*gclwh13_9*r21*r22))+(((0.1401930041)*cj5*gclwh15_11*npz*r20))+(((0.000149716)*gclwh9_1*npz*r21*(sj5*sj5)))+(((0.005013315118)*gclwh7_11*r20*sj5))+(((-0.02)*gclwh11_15*(cj5*cj5)*(rxp2_2*rxp2_2)))+(((2.0)*gclwh9_11*npy*npz*pz*(cj5*cj5)))+(((-0.74858)*cj5*gclwh7_9*r22*rxp1_2))+(((-0.02)*gclwh11_9*r22*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh9_15*npy*pz*rxp2_2*(cj5*cj5)))+(((-0.000963180554)*gclwh15_1*rxp1_2*sj5))+(((0.00138)*gclwh5_0*pz))+(((0.1399930041)*gclwh7_9*r20*r22*(cj5*cj5)))+(((-0.74858)*gclwh7_0*pz*rxp1_2))+(((-0.093888656775811)*gclwh15_11*r20))+(((-2.0)*cj5*gclwh7_0*npx*(pz*pz)))+(((-0.0149716)*cj5*gclwh15_0*r22*rxp1_2*sj5))+(((0.05165202)*gclwh11_0*rxp2_2*sj5))+(((-0.0074858)*cj5*gclwh7_11*npz*r20*sj5))+(((-2.0)*cj5*gclwh5_9*npz*pz*r22*sj5))+(((-0.0074858)*gclwh11_0*r22*rxp2_2*(sj5*sj5)))+(((0.0005165202)*gclwh7_0*r20*sj5))+(((0.02)*gclwh15_0*pz*rxp1_2*sj5))+(((-2.0)*gclwh7_9*npx*pz*r22*(cj5*cj5)))+(((-0.02)*cj5*gclwh15_11*npz*rxp1_2*sj5))+(((-0.01)*cj5*gclwh9_0*pp*r21*r22*sj5))+(((-1.0)*cj5*gclwh15_15*pp*r20*rxp2_2))+(((0.74858)*gclwh15_15*rxp1_2*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh5_0*npz*sj5*(pz*pz)))+(((-0.00674192696225811)*cj5*gclwh7_1*r20))+(((0.66971)*cj5*gclwh9_11*pp*r21))+(((0.04)*gclwh15_1*npx*npz*pz*sj5))+(((-0.001399930041)*gclwh5_0*(r22*r22)*(sj5*sj5)))+(((0.5603720164)*gclwh13_1*npz*rxp0_2*(cj5*cj5)))+(((0.0074858)*cj5*gclwh9_9*r21*r22*sj5))+(((-0.74858)*cj5*gclwh15_0*npx*pz*r22))+(((-0.74858)*gclwh9_1*pp*rxp0_2))+(((-0.02)*gclwh13_1*pp*rxp0_2*sj5))+(((-1.49716)*cj5*gclwh13_1*npy*npz*pz))+(((0.00036050884955666)*cj5*gclwh5_1*r22))+(((-2.0)*gclwh9_9*npy*pz*r22*(cj5*cj5))));
op[59]=((((2.0)*gclwh15_9*npx*pz))+(((-2.0)*cj5*gclwh7_9*npx*pz))+(((0.05165202)*cj5*gclwh13_11*rxp0_2))+(((0.069)*cj5*gclwh7_11*pp*r20))+(((0.0005165202)*gclwh7_11*r20*sj5))+(((0.0096595172829)*cj5*gclwh7_11*r20))+(((-1.0)*gclwh15_9*pp*r20))+(((0.069)*cj5*gclwh9_11*pp*r21))+(((0.00138)*gclwh15_11*rxp1_2*sj5))+(((0.74858)*cj5*gclwh13_9*rxp0_2))+(((-0.00138)*cj5*gclwh11_11*rxp2_2))+(((-2.0)*gclwh5_9*npz*pz*sj5))+(((0.00138)*gclwh13_11*rxp0_2*sj5))+(((-0.041415817271222)*gclwh13_13*r21))+(((0.05165202)*gclwh11_11*rxp2_2*sj5))+(((-2.0)*cj5*gclwh9_9*npy*pz))+(((0.041415817271222)*gclwh15_13*r20))+(((0.59084)*gclwh5_13*npz*pz*sj5))+(((0.05165202)*cj5*gclwh15_11*rxp1_2))+(((-0.29542)*cj5*gclwh7_13*pp*r20))+(((-0.041356733271222)*cj5*gclwh7_13*r20))+(((0.069)*gclwh13_11*pp*r21))+(((0.2211455036)*gclwh7_13*rxp1_2))+(((-0.041356733271222)*cj5*gclwh9_13*r21))+(((0.1401930041)*gclwh13_9*r21))+((gclwh5_9*pp*r22*sj5))+(((-0.2211455036)*gclwh11_13*rxp2_2*sj5))+(((-0.0096733172829)*gclwh15_11*r20))+(((-0.138)*cj5*gclwh9_11*npy*pz))+(((-0.041356733271222)*gclwh5_13*r22*sj5))+(((-0.2211455036)*gclwh9_13*rxp0_2))+(((-0.0059084)*gclwh15_13*rxp1_2*sj5))+(((-0.002211455036)*gclwh7_13*r20*sj5))+(((0.002211455036)*cj5*gclwh5_13*r22))+(((0.74858)*gclwh9_9*rxp0_2))+(((-0.138)*gclwh13_11*npy*pz))+(((0.1399930041)*cj5*gclwh7_9*r20))+(((0.74858)*gclwh11_9*rxp2_2*sj5))+(((-0.069)*gclwh15_11*pp*r20))+(((-0.29542)*gclwh5_13*pp*r22*sj5))+(((0.02)*gclwh15_9*rxp1_2*sj5))+(((-0.1401930041)*gclwh15_9*r20))+(((0.0096595172829)*cj5*gclwh9_11*r21))+(((-0.002211455036)*gclwh9_13*r21*sj5))+(((0.02)*gclwh5_9*pz))+(((-0.2211455036)*cj5*gclwh15_13*rxp1_2))+(((0.59084)*cj5*gclwh7_13*npx*pz))+(((-0.0059084)*gclwh13_13*rxp0_2*sj5))+((cj5*gclwh9_9*pp*r21))+(((0.0096733172829)*gclwh13_11*r21))+(((0.0074858)*gclwh9_9*r21*sj5))+(((0.138)*gclwh15_11*npx*pz))+(((0.1399930041)*gclwh5_9*r22*sj5))+(((-0.0074858)*cj5*gclwh5_9*r22))+(((0.59084)*gclwh13_13*npy*pz))+(((-0.29542)*cj5*gclwh9_13*pp*r21))+(((0.0059084)*cj5*gclwh11_13*rxp2_2))+(((-0.59084)*gclwh15_13*npx*pz))+(((0.02)*gclwh13_9*rxp0_2*sj5))+(((-2.0)*gclwh13_9*npy*pz))+(((-0.05165202)*gclwh7_11*rxp1_2))+(((0.0005165202)*gclwh9_11*r21*sj5))+((gclwh13_9*pp*r21))+(((-0.2211455036)*cj5*gclwh13_13*rxp0_2))+(((-0.74858)*gclwh7_9*rxp1_2))+(((-0.29542)*gclwh13_13*pp*r21))+(((0.59084)*cj5*gclwh9_13*npy*pz))+(((-0.138)*cj5*gclwh7_11*npx*pz))+(((0.0074858)*gclwh7_9*r20*sj5))+(((0.05165202)*gclwh9_11*rxp0_2))+(((0.1399930041)*cj5*gclwh9_9*r21))+(((0.29542)*gclwh15_13*pp*r20))+(((-0.02)*cj5*gclwh11_9*rxp2_2))+(((0.74858)*cj5*gclwh15_9*rxp1_2))+(((-0.0059084)*gclwh5_13*pz))+((cj5*gclwh7_9*pp*r20)));
op[60]=((-0.0825119764)+(((-0.0059084)*gclwh6_12*rxp0_2*sj5))+(((-0.02)*gclwh6_8*rxp0_2*sj5))+(((0.041356733271222)*cj5*gclwh12_12*r20))+(((-0.05165202)*gclwh14_10*rxp0_2))+(((0.138)*gclwh8_10*npx*pz))+(((0.0059084)*cj5*gclwh4_12*rxp2_2))+(((-0.59084)*cj5*gclwh14_12*npy*pz))+(((0.0059084)*gclwh10_12*pz))+(((0.041356733271222)*cj5*gclwh14_12*r21))+(((0.138)*cj5*gclwh14_10*npy*pz))+(((-0.2211455036)*cj5*gclwh8_12*rxp1_2))+(((0.1399930041)*cj5*gclwh12_8*r20))+((cj5*gclwh12_8*pp*r20))+(((-0.29542)*gclwh6_12*pp*r21))+(((0.29542)*gclwh10_12*pp*r22*sj5))+(((-0.0096733172829)*gclwh8_10*r20))+(((-0.74858)*cj5*gclwh6_8*rxp0_2))+(((0.041356733271222)*gclwh10_12*r22*sj5))+(((0.05165202)*cj5*gclwh8_10*rxp1_2))+(((-2.0)*cj5*gclwh14_8*npy*pz))+(((-0.069)*cj5*gclwh12_10*pp*r20))+(((-0.138)*gclwh6_10*npy*pz))+(((-0.1401930041)*gclwh6_8*r21))+(((0.138)*gclwh10_10*npz*pz*sj5))+(((-0.0059084)*gclwh8_12*rxp1_2*sj5))+(((0.29542)*cj5*gclwh14_12*pp*r21))+(((0.02)*cj5*gclwh4_8*rxp2_2))+(((-2.0)*gclwh10_8*npz*pz*sj5))+(((0.002211455036)*gclwh12_12*r20*sj5))+(((0.00138)*gclwh6_10*rxp0_2*sj5))+(((-0.002211455036)*cj5*gclwh10_12*r22))+(((2.0)*gclwh6_8*npy*pz))+(((-0.0096595172829)*gclwh10_10*r22*sj5))+(((0.1399930041)*cj5*gclwh14_8*r21))+(((-0.0096595172829)*cj5*gclwh12_10*r20))+(((0.29542)*cj5*gclwh12_12*pp*r20))+(((0.0074858)*gclwh12_8*r20*sj5))+((cj5*gclwh14_8*pp*r21))+(((0.74858)*gclwh14_8*rxp0_2))+(((-0.2211455036)*cj5*gclwh6_12*rxp0_2))+(((-0.2211455036)*gclwh4_12*rxp2_2*sj5))+(((0.1399930041)*gclwh10_8*r22*sj5))+(((-0.74858)*cj5*gclwh8_8*rxp1_2))+(((0.02)*gclwh10_8*pz))+(((0.0074858)*gclwh14_8*r21*sj5))+(((-0.069)*gclwh10_10*pp*r22*sj5))+(((0.0005165202)*cj5*gclwh10_10*r22))+(((-0.0005165202)*gclwh12_10*r20*sj5))+(((-0.0074858)*cj5*gclwh10_8*r22))+(((-0.00138)*gclwh10_10*pz))+(((0.0096733172829)*gclwh6_10*r21))+(((-1.0)*gclwh6_8*pp*r21))+(((0.05165202)*gclwh12_10*rxp1_2))+(((-0.59084)*gclwh8_12*npx*pz))+(((-0.041415817271222)*gclwh6_12*r21))+(((0.002211455036)*gclwh14_12*r21*sj5))+(((-2.0)*cj5*gclwh12_8*npx*pz))+(((-0.02)*gclwh8_8*rxp1_2*sj5))+(((0.05165202)*cj5*gclwh6_10*rxp0_2))+(((0.29542)*gclwh8_12*pp*r20))+(((-0.59084)*cj5*gclwh12_12*npx*pz))+(((-0.069)*cj5*gclwh14_10*pp*r21))+(((0.59084)*gclwh6_12*npy*pz))+(((-0.0096595172829)*cj5*gclwh14_10*r21))+((gclwh10_8*pp*r22*sj5))+(((-0.74858)*gclwh4_8*rxp2_2*sj5))+(((-0.069)*gclwh8_10*pp*r20))+(((0.138)*cj5*gclwh12_10*npx*pz))+(((0.069)*gclwh6_10*pp*r21))+(((-0.2211455036)*gclwh12_12*rxp1_2))+(((-2.0)*gclwh8_8*npx*pz))+(((-0.59084)*gclwh10_12*npz*pz*sj5))+(((0.041415817271222)*gclwh8_12*r20))+(((0.2211455036)*gclwh14_12*rxp0_2))+((gclwh8_8*pp*r20))+(((0.00138)*gclwh8_10*rxp1_2*sj5))+(((-0.0005165202)*gclwh14_10*r21*sj5))+(((-0.74858)*gclwh12_8*rxp1_2))+(((0.1401930041)*gclwh8_8*r20)));
op[61]=((-0.04076796)+(((0.0096733172829)*gclwh6_3*r21))+((gclwh12_10*npz*pp*r20*(cj5*cj5)))+(((-0.138)*gclwh6_3*npy*pz))+(((0.0590405046)*cj5*gclwh6_10*rxp0_2))+(((-0.005603720164)*gclwh3_4*npz*r21*(cj5*cj5)))+(((-2.0)*cj5*gclwh8_10*npx*npz*pz))+(((0.5603720164)*cj5*gclwh14_4*npz*rxp0_2))+((cj5*gclwh6_14*pp*r21*rxp2_2))+(((-0.0096595172829)*gclwh3_3*r21*sj5))+(((-0.0096595172829)*cj5*gclwh14_3*r21))+(((-0.001399930041)*gclwh3_3*r21*r22*(sj5*sj5)))+(((-2.0)*cj5*npz*pz))+(((-0.069)*gclwh10_3*pp*r22*sj5))+(((-2.0)*gclwh8_3*npx*(pz*pz)))+(((-0.74858)*cj5*gclwh6_4*npz*pp*r21))+(((0.01)*gclwh6_3*pp*r21*r22*sj5))+(((-2.0)*cj5*gclwh14_3*npy*(pz*pz)))+(((0.069)*gclwh3_3*pp*r21*sj5))+(((0.0074858)*cj5*gclwh3_3*r22*rxp0_2))+(((0.02)*gclwh8_4*pp*rxp1_2*sj5))+(((-1.0)*cj5*gclwh6_10*npz*pp*r21))+(((2.0)*gclwh10_4*npz*pp*pz*sj5))+(((-0.0004)*gclwh6_4*npz*rxp0_2*(sj5*sj5)))+(((-0.00138)*cj5*gclwh4_3*rxp2_2))+(((-0.02)*gclwh6_3*pz*rxp0_2*sj5))+(((0.036050884955666)*cj5*gclwh8_4*rxp1_2))+(((-0.0299432)*cj5*gclwh8_4*npz*rxp1_2*sj5))+(((-0.02)*gclwh3_3*npy*pz*r22*(sj5*sj5)))+(((-2.0)*gclwh3_4*npy*pp*pz*sj5))+(((0.2801860082)*gclwh6_3*r22*rxp0_2*(cj5*cj5)))+(((0.00036050884955666)*cj5*gclwh10_4*r22))+(((0.1397930041)*gclwh10_3*pz*r22*sj5))+(((0.02)*cj5*gclwh14_4*npz*pp*r21*sj5))+(((-0.0963180554)*gclwh3_4*npy*pz*sj5))+(((-0.01)*gclwh10_3*pp*(r22*r22)*(sj5*sj5)))+(((-0.0005165202)*gclwh14_3*r21*sj5))+(((-0.02)*gclwh10_4*pp*pz))+(((2.0)*gclwh6_3*npy*(pz*pz)))+(((-2.0)*gclwh1_4*npx*pp*pz*sj5))+(((-0.000963180554)*gclwh1_4*rxp1_2))+(((0.0002)*gclwh6_3*r22*rxp0_2*(sj5*sj5)))+(((-0.02)*gclwh3_4*npz*pp*r21*(sj5*sj5)))+(((-0.37429)*cj5*gclwh10_3*pp*sj5*(r22*r22)))+(((0.15774)*cj5*gclwh14_10*npy*pz))+(((0.002799860082)*gclwh1_4*npz*r20*(sj5*sj5)))+(((0.04)*gclwh3_4*npy*npz*pz*(sj5*sj5)))+(((-1.0)*cj5*gclwh10_14*pp*r22*rxp2_2*sj5))+(((-0.1881520318)*cj5*gclwh14_4*pp*r21))+(((-0.0149716)*cj5*gclwh3_4*npz*rxp0_2))+(((1.49716)*cj5*gclwh1_4*npx*npz*pz*sj5))+(((0.0074858)*gclwh12_3*pz*r20*sj5))+(((-1.0)*gclwh14_8*pp*r21*r22*(cj5*cj5)))+(((-1.0)*gclwh3_3*pp*pz*r21*sj5))+(((-0.05165202)*gclwh14_3*rxp0_2))+(((-0.02)*gclwh6_3*npy*pz*r22*sj5))+(((-0.15774)*gclwh6_10*npy*pz))+(((-0.0074858)*cj5*gclwh14_8*r21*r22*sj5))+(((0.02)*cj5*gclwh12_4*npz*pp*r20*sj5))+((gclwh10_3*pp*pz*r22*sj5))+(((0.0967180554)*gclwh10_4*npz*pz*sj5))+(((-1.49716)*gclwh14_4*npy*npz*pz*(cj5*cj5)))+(((-0.011041248233367)*gclwh10_10*r22*sj5))+(((0.000590405046)*cj5*gclwh10_10*r22))+(((-0.069)*cj5*gclwh12_3*pp*r20))+(((0.1399930041)*gclwh3_3*pz*r21*sj5))+(((-2.0)*cj5*gclwh6_14*npy*pz*rxp2_2))+(((2.0)*cj5*gclwh12_4*npx*pp*pz))+(((-0.000963180554)*gclwh10_4*pz))+(((0.1401930041)*cj5*gclwh6_8*r21*r22))+(((-0.001401930041)*gclwh8_3*r20*r22*sj5))+(((-0.07887)*cj5*gclwh14_10*pp*r21))+(((0.74858)*cj5*gclwh12_8*r22*rxp1_2))+(((-0.1399930041)*gclwh12_14*r20*rxp2_2*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh12_8*r20*r22*sj5))+(((0.104646247009178)*cj5*gclwh1_4*npz*r20*sj5))+(((0.0074858)*cj5*gclwh10_4*pp*r22))+(((-0.0074858)*gclwh4_3*r22*rxp2_2*(cj5*cj5)))+(((0.0149716)*gclwh14_4*npz*rxp0_2*sj5))+(((-2.0)*gclwh14_10*npy*npz*pz*(cj5*cj5)))+(((-0.74858)*gclwh4_3*pz*rxp2_2*sj5))+(((-0.052323123504589)*cj5*gclwh1_3*r20*r22*sj5))+(((-1.0)*cj5*gclwh12_4*r20*(pp*pp)))+(((-0.011057022233367)*gclwh8_10*r20))+((cj5*gclwh12_3*pp*pz*r20))+(((0.02)*gclwh10_3*npz*pz*r22*(sj5*sj5)))+(((0.07887)*gclwh6_10*pp*r21))+(((0.0015774)*gclwh6_10*rxp0_2*sj5))+(((-0.1399930041)*cj5*r22))+(((-0.00674192696225811)*gclwh3_4*r21*sj5))+(((-1.0)*cj5*gclwh14_4*r21*(pp*pp)))+(((-0.0074858)*gclwh14_3*r22*rxp0_2*sj5))+(((0.74858)*gclwh4_4*pp*rxp2_2*sj5))+(((-0.00138)*gclwh1_3*rxp1_2))+(((0.02)*gclwh10_3*(pz*pz)))+(((0.0015774)*gclwh8_10*rxp1_2*sj5))+(((-0.0096733172829)*gclwh8_3*r20))+(((-0.37429)*gclwh12_3*pp*r20*r22*(cj5*cj5)))+(((0.1401930041)*cj5*gclwh6_14*r21*rxp2_2))+(((0.0074858)*gclwh4_3*r22*rxp2_2*(sj5*sj5)))+(((0.0074858)*gclwh14_3*pz*r21*sj5))+(((0.138)*cj5*gclwh12_3*npx*pz))+(((-0.02)*gclwh4_8*r22*rxp2_2*(cj5*cj5)))+(((0.104646247009178)*cj5*gclwh10_4*npz*r22*sj5))+(((0.1399930041)*cj5*gclwh14_3*pz*r21))+(((0.74858)*pz))+(((-0.0918339764)*gclwh1_4*pp*r20*sj5))+(((0.37429)*cj5*gclwh6_3*pp*r21*r22))+(((-0.1881520318)*gclwh10_4*pp*r22*sj5))+(((0.74858)*cj5*gclwh4_8*r22*rxp2_2*sj5))+(((0.74858)*gclwh14_3*npy*pz*r22*(cj5*cj5)))+(((0.1399930041)*gclwh12_10*npz*r20*(cj5*cj5)))+(((0.138)*gclwh10_3*npz*pz*sj5))+(((-2.0)*cj5*gclwh12_3*npx*(pz*pz)))+(((-0.02)*cj5*gclwh6_10*npz*rxp0_2*sj5))+(((-0.00674192696225811)*cj5*gclwh14_4*r21))+(((-0.00674192696225811)*cj5*gclwh12_4*r20))+(((-0.004201790123)*cj5*gclwh14_3*r21*r22*sj5))+(((-0.00036050884955666)*gclwh14_4*r21*sj5))+(((0.74858)*cj5*gclwh8_4*npz*pp*r20))+(((-0.01)*gclwh8_3*pp*r20*r22*sj5))+(((-0.74858)*cj5*gclwh12_10*npz*rxp1_2))+(((-1.49716)*gclwh12_4*npx*npz*pz*(cj5*cj5)))+(((-0.02)*cj5*gclwh4_4*pp*rxp2_2))+(((-0.02)*gclwh1_4*pp*rxp1_2))+(((0.02)*gclwh8_4*npz*pp*r20*sj5))+(((-0.1401930041)*cj5*gclwh8_8*r20*r22))+(((-0.07887)*gclwh8_10*pp*r20))+(((-0.02)*gclwh1_3*npx*pz*r22*(sj5*sj5)))+((gclwh8_3*pp*pz*r20))+(((-1.0)*cj5*gclwh10_8*pp*sj5*(r22*r22)))+(((-0.052397981504589)*gclwh14_3*r21*r22*(cj5*cj5)))+(((0.02)*gclwh10_4*npz*pp*r22*(sj5*sj5)))+(((0.00675155876779811)*gclwh6_4*r21))+(((-0.0149716)*gclwh12_4*npz*rxp1_2*sj5))+(((-0.74858)*cj5*gclwh3_3*npy*pz*r22*sj5))+(((-0.0002)*gclwh1_3*r22*rxp1_2*sj5))+(((-0.02)*gclwh8_3*pz*rxp1_2*sj5))+(((0.02)*cj5*gclwh6_8*r22*rxp0_2*sj5))+(((0.0002)*gclwh8_3*r22*rxp1_2*(sj5*sj5)))+(((-0.37429)*cj5*gclwh8_3*pp*r20*r22))+(((0.74858)*gclwh14_4*npz*pp*r21*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh12_14*r20*rxp2_2*sj5))+(((0.15774)*gclwh8_10*npx*pz))+(((-0.0590405046)*gclwh14_10*rxp0_2))+(((-0.000590405046)*gclwh12_10*r20*sj5))+(((-1.0)*cj5*gclwh8_14*pp*r20*rxp2_2))+(((-0.000963180554)*cj5*gclwh4_4*rxp2_2))+(((-0.069)*cj5*gclwh14_3*pp*r21))+(((-0.2801860082)*cj5*gclwh14_3*r22*rxp0_2))+(((0.002799860082)*gclwh10_4*npz*r22*(sj5*sj5)))+(((-0.0074858)*r22*sj5))+(((-0.0074858)*gclwh12_4*pp*r20*sj5))+(((0.37429)*cj5*gclwh3_3*pp*r21*r22*sj5))+(((-0.74858)*cj5*gclwh6_3*pz*rxp0_2))+(((-0.0299432)*cj5*gclwh6_4*npz*rxp0_2*sj5))+(((0.74858)*cj5*gclwh8_3*npx*pz*r22))+(((-0.02)*gclwh3_3*pz*rxp0_2))+(((0.036050884955666)*gclwh4_4*rxp2_2*sj5))+(((0.0149716)*cj5*gclwh8_3*r22*rxp1_2*sj5))+(((0.036050884955666)*cj5*gclwh6_4*rxp0_2))+(((0.0590405046)*gclwh12_10*rxp1_2))+((gclwh6_4*r21*(pp*pp)))+(((-0.0149716)*cj5*gclwh10_3*pz*r22))+(((-0.1401930041)*cj5*gclwh6_10*npz*r21))+(((0.002803860082)*gclwh8_4*npz*r20*sj5))+(((-0.1399930041)*cj5*gclwh10_14*r22*rxp2_2*sj5))+(((-0.5603720164)*gclwh6_4*npz*rxp0_2*(cj5*cj5)))+(((-0.1399930041)*gclwh14_8*r21*r22*(cj5*cj5)))+(((2.0)*gclwh12_8*npx*pz*r22*(cj5*cj5)))+(((-1.0)*gclwh12_8*pp*r20*r22*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh1_3*pz*r20))+(((0.00138)*gclwh8_3*rxp1_2*sj5))+(((-1.0)*gclwh1_3*pp*pz*r20*sj5))+(((0.036050884955666)*gclwh12_4*rxp1_2))+(((-0.1399930041)*gclwh14_14*r21*rxp2_2*(cj5*cj5)))+(((0.000149716)*gclwh12_4*npz*r20*(sj5*sj5)))+(((-0.1883520318)*gclwh8_4*pp*r20))+(((0.02)*cj5*gclwh6_14*rxp0_2*rxp2_2*sj5))+(((0.02)*gclwh3_4*pp*rxp0_2))+(((2.0)*cj5*gclwh14_4*npy*pp*pz))+(((-0.74858)*cj5*gclwh3_4*npz*pp*r21*sj5))+(((-0.1399930041)*cj5*gclwh10_8*sj5*(r22*r22)))+(((-0.37429)*gclwh14_3*pp*r21*r22*(cj5*cj5)))+(((0.002801860082)*gclwh10_3*(cj5*cj5)*(r22*r22)))+(((-0.74858)*cj5*gclwh14_8*r22*rxp0_2))+(((-0.0096595172829)*gclwh1_3*r20*sj5))+(((0.15774)*cj5*gclwh12_10*npx*pz))+(((0.1883520318)*gclwh6_4*pp*r21))+(((0.05165202)*cj5*gclwh6_3*rxp0_2))+(((-0.04)*cj5*gclwh14_4*npy*npz*pz*sj5))+((cj5*gclwh10_10*npz*pp*r22*sj5))+(((2.0)*gclwh1_3*npx*sj5*(pz*pz)))+(((-0.0074858)*gclwh10_10*npz*r22*(cj5*cj5)))+(((0.000963180554)*gclwh8_4*rxp1_2*sj5))+(((0.74858)*gclwh8_8*r22*rxp1_2*(cj5*cj5)))+(((0.2801860082)*cj5*gclwh12_3*r22*rxp1_2))+(((-0.02)*gclwh6_4*npz*pp*r21*sj5))+(((0.1401930041)*gclwh8_3*pz*r20))+(((-0.011041248233367)*cj5*gclwh14_10*r21))+(((0.0074858)*cj5*gclwh3_4*pp*r21))+(((-1.49716)*cj5*gclwh8_4*npx*npz*pz))+(((0.104795963009178)*gclwh14_4*npz*r21*(cj5*cj5)))+(((-0.0004)*gclwh8_4*npz*rxp1_2*(sj5*sj5)))+(((-0.0074858)*cj5*gclwh14_14*r21*rxp2_2*sj5))+(((-0.002803860082)*gclwh6_4*npz*r21*sj5))+(((-0.138)*gclwh3_3*npy*pz*sj5))+(((-0.5603720164)*gclwh8_4*npz*rxp1_2*(cj5*cj5)))+(((-0.069)*gclwh8_3*pp*r20))+(((0.02)*cj5*gclwh4_3*pz*rxp2_2))+(((0.0963180554)*gclwh8_4*npx*pz))+(((-0.1401930041)*cj5*gclwh8_14*r20*rxp2_2))+(((-0.0963180554)*gclwh6_4*npy*pz))+(((0.74858)*gclwh6_8*r22*rxp0_2*(cj5*cj5)))+(((-0.04)*gclwh10_4*pz*(npz*npz)*(sj5*sj5)))+(((-1.0)*gclwh14_14*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.000590405046)*gclwh14_10*r21*sj5))+(((-2.0)*cj5*gclwh6_8*npy*pz*r22))+(((-0.00036050884955666)*gclwh12_4*r20*sj5))+(((-1.0)*gclwh12_14*pp*r20*rxp2_2*(cj5*cj5)))+(((0.0005165202)*cj5*gclwh1_3*r20))+(((0.008403580246)*cj5*gclwh14_4*npz*r21*sj5))+(((-0.005603720164)*gclwh10_4*npz*r22*(cj5*cj5)))+(((0.0590405046)*cj5*gclwh8_10*rxp1_2))+((cj5*pp*r22))+(((-0.011041248233367)*cj5*gclwh12_10*r20))+(((0.0074858)*gclwh10_14*r22*rxp2_2*(cj5*cj5)))+(((0.000963180554)*gclwh6_4*rxp0_2*sj5))+(((-0.005603720164)*gclwh1_4*npz*r20*(cj5*cj5)))+(((-0.1401930041)*gclwh6_3*pz*r21))+(((0.138)*cj5*gclwh14_3*npy*pz))+(((-0.74858)*gclwh14_4*pp*rxp0_2))+(((-0.74858)*gclwh6_10*npz*rxp0_2*(cj5*cj5)))+(((0.04)*gclwh1_4*npx*npz*pz*(sj5*sj5)))+(((0.74858)*gclwh14_3*pz*rxp0_2))+(((0.104945679009178)*cj5*gclwh8_4*npz*r20))+(((0.05165202)*cj5*gclwh8_3*rxp1_2))+(((0.0149716)*cj5*gclwh6_3*r22*rxp0_2*sj5))+(((0.052472839504589)*cj5*gclwh6_3*r21*r22))+((gclwh1_4*r20*sj5*(pp*pp)))+(((-0.052472839504589)*cj5*gclwh8_3*r20*r22))+(((-0.138)*gclwh1_3*npx*pz*sj5))+(((0.0002)*gclwh3_3*r22*rxp0_2*sj5))+(((0.00138)*gclwh3_3*rxp0_2))+(((0.02)*gclwh8_3*npx*pz*r22*sj5))+(((0.002799860082)*gclwh3_4*npz*r21*(sj5*sj5)))+(((0.1399930041)*gclwh14_10*npz*r21*(cj5*cj5)))+(((-0.001399930041)*gclwh10_3*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh14_8*npy*pz*r22*(cj5*cj5)))+(((-0.01)*cj5*gclwh14_3*pp*r21*r22*sj5))+(((1.49716)*cj5*gclwh3_4*npy*npz*pz*sj5))+(((-1.0)*gclwh8_4*r20*(pp*pp)))+(((0.002801860082)*gclwh1_3*r20*r22*(cj5*cj5)))+(((-0.74858)*cj5*gclwh8_3*pz*rxp1_2))+(((0.02)*cj5*gclwh14_3*npy*pz*r22*sj5))+(((-0.74858)*gclwh8_10*npz*rxp1_2*(cj5*cj5)))+(((0.0149716)*cj5*gclwh10_4*npz*pz))+(((0.1399930041)*gclwh1_3*pz*r20*sj5))+(((0.00036050884955666)*cj5*gclwh1_4*r20))+(((0.008403580246)*cj5*gclwh12_4*npz*r20*sj5))+(((0.011057022233367)*gclwh6_10*r21))+(((-2.0)*gclwh12_10*npx*npz*pz*(cj5*cj5)))+(((2.0)*cj5*gclwh8_14*npx*pz*rxp2_2))+(((2.0)*gclwh14_14*npy*pz*rxp2_2*(cj5*cj5)))+(((-0.74858)*cj5*gclwh1_4*npz*pp*r20*sj5))+(((0.74858)*gclwh8_14*rxp1_2*rxp2_2*(cj5*cj5)))+(((0.1399930041)*cj5*gclwh12_3*pz*r20))+(((0.74858)*cj5*gclwh6_4*pp*rxp0_2))+(((-0.052323123504589)*cj5*gclwh10_3*sj5*(r22*r22)))+(((0.74858)*gclwh12_4*pp*rxp1_2))+(((0.02)*gclwh1_3*pz*rxp1_2))+(((0.069)*gclwh6_3*pp*r21))+(((0.02)*cj5*gclwh12_3*npx*pz*r22*sj5))+(((-2.0)*gclwh6_4*npy*pp*pz))+(((-0.0096595172829)*cj5*gclwh12_3*r20))+(((2.0)*gclwh8_4*npx*pp*pz))+(((0.15774)*gclwh10_10*npz*pz*sj5))+((cj5*gclwh14_3*pp*pz*r21))+(((0.104646247009178)*cj5*gclwh3_4*npz*r21*sj5))+(((0.1399930041)*cj5*gclwh10_10*npz*r22*sj5))+(((0.74858)*cj5*gclwh14_10*npz*rxp0_2))+(((-0.0963180554)*gclwh1_4*npx*pz*sj5))+(((-0.0096595172829)*gclwh10_3*r22*sj5))+(((0.74858)*gclwh12_4*npz*pp*r20*(cj5*cj5)))+(((0.1401930041)*cj5*gclwh8_10*npz*r20))+(((0.02)*cj5*gclwh8_14*rxp1_2*rxp2_2*sj5))+(((-0.07887)*cj5*gclwh12_10*pp*r20))+(((-0.74858)*cj5*gclwh1_3*npx*pz*r22*sj5))+(((0.0004)*gclwh1_4*npz*rxp1_2*sj5))+(((1.49716)*cj5*gclwh6_4*npy*npz*pz))+(((0.74858)*cj5*gclwh10_3*npz*pz*r22*sj5))+(((-0.001399930041)*gclwh1_3*r20*r22*(sj5*sj5)))+(((0.74858)*cj5*gclwh10_4*npz*pp*r22*sj5))+(((0.0074858)*cj5*gclwh14_10*npz*r21*sj5))+(((0.02)*gclwh6_4*pp*rxp0_2*sj5))+(((-0.0004)*gclwh3_4*npz*rxp0_2*sj5))+(((-0.0015774)*gclwh10_10*pz))+(((0.0005165202)*cj5*gclwh10_3*r22))+(((0.37429)*cj5*gclwh1_3*pp*r20*r22*sj5))+(((0.74858)*cj5*gclwh8_4*pp*rxp1_2))+(((0.0074858)*cj5*gclwh12_10*npz*r20*sj5))+(((-0.02)*cj5*gclwh10_8*pz*r22))+(((0.00138)*gclwh6_3*rxp0_2*sj5))+(((-0.00138)*gclwh10_3*pz))+(((0.104795963009178)*gclwh12_4*npz*r20*(cj5*cj5)))+((gclwh14_10*npz*pp*r21*(cj5*cj5)))+(((0.74858)*gclwh12_3*npx*pz*r22*(cj5*cj5)))+(((-0.01)*cj5*gclwh12_3*pp*r20*r22*sj5))+(((0.000963180554)*gclwh3_4*rxp0_2))+(((-2.0)*cj5*gclwh10_10*pz*sj5*(npz*npz)))+(((-0.02)*cj5*gclwh8_10*npz*rxp1_2*sj5))+(((-1.0)*gclwh10_4*r22*sj5*(pp*pp)))+(((-0.02)*cj5*gclwh10_14*pz*rxp2_2))+(((0.0963180554)*cj5*gclwh14_4*npy*pz))+(((-0.036050884955666)*gclwh14_4*rxp0_2))+(((-0.0074858)*cj5*gclwh3_3*pz*r21))+((cj5*gclwh6_8*pp*r21*r22))+(((2.0)*cj5*gclwh8_8*npx*pz*r22))+(((-0.1399930041)*gclwh12_8*r20*r22*(cj5*cj5)))+(((-1.0)*gclwh6_3*pp*pz*r21))+(((0.0074858)*gclwh10_8*(cj5*cj5)*(r22*r22)))+(((0.01)*gclwh3_3*pp*r21*r22*(sj5*sj5)))+(((-0.0005165202)*gclwh12_3*r20*sj5))+(((0.02)*cj5*gclwh8_8*r22*rxp1_2*sj5))+(((0.05165202)*gclwh12_3*rxp1_2))+(((-0.07887)*gclwh10_10*pp*r22*sj5))+(((-7.4858e-5)*gclwh14_3*r21*r22*(sj5*sj5)))+(((-0.74858)*gclwh12_3*pz*rxp1_2))+(((-0.00674192696225811)*gclwh1_4*r20*sj5))+(((2.0)*cj5*gclwh6_10*npy*npz*pz))+(((0.2801860082)*gclwh8_3*r22*rxp1_2*(cj5*cj5)))+(((-0.04)*gclwh8_4*npx*npz*pz*sj5))+(((2.0)*cj5*gclwh10_14*npz*pz*rxp2_2*sj5))+(((-0.0074858)*cj5*gclwh1_3*r22*rxp1_2))+(((-0.74858)*cj5*gclwh6_3*npy*pz*r22))+(((-2.0)*gclwh10_3*npz*sj5*(pz*pz)))+(((0.001401930041)*gclwh6_3*r21*r22*sj5))+(((0.0963180554)*cj5*gclwh12_4*npx*pz))+(((0.0005165202)*cj5*gclwh3_3*r21))+(((-0.0074858)*gclwh14_4*pp*r21*sj5))+(((-0.74858)*cj5*gclwh14_14*rxp0_2*rxp2_2))+(((0.138)*gclwh8_3*npx*pz))+(((0.74858)*cj5*gclwh12_14*rxp1_2*rxp2_2))+(((-0.5603720164)*cj5*gclwh12_4*npz*rxp1_2))+(((-0.02)*gclwh1_4*npz*pp*r20*(sj5*sj5)))+(((0.02)*cj5*gclwh10_10*npz*pz))+(((-1.0)*cj5*gclwh8_8*pp*r20*r22))+(((-7.4858e-5)*gclwh12_3*r20*r22*(sj5*sj5)))+(((0.0149716)*cj5*gclwh1_4*npz*rxp1_2))+(((-0.052323123504589)*cj5*gclwh3_3*r21*r22*sj5))+(((-0.00675155876779811)*gclwh8_4*r20))+(((-0.052397981504589)*gclwh12_3*r20*r22*(cj5*cj5)))+(((2.0)*cj5*gclwh10_8*npz*pz*r22*sj5))+(((0.05165202)*gclwh4_3*rxp2_2*sj5))+(((0.2799860082)*cj5*gclwh4_3*r22*rxp2_2*sj5))+(((0.000149716)*gclwh14_4*npz*r21*(sj5*sj5)))+(((0.04)*gclwh6_4*npy*npz*pz*sj5))+(((0.0074858)*gclwh12_3*r22*rxp1_2*sj5))+(((-0.104945679009178)*cj5*gclwh6_4*npz*r21))+(((-0.004201790123)*cj5*gclwh12_3*r20*r22*sj5))+(((0.002801860082)*gclwh3_3*r21*r22*(cj5*cj5)))+(((-0.04)*cj5*gclwh12_4*npx*npz*pz*sj5))+(((0.069)*gclwh1_3*pp*r20*sj5))+(((-0.00674192696225811)*gclwh10_4*r22*sj5))+(((0.0074858)*cj5*gclwh1_4*pp*r20))+(((0.0149716)*gclwh4_4*npz*rxp2_2*(cj5*cj5)))+(((-0.5599720164)*cj5*gclwh4_4*npz*rxp2_2*sj5))+(((2.0)*gclwh3_3*npy*sj5*(pz*pz)))+(((2.0)*gclwh12_14*npx*pz*rxp2_2*(cj5*cj5)))+((gclwh3_4*r21*sj5*(pp*pp)))+(((-0.0149716)*gclwh4_4*npz*rxp2_2*(sj5*sj5)))+((cj5*gclwh8_10*npz*pp*r20))+(((-0.0918339764)*gclwh3_4*pp*r21*sj5))+(((0.01)*gclwh1_3*pp*r20*r22*(sj5*sj5)))+(((0.74858)*gclwh6_14*rxp0_2*rxp2_2*(cj5*cj5)))+(((0.00036050884955666)*cj5*gclwh3_4*r21))+(((-0.1881520318)*cj5*gclwh12_4*pp*r20))+(((-1.49716)*cj5*gclwh10_4*pz*sj5*(npz*npz))));
IkReal x586=(gclwh10_14*r22);
IkReal x587=((0.0193190345658)*cj5);
IkReal x588=(gclwh14_14*r21);
IkReal x589=((1.49716)*rxp1_2);
IkReal x590=(gclwh6_14*r21);
IkReal x591=((1.18168)*pz);
IkReal x592=(gclwh8_14*npx);
IkReal x593=(gclwh8_14*r20);
IkReal x594=(npy*pz);
IkReal x595=(gclwh12_14*r20);
IkReal x596=(rxp1_2*sj5);
IkReal x597=((0.2799860082)*cj5);
IkReal x598=(gclwh12_2*r20);
IkReal x599=(gclwh14_2*r21);
IkReal x600=((2.0)*pp);
IkReal x601=(gclwh14_14*rxp0_2);
IkReal x602=(gclwh10_14*pz);
IkReal x603=(gclwh8_2*r20);
IkReal x604=((0.0149716)*sj5);
IkReal x605=((0.004422910072)*sj5);
IkReal x606=((0.276)*pz);
IkReal x607=((0.0010330404)*sj5);
IkReal x608=(gclwh6_2*rxp0_2);
IkReal x609=(cj5*gclwh14_14);
IkReal x610=(pp*sj5);
IkReal x611=(gclwh6_2*r21);
IkReal x612=((0.138)*pp);
IkReal x613=((4.0)*cj5);
IkReal x614=((0.082713466542444)*cj5);
IkReal x615=(gclwh10_2*r22);
IkReal x616=((0.4422910072)*rxp1_2);
IkReal x617=(cj5*gclwh8_14);
IkReal x618=((0.59084)*pp);
IkReal x619=(npz*sj5);
IkReal x620=(gclwh10_2*pz);
IkReal x621=(gclwh4_2*rxp2_2);
IkReal x622=((0.10330404)*rxp1_2);
IkReal x623=(npx*pz);
IkReal x624=(cj5*gclwh12_14*npx);
IkReal x625=(gclwh6_14*rxp0_2*sj5);
IkReal x626=(cj5*gclwh6_14*rxp0_2);
op[62]=(((cj5*x599*x600))+(((4.0)*gclwh6_2*x594))+(((0.59084)*x586*x610))+(((-1.0)*gclwh12_2*x613*x623))+(((0.04)*cj5*x621))+(((0.2799860082)*sj5*x615))+(((-0.082831634542444)*x590))+(((-1.0)*cj5*gclwh8_2*x589))+(((-0.0149716)*cj5*x615))+((x595*x605))+(((0.04)*x620))+((cj5*x598*x600))+(((0.082831634542444)*x593))+(((-1.0)*x590*x618))+((x593*x618))+((x595*x614))+((gclwh6_14*npy*x591))+(((0.0118168)*x602))+(((1.49716)*gclwh14_2*rxp0_2))+(((-0.04)*gclwh8_2*x596))+(((0.2803860082)*x603))+((x600*x603))+(((-1.49716)*sj5*x621))+(((-1.0)*gclwh12_2*x589))+(((-0.04)*sj5*x608))+(((-1.0)*x591*x624))+(((0.082713466542444)*sj5*x586))+((x588*x614))+(((-0.2803860082)*x611))+(((-1.0)*gclwh10_14*x591*x619))+((cj5*x588*x618))+((x588*x605))+(((-1.49716)*cj5*x608))+((cj5*x595*x618))+(((-1.0)*x600*x611))+(((-0.004422910072)*cj5*x586))+((sj5*x600*x615))+(((-0.0118168)*x625))+((x599*x604))+(((-4.0)*gclwh8_2*x623))+((x597*x599))+((x597*x598))+(((-4.0)*x619*x620))+(((-0.4422910072)*x626))+(((-1.0)*x616*x617))+(((0.4422910072)*x601))+(((-0.0118168)*gclwh8_14*x596))+(((-1.0)*x591*x592))+(((-1.0)*npy*x591*x609))+((x598*x604))+(((-1.0)*gclwh14_2*x594*x613))+(((-1.0)*gclwh12_14*x616)));
op[63]=((((-1.0)*x592*x606))+(((0.00276)*x602))+(((-1.0)*gclwh12_14*x622))+((x595*x607))+(((0.0193466345658)*x593))+(((-1.0)*x590*x612))+((x593*x612))+(((-0.0010330404)*cj5*x586))+(((-1.0)*x606*x624))+((x587*x588))+(((-0.00276)*x625))+(((-1.0)*x617*x622))+((cj5*x588*x612))+((x588*x607))+((cj5*x595*x612))+(((0.138)*x586*x610))+(((0.10330404)*x601))+(((0.0193190345658)*sj5*x586))+(((-0.276)*x594*x609))+(((-0.00276)*gclwh8_14*x596))+(((-0.0193466345658)*x590))+(((-0.276)*x602*x619))+((x587*x595))+(((0.276)*gclwh6_14*x594))+(((-0.10330404)*x626)));
op[64]=((0.0825119764)+(((0.74858)*gclwh12_8*rxp1_2))+(((-0.1399930041)*cj5*gclwh14_8*r21))+(((-0.02)*cj5*gclwh4_8*rxp2_2))+(((-0.041356733271222)*cj5*gclwh12_12*r20))+(((-0.05165202)*gclwh14_10*rxp0_2))+(((0.138)*gclwh8_10*npx*pz))+(((0.2211455036)*gclwh4_12*rxp2_2*sj5))+(((-0.0059084)*cj5*gclwh4_12*rxp2_2))+(((2.0)*cj5*gclwh12_8*npx*pz))+(((0.0074858)*cj5*gclwh10_8*r22))+(((-2.0)*gclwh6_8*npy*pz))+(((0.59084)*cj5*gclwh14_12*npy*pz))+(((-0.041415817271222)*gclwh8_12*r20))+(((0.138)*cj5*gclwh14_10*npy*pz))+(((0.74858)*cj5*gclwh8_8*rxp1_2))+(((0.74858)*gclwh4_8*rxp2_2*sj5))+(((-0.2211455036)*gclwh14_12*rxp0_2))+(((0.29542)*gclwh6_12*pp*r21))+(((-0.1399930041)*cj5*gclwh12_8*r20))+(((0.041415817271222)*gclwh6_12*r21))+(((0.0059084)*gclwh8_12*rxp1_2*sj5))+(((0.2211455036)*cj5*gclwh6_12*rxp0_2))+(((-0.1399930041)*gclwh10_8*r22*sj5))+(((-0.0096733172829)*gclwh8_10*r20))+(((0.59084)*cj5*gclwh12_12*npx*pz))+(((-0.74858)*gclwh14_8*rxp0_2))+(((0.05165202)*cj5*gclwh8_10*rxp1_2))+(((-1.0)*cj5*gclwh14_8*pp*r21))+(((0.002211455036)*cj5*gclwh10_12*r22))+(((-0.069)*cj5*gclwh12_10*pp*r20))+(((-0.138)*gclwh6_10*npy*pz))+(((-0.29542)*cj5*gclwh12_12*pp*r20))+(((0.02)*gclwh8_8*rxp1_2*sj5))+(((0.138)*gclwh10_10*npz*pz*sj5))+(((-0.02)*gclwh10_8*pz))+(((0.2211455036)*gclwh12_12*rxp1_2))+(((-0.29542)*gclwh8_12*pp*r20))+(((0.00138)*gclwh6_10*rxp0_2*sj5))+(((-0.002211455036)*gclwh12_12*r20*sj5))+(((-0.002211455036)*gclwh14_12*r21*sj5))+(((-0.0096595172829)*gclwh10_10*r22*sj5))+(((-0.0096595172829)*cj5*gclwh12_10*r20))+((gclwh6_8*pp*r21))+(((0.02)*gclwh6_8*rxp0_2*sj5))+(((-0.069)*gclwh10_10*pp*r22*sj5))+(((0.0005165202)*cj5*gclwh10_10*r22))+(((-0.0005165202)*gclwh12_10*r20*sj5))+(((-0.0074858)*gclwh14_8*r21*sj5))+(((-1.0)*gclwh8_8*pp*r20))+(((-0.00138)*gclwh10_10*pz))+(((0.0096733172829)*gclwh6_10*r21))+(((0.05165202)*gclwh12_10*rxp1_2))+(((-0.1401930041)*gclwh8_8*r20))+(((-0.041356733271222)*gclwh10_12*r22*sj5))+(((0.59084)*gclwh8_12*npx*pz))+(((-0.59084)*gclwh6_12*npy*pz))+(((2.0)*gclwh8_8*npx*pz))+(((0.05165202)*cj5*gclwh6_10*rxp0_2))+(((0.1401930041)*gclwh6_8*r21))+(((-0.069)*cj5*gclwh14_10*pp*r21))+(((0.2211455036)*cj5*gclwh8_12*rxp1_2))+(((-0.0096595172829)*cj5*gclwh14_10*r21))+(((-0.29542)*cj5*gclwh14_12*pp*r21))+(((-0.069)*gclwh8_10*pp*r20))+(((0.138)*cj5*gclwh12_10*npx*pz))+(((-0.29542)*gclwh10_12*pp*r22*sj5))+(((0.069)*gclwh6_10*pp*r21))+(((-0.041356733271222)*cj5*gclwh14_12*r21))+(((0.59084)*gclwh10_12*npz*pz*sj5))+(((0.0059084)*gclwh6_12*rxp0_2*sj5))+(((-0.0059084)*gclwh10_12*pz))+(((-0.0074858)*gclwh12_8*r20*sj5))+(((0.00138)*gclwh8_10*rxp1_2*sj5))+(((-0.0005165202)*gclwh14_10*r21*sj5))+(((-1.0)*gclwh10_8*pp*r22*sj5))+(((2.0)*gclwh10_8*npz*pz*sj5))+(((2.0)*cj5*gclwh14_8*npy*pz))+(((-1.0)*cj5*gclwh12_8*pp*r20))+(((0.74858)*cj5*gclwh6_8*rxp0_2)));
op[65]=((0.04076796)+((gclwh12_10*npz*pp*r20*(cj5*cj5)))+(((0.0590405046)*cj5*gclwh6_10*rxp0_2))+(((-0.005603720164)*gclwh3_4*npz*r21*(cj5*cj5)))+(((-2.0)*cj5*gclwh8_10*npx*npz*pz))+(((0.0096595172829)*cj5*gclwh14_3*r21))+(((0.5603720164)*cj5*gclwh14_4*npz*rxp0_2))+((cj5*gclwh6_14*pp*r21*rxp2_2))+(((-0.001399930041)*gclwh3_3*r21*r22*(sj5*sj5)))+(((-2.0)*cj5*npz*pz))+(((-2.0)*gclwh8_3*npx*(pz*pz)))+(((-0.74858)*cj5*gclwh6_4*npz*pp*r21))+(((0.01)*gclwh6_3*pp*r21*r22*sj5))+(((-2.0)*cj5*gclwh14_3*npy*(pz*pz)))+(((0.0074858)*cj5*gclwh3_3*r22*rxp0_2))+(((0.02)*gclwh8_4*pp*rxp1_2*sj5))+(((-1.0)*cj5*gclwh6_10*npz*pp*r21))+(((2.0)*gclwh10_4*npz*pp*pz*sj5))+(((-0.138)*gclwh10_3*npz*pz*sj5))+(((-0.0004)*gclwh6_4*npz*rxp0_2*(sj5*sj5)))+(((-0.05165202)*gclwh4_3*rxp2_2*sj5))+(((-0.02)*gclwh6_3*pz*rxp0_2*sj5))+(((0.036050884955666)*cj5*gclwh8_4*rxp1_2))+(((-0.0299432)*cj5*gclwh8_4*npz*rxp1_2*sj5))+(((-0.02)*gclwh3_3*npy*pz*r22*(sj5*sj5)))+(((-2.0)*gclwh3_4*npy*pp*pz*sj5))+(((0.2801860082)*gclwh6_3*r22*rxp0_2*(cj5*cj5)))+(((0.00036050884955666)*cj5*gclwh10_4*r22))+(((0.1397930041)*gclwh10_3*pz*r22*sj5))+(((0.02)*cj5*gclwh14_4*npz*pp*r21*sj5))+(((-0.0963180554)*gclwh3_4*npy*pz*sj5))+(((-0.069)*gclwh1_3*pp*r20*sj5))+(((-0.01)*gclwh10_3*pp*(r22*r22)*(sj5*sj5)))+(((-0.02)*gclwh10_4*pp*pz))+(((2.0)*gclwh6_3*npy*(pz*pz)))+(((-2.0)*gclwh1_4*npx*pp*pz*sj5))+(((-0.000963180554)*gclwh1_4*rxp1_2))+(((0.0002)*gclwh6_3*r22*rxp0_2*(sj5*sj5)))+(((-0.02)*gclwh3_4*npz*pp*r21*(sj5*sj5)))+(((-0.37429)*cj5*gclwh10_3*pp*sj5*(r22*r22)))+(((0.15774)*cj5*gclwh14_10*npy*pz))+(((0.002799860082)*gclwh1_4*npz*r20*(sj5*sj5)))+(((0.04)*gclwh3_4*npy*npz*pz*(sj5*sj5)))+(((-1.0)*cj5*gclwh10_14*pp*r22*rxp2_2*sj5))+(((-0.1881520318)*cj5*gclwh14_4*pp*r21))+(((-0.0149716)*cj5*gclwh3_4*npz*rxp0_2))+(((1.49716)*cj5*gclwh1_4*npx*npz*pz*sj5))+(((0.0074858)*gclwh12_3*pz*r20*sj5))+(((-1.0)*gclwh14_8*pp*r21*r22*(cj5*cj5)))+(((-1.0)*gclwh3_3*pp*pz*r21*sj5))+(((0.0096595172829)*gclwh3_3*r21*sj5))+(((-0.02)*gclwh6_3*npy*pz*r22*sj5))+(((-0.15774)*gclwh6_10*npy*pz))+(((-0.0074858)*cj5*gclwh14_8*r21*r22*sj5))+(((0.02)*cj5*gclwh12_4*npz*pp*r20*sj5))+((gclwh10_3*pp*pz*r22*sj5))+(((0.0967180554)*gclwh10_4*npz*pz*sj5))+(((-1.49716)*gclwh14_4*npy*npz*pz*(cj5*cj5)))+(((-0.011041248233367)*gclwh10_10*r22*sj5))+(((0.000590405046)*cj5*gclwh10_10*r22))+(((-0.0005165202)*cj5*gclwh10_3*r22))+(((-0.069)*gclwh3_3*pp*r21*sj5))+(((0.1399930041)*gclwh3_3*pz*r21*sj5))+(((-2.0)*cj5*gclwh6_14*npy*pz*rxp2_2))+(((2.0)*cj5*gclwh12_4*npx*pp*pz))+(((-0.000963180554)*gclwh10_4*pz))+(((0.1401930041)*cj5*gclwh6_8*r21*r22))+(((-0.001401930041)*gclwh8_3*r20*r22*sj5))+(((-0.07887)*cj5*gclwh14_10*pp*r21))+(((0.74858)*cj5*gclwh12_8*r22*rxp1_2))+(((-0.1399930041)*gclwh12_14*r20*rxp2_2*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh12_8*r20*r22*sj5))+(((0.104646247009178)*cj5*gclwh1_4*npz*r20*sj5))+(((0.0074858)*cj5*gclwh10_4*pp*r22))+(((-0.0074858)*gclwh4_3*r22*rxp2_2*(cj5*cj5)))+(((0.0149716)*gclwh14_4*npz*rxp0_2*sj5))+(((-2.0)*gclwh14_10*npy*npz*pz*(cj5*cj5)))+(((-0.74858)*gclwh4_3*pz*rxp2_2*sj5))+(((0.00138)*cj5*gclwh4_3*rxp2_2))+(((-0.052323123504589)*cj5*gclwh1_3*r20*r22*sj5))+(((-1.0)*cj5*gclwh12_4*r20*(pp*pp)))+(((-0.011057022233367)*gclwh8_10*r20))+((cj5*gclwh12_3*pp*pz*r20))+(((0.02)*gclwh10_3*npz*pz*r22*(sj5*sj5)))+(((0.07887)*gclwh6_10*pp*r21))+(((0.0015774)*gclwh6_10*rxp0_2*sj5))+(((-0.1399930041)*cj5*r22))+(((-0.00674192696225811)*gclwh3_4*r21*sj5))+(((-1.0)*cj5*gclwh14_4*r21*(pp*pp)))+(((-0.0074858)*gclwh14_3*r22*rxp0_2*sj5))+(((0.0096595172829)*gclwh10_3*r22*sj5))+(((0.74858)*gclwh4_4*pp*rxp2_2*sj5))+(((0.02)*gclwh10_3*(pz*pz)))+(((0.0015774)*gclwh8_10*rxp1_2*sj5))+(((-0.37429)*gclwh12_3*pp*r20*r22*(cj5*cj5)))+(((0.1401930041)*cj5*gclwh6_14*r21*rxp2_2))+(((0.0074858)*gclwh4_3*r22*rxp2_2*(sj5*sj5)))+(((0.0074858)*gclwh14_3*pz*r21*sj5))+(((-0.02)*gclwh4_8*r22*rxp2_2*(cj5*cj5)))+(((0.104646247009178)*cj5*gclwh10_4*npz*r22*sj5))+(((0.1399930041)*cj5*gclwh14_3*pz*r21))+(((0.74858)*pz))+(((-0.069)*gclwh6_3*pp*r21))+(((-0.0918339764)*gclwh1_4*pp*r20*sj5))+(((0.37429)*cj5*gclwh6_3*pp*r21*r22))+(((-0.1881520318)*gclwh10_4*pp*r22*sj5))+(((0.74858)*cj5*gclwh4_8*r22*rxp2_2*sj5))+(((0.74858)*gclwh14_3*npy*pz*r22*(cj5*cj5)))+(((0.1399930041)*gclwh12_10*npz*r20*(cj5*cj5)))+(((0.069)*gclwh10_3*pp*r22*sj5))+(((-2.0)*cj5*gclwh12_3*npx*(pz*pz)))+(((0.0096595172829)*cj5*gclwh12_3*r20))+(((-0.02)*cj5*gclwh6_10*npz*rxp0_2*sj5))+(((-0.00674192696225811)*cj5*gclwh14_4*r21))+(((-0.138)*gclwh8_3*npx*pz))+(((-0.00674192696225811)*cj5*gclwh12_4*r20))+(((-0.004201790123)*cj5*gclwh14_3*r21*r22*sj5))+(((-0.00036050884955666)*gclwh14_4*r21*sj5))+(((0.74858)*cj5*gclwh8_4*npz*pp*r20))+(((-0.01)*gclwh8_3*pp*r20*r22*sj5))+(((-0.74858)*cj5*gclwh12_10*npz*rxp1_2))+(((-1.49716)*gclwh12_4*npx*npz*pz*(cj5*cj5)))+(((-0.02)*cj5*gclwh4_4*pp*rxp2_2))+(((-0.02)*gclwh1_4*pp*rxp1_2))+(((0.02)*gclwh8_4*npz*pp*r20*sj5))+(((-0.1401930041)*cj5*gclwh8_8*r20*r22))+(((-0.07887)*gclwh8_10*pp*r20))+(((0.069)*gclwh8_3*pp*r20))+(((-0.02)*gclwh1_3*npx*pz*r22*(sj5*sj5)))+((gclwh8_3*pp*pz*r20))+(((-1.0)*cj5*gclwh10_8*pp*sj5*(r22*r22)))+(((-0.052397981504589)*gclwh14_3*r21*r22*(cj5*cj5)))+(((0.02)*gclwh10_4*npz*pp*r22*(sj5*sj5)))+(((0.00675155876779811)*gclwh6_4*r21))+(((-0.0149716)*gclwh12_4*npz*rxp1_2*sj5))+(((-0.74858)*cj5*gclwh3_3*npy*pz*r22*sj5))+(((-0.0002)*gclwh1_3*r22*rxp1_2*sj5))+(((-0.02)*gclwh8_3*pz*rxp1_2*sj5))+(((0.02)*cj5*gclwh6_8*r22*rxp0_2*sj5))+(((0.0002)*gclwh8_3*r22*rxp1_2*(sj5*sj5)))+(((-0.37429)*cj5*gclwh8_3*pp*r20*r22))+(((0.74858)*gclwh14_4*npz*pp*r21*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh12_14*r20*rxp2_2*sj5))+(((0.138)*gclwh6_3*npy*pz))+(((0.15774)*gclwh8_10*npx*pz))+(((-0.0590405046)*gclwh14_10*rxp0_2))+(((-0.000590405046)*gclwh12_10*r20*sj5))+(((-1.0)*cj5*gclwh8_14*pp*r20*rxp2_2))+(((-0.000963180554)*cj5*gclwh4_4*rxp2_2))+(((-0.2801860082)*cj5*gclwh14_3*r22*rxp0_2))+(((0.002799860082)*gclwh10_4*npz*r22*(sj5*sj5)))+(((-0.0074858)*r22*sj5))+(((-0.0074858)*gclwh12_4*pp*r20*sj5))+(((0.37429)*cj5*gclwh3_3*pp*r21*r22*sj5))+(((-0.74858)*cj5*gclwh6_3*pz*rxp0_2))+(((-0.0299432)*cj5*gclwh6_4*npz*rxp0_2*sj5))+(((0.069)*cj5*gclwh12_3*pp*r20))+(((0.74858)*cj5*gclwh8_3*npx*pz*r22))+(((-0.02)*gclwh3_3*pz*rxp0_2))+(((0.036050884955666)*gclwh4_4*rxp2_2*sj5))+(((0.0149716)*cj5*gclwh8_3*r22*rxp1_2*sj5))+(((0.036050884955666)*cj5*gclwh6_4*rxp0_2))+(((-0.00138)*gclwh8_3*rxp1_2*sj5))+(((0.0590405046)*gclwh12_10*rxp1_2))+((gclwh6_4*r21*(pp*pp)))+(((-0.0149716)*cj5*gclwh10_3*pz*r22))+(((-0.1401930041)*cj5*gclwh6_10*npz*r21))+(((0.002803860082)*gclwh8_4*npz*r20*sj5))+(((-0.1399930041)*cj5*gclwh10_14*r22*rxp2_2*sj5))+(((-0.5603720164)*gclwh6_4*npz*rxp0_2*(cj5*cj5)))+(((-0.1399930041)*gclwh14_8*r21*r22*(cj5*cj5)))+(((2.0)*gclwh12_8*npx*pz*r22*(cj5*cj5)))+(((-1.0)*gclwh12_8*pp*r20*r22*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh1_3*pz*r20))+(((-1.0)*gclwh1_3*pp*pz*r20*sj5))+(((0.036050884955666)*gclwh12_4*rxp1_2))+(((-0.1399930041)*gclwh14_14*r21*rxp2_2*(cj5*cj5)))+(((0.000149716)*gclwh12_4*npz*r20*(sj5*sj5)))+(((-0.1883520318)*gclwh8_4*pp*r20))+(((0.02)*cj5*gclwh6_14*rxp0_2*rxp2_2*sj5))+(((0.02)*gclwh3_4*pp*rxp0_2))+(((2.0)*cj5*gclwh14_4*npy*pp*pz))+(((-0.74858)*cj5*gclwh3_4*npz*pp*r21*sj5))+(((-0.1399930041)*cj5*gclwh10_8*sj5*(r22*r22)))+(((-0.0005165202)*cj5*gclwh3_3*r21))+(((-0.37429)*gclwh14_3*pp*r21*r22*(cj5*cj5)))+(((0.002801860082)*gclwh10_3*(cj5*cj5)*(r22*r22)))+(((-0.74858)*cj5*gclwh14_8*r22*rxp0_2))+(((0.15774)*cj5*gclwh12_10*npx*pz))+(((0.1883520318)*gclwh6_4*pp*r21))+(((-0.04)*cj5*gclwh14_4*npy*npz*pz*sj5))+((cj5*gclwh10_10*npz*pp*r22*sj5))+(((2.0)*gclwh1_3*npx*sj5*(pz*pz)))+(((-0.0074858)*gclwh10_10*npz*r22*(cj5*cj5)))+(((0.000963180554)*gclwh8_4*rxp1_2*sj5))+(((0.74858)*gclwh8_8*r22*rxp1_2*(cj5*cj5)))+(((0.2801860082)*cj5*gclwh12_3*r22*rxp1_2))+(((-0.02)*gclwh6_4*npz*pp*r21*sj5))+(((0.1401930041)*gclwh8_3*pz*r20))+(((0.00138)*gclwh1_3*rxp1_2))+(((-0.011041248233367)*cj5*gclwh14_10*r21))+(((0.0074858)*cj5*gclwh3_4*pp*r21))+(((-1.49716)*cj5*gclwh8_4*npx*npz*pz))+(((0.104795963009178)*gclwh14_4*npz*r21*(cj5*cj5)))+(((-0.0004)*gclwh8_4*npz*rxp1_2*(sj5*sj5)))+(((-0.0074858)*cj5*gclwh14_14*r21*rxp2_2*sj5))+(((-0.002803860082)*gclwh6_4*npz*r21*sj5))+(((-0.5603720164)*gclwh8_4*npz*rxp1_2*(cj5*cj5)))+(((0.0096595172829)*gclwh1_3*r20*sj5))+(((0.02)*cj5*gclwh4_3*pz*rxp2_2))+(((0.0963180554)*gclwh8_4*npx*pz))+(((-0.1401930041)*cj5*gclwh8_14*r20*rxp2_2))+(((-0.0963180554)*gclwh6_4*npy*pz))+(((0.74858)*gclwh6_8*r22*rxp0_2*(cj5*cj5)))+(((-0.04)*gclwh10_4*pz*(npz*npz)*(sj5*sj5)))+(((-1.0)*gclwh14_14*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.000590405046)*gclwh14_10*r21*sj5))+(((-2.0)*cj5*gclwh6_8*npy*pz*r22))+(((-0.05165202)*cj5*gclwh8_3*rxp1_2))+(((-0.00036050884955666)*gclwh12_4*r20*sj5))+(((-1.0)*gclwh12_14*pp*r20*rxp2_2*(cj5*cj5)))+(((0.008403580246)*cj5*gclwh14_4*npz*r21*sj5))+(((-0.005603720164)*gclwh10_4*npz*r22*(cj5*cj5)))+(((0.0590405046)*cj5*gclwh8_10*rxp1_2))+((cj5*pp*r22))+(((-0.138)*cj5*gclwh14_3*npy*pz))+(((-0.011041248233367)*cj5*gclwh12_10*r20))+(((0.0074858)*gclwh10_14*r22*rxp2_2*(cj5*cj5)))+(((0.000963180554)*gclwh6_4*rxp0_2*sj5))+(((-0.005603720164)*gclwh1_4*npz*r20*(cj5*cj5)))+(((-0.1401930041)*gclwh6_3*pz*r21))+(((-0.0096733172829)*gclwh6_3*r21))+(((-0.74858)*gclwh14_4*pp*rxp0_2))+(((-0.74858)*gclwh6_10*npz*rxp0_2*(cj5*cj5)))+(((0.04)*gclwh1_4*npx*npz*pz*(sj5*sj5)))+(((0.069)*cj5*gclwh14_3*pp*r21))+(((0.74858)*gclwh14_3*pz*rxp0_2))+(((0.104945679009178)*cj5*gclwh8_4*npz*r20))+(((0.0149716)*cj5*gclwh6_3*r22*rxp0_2*sj5))+(((0.052472839504589)*cj5*gclwh6_3*r21*r22))+((gclwh1_4*r20*sj5*(pp*pp)))+(((-0.052472839504589)*cj5*gclwh8_3*r20*r22))+(((0.0002)*gclwh3_3*r22*rxp0_2*sj5))+(((0.02)*gclwh8_3*npx*pz*r22*sj5))+(((0.05165202)*gclwh14_3*rxp0_2))+(((0.002799860082)*gclwh3_4*npz*r21*(sj5*sj5)))+(((0.1399930041)*gclwh14_10*npz*r21*(cj5*cj5)))+(((-0.001399930041)*gclwh10_3*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh14_8*npy*pz*r22*(cj5*cj5)))+(((-0.01)*cj5*gclwh14_3*pp*r21*r22*sj5))+(((1.49716)*cj5*gclwh3_4*npy*npz*pz*sj5))+(((0.138)*gclwh3_3*npy*pz*sj5))+(((-1.0)*gclwh8_4*r20*(pp*pp)))+(((0.002801860082)*gclwh1_3*r20*r22*(cj5*cj5)))+(((-0.74858)*cj5*gclwh8_3*pz*rxp1_2))+(((0.02)*cj5*gclwh14_3*npy*pz*r22*sj5))+(((-0.05165202)*gclwh12_3*rxp1_2))+(((-0.74858)*gclwh8_10*npz*rxp1_2*(cj5*cj5)))+(((0.0149716)*cj5*gclwh10_4*npz*pz))+(((0.1399930041)*gclwh1_3*pz*r20*sj5))+(((0.00036050884955666)*cj5*gclwh1_4*r20))+(((0.008403580246)*cj5*gclwh12_4*npz*r20*sj5))+(((0.011057022233367)*gclwh6_10*r21))+(((-2.0)*gclwh12_10*npx*npz*pz*(cj5*cj5)))+(((2.0)*cj5*gclwh8_14*npx*pz*rxp2_2))+(((2.0)*gclwh14_14*npy*pz*rxp2_2*(cj5*cj5)))+(((-0.74858)*cj5*gclwh1_4*npz*pp*r20*sj5))+(((0.74858)*gclwh8_14*rxp1_2*rxp2_2*(cj5*cj5)))+(((0.1399930041)*cj5*gclwh12_3*pz*r20))+(((0.74858)*cj5*gclwh6_4*pp*rxp0_2))+(((-0.052323123504589)*cj5*gclwh10_3*sj5*(r22*r22)))+(((0.74858)*gclwh12_4*pp*rxp1_2))+(((-0.138)*cj5*gclwh12_3*npx*pz))+(((0.02)*gclwh1_3*pz*rxp1_2))+(((0.02)*cj5*gclwh12_3*npx*pz*r22*sj5))+(((-2.0)*gclwh6_4*npy*pp*pz))+(((0.0005165202)*gclwh12_3*r20*sj5))+(((2.0)*gclwh8_4*npx*pp*pz))+(((0.15774)*gclwh10_10*npz*pz*sj5))+((cj5*gclwh14_3*pp*pz*r21))+(((0.104646247009178)*cj5*gclwh3_4*npz*r21*sj5))+(((0.1399930041)*cj5*gclwh10_10*npz*r22*sj5))+(((0.0005165202)*gclwh14_3*r21*sj5))+(((0.74858)*cj5*gclwh14_10*npz*rxp0_2))+(((-0.0963180554)*gclwh1_4*npx*pz*sj5))+(((-0.00138)*gclwh6_3*rxp0_2*sj5))+(((0.74858)*gclwh12_4*npz*pp*r20*(cj5*cj5)))+(((0.1401930041)*cj5*gclwh8_10*npz*r20))+(((0.02)*cj5*gclwh8_14*rxp1_2*rxp2_2*sj5))+(((-0.07887)*cj5*gclwh12_10*pp*r20))+(((-0.74858)*cj5*gclwh1_3*npx*pz*r22*sj5))+(((0.0004)*gclwh1_4*npz*rxp1_2*sj5))+(((1.49716)*cj5*gclwh6_4*npy*npz*pz))+(((0.74858)*cj5*gclwh10_3*npz*pz*r22*sj5))+(((-0.001399930041)*gclwh1_3*r20*r22*(sj5*sj5)))+(((0.74858)*cj5*gclwh10_4*npz*pp*r22*sj5))+(((0.0074858)*cj5*gclwh14_10*npz*r21*sj5))+(((-0.00138)*gclwh3_3*rxp0_2))+(((0.02)*gclwh6_4*pp*rxp0_2*sj5))+(((-0.0004)*gclwh3_4*npz*rxp0_2*sj5))+(((-0.0015774)*gclwh10_10*pz))+(((0.37429)*cj5*gclwh1_3*pp*r20*r22*sj5))+(((0.74858)*cj5*gclwh8_4*pp*rxp1_2))+(((0.0074858)*cj5*gclwh12_10*npz*r20*sj5))+(((-0.02)*cj5*gclwh10_8*pz*r22))+(((0.104795963009178)*gclwh12_4*npz*r20*(cj5*cj5)))+((gclwh14_10*npz*pp*r21*(cj5*cj5)))+(((0.74858)*gclwh12_3*npx*pz*r22*(cj5*cj5)))+(((-0.01)*cj5*gclwh12_3*pp*r20*r22*sj5))+(((0.000963180554)*gclwh3_4*rxp0_2))+(((-2.0)*cj5*gclwh10_10*pz*sj5*(npz*npz)))+(((-0.02)*cj5*gclwh8_10*npz*rxp1_2*sj5))+(((-1.0)*gclwh10_4*r22*sj5*(pp*pp)))+(((-0.02)*cj5*gclwh10_14*pz*rxp2_2))+(((0.0963180554)*cj5*gclwh14_4*npy*pz))+(((-0.036050884955666)*gclwh14_4*rxp0_2))+(((-0.0074858)*cj5*gclwh3_3*pz*r21))+(((-0.0005165202)*cj5*gclwh1_3*r20))+((cj5*gclwh6_8*pp*r21*r22))+(((2.0)*cj5*gclwh8_8*npx*pz*r22))+(((-0.1399930041)*gclwh12_8*r20*r22*(cj5*cj5)))+(((-1.0)*gclwh6_3*pp*pz*r21))+(((0.0074858)*gclwh10_8*(cj5*cj5)*(r22*r22)))+(((0.01)*gclwh3_3*pp*r21*r22*(sj5*sj5)))+(((0.02)*cj5*gclwh8_8*r22*rxp1_2*sj5))+(((-0.07887)*gclwh10_10*pp*r22*sj5))+(((-7.4858e-5)*gclwh14_3*r21*r22*(sj5*sj5)))+(((-0.74858)*gclwh12_3*pz*rxp1_2))+(((-0.00674192696225811)*gclwh1_4*r20*sj5))+(((2.0)*cj5*gclwh6_10*npy*npz*pz))+(((0.2801860082)*gclwh8_3*r22*rxp1_2*(cj5*cj5)))+(((-0.04)*gclwh8_4*npx*npz*pz*sj5))+(((2.0)*cj5*gclwh10_14*npz*pz*rxp2_2*sj5))+(((-0.0074858)*cj5*gclwh1_3*r22*rxp1_2))+(((-0.74858)*cj5*gclwh6_3*npy*pz*r22))+(((0.138)*gclwh1_3*npx*pz*sj5))+(((-2.0)*gclwh10_3*npz*sj5*(pz*pz)))+(((0.00138)*gclwh10_3*pz))+(((0.001401930041)*gclwh6_3*r21*r22*sj5))+(((0.0963180554)*cj5*gclwh12_4*npx*pz))+(((-0.0074858)*gclwh14_4*pp*r21*sj5))+(((-0.74858)*cj5*gclwh14_14*rxp0_2*rxp2_2))+(((0.74858)*cj5*gclwh12_14*rxp1_2*rxp2_2))+(((-0.5603720164)*cj5*gclwh12_4*npz*rxp1_2))+(((-0.02)*gclwh1_4*npz*pp*r20*(sj5*sj5)))+(((0.02)*cj5*gclwh10_10*npz*pz))+(((-1.0)*cj5*gclwh8_8*pp*r20*r22))+(((-7.4858e-5)*gclwh12_3*r20*r22*(sj5*sj5)))+(((0.0149716)*cj5*gclwh1_4*npz*rxp1_2))+(((-0.052323123504589)*cj5*gclwh3_3*r21*r22*sj5))+(((-0.00675155876779811)*gclwh8_4*r20))+(((-0.052397981504589)*gclwh12_3*r20*r22*(cj5*cj5)))+(((2.0)*cj5*gclwh10_8*npz*pz*r22*sj5))+(((0.2799860082)*cj5*gclwh4_3*r22*rxp2_2*sj5))+(((0.000149716)*gclwh14_4*npz*r21*(sj5*sj5)))+(((0.04)*gclwh6_4*npy*npz*pz*sj5))+(((0.0074858)*gclwh12_3*r22*rxp1_2*sj5))+(((-0.104945679009178)*cj5*gclwh6_4*npz*r21))+(((-0.004201790123)*cj5*gclwh12_3*r20*r22*sj5))+(((0.002801860082)*gclwh3_3*r21*r22*(cj5*cj5)))+(((-0.04)*cj5*gclwh12_4*npx*npz*pz*sj5))+(((-0.05165202)*cj5*gclwh6_3*rxp0_2))+(((-0.00674192696225811)*gclwh10_4*r22*sj5))+(((0.0074858)*cj5*gclwh1_4*pp*r20))+(((0.0149716)*gclwh4_4*npz*rxp2_2*(cj5*cj5)))+(((-0.5599720164)*cj5*gclwh4_4*npz*rxp2_2*sj5))+(((2.0)*gclwh3_3*npy*sj5*(pz*pz)))+(((0.0096733172829)*gclwh8_3*r20))+(((2.0)*gclwh12_14*npx*pz*rxp2_2*(cj5*cj5)))+((gclwh3_4*r21*sj5*(pp*pp)))+(((-0.0149716)*gclwh4_4*npz*rxp2_2*(sj5*sj5)))+((cj5*gclwh8_10*npz*pp*r20))+(((-0.0918339764)*gclwh3_4*pp*r21*sj5))+(((0.01)*gclwh1_3*pp*r20*r22*(sj5*sj5)))+(((0.74858)*gclwh6_14*rxp0_2*rxp2_2*(cj5*cj5)))+(((0.00036050884955666)*cj5*gclwh3_4*r21))+(((-0.1881520318)*cj5*gclwh12_4*pp*r20))+(((-1.49716)*cj5*gclwh10_4*pz*sj5*(npz*npz))));
op[66]=((-0.04076796)+(((0.002801860082)*gclwh11_0*(cj5*cj5)*(r22*r22)))+(((-1.0)*gclwh0_1*r20*sj5*(pp*pp)))+(((-0.74858)*gclwh15_1*pp*rxp0_2))+((gclwh11_0*pp*pz*r22*sj5))+(((-7.4858e-5)*gclwh15_0*r21*r22*(sj5*sj5)))+(((0.02)*cj5*gclwh11_15*pz*rxp2_2))+(((-0.74858)*pz))+(((-0.5603720164)*gclwh7_1*npz*rxp0_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh9_11*npz*pp*r20))+(((0.74858)*cj5*gclwh2_0*npy*pz*r22*sj5))+(((0.05165202)*gclwh13_0*rxp1_2))+(((0.66971)*gclwh11_11*pp*r22*sj5))+(((-0.138)*gclwh7_0*npy*pz))+(((-0.1399930041)*gclwh15_11*npz*r21*(cj5*cj5)))+(((-0.02)*gclwh7_0*npy*pz*r22*sj5))+(((2.0)*cj5*gclwh13_1*npx*pp*pz))+(((-0.0004)*gclwh0_1*npz*rxp1_2*sj5))+(((-0.1401930041)*cj5*gclwh7_15*r21*rxp2_2))+(((0.0963180554)*gclwh2_1*npy*pz*sj5))+(((0.052472839504589)*cj5*gclwh7_0*r21*r22))+(((-1.49716)*cj5*gclwh11_1*pz*sj5*(npz*npz)))+(((0.0004)*gclwh2_1*npz*rxp0_2*sj5))+(((0.002803860082)*gclwh9_1*npz*r20*sj5))+(((0.0074858)*cj5*gclwh15_15*r21*rxp2_2*sj5))+(((0.74858)*cj5*gclwh13_11*npz*rxp1_2))+(((2.0)*gclwh13_11*npx*npz*pz*(cj5*cj5)))+(((-1.49716)*gclwh15_1*npy*npz*pz*(cj5*cj5)))+(((0.052323123504589)*cj5*gclwh0_0*r20*r22*sj5))+(((0.0096595172829)*gclwh0_0*r20*sj5))+(((0.1399930041)*cj5*gclwh11_9*sj5*(r22*r22)))+(((0.0074858)*cj5*gclwh13_9*r20*r22*sj5))+(((-0.5603720164)*cj5*gclwh13_1*npz*rxp1_2))+(((0.2801860082)*cj5*gclwh13_0*r22*rxp1_2))+(((-0.052397981504589)*gclwh13_0*r20*r22*(cj5*cj5)))+(((0.0074858)*gclwh11_11*npz*r22*(cj5*cj5)))+(((-1.0)*gclwh15_11*npz*pp*r21*(cj5*cj5)))+(((0.74858)*cj5*gclwh9_1*npz*pp*r20))+(((-0.0074858)*cj5*gclwh0_1*pp*r20))+(((0.74858)*cj5*gclwh15_15*rxp0_2*rxp2_2))+(((-1.33942)*cj5*gclwh13_11*npx*pz))+(((0.104795963009178)*gclwh15_1*npz*r21*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh2_1*pp*r21))+(((-0.00674192696225811)*cj5*gclwh13_1*r20))+(((-0.04)*cj5*gclwh13_1*npx*npz*pz*sj5))+(((0.74858)*gclwh13_1*npz*pp*r20*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh2_0*r22*rxp0_2))+(((-0.00036050884955666)*cj5*gclwh0_1*r20))+((gclwh15_9*pp*r21*r22*(cj5*cj5)))+(((-0.5603720164)*gclwh9_1*npz*rxp1_2*(cj5*cj5)))+(((-2.0)*cj5*gclwh9_15*npx*pz*rxp2_2))+(((0.74858)*gclwh5_1*pp*rxp2_2*sj5))+(((0.74858)*cj5*gclwh11_1*npz*pp*r22*sj5))+(((-1.33942)*gclwh9_11*npx*pz))+(((0.0074858)*gclwh15_0*pz*r21*sj5))+(((0.0074858)*gclwh5_0*r22*rxp2_2*(sj5*sj5)))+(((-1.33942)*cj5*gclwh15_11*npy*pz))+(((-0.1401930041)*gclwh7_0*pz*r21))+(((-0.0096733172829)*gclwh9_0*r20))+(((-0.01)*cj5*gclwh15_0*pp*r21*r22*sj5))+(((0.02)*cj5*gclwh7_11*npz*rxp0_2*sj5))+(((-0.37429)*gclwh13_0*pp*r20*r22*(cj5*cj5)))+(((-0.0299432)*cj5*gclwh7_1*npz*rxp0_2*sj5))+(((0.02)*gclwh11_1*npz*pp*r22*(sj5*sj5)))+(((-2.0)*gclwh15_9*npy*pz*r22*(cj5*cj5)))+(((-1.0)*gclwh11_1*r22*sj5*(pp*pp)))+(((0.02)*gclwh2_0*pz*rxp0_2))+(((-0.104945679009178)*cj5*gclwh7_1*npz*r21))+(((-0.04)*gclwh2_1*npy*npz*pz*(sj5*sj5)))+(((0.02)*gclwh2_1*npz*pp*r21*(sj5*sj5)))+((cj5*gclwh9_9*pp*r20*r22))+(((-0.069)*gclwh2_0*pp*r21*sj5))+(((-0.0074858)*gclwh11_9*(cj5*cj5)*(r22*r22)))+(((-0.052323123504589)*cj5*gclwh11_0*sj5*(r22*r22)))+(((0.001401930041)*gclwh7_0*r21*r22*sj5))+(((-0.01)*gclwh2_0*pp*r21*r22*(sj5*sj5)))+(((2.0)*cj5*gclwh9_11*npx*npz*pz))+(((-0.069)*gclwh9_0*pp*r20))+(((-2.0)*gclwh11_0*npz*sj5*(pz*pz)))+(((0.036050884955666)*gclwh13_1*rxp1_2))+(((0.2799860082)*cj5*gclwh5_0*r22*rxp2_2*sj5))+(((0.000149716)*gclwh15_1*npz*r21*(sj5*sj5)))+(((-0.000963180554)*gclwh2_1*rxp0_2))+(((0.093754714775811)*cj5*gclwh13_11*r20))+(((0.74858)*cj5*gclwh11_0*npz*pz*r22*sj5))+(((0.2801860082)*gclwh9_0*r22*rxp1_2*(cj5*cj5)))+(((0.02)*gclwh11_0*npz*pz*r22*(sj5*sj5)))+(((-0.02)*cj5*gclwh9_9*r22*rxp1_2*sj5))+(((0.104646247009178)*cj5*gclwh11_1*npz*r22*sj5))+(((0.104945679009178)*cj5*gclwh9_1*npz*r20))+(((-0.052472839504589)*cj5*gclwh9_0*r20*r22))+(((0.0149716)*cj5*gclwh11_1*npz*pz))+(((0.74858)*gclwh15_0*npy*pz*r22*(cj5*cj5)))+(((-0.036050884955666)*gclwh15_1*rxp0_2))+(((-0.5013315118)*cj5*gclwh9_11*rxp1_2))+(((-0.74858)*cj5*gclwh13_9*r22*rxp1_2))+(((-0.000963180554)*gclwh11_1*pz))+(((-0.000963180554)*cj5*gclwh5_1*rxp2_2))+((gclwh7_1*r21*(pp*pp)))+(((-0.0963180554)*gclwh7_1*npy*pz))+(((0.05165202)*cj5*gclwh9_0*rxp1_2))+(((0.74858)*cj5*gclwh2_1*npz*pp*r21*sj5))+(((0.04)*gclwh7_1*npy*npz*pz*sj5))+(((-0.74858)*gclwh9_15*rxp1_2*rxp2_2*(cj5*cj5)))+(((0.74858)*gclwh15_1*npz*pp*r21*(cj5*cj5)))+(((-0.5599720164)*cj5*gclwh5_1*npz*rxp2_2*sj5))+(((-0.005603720164)*gclwh11_1*npz*r22*(cj5*cj5)))+(((-0.002799860082)*gclwh2_1*npz*r21*(sj5*sj5)))+(((-1.33942)*gclwh11_11*npz*pz*sj5))+(((0.000149716)*gclwh13_1*npz*r20*(sj5*sj5)))+(((0.74858)*cj5*gclwh9_0*npx*pz*r22))+(((-0.74858)*gclwh9_9*r22*rxp1_2*(cj5*cj5)))+(((0.02)*gclwh5_9*r22*rxp2_2*(cj5*cj5)))+(((0.02)*cj5*gclwh15_1*npz*pp*r21*sj5))+(((0.0002)*gclwh0_0*r22*rxp1_2*sj5))+((cj5*gclwh7_11*npz*pp*r21))+(((0.138)*cj5*gclwh13_0*npx*pz))+(((-0.069)*cj5*gclwh15_0*pp*r21))+(((0.005013315118)*gclwh15_11*r21*sj5))+(((-0.0005165202)*cj5*gclwh2_0*r21))+(((-7.4858e-5)*gclwh13_0*r20*r22*(sj5*sj5)))+(((-2.0)*cj5*gclwh11_9*npz*pz*r22*sj5))+(((0.000963180554)*gclwh0_1*rxp1_2))+(((0.74858)*gclwh15_0*pz*rxp0_2))+(((-0.069)*gclwh0_0*pp*r20*sj5))+(((0.00674192696225811)*gclwh0_1*r20*sj5))+(((-0.74858)*cj5*gclwh7_1*npz*pp*r21))+(((-0.1881520318)*cj5*gclwh15_1*pp*r21))+(((0.138)*gclwh2_0*npy*pz*sj5))+(((-0.00036050884955666)*gclwh13_1*r20*sj5))+(((-0.66971)*gclwh7_11*pp*r21))+(((0.104795963009178)*gclwh13_1*npz*r20*(cj5*cj5)))+(((-0.0096595172829)*cj5*gclwh13_0*r20))+(((0.0918339764)*gclwh0_1*pp*r20*sj5))+(((-0.104646247009178)*cj5*gclwh2_1*npz*r21*sj5))+(((-2.0)*cj5*gclwh15_0*npy*(pz*pz)))+(((-0.069)*cj5*gclwh13_0*pp*r20))+(((0.1883520318)*gclwh7_1*pp*r21))+(((0.0963180554)*gclwh9_1*npx*pz))+(((0.02)*gclwh7_1*pp*rxp0_2*sj5))+(((0.1399930041)*gclwh15_9*r21*r22*(cj5*cj5)))+(((0.0074858)*cj5*gclwh2_0*pz*r21))+(((0.05165202)*gclwh5_0*rxp2_2*sj5))+(((0.74858)*gclwh7_11*npz*rxp0_2*(cj5*cj5)))+(((-0.093888656775811)*gclwh7_11*r21))+(((0.0074858)*cj5*gclwh13_15*r20*rxp2_2*sj5))+(((-1.49716)*cj5*gclwh0_1*npx*npz*pz*sj5))+(((0.0074858)*gclwh13_0*pz*r20*sj5))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.005603720164)*gclwh0_1*npz*r20*(cj5*cj5)))+(((-0.02)*gclwh9_0*pz*rxp1_2*sj5))+(((0.0074858)*cj5*gclwh11_1*pp*r22))+(((0.036050884955666)*cj5*gclwh7_1*rxp0_2))+(((-2.0)*cj5*gclwh13_0*npx*(pz*pz)))+(((-1.0)*cj5*gclwh11_11*npz*pp*r22*sj5))+(((0.0002)*gclwh7_0*r22*rxp0_2*(sj5*sj5)))+((gclwh2_0*pp*pz*r21*sj5))+(((0.00138)*gclwh9_0*rxp1_2*sj5))+(((-1.0)*cj5*pp*r22))+(((2.0)*gclwh15_11*npy*npz*pz*(cj5*cj5)))+(((-0.0299432)*cj5*gclwh9_1*npz*rxp1_2*sj5))+(((0.1399930041)*gclwh13_15*r20*rxp2_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh7_15*pp*r21*rxp2_2))+(((0.05165202)*cj5*gclwh7_0*rxp0_2))+(((-0.74858)*cj5*gclwh7_0*pz*rxp0_2))+(((-0.74858)*cj5*gclwh5_9*r22*rxp2_2*sj5))+(((0.02)*cj5*gclwh11_9*pz*r22))+(((-0.1401930041)*cj5*gclwh7_9*r21*r22))+(((-0.0074858)*gclwh5_0*r22*rxp2_2*(cj5*cj5)))+(((-1.49716)*cj5*gclwh2_1*npy*npz*pz*sj5))+(((0.093888656775811)*gclwh9_11*r20))+(((0.0074858)*cj5*gclwh15_9*r21*r22*sj5))+(((-0.052397981504589)*gclwh15_0*r21*r22*(cj5*cj5)))+(((0.0963180554)*gclwh0_1*npx*pz*sj5))+(((-0.0002)*gclwh2_0*r22*rxp0_2*sj5))+(((0.005013315118)*gclwh13_11*r20*sj5))+(((0.000963180554)*gclwh7_1*rxp0_2*sj5))+((gclwh13_15*pp*r20*rxp2_2*(cj5*cj5)))+(((-0.01)*gclwh11_0*pp*(r22*r22)*(sj5*sj5)))+(((-0.04)*gclwh11_1*pz*(npz*npz)*(sj5*sj5)))+(((0.1401930041)*cj5*gclwh9_15*r20*rxp2_2))+(((0.0074858)*r22*sj5))+(((-0.0096595172829)*cj5*gclwh15_0*r21))+(((2.0)*gclwh9_1*npx*pp*pz))+(((0.02)*gclwh9_1*pp*rxp1_2*sj5))+(((2.0)*cj5*gclwh7_15*npy*pz*rxp2_2))+(((-0.02)*cj5*gclwh11_11*npz*pz))+(((0.036050884955666)*gclwh5_1*rxp2_2*sj5))+(((0.1401930041)*cj5*gclwh9_9*r20*r22))+(((0.036050884955666)*cj5*gclwh9_1*rxp1_2))+((cj5*gclwh9_15*pp*r20*rxp2_2))+(((-0.02)*gclwh7_1*npz*pp*r21*sj5))+(((-0.00675155876779811)*gclwh9_1*r20))+(((-0.0149716)*cj5*gclwh0_1*npz*rxp1_2))+(((-0.74858)*cj5*gclwh7_0*npy*pz*r22))+(((-0.0149716)*cj5*gclwh11_0*pz*r22))+(((-0.1399930041)*cj5*gclwh11_11*npz*r22*sj5))+(((0.008403580246)*cj5*gclwh13_1*npz*r20*sj5))+(((-0.01)*cj5*gclwh13_0*pp*r20*r22*sj5))+(((-0.1883520318)*gclwh9_1*pp*r20))+((gclwh15_15*pp*r21*rxp2_2*(cj5*cj5)))+(((0.138)*gclwh0_0*npx*pz*sj5))+(((-0.00138)*cj5*gclwh5_0*rxp2_2))+(((-0.0149716)*gclwh13_1*npz*rxp1_2*sj5))+(((-0.004201790123)*cj5*gclwh13_0*r20*r22*sj5))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.02)*gclwh0_0*npx*pz*r22*(sj5*sj5)))+(((-0.04)*gclwh9_1*npx*npz*pz*sj5))+(((0.0096733172829)*gclwh7_0*r21))+(((0.1399930041)*cj5*gclwh11_15*r22*rxp2_2*sj5))+(((0.5603720164)*cj5*gclwh15_1*npz*rxp0_2))+(((0.00036050884955666)*cj5*gclwh11_1*r22))+(((0.0967180554)*gclwh11_1*npz*pz*sj5))+(((-0.02)*gclwh7_0*pz*rxp0_2*sj5))+(((-0.1401930041)*cj5*gclwh9_11*npz*r20))+(((0.138)*gclwh11_0*npz*pz*sj5))+(((-1.0)*cj5*gclwh15_1*r21*(pp*pp)))+(((-0.04)*cj5*gclwh15_1*npy*npz*pz*sj5))+((gclwh0_0*pp*pz*r20*sj5))+(((-2.0)*gclwh2_0*npy*sj5*(pz*pz)))+(((-0.00138)*gclwh11_0*pz))+(((0.02)*gclwh9_0*npx*pz*r22*sj5))+(((-0.002803860082)*gclwh7_1*npz*r21*sj5))+(((0.052323123504589)*cj5*gclwh2_0*r21*r22*sj5))+(((0.0096595172829)*gclwh2_0*r21*sj5))+(((1.49716)*cj5*gclwh7_1*npy*npz*pz))+(((-0.05165202)*gclwh15_0*rxp0_2))+(((-0.02)*gclwh0_0*pz*rxp1_2))+(((0.093754714775811)*cj5*gclwh15_11*r21))+(((-2.0)*cj5*gclwh11_15*npz*pz*rxp2_2*sj5))+(((-0.004201790123)*cj5*gclwh15_0*r21*r22*sj5))+(((0.1399930041)*gclwh13_9*r20*r22*(cj5*cj5)))+(((-0.1399930041)*gclwh13_11*npz*r20*(cj5*cj5)))+(((0.138)*gclwh9_0*npx*pz))+(((0.001399930041)*gclwh2_0*r21*r22*(sj5*sj5)))+(((-2.0)*cj5*gclwh7_11*npy*npz*pz))+(((-0.0074858)*cj5*gclwh15_11*npz*r21*sj5))+(((-0.37429)*cj5*gclwh11_0*pp*sj5*(r22*r22)))+(((-0.02)*cj5*gclwh7_15*rxp0_2*rxp2_2*sj5))+(((-0.005013315118)*cj5*gclwh11_11*r22))+(((-0.1399930041)*gclwh0_0*pz*r20*sj5))+(((0.1401930041)*gclwh9_0*pz*r20))+(((0.0074858)*gclwh13_0*r22*rxp1_2*sj5))+(((0.0149716)*gclwh15_1*npz*rxp0_2*sj5))+(((-0.0074858)*gclwh15_0*r22*rxp0_2*sj5))+(((0.74858)*cj5*gclwh15_9*r22*rxp0_2))+(((0.02)*cj5*gclwh13_0*npx*pz*r22*sj5))+(((2.0)*cj5*npz*pz))+(((0.00674192696225811)*gclwh2_1*r21*sj5))+(((-1.0)*cj5*gclwh13_1*r20*(pp*pp)))+(((1.33942)*gclwh7_11*npy*pz))+((cj5*gclwh15_0*pp*pz*r21))+(((2.0)*cj5*gclwh15_1*npy*pp*pz))+(((0.00675155876779811)*gclwh7_1*r21))+(((-0.5013315118)*gclwh13_11*rxp1_2))+(((0.02)*cj5*gclwh5_0*pz*rxp2_2))+(((2.0)*gclwh2_1*npy*pp*pz*sj5))+(((2.0)*cj5*gclwh7_9*npy*pz*r22))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-0.00674192696225811)*cj5*gclwh15_1*r21))+(((-0.0004)*gclwh7_1*npz*rxp0_2*(sj5*sj5)))+(((-0.02)*cj5*gclwh7_9*r22*rxp0_2*sj5))+(((0.74858)*cj5*gclwh9_1*pp*rxp1_2))+(((-0.2801860082)*cj5*gclwh15_0*r22*rxp0_2))+(((0.005603720164)*gclwh2_1*npz*r21*(cj5*cj5)))+(((0.0149716)*cj5*gclwh7_0*r22*rxp0_2*sj5))+(((0.5013315118)*gclwh15_11*rxp0_2))+(((0.02)*gclwh0_1*npz*pp*r20*(sj5*sj5)))+(((0.069)*gclwh7_0*pp*r21))+(((0.1399930041)*cj5*r22))+(((0.0133942)*gclwh11_11*pz))+(((-0.02)*gclwh2_1*pp*rxp0_2))+(((-0.01)*gclwh0_0*pp*r20*r22*(sj5*sj5)))+(((0.000963180554)*gclwh9_1*rxp1_2*sj5))+(((0.02)*gclwh2_0*npy*pz*r22*(sj5*sj5)))+(((-0.37429)*cj5*gclwh2_0*pp*r21*r22*sj5))+(((0.74858)*gclwh13_0*npx*pz*r22*(cj5*cj5)))+(((-0.01)*gclwh9_0*pp*r20*r22*sj5))+(((-0.00138)*gclwh2_0*rxp0_2))+(((-0.74858)*cj5*gclwh15_11*npz*rxp0_2))+(((-2.0)*gclwh0_0*npx*sj5*(pz*pz)))+(((-0.0005165202)*cj5*gclwh0_0*r20))+(((-0.0133942)*gclwh7_11*rxp0_2*sj5))+(((-0.02)*cj5*gclwh9_15*rxp1_2*rxp2_2*sj5))+(((-0.0074858)*gclwh11_15*r22*rxp2_2*(cj5*cj5)))+(((-0.04)*gclwh0_1*npx*npz*pz*(sj5*sj5)))+(((0.0074858)*cj5*gclwh0_0*r22*rxp1_2))+(((-0.002801860082)*gclwh2_0*r21*r22*(cj5*cj5)))+(((-0.37429)*cj5*gclwh0_0*pp*r20*r22*sj5))+(((0.74858)*gclwh9_11*npz*rxp1_2*(cj5*cj5)))+(((-2.0)*gclwh15_15*npy*pz*rxp2_2*(cj5*cj5)))+(((-1.0)*gclwh2_1*r21*sj5*(pp*pp)))+(((0.02)*cj5*gclwh9_11*npz*rxp1_2*sj5))+(((0.1399930041)*gclwh15_15*r21*rxp2_2*(cj5*cj5)))+(((-0.0005165202)*gclwh15_0*r21*sj5))+(((-0.74858)*gclwh5_0*pz*rxp2_2*sj5))+(((0.0149716)*cj5*gclwh2_1*npz*rxp0_2))+(((0.093754714775811)*gclwh11_11*r22*sj5))+(((-0.104646247009178)*cj5*gclwh0_1*npz*r20*sj5))+(((0.02)*cj5*gclwh15_0*npy*pz*r22*sj5))+(((0.0074858)*cj5*gclwh0_0*pz*r20))+(((0.02)*gclwh9_1*npz*pp*r20*sj5))+(((0.02)*gclwh0_1*pp*rxp1_2))+(((-1.49716)*cj5*gclwh9_1*npx*npz*pz))+(((0.66971)*gclwh9_11*pp*r20))+(((-0.74858)*gclwh13_0*pz*rxp1_2))+(((0.74858)*gclwh13_1*pp*rxp1_2))+(((-0.0004)*gclwh9_1*npz*rxp1_2*(sj5*sj5)))+(((-0.5013315118)*cj5*gclwh7_11*rxp0_2))+(((0.0963180554)*cj5*gclwh15_1*npy*pz))+(((2.0)*cj5*gclwh11_11*pz*sj5*(npz*npz)))+(((-0.001401930041)*gclwh9_0*r20*r22*sj5))+(((-0.069)*gclwh11_0*pp*r22*sj5))+(((-0.0005165202)*gclwh13_0*r20*sj5))+(((2.0)*gclwh0_1*npx*pp*pz*sj5))+(((0.66971)*cj5*gclwh13_11*pp*r20))+((cj5*gclwh13_0*pp*pz*r20))+(((-0.1399930041)*gclwh2_0*pz*r21*sj5))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.1399930041)*cj5*gclwh13_0*pz*r20))+(((-0.37429)*gclwh15_0*pp*r21*r22*(cj5*cj5)))+(((0.008403580246)*cj5*gclwh15_1*npz*r21*sj5))+(((-0.00036050884955666)*cj5*gclwh2_1*r21))+(((-0.002801860082)*gclwh0_0*r20*r22*(cj5*cj5)))+(((0.74858)*cj5*gclwh0_1*npz*pp*r20*sj5))+(((0.74858)*cj5*gclwh0_0*npx*pz*r22*sj5))+(((-0.74858)*cj5*gclwh13_15*rxp1_2*rxp2_2))+(((-0.1881520318)*gclwh11_1*pp*r22*sj5))+(((0.37429)*cj5*gclwh7_0*pp*r21*r22))+(((0.0005165202)*cj5*gclwh11_0*r22))+((cj5*gclwh11_9*pp*sj5*(r22*r22)))+(((-0.02)*gclwh11_1*pp*pz))+(((0.1399930041)*cj5*gclwh15_0*pz*r21))+(((-0.37429)*cj5*gclwh9_0*pp*r20*r22))+(((-0.0074858)*gclwh13_1*pp*r20*sj5))+((gclwh13_9*pp*r20*r22*(cj5*cj5)))+(((-0.74858)*gclwh7_15*rxp0_2*rxp2_2*(cj5*cj5)))+(((-0.0074858)*gclwh15_1*pp*r21*sj5))+((cj5*gclwh11_15*pp*r22*rxp2_2*sj5))+(((0.0002)*gclwh9_0*r22*rxp1_2*(sj5*sj5)))+(((-2.0)*gclwh13_15*npx*pz*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh13_9*npx*pz*r22*(cj5*cj5)))+(((-0.00036050884955666)*gclwh15_1*r21*sj5))+(((-0.002799860082)*gclwh0_1*npz*r20*(sj5*sj5)))+(((-0.0074858)*cj5*gclwh13_11*npz*r20*sj5))+(((0.002799860082)*gclwh11_1*npz*r22*(sj5*sj5)))+(((0.0149716)*cj5*gclwh9_0*r22*rxp1_2*sj5))+(((0.01)*gclwh7_0*pp*r21*r22*sj5))+(((0.00138)*gclwh0_0*rxp1_2))+(((-2.0)*cj5*gclwh9_9*npx*pz*r22))+(((0.02)*cj5*gclwh13_1*npz*pp*r20*sj5))+(((-0.74858)*gclwh7_9*r22*rxp0_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh7_1*pp*rxp0_2))+(((-0.02)*cj5*gclwh5_1*pp*rxp2_2))+(((-1.0)*gclwh13_11*npz*pp*r20*(cj5*cj5)))+(((-0.1881520318)*cj5*gclwh13_1*pp*r20))+(((0.0149716)*gclwh5_1*npz*rxp2_2*(cj5*cj5)))+(((-0.0149716)*gclwh5_1*npz*rxp2_2*(sj5*sj5)))+(((0.2801860082)*gclwh7_0*r22*rxp0_2*(cj5*cj5)))+(((-0.001399930041)*gclwh11_0*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((0.001399930041)*gclwh0_0*r20*r22*(sj5*sj5)))+(((2.0)*gclwh11_1*npz*pp*pz*sj5))+(((0.66971)*cj5*gclwh15_11*pp*r21))+(((0.00138)*gclwh7_0*rxp0_2*sj5))+(((0.1397930041)*gclwh11_0*pz*r22*sj5))+((gclwh9_0*pp*pz*r20))+(((0.1401930041)*cj5*gclwh7_11*npz*r21))+(((0.138)*cj5*gclwh15_0*npy*pz))+(((-1.0)*cj5*gclwh7_9*pp*r21*r22))+(((0.0963180554)*cj5*gclwh13_1*npx*pz))+(((0.02)*gclwh11_0*(pz*pz)))+(((-1.49716)*gclwh13_1*npx*npz*pz*(cj5*cj5)))+(((-0.74858)*cj5*gclwh9_0*pz*rxp1_2))+(((-0.00674192696225811)*gclwh11_1*r22*sj5))+(((-0.0096595172829)*gclwh11_0*r22*sj5))+(((-0.0133942)*gclwh9_11*rxp1_2*sj5))+(((0.0918339764)*gclwh2_1*pp*r21*sj5)));
IkReal x627=(gclwh11_6*r22);
IkReal x628=(gclwh15_15*r21);
IkReal x629=((0.0193190345658)*cj5);
IkReal x630=((1.18168)*pz);
IkReal x631=(gclwh9_15*npx);
IkReal x632=(gclwh15_15*rxp0_2);
IkReal x633=((1.49716)*rxp0_2);
IkReal x634=(gclwh7_15*r21);
IkReal x635=((0.59084)*pp);
IkReal x636=((0.0149716)*sj5);
IkReal x637=(gclwh13_6*r20);
IkReal x638=((4.0)*pz);
IkReal x639=(gclwh7_6*r21);
IkReal x640=(npz*sj5);
IkReal x641=(pp*sj5);
IkReal x642=((0.0010330404)*sj5);
IkReal x643=((0.276)*pz);
IkReal x644=(gclwh5_6*rxp2_2);
IkReal x645=(gclwh11_15*pz);
IkReal x646=(gclwh11_15*r22);
IkReal x647=((0.10330404)*rxp1_2);
IkReal x648=(cj5*gclwh13_15);
IkReal x649=(gclwh7_15*npy);
IkReal x650=((0.04)*sj5);
IkReal x651=(cj5*gclwh9_15);
IkReal x652=((0.4422910072)*rxp1_2);
IkReal x653=(gclwh9_6*r20);
IkReal x654=(gclwh9_6*rxp1_2);
IkReal x655=(gclwh13_15*r20);
IkReal x656=((0.004422910072)*sj5);
IkReal x657=(gclwh15_6*r21);
IkReal x658=((2.0)*pp);
IkReal x659=((0.2799860082)*cj5);
IkReal x660=((0.138)*pp);
IkReal x661=(gclwh9_15*r20);
IkReal x662=(cj5*gclwh7_15*rxp0_2);
IkReal x663=(cj5*gclwh15_15*npy);
IkReal x664=(r20*x660);
IkReal x665=(gclwh7_15*rxp0_2*sj5);
IkReal x666=(gclwh9_15*rxp1_2*sj5);
op[67]=((0.0825119764)+(((-0.2211455036)*gclwh5_13*rxp2_2*sj5))+(((0.29542)*gclwh9_13*pp*r20))+(((-0.002211455036)*cj5*gclwh11_13*r22))+(((-0.29542)*gclwh7_13*pp*r21))+(((-0.0074858)*gclwh13_9*r20*sj5))+(((-0.138)*cj5*gclwh15_11*npy*pz))+(((2.0)*gclwh9_9*npx*pz))+(((0.069)*gclwh11_11*pp*r22*sj5))+(((0.59084)*gclwh7_13*npy*pz))+(((0.0005165202)*gclwh13_11*r20*sj5))+(((0.29542)*cj5*gclwh13_13*pp*r20))+(((-0.2211455036)*cj5*gclwh7_13*rxp0_2))+(((-0.0096733172829)*gclwh7_11*r21))+(((-0.138)*cj5*gclwh13_11*npx*pz))+(((-1.0)*gclwh9_9*pp*r20))+(((-0.1401930041)*gclwh9_9*r20))+(((-0.1399930041)*cj5*gclwh13_9*r20))+(((0.069)*cj5*gclwh15_11*pp*r21))+(((-2.0)*gclwh7_9*npy*pz))+(((-1.0)*cj5*gclwh15_9*pp*r21))+(((0.1401930041)*gclwh7_9*r21))+(((0.138)*gclwh7_11*npy*pz))+(((0.041415817271222)*gclwh9_13*r20))+(((-0.041415817271222)*gclwh7_13*r21))+(((0.0005165202)*gclwh15_11*r21*sj5))+(((2.0)*cj5*gclwh15_9*npy*pz))+(((0.29542)*gclwh11_13*pp*r22*sj5))+(((-0.2211455036)*gclwh13_13*rxp1_2))+(((-0.59084)*cj5*gclwh15_13*npy*pz))+(((2.0)*gclwh11_9*npz*pz*sj5))+(((0.74858)*gclwh13_9*rxp1_2))+(((0.0096595172829)*cj5*gclwh15_11*r21))+(((0.041356733271222)*cj5*gclwh15_13*r21))+(((0.0059084)*cj5*gclwh5_13*rxp2_2))+(((-0.1399930041)*cj5*gclwh15_9*r21))+(((2.0)*cj5*gclwh13_9*npx*pz))+(((0.041356733271222)*cj5*gclwh13_13*r20))+(((0.002211455036)*gclwh15_13*r21*sj5))+(((-0.0074858)*gclwh15_9*r21*sj5))+((gclwh7_9*pp*r21))+(((0.0096733172829)*gclwh9_11*r20))+(((0.0096595172829)*gclwh11_11*r22*sj5))+(((-0.02)*cj5*gclwh5_9*rxp2_2))+(((-0.05165202)*cj5*gclwh9_11*rxp1_2))+(((0.2211455036)*gclwh15_13*rxp0_2))+(((-0.59084)*gclwh9_13*npx*pz))+(((0.0096595172829)*cj5*gclwh13_11*r20))+(((-0.00138)*gclwh7_11*rxp0_2*sj5))+(((0.0074858)*cj5*gclwh11_9*r22))+(((-1.0)*gclwh11_9*pp*r22*sj5))+(((0.02)*gclwh7_9*rxp0_2*sj5))+(((0.00138)*gclwh11_11*pz))+(((-0.0005165202)*cj5*gclwh11_11*r22))+(((0.74858)*cj5*gclwh9_9*rxp1_2))+(((-0.0059084)*gclwh9_13*rxp1_2*sj5))+(((-0.0059084)*gclwh7_13*rxp0_2*sj5))+(((-0.59084)*gclwh11_13*npz*pz*sj5))+(((0.002211455036)*gclwh13_13*r20*sj5))+(((-0.05165202)*gclwh13_11*rxp1_2))+(((-0.2211455036)*cj5*gclwh9_13*rxp1_2))+(((-0.00138)*gclwh9_11*rxp1_2*sj5))+(((0.02)*gclwh9_9*rxp1_2*sj5))+(((0.74858)*cj5*gclwh7_9*rxp0_2))+(((0.0059084)*gclwh11_13*pz))+(((-0.138)*gclwh9_11*npx*pz))+(((-0.05165202)*cj5*gclwh7_11*rxp0_2))+(((0.069)*gclwh9_11*pp*r20))+(((-0.138)*gclwh11_11*npz*pz*sj5))+(((0.069)*cj5*gclwh13_11*pp*r20))+(((-1.0)*cj5*gclwh13_9*pp*r20))+(((-0.1399930041)*gclwh11_9*r22*sj5))+(((-0.59084)*cj5*gclwh13_13*npx*pz))+(((-0.74858)*gclwh15_9*rxp0_2))+(((0.29542)*cj5*gclwh15_13*pp*r21))+(((0.74858)*gclwh5_9*rxp2_2*sj5))+(((-0.069)*gclwh7_11*pp*r21))+(((0.05165202)*gclwh15_11*rxp0_2))+(((0.041356733271222)*gclwh11_13*r22*sj5))+(((-0.02)*gclwh11_9*pz)));
op[68]=((((-0.00276)*x665))+(((-0.00276)*x666))+((x648*x664))+((x628*x642))+(((-1.0)*x631*x643))+((x643*x649))+((cj5*x628*x660))+((x628*x629))+(((-1.0)*npx*x643*x648))+(((-0.10330404)*x662))+(((0.00276)*x645))+(((0.10330404)*x632))+(((-1.0)*x647*x651))+(((0.138)*x641*x646))+((x660*x661))+(((0.0193466345658)*x661))+(((-1.0)*x643*x663))+(((-1.0)*gclwh13_15*x647))+(((0.0193190345658)*sj5*x646))+((x642*x655))+(((-1.0)*x634*x660))+((x629*x655))+(((-1.0)*gclwh11_15*x640*x643))+(((-0.0193466345658)*x634))+(((-0.0010330404)*cj5*x646)));
op[69]=((((-0.2803860082)*x639))+((x636*x657))+(((-0.082713466542444)*r20*x648))+((npx*x630*x648))+(((-0.082831634542444)*x661))+((gclwh13_15*x652))+((x634*x635))+(((0.2799860082)*sj5*x627))+(((-1.0)*x630*x649))+(((-1.0)*cj5*gclwh13_6*npx*x638))+(((-1.49716)*gclwh13_6*rxp1_2))+((cj5*x657*x658))+(((-1.0)*cj5*x628*x635))+((gclwh15_6*x633))+(((-1.0)*x639*x658))+((x630*x663))+((x636*x637))+(((-1.0)*gclwh7_6*rxp0_2*x650))+(((-0.082713466542444)*sj5*x646))+((gclwh7_6*npy*x638))+(((-1.0)*sj5*x635*x646))+(((-1.0)*x635*x661))+(((-1.0)*x655*x656))+((x653*x658))+((x637*x659))+(((0.0118168)*x665))+(((0.0118168)*x666))+(((0.082831634542444)*x634))+(((-1.0)*r20*x635*x648))+((x651*x652))+((gclwh11_15*x630*x640))+(((-1.49716)*cj5*x654))+(((-1.0)*gclwh11_6*x638*x640))+(((0.04)*cj5*x644))+((x657*x659))+(((-0.082713466542444)*cj5*x628))+(((-1.0)*x650*x654))+((cj5*x637*x658))+(((0.4422910072)*x662))+(((-1.0)*gclwh9_6*npx*x638))+(((-1.0)*cj5*gclwh7_6*x633))+(((0.04)*gclwh11_6*pz))+(((2.0)*x627*x641))+(((-0.4422910072)*x632))+(((-1.0)*cj5*gclwh15_6*npy*x638))+(((-1.0)*x628*x656))+((x630*x631))+(((0.2803860082)*x653))+(((-1.49716)*sj5*x644))+(((-0.0118168)*x645))+(((-0.0149716)*cj5*x627))+(((0.004422910072)*cj5*x646)));
op[70]=((0.04076796)+(((0.002801860082)*gclwh11_0*(cj5*cj5)*(r22*r22)))+(((-1.0)*gclwh0_1*r20*sj5*(pp*pp)))+(((-0.74858)*gclwh15_1*pp*rxp0_2))+((gclwh11_0*pp*pz*r22*sj5))+(((-7.4858e-5)*gclwh15_0*r21*r22*(sj5*sj5)))+(((0.02)*cj5*gclwh11_15*pz*rxp2_2))+(((-0.74858)*pz))+(((-0.5603720164)*gclwh7_1*npz*rxp0_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh9_11*npz*pp*r20))+(((0.74858)*cj5*gclwh2_0*npy*pz*r22*sj5))+(((0.66971)*gclwh11_11*pp*r22*sj5))+(((-0.1399930041)*gclwh15_11*npz*r21*(cj5*cj5)))+(((-0.02)*gclwh7_0*npy*pz*r22*sj5))+(((2.0)*cj5*gclwh13_1*npx*pp*pz))+(((-0.0004)*gclwh0_1*npz*rxp1_2*sj5))+(((-0.1401930041)*cj5*gclwh7_15*r21*rxp2_2))+(((0.0963180554)*gclwh2_1*npy*pz*sj5))+(((-0.138)*gclwh11_0*npz*pz*sj5))+(((0.052472839504589)*cj5*gclwh7_0*r21*r22))+(((-1.49716)*cj5*gclwh11_1*pz*sj5*(npz*npz)))+(((0.05165202)*gclwh15_0*rxp0_2))+(((0.0004)*gclwh2_1*npz*rxp0_2*sj5))+(((0.002803860082)*gclwh9_1*npz*r20*sj5))+(((-0.00138)*gclwh7_0*rxp0_2*sj5))+(((0.0074858)*cj5*gclwh15_15*r21*rxp2_2*sj5))+(((0.74858)*cj5*gclwh13_11*npz*rxp1_2))+(((2.0)*gclwh13_11*npx*npz*pz*(cj5*cj5)))+(((-1.49716)*gclwh15_1*npy*npz*pz*(cj5*cj5)))+(((0.052323123504589)*cj5*gclwh0_0*r20*r22*sj5))+(((0.1399930041)*cj5*gclwh11_9*sj5*(r22*r22)))+(((0.0074858)*cj5*gclwh13_9*r20*r22*sj5))+(((-0.5603720164)*cj5*gclwh13_1*npz*rxp1_2))+(((0.2801860082)*cj5*gclwh13_0*r22*rxp1_2))+(((-0.052397981504589)*gclwh13_0*r20*r22*(cj5*cj5)))+(((0.138)*gclwh7_0*npy*pz))+(((0.0074858)*gclwh11_11*npz*r22*(cj5*cj5)))+(((-1.0)*gclwh15_11*npz*pp*r21*(cj5*cj5)))+(((0.74858)*cj5*gclwh9_1*npz*pp*r20))+(((0.069)*gclwh2_0*pp*r21*sj5))+(((-0.0074858)*cj5*gclwh0_1*pp*r20))+(((0.74858)*cj5*gclwh15_15*rxp0_2*rxp2_2))+(((-1.33942)*cj5*gclwh13_11*npx*pz))+(((0.104795963009178)*gclwh15_1*npz*r21*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh2_1*pp*r21))+(((-0.00674192696225811)*cj5*gclwh13_1*r20))+(((-0.04)*cj5*gclwh13_1*npx*npz*pz*sj5))+(((0.74858)*gclwh13_1*npz*pp*r20*(cj5*cj5)))+(((-0.0074858)*cj5*gclwh2_0*r22*rxp0_2))+(((-0.00036050884955666)*cj5*gclwh0_1*r20))+((gclwh15_9*pp*r21*r22*(cj5*cj5)))+(((-0.5603720164)*gclwh9_1*npz*rxp1_2*(cj5*cj5)))+(((-2.0)*cj5*gclwh9_15*npx*pz*rxp2_2))+(((0.74858)*gclwh5_1*pp*rxp2_2*sj5))+(((0.74858)*cj5*gclwh11_1*npz*pp*r22*sj5))+(((-1.33942)*gclwh9_11*npx*pz))+(((0.0074858)*gclwh15_0*pz*r21*sj5))+(((0.0074858)*gclwh5_0*r22*rxp2_2*(sj5*sj5)))+(((-1.33942)*cj5*gclwh15_11*npy*pz))+(((-0.1401930041)*gclwh7_0*pz*r21))+(((-0.05165202)*gclwh13_0*rxp1_2))+(((-0.01)*cj5*gclwh15_0*pp*r21*r22*sj5))+(((0.02)*cj5*gclwh7_11*npz*rxp0_2*sj5))+(((0.069)*gclwh11_0*pp*r22*sj5))+(((-0.37429)*gclwh13_0*pp*r20*r22*(cj5*cj5)))+(((-0.0299432)*cj5*gclwh7_1*npz*rxp0_2*sj5))+(((0.02)*gclwh11_1*npz*pp*r22*(sj5*sj5)))+(((-2.0)*gclwh15_9*npy*pz*r22*(cj5*cj5)))+(((-1.0)*gclwh11_1*r22*sj5*(pp*pp)))+(((0.02)*gclwh2_0*pz*rxp0_2))+(((-0.104945679009178)*cj5*gclwh7_1*npz*r21))+(((-0.04)*gclwh2_1*npy*npz*pz*(sj5*sj5)))+(((0.02)*gclwh2_1*npz*pp*r21*(sj5*sj5)))+((cj5*gclwh9_9*pp*r20*r22))+(((-0.0074858)*gclwh11_9*(cj5*cj5)*(r22*r22)))+(((-0.052323123504589)*cj5*gclwh11_0*sj5*(r22*r22)))+(((0.001401930041)*gclwh7_0*r21*r22*sj5))+(((-0.01)*gclwh2_0*pp*r21*r22*(sj5*sj5)))+(((2.0)*cj5*gclwh9_11*npx*npz*pz))+(((-2.0)*gclwh11_0*npz*sj5*(pz*pz)))+(((0.036050884955666)*gclwh13_1*rxp1_2))+(((0.2799860082)*cj5*gclwh5_0*r22*rxp2_2*sj5))+(((0.000149716)*gclwh15_1*npz*r21*(sj5*sj5)))+(((-0.000963180554)*gclwh2_1*rxp0_2))+(((0.093754714775811)*cj5*gclwh13_11*r20))+(((0.74858)*cj5*gclwh11_0*npz*pz*r22*sj5))+(((0.2801860082)*gclwh9_0*r22*rxp1_2*(cj5*cj5)))+(((0.02)*gclwh11_0*npz*pz*r22*(sj5*sj5)))+(((-0.02)*cj5*gclwh9_9*r22*rxp1_2*sj5))+(((0.104646247009178)*cj5*gclwh11_1*npz*r22*sj5))+(((0.104945679009178)*cj5*gclwh9_1*npz*r20))+(((-0.052472839504589)*cj5*gclwh9_0*r20*r22))+(((0.0149716)*cj5*gclwh11_1*npz*pz))+(((-0.138)*gclwh9_0*npx*pz))+(((0.74858)*gclwh15_0*npy*pz*r22*(cj5*cj5)))+(((-0.036050884955666)*gclwh15_1*rxp0_2))+(((-0.5013315118)*cj5*gclwh9_11*rxp1_2))+(((0.069)*cj5*gclwh13_0*pp*r20))+(((-0.74858)*cj5*gclwh13_9*r22*rxp1_2))+(((-0.000963180554)*gclwh11_1*pz))+(((-0.000963180554)*cj5*gclwh5_1*rxp2_2))+(((0.0096595172829)*gclwh11_0*r22*sj5))+(((-0.0005165202)*cj5*gclwh11_0*r22))+((gclwh7_1*r21*(pp*pp)))+(((-0.0963180554)*gclwh7_1*npy*pz))+(((0.74858)*cj5*gclwh2_1*npz*pp*r21*sj5))+(((0.04)*gclwh7_1*npy*npz*pz*sj5))+(((-0.74858)*gclwh9_15*rxp1_2*rxp2_2*(cj5*cj5)))+(((0.74858)*gclwh15_1*npz*pp*r21*(cj5*cj5)))+(((-0.5599720164)*cj5*gclwh5_1*npz*rxp2_2*sj5))+(((-0.005603720164)*gclwh11_1*npz*r22*(cj5*cj5)))+(((-0.002799860082)*gclwh2_1*npz*r21*(sj5*sj5)))+(((-1.33942)*gclwh11_11*npz*pz*sj5))+(((0.000149716)*gclwh13_1*npz*r20*(sj5*sj5)))+(((0.74858)*cj5*gclwh9_0*npx*pz*r22))+(((-0.74858)*gclwh9_9*r22*rxp1_2*(cj5*cj5)))+(((0.02)*gclwh5_9*r22*rxp2_2*(cj5*cj5)))+(((0.02)*cj5*gclwh15_1*npz*pp*r21*sj5))+(((0.0002)*gclwh0_0*r22*rxp1_2*sj5))+((cj5*gclwh7_11*npz*pp*r21))+(((0.005013315118)*gclwh15_11*r21*sj5))+(((-7.4858e-5)*gclwh13_0*r20*r22*(sj5*sj5)))+(((-2.0)*cj5*gclwh11_9*npz*pz*r22*sj5))+(((0.000963180554)*gclwh0_1*rxp1_2))+(((0.74858)*gclwh15_0*pz*rxp0_2))+(((0.00674192696225811)*gclwh0_1*r20*sj5))+(((-0.74858)*cj5*gclwh7_1*npz*pp*r21))+(((0.0005165202)*gclwh13_0*r20*sj5))+(((-0.1881520318)*cj5*gclwh15_1*pp*r21))+(((-0.00036050884955666)*gclwh13_1*r20*sj5))+(((-0.66971)*gclwh7_11*pp*r21))+(((0.104795963009178)*gclwh13_1*npz*r20*(cj5*cj5)))+(((0.0918339764)*gclwh0_1*pp*r20*sj5))+(((-0.104646247009178)*cj5*gclwh2_1*npz*r21*sj5))+(((-2.0)*cj5*gclwh15_0*npy*(pz*pz)))+(((0.1883520318)*gclwh7_1*pp*r21))+(((0.0963180554)*gclwh9_1*npx*pz))+(((0.02)*gclwh7_1*pp*rxp0_2*sj5))+(((0.1399930041)*gclwh15_9*r21*r22*(cj5*cj5)))+(((0.0074858)*cj5*gclwh2_0*pz*r21))+(((0.74858)*gclwh7_11*npz*rxp0_2*(cj5*cj5)))+(((-0.093888656775811)*gclwh7_11*r21))+(((0.0074858)*cj5*gclwh13_15*r20*rxp2_2*sj5))+(((-1.49716)*cj5*gclwh0_1*npx*npz*pz*sj5))+(((0.0074858)*gclwh13_0*pz*r20*sj5))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.005603720164)*gclwh0_1*npz*r20*(cj5*cj5)))+(((-0.02)*gclwh9_0*pz*rxp1_2*sj5))+(((0.0074858)*cj5*gclwh11_1*pp*r22))+(((0.036050884955666)*cj5*gclwh7_1*rxp0_2))+(((-2.0)*cj5*gclwh13_0*npx*(pz*pz)))+(((-1.0)*cj5*gclwh11_11*npz*pp*r22*sj5))+(((0.0002)*gclwh7_0*r22*rxp0_2*(sj5*sj5)))+((gclwh2_0*pp*pz*r21*sj5))+(((-1.0)*cj5*pp*r22))+(((2.0)*gclwh15_11*npy*npz*pz*(cj5*cj5)))+(((-0.0299432)*cj5*gclwh9_1*npz*rxp1_2*sj5))+(((0.1399930041)*gclwh13_15*r20*rxp2_2*(cj5*cj5)))+(((-1.0)*cj5*gclwh7_15*pp*r21*rxp2_2))+(((-0.74858)*cj5*gclwh7_0*pz*rxp0_2))+(((-0.74858)*cj5*gclwh5_9*r22*rxp2_2*sj5))+(((0.02)*cj5*gclwh11_9*pz*r22))+(((-0.1401930041)*cj5*gclwh7_9*r21*r22))+(((-0.0074858)*gclwh5_0*r22*rxp2_2*(cj5*cj5)))+(((-1.49716)*cj5*gclwh2_1*npy*npz*pz*sj5))+(((0.093888656775811)*gclwh9_11*r20))+(((0.0074858)*cj5*gclwh15_9*r21*r22*sj5))+(((-0.138)*cj5*gclwh15_0*npy*pz))+(((-0.052397981504589)*gclwh15_0*r21*r22*(cj5*cj5)))+(((0.0963180554)*gclwh0_1*npx*pz*sj5))+(((-0.0096595172829)*gclwh0_0*r20*sj5))+(((0.0005165202)*cj5*gclwh2_0*r21))+(((-0.0002)*gclwh2_0*r22*rxp0_2*sj5))+(((0.005013315118)*gclwh13_11*r20*sj5))+(((0.000963180554)*gclwh7_1*rxp0_2*sj5))+((gclwh13_15*pp*r20*rxp2_2*(cj5*cj5)))+(((-0.01)*gclwh11_0*pp*(r22*r22)*(sj5*sj5)))+(((-0.04)*gclwh11_1*pz*(npz*npz)*(sj5*sj5)))+(((0.1401930041)*cj5*gclwh9_15*r20*rxp2_2))+(((-0.00138)*gclwh9_0*rxp1_2*sj5))+(((0.0074858)*r22*sj5))+(((2.0)*gclwh9_1*npx*pp*pz))+(((0.02)*gclwh9_1*pp*rxp1_2*sj5))+(((2.0)*cj5*gclwh7_15*npy*pz*rxp2_2))+(((-0.02)*cj5*gclwh11_11*npz*pz))+(((0.036050884955666)*gclwh5_1*rxp2_2*sj5))+(((0.1401930041)*cj5*gclwh9_9*r20*r22))+(((0.036050884955666)*cj5*gclwh9_1*rxp1_2))+((cj5*gclwh9_15*pp*r20*rxp2_2))+(((-0.02)*gclwh7_1*npz*pp*r21*sj5))+(((-0.00675155876779811)*gclwh9_1*r20))+(((-0.0149716)*cj5*gclwh0_1*npz*rxp1_2))+(((-0.74858)*cj5*gclwh7_0*npy*pz*r22))+(((-0.0149716)*cj5*gclwh11_0*pz*r22))+(((-0.1399930041)*cj5*gclwh11_11*npz*r22*sj5))+(((0.008403580246)*cj5*gclwh13_1*npz*r20*sj5))+(((-0.01)*cj5*gclwh13_0*pp*r20*r22*sj5))+(((-0.1883520318)*gclwh9_1*pp*r20))+((gclwh15_15*pp*r21*rxp2_2*(cj5*cj5)))+(((-0.05165202)*gclwh5_0*rxp2_2*sj5))+(((-0.05165202)*cj5*gclwh7_0*rxp0_2))+(((-0.0149716)*gclwh13_1*npz*rxp1_2*sj5))+(((-0.004201790123)*cj5*gclwh13_0*r20*r22*sj5))+(((0.069)*cj5*gclwh15_0*pp*r21))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.02)*gclwh0_0*npx*pz*r22*(sj5*sj5)))+(((-0.05165202)*cj5*gclwh9_0*rxp1_2))+(((-0.04)*gclwh9_1*npx*npz*pz*sj5))+(((0.1399930041)*cj5*gclwh11_15*r22*rxp2_2*sj5))+(((0.5603720164)*cj5*gclwh15_1*npz*rxp0_2))+(((0.00036050884955666)*cj5*gclwh11_1*r22))+(((0.0967180554)*gclwh11_1*npz*pz*sj5))+(((-0.02)*gclwh7_0*pz*rxp0_2*sj5))+(((-0.1401930041)*cj5*gclwh9_11*npz*r20))+(((-1.0)*cj5*gclwh15_1*r21*(pp*pp)))+(((-0.04)*cj5*gclwh15_1*npy*npz*pz*sj5))+((gclwh0_0*pp*pz*r20*sj5))+(((-2.0)*gclwh2_0*npy*sj5*(pz*pz)))+(((0.02)*gclwh9_0*npx*pz*r22*sj5))+(((-0.002803860082)*gclwh7_1*npz*r21*sj5))+(((0.052323123504589)*cj5*gclwh2_0*r21*r22*sj5))+(((-0.138)*cj5*gclwh13_0*npx*pz))+(((-0.138)*gclwh0_0*npx*pz*sj5))+(((1.49716)*cj5*gclwh7_1*npy*npz*pz))+(((-0.02)*gclwh0_0*pz*rxp1_2))+(((0.093754714775811)*cj5*gclwh15_11*r21))+(((-2.0)*cj5*gclwh11_15*npz*pz*rxp2_2*sj5))+(((-0.004201790123)*cj5*gclwh15_0*r21*r22*sj5))+(((0.1399930041)*gclwh13_9*r20*r22*(cj5*cj5)))+(((-0.1399930041)*gclwh13_11*npz*r20*(cj5*cj5)))+(((0.001399930041)*gclwh2_0*r21*r22*(sj5*sj5)))+(((-2.0)*cj5*gclwh7_11*npy*npz*pz))+(((-0.0074858)*cj5*gclwh15_11*npz*r21*sj5))+(((-0.37429)*cj5*gclwh11_0*pp*sj5*(r22*r22)))+(((-0.0096595172829)*gclwh2_0*r21*sj5))+(((-0.02)*cj5*gclwh7_15*rxp0_2*rxp2_2*sj5))+(((-0.005013315118)*cj5*gclwh11_11*r22))+(((-0.1399930041)*gclwh0_0*pz*r20*sj5))+(((0.1401930041)*gclwh9_0*pz*r20))+(((0.0074858)*gclwh13_0*r22*rxp1_2*sj5))+(((0.0149716)*gclwh15_1*npz*rxp0_2*sj5))+(((0.00138)*cj5*gclwh5_0*rxp2_2))+(((-0.0074858)*gclwh15_0*r22*rxp0_2*sj5))+(((0.0005165202)*cj5*gclwh0_0*r20))+(((0.74858)*cj5*gclwh15_9*r22*rxp0_2))+(((0.02)*cj5*gclwh13_0*npx*pz*r22*sj5))+(((2.0)*cj5*npz*pz))+(((0.00674192696225811)*gclwh2_1*r21*sj5))+(((-1.0)*cj5*gclwh13_1*r20*(pp*pp)))+(((1.33942)*gclwh7_11*npy*pz))+((cj5*gclwh15_0*pp*pz*r21))+(((2.0)*cj5*gclwh15_1*npy*pp*pz))+(((0.00675155876779811)*gclwh7_1*r21))+(((-0.5013315118)*gclwh13_11*rxp1_2))+(((0.02)*cj5*gclwh5_0*pz*rxp2_2))+(((2.0)*gclwh2_1*npy*pp*pz*sj5))+(((2.0)*cj5*gclwh7_9*npy*pz*r22))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-0.00674192696225811)*cj5*gclwh15_1*r21))+(((-0.00138)*gclwh0_0*rxp1_2))+(((-0.0004)*gclwh7_1*npz*rxp0_2*(sj5*sj5)))+(((-0.02)*cj5*gclwh7_9*r22*rxp0_2*sj5))+(((0.74858)*cj5*gclwh9_1*pp*rxp1_2))+(((-0.2801860082)*cj5*gclwh15_0*r22*rxp0_2))+(((0.005603720164)*gclwh2_1*npz*r21*(cj5*cj5)))+(((0.0149716)*cj5*gclwh7_0*r22*rxp0_2*sj5))+(((0.5013315118)*gclwh15_11*rxp0_2))+(((0.02)*gclwh0_1*npz*pp*r20*(sj5*sj5)))+(((0.1399930041)*cj5*r22))+(((0.00138)*gclwh2_0*rxp0_2))+(((0.0133942)*gclwh11_11*pz))+(((-0.02)*gclwh2_1*pp*rxp0_2))+(((0.0096595172829)*cj5*gclwh13_0*r20))+(((-0.01)*gclwh0_0*pp*r20*r22*(sj5*sj5)))+(((0.000963180554)*gclwh9_1*rxp1_2*sj5))+(((0.02)*gclwh2_0*npy*pz*r22*(sj5*sj5)))+(((-0.37429)*cj5*gclwh2_0*pp*r21*r22*sj5))+(((0.74858)*gclwh13_0*npx*pz*r22*(cj5*cj5)))+(((-0.01)*gclwh9_0*pp*r20*r22*sj5))+(((-0.74858)*cj5*gclwh15_11*npz*rxp0_2))+(((-2.0)*gclwh0_0*npx*sj5*(pz*pz)))+(((-0.0133942)*gclwh7_11*rxp0_2*sj5))+(((-0.02)*cj5*gclwh9_15*rxp1_2*rxp2_2*sj5))+(((-0.0074858)*gclwh11_15*r22*rxp2_2*(cj5*cj5)))+(((-0.04)*gclwh0_1*npx*npz*pz*(sj5*sj5)))+(((0.0074858)*cj5*gclwh0_0*r22*rxp1_2))+(((-0.002801860082)*gclwh2_0*r21*r22*(cj5*cj5)))+(((-0.37429)*cj5*gclwh0_0*pp*r20*r22*sj5))+(((0.74858)*gclwh9_11*npz*rxp1_2*(cj5*cj5)))+(((-2.0)*gclwh15_15*npy*pz*rxp2_2*(cj5*cj5)))+(((-1.0)*gclwh2_1*r21*sj5*(pp*pp)))+(((0.02)*cj5*gclwh9_11*npz*rxp1_2*sj5))+(((-0.138)*gclwh2_0*npy*pz*sj5))+(((0.1399930041)*gclwh15_15*r21*rxp2_2*(cj5*cj5)))+(((-0.74858)*gclwh5_0*pz*rxp2_2*sj5))+(((0.0149716)*cj5*gclwh2_1*npz*rxp0_2))+(((0.093754714775811)*gclwh11_11*r22*sj5))+(((-0.104646247009178)*cj5*gclwh0_1*npz*r20*sj5))+(((0.02)*cj5*gclwh15_0*npy*pz*r22*sj5))+(((0.0074858)*cj5*gclwh0_0*pz*r20))+(((0.02)*gclwh9_1*npz*pp*r20*sj5))+(((0.02)*gclwh0_1*pp*rxp1_2))+(((-1.49716)*cj5*gclwh9_1*npx*npz*pz))+(((0.069)*gclwh0_0*pp*r20*sj5))+(((0.66971)*gclwh9_11*pp*r20))+(((-0.74858)*gclwh13_0*pz*rxp1_2))+(((0.0096595172829)*cj5*gclwh15_0*r21))+(((0.74858)*gclwh13_1*pp*rxp1_2))+(((-0.0004)*gclwh9_1*npz*rxp1_2*(sj5*sj5)))+(((0.00138)*gclwh11_0*pz))+(((-0.5013315118)*cj5*gclwh7_11*rxp0_2))+(((0.0963180554)*cj5*gclwh15_1*npy*pz))+(((2.0)*cj5*gclwh11_11*pz*sj5*(npz*npz)))+(((0.0096733172829)*gclwh9_0*r20))+(((-0.001401930041)*gclwh9_0*r20*r22*sj5))+(((0.069)*gclwh9_0*pp*r20))+(((2.0)*gclwh0_1*npx*pp*pz*sj5))+(((0.66971)*cj5*gclwh13_11*pp*r20))+(((-0.069)*gclwh7_0*pp*r21))+((cj5*gclwh13_0*pp*pz*r20))+(((-0.1399930041)*gclwh2_0*pz*r21*sj5))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.1399930041)*cj5*gclwh13_0*pz*r20))+(((-0.37429)*gclwh15_0*pp*r21*r22*(cj5*cj5)))+(((0.008403580246)*cj5*gclwh15_1*npz*r21*sj5))+(((-0.00036050884955666)*cj5*gclwh2_1*r21))+(((-0.002801860082)*gclwh0_0*r20*r22*(cj5*cj5)))+(((0.74858)*cj5*gclwh0_1*npz*pp*r20*sj5))+(((0.74858)*cj5*gclwh0_0*npx*pz*r22*sj5))+(((0.0005165202)*gclwh15_0*r21*sj5))+(((-0.74858)*cj5*gclwh13_15*rxp1_2*rxp2_2))+(((-0.1881520318)*gclwh11_1*pp*r22*sj5))+(((0.37429)*cj5*gclwh7_0*pp*r21*r22))+((cj5*gclwh11_9*pp*sj5*(r22*r22)))+(((-0.02)*gclwh11_1*pp*pz))+(((0.1399930041)*cj5*gclwh15_0*pz*r21))+(((-0.37429)*cj5*gclwh9_0*pp*r20*r22))+(((-0.0074858)*gclwh13_1*pp*r20*sj5))+((gclwh13_9*pp*r20*r22*(cj5*cj5)))+(((-0.74858)*gclwh7_15*rxp0_2*rxp2_2*(cj5*cj5)))+(((-0.0074858)*gclwh15_1*pp*r21*sj5))+((cj5*gclwh11_15*pp*r22*rxp2_2*sj5))+(((0.0002)*gclwh9_0*r22*rxp1_2*(sj5*sj5)))+(((-2.0)*gclwh13_15*npx*pz*rxp2_2*(cj5*cj5)))+(((-2.0)*gclwh13_9*npx*pz*r22*(cj5*cj5)))+(((-0.00036050884955666)*gclwh15_1*r21*sj5))+(((-0.002799860082)*gclwh0_1*npz*r20*(sj5*sj5)))+(((-0.0074858)*cj5*gclwh13_11*npz*r20*sj5))+(((0.002799860082)*gclwh11_1*npz*r22*(sj5*sj5)))+(((0.0149716)*cj5*gclwh9_0*r22*rxp1_2*sj5))+(((0.01)*gclwh7_0*pp*r21*r22*sj5))+(((-2.0)*cj5*gclwh9_9*npx*pz*r22))+(((0.02)*cj5*gclwh13_1*npz*pp*r20*sj5))+(((-0.74858)*gclwh7_9*r22*rxp0_2*(cj5*cj5)))+(((0.74858)*cj5*gclwh7_1*pp*rxp0_2))+(((-0.0096733172829)*gclwh7_0*r21))+(((-0.02)*cj5*gclwh5_1*pp*rxp2_2))+(((-1.0)*gclwh13_11*npz*pp*r20*(cj5*cj5)))+(((-0.1881520318)*cj5*gclwh13_1*pp*r20))+(((0.0149716)*gclwh5_1*npz*rxp2_2*(cj5*cj5)))+(((-0.0149716)*gclwh5_1*npz*rxp2_2*(sj5*sj5)))+(((0.2801860082)*gclwh7_0*r22*rxp0_2*(cj5*cj5)))+(((-0.001399930041)*gclwh11_0*(r22*r22)*(sj5*sj5)))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((0.001399930041)*gclwh0_0*r20*r22*(sj5*sj5)))+(((2.0)*gclwh11_1*npz*pp*pz*sj5))+(((0.66971)*cj5*gclwh15_11*pp*r21))+(((0.1397930041)*gclwh11_0*pz*r22*sj5))+((gclwh9_0*pp*pz*r20))+(((0.1401930041)*cj5*gclwh7_11*npz*r21))+(((-1.0)*cj5*gclwh7_9*pp*r21*r22))+(((0.0963180554)*cj5*gclwh13_1*npx*pz))+(((0.02)*gclwh11_0*(pz*pz)))+(((-1.49716)*gclwh13_1*npx*npz*pz*(cj5*cj5)))+(((-0.74858)*cj5*gclwh9_0*pz*rxp1_2))+(((-0.00674192696225811)*gclwh11_1*r22*sj5))+(((-0.0133942)*gclwh9_11*rxp1_2*sj5))+(((0.0918339764)*gclwh2_1*pp*r21*sj5)));
op[71]=((-0.0825119764)+(((-0.74858)*gclwh13_9*rxp1_2))+(((0.2211455036)*gclwh13_13*rxp1_2))+(((0.0059084)*gclwh9_13*rxp1_2*sj5))+(((0.0074858)*gclwh15_9*r21*sj5))+(((-0.29542)*gclwh9_13*pp*r20))+(((0.29542)*gclwh7_13*pp*r21))+(((0.0059084)*gclwh7_13*rxp0_2*sj5))+(((-0.138)*cj5*gclwh15_11*npy*pz))+(((0.2211455036)*gclwh5_13*rxp2_2*sj5))+(((-2.0)*gclwh9_9*npx*pz))+(((0.2211455036)*cj5*gclwh9_13*rxp1_2))+(((-0.041356733271222)*gclwh11_13*r22*sj5))+(((0.02)*cj5*gclwh5_9*rxp2_2))+(((-0.1401930041)*gclwh7_9*r21))+((gclwh9_9*pp*r20))+(((0.069)*gclwh11_11*pp*r22*sj5))+((gclwh11_9*pp*r22*sj5))+(((0.0005165202)*gclwh13_11*r20*sj5))+(((-0.0096733172829)*gclwh7_11*r21))+(((0.59084)*gclwh9_13*npx*pz))+(((-0.138)*cj5*gclwh13_11*npx*pz))+(((0.1399930041)*gclwh11_9*r22*sj5))+(((-2.0)*cj5*gclwh13_9*npx*pz))+(((-0.29542)*cj5*gclwh15_13*pp*r21))+(((0.069)*cj5*gclwh15_11*pp*r21))+(((-0.2211455036)*gclwh15_13*rxp0_2))+(((0.138)*gclwh7_11*npy*pz))+(((0.0005165202)*gclwh15_11*r21*sj5))+((cj5*gclwh13_9*pp*r20))+(((-0.29542)*gclwh11_13*pp*r22*sj5))+(((0.1401930041)*gclwh9_9*r20))+(((0.002211455036)*cj5*gclwh11_13*r22))+(((0.0096595172829)*cj5*gclwh15_11*r21))+(((-0.74858)*cj5*gclwh9_9*rxp1_2))+(((-0.02)*gclwh9_9*rxp1_2*sj5))+(((-0.02)*gclwh7_9*rxp0_2*sj5))+(((0.02)*gclwh11_9*pz))+(((-0.041356733271222)*cj5*gclwh15_13*r21))+(((-0.0059084)*gclwh11_13*pz))+(((0.59084)*cj5*gclwh13_13*npx*pz))+(((-0.002211455036)*gclwh15_13*r21*sj5))+(((0.1399930041)*cj5*gclwh15_9*r21))+(((0.0096733172829)*gclwh9_11*r20))+(((0.0096595172829)*gclwh11_11*r22*sj5))+(((-0.041356733271222)*cj5*gclwh13_13*r20))+(((-0.29542)*cj5*gclwh13_13*pp*r20))+(((-0.05165202)*cj5*gclwh9_11*rxp1_2))+(((0.1399930041)*cj5*gclwh13_9*r20))+(((0.0096595172829)*cj5*gclwh13_11*r20))+(((2.0)*gclwh7_9*npy*pz))+(((0.041415817271222)*gclwh7_13*r21))+(((-0.00138)*gclwh7_11*rxp0_2*sj5))+(((0.00138)*gclwh11_11*pz))+(((-0.0005165202)*cj5*gclwh11_11*r22))+(((-2.0)*gclwh11_9*npz*pz*sj5))+(((-0.041415817271222)*gclwh9_13*r20))+(((-1.0)*gclwh7_9*pp*r21))+(((-0.0059084)*cj5*gclwh5_13*rxp2_2))+(((-0.05165202)*gclwh13_11*rxp1_2))+(((0.59084)*cj5*gclwh15_13*npy*pz))+(((0.2211455036)*cj5*gclwh7_13*rxp0_2))+(((-0.74858)*gclwh5_9*rxp2_2*sj5))+(((-0.00138)*gclwh9_11*rxp1_2*sj5))+((cj5*gclwh15_9*pp*r21))+(((-0.138)*gclwh9_11*npx*pz))+(((-0.05165202)*cj5*gclwh7_11*rxp0_2))+(((0.069)*gclwh9_11*pp*r20))+(((-0.138)*gclwh11_11*npz*pz*sj5))+(((-0.0074858)*cj5*gclwh11_9*r22))+(((0.069)*cj5*gclwh13_11*pp*r20))+(((-0.002211455036)*gclwh13_13*r20*sj5))+(((-2.0)*cj5*gclwh15_9*npy*pz))+(((0.74858)*gclwh15_9*rxp0_2))+(((-0.069)*gclwh7_11*pp*r21))+(((0.0074858)*gclwh13_9*r20*sj5))+(((0.05165202)*gclwh15_11*rxp0_2))+(((-0.74858)*cj5*gclwh7_9*rxp0_2))+(((-0.59084)*gclwh7_13*npy*pz))+(((0.59084)*gclwh11_13*npz*pz*sj5)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x667=htj1*htj1;
CheckValue<IkReal> x668=IKPowWithIntegerCheck(((1.0)+x667),-1);
if(!x668.valid){
continue;
}
cj1array[numsolutions]=((x668.value)*(((1.0)+(((-1.0)*x667)))));
CheckValue<IkReal> x669=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x669.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x669.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x670=htj2*htj2;
CheckValue<IkReal> x671=IKPowWithIntegerCheck(((1.0)+x670),-1);
if(!x671.valid){
continue;
}
cj2array[numsolutions]=((x671.value)*(((1.0)+(((-1.0)*x670)))));
CheckValue<IkReal> x672=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x672.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x672.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x673=htj3*htj3;
CheckValue<IkReal> x674=IKPowWithIntegerCheck(((1.0)+x673),-1);
if(!x674.valid){
continue;
}
cj3array[numsolutions]=((x674.value)*(((1.0)+(((-1.0)*x673)))));
CheckValue<IkReal> x675=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x675.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x675.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j6eval[2];
IkReal x676=cj5*cj5;
IkReal x677=r21*r21;
IkReal x678=r20*r20;
IkReal x679=sj5*sj5;
IkReal x680=((37429.0)*sj5);
IkReal x681=((1000.0)*cj5);
IkReal x682=((74.858)*cj5*sj5);
IkReal x683=((1400.930041)*x679);
j6eval[0]=(((x678*x683))+((x676*x678))+((x676*x677))+((x677*x683))+(((-1.0)*x678*x682))+(((-1.0)*x677*x682)));
j6eval[1]=((IKabs((((r21*x681))+(((-1.0)*r21*x680)))))+(IKabs(((((-1.0)*r20*x680))+((r20*x681))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x684=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x684);
rxp1_0=(pz*r11);
rxp1_1=(r01*x684);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj5;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x685=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x685);
rxp1_0=(pz*r11);
rxp1_1=(r01*x685);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj5;
j4eval[2]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[8+1], zeror[8];
int numroots;
IkReal x686=((0.01)*r11);
IkReal x687=((1.0)*py);
IkReal x688=((0.01)*r01);
IkReal x689=((1.0)*px);
IkReal x690=(cj2*sj1);
IkReal x691=((0.069)*x690);
IkReal x692=((((-1.0)*x687))+x686);
IkReal x693=((0.138)+(((-0.138)*x690)));
IkReal x694=((((-1.0)*x686))+(((-1.0)*x687)));
IkReal x695=((-0.069)+x691);
IkReal x696=(x689+x691);
IkReal x697=((0.069)+x688+(((-1.0)*x696)));
IkReal x698=((0.069)+(((-1.0)*x688))+(((-1.0)*x696)));
IkReal x699=((((-1.0)*x689))+x688+x695);
IkReal x700=((((-1.0)*x688))+(((-1.0)*x689))+x695);
IkReal gconst40=x692;
IkReal gconst41=x694;
IkReal gconst42=x697;
IkReal gconst43=x698;
IkReal gconst44=x692;
IkReal gconst45=x694;
IkReal gconst46=x697;
IkReal gconst47=x698;
IkReal gconst48=x693;
IkReal gconst49=x693;
IkReal gconst50=x693;
IkReal gconst51=x693;
IkReal gconst52=x692;
IkReal gconst53=x694;
IkReal gconst54=x699;
IkReal gconst55=x700;
IkReal gconst56=x692;
IkReal gconst57=x694;
IkReal gconst58=x699;
IkReal gconst59=x700;
IkReal x701=r00*r00;
IkReal x702=r10*r10;
IkReal x703=(gconst53*gconst59);
IkReal x704=(gconst42*gconst50);
IkReal x705=(gconst43*gconst50);
IkReal x706=(gconst55*gconst56);
IkReal x707=(gconst43*gconst48);
IkReal x708=(gconst47*gconst56);
IkReal x709=(gconst51*gconst58);
IkReal x710=((1.0)*gconst42);
IkReal x711=(gconst41*gconst47);
IkReal x712=(gconst50*gconst54);
IkReal x713=(gconst40*gconst43);
IkReal x714=(gconst44*gconst54);
IkReal x715=(gconst48*gconst55);
IkReal x716=(gconst45*gconst46);
IkReal x717=(gconst40*gconst55);
IkReal x718=((1.0)*gconst59);
IkReal x719=(gconst43*gconst44);
IkReal x720=(gconst46*gconst51);
IkReal x721=(gconst49*gconst59);
IkReal x722=(gconst55*gconst58);
IkReal x723=(gconst45*gconst52);
IkReal x724=(gconst46*gconst53);
IkReal x725=(gconst41*gconst42);
IkReal x726=(gconst43*gconst58);
IkReal x727=(gconst41*gconst46);
IkReal x728=(gconst57*gconst58);
IkReal x729=((1.0)*gconst54);
IkReal x730=(gconst52*gconst55);
IkReal x731=(gconst53*gconst58);
IkReal x732=(gconst46*gconst57);
IkReal x733=(gconst45*gconst58);
IkReal x734=(gconst43*gconst52);
IkReal x735=(gconst42*gconst49);
IkReal x736=(gconst54*gconst56);
IkReal x737=((0.0008)*gconst50);
IkReal x738=((0.0004)*gconst44);
IkReal x739=((0.0008)*gconst56);
IkReal x740=((1.0)*gconst47);
IkReal x741=(gconst42*gconst44);
IkReal x742=(gconst44*gconst55);
IkReal x743=(gconst46*gconst55);
IkReal x744=((0.0004)*gconst56);
IkReal x745=((0.0004)*gconst50);
IkReal x746=(gconst47*gconst53);
IkReal x747=(gconst42*gconst56);
IkReal x748=(gconst49*gconst58);
IkReal x749=(gconst41*gconst59);
IkReal x750=(gconst50*gconst55);
IkReal x751=((0.0008)*gconst44);
IkReal x752=(gconst43*gconst56);
IkReal x753=(gconst47*gconst49);
IkReal x754=(gconst41*gconst58);
IkReal x755=(gconst43*gconst46);
IkReal x756=(gconst52*gconst57);
IkReal x757=(gconst52*x740);
IkReal x758=((0.0004)*x702);
IkReal x759=((0.0008)*x702);
IkReal x760=((0.0004)*r00*r10);
IkReal x761=((0.0008)*r00*r10);
IkReal x762=(gconst49*x701);
IkReal x763=(gconst41*x701);
IkReal x764=(gconst53*x701);
IkReal x765=(x710*x733);
IkReal x766=(gconst46*x761);
IkReal x767=((0.0008)*x764);
IkReal x768=(x706*x760);
IkReal x769=(x731*x760);
IkReal x770=(x744*x764);
IkReal x771=(x722*x758);
IkReal x772=(x748*x760);
IkReal x773=(gconst55*r00*r10*x745);
IkReal x774=(x744*x762);
IkReal x775=(x745*x764);
IkReal x776=(x724*x760);
IkReal x777=(gconst43*r00*r10*x744);
IkReal x778=(gconst55*r00*r10*x738);
IkReal x779=(x754*x760);
IkReal x780=(x744*x763);
IkReal x781=(x726*x758);
IkReal x782=(x738*x764);
IkReal x783=(x745*x762);
IkReal x784=(x743*x758);
IkReal x785=(x705*x760);
IkReal x786=(gconst46*gconst49*x760);
IkReal x787=(x745*x763);
IkReal x788=(x738*x762);
IkReal x789=(x727*x760);
IkReal x790=(x719*x760);
IkReal x791=(x738*x763);
IkReal x792=(x755*x758);
IkReal x793=(x791+x792);
IkReal x794=(x771+x770);
IkReal x795=(x790+x789);
IkReal x796=(x787+x788);
IkReal x797=(x768+x769);
IkReal x798=(x773+x772);
IkReal x799=(x786+x785);
IkReal x800=(x775+x774);
IkReal x801=(x777+x776+x779+x778);
IkReal x802=(x782+x783+x780+x781+x784);
op[0]=((((-1.0)*gconst52*x706*x718))+(((-1.0)*x794))+(((-1.0)*gconst53*x728*x729))+((x703*x736))+((x722*x756))+x797);
op[1]=((((-1.0)*gconst50*x718*x730))+((x721*x736))+(((-1.0)*gconst49*x728*x729))+((x703*x712))+((x709*x730))+(((-1.0)*gconst48*x706*x718))+x798+(((-1.0)*x800))+(((-1.0)*gconst53*x709*x729))+((x715*x728)));
op[2]=(((x712*x721))+(((-1.0)*gconst57*x724*x729))+(((-1.0)*gconst53*x710*x728))+((x703*x747))+(((-1.0)*x739*x764))+((x703*x714))+((x706*x761))+((x722*x723))+(((-1.0)*gconst50*x715*x718))+((x717*x728))+((x709*x715))+(((-1.0)*gconst41*x728*x729))+(((-1.0)*gconst45*x729*x731))+(((-1.0)*gconst44*x718*x730))+x801+(((-1.0)*x706*x757))+(((-1.0)*x802))+(((-1.0)*gconst56*x718*x734))+((x731*x761))+((x726*x756))+(((-1.0)*gconst40*x706*x718))+(((-1.0)*x722*x759))+(((-1.0)*gconst49*x709*x729))+((x730*x732))+((x736*x749))+((gconst53*gconst54*x708)));
op[3]=(((x720*x730))+(((-1.0)*x796))+((gconst49*gconst54*x708))+(((-1.0)*gconst49*x729*x732))+(((-1.0)*gconst49*x729*x733))+(((-1.0)*gconst49*x710*x728))+((x703*x704))+(((-1.0)*x739*x762))+((x707*x728))+(((-1.0)*gconst56*x707*x718))+((x712*x749))+((x712*x746))+(((-1.0)*gconst53*x720*x729))+((x709*x734))+((x709*x717))+(((-1.0)*gconst44*x715*x718))+(((-1.0)*gconst52*x705*x718))+x799+(((-1.0)*gconst53*x709*x710))+(((-1.0)*gconst41*x709*x729))+((x721*x747))+(((-1.0)*x737*x764))+(((-1.0)*gconst48*x706*x740))+((gconst55*r00*r10*x737))+((x715*x733))+((x715*x732))+((x748*x761))+((x714*x721))+(((-1.0)*gconst50*x717*x718))+(((-1.0)*gconst50*x730*x740)));
op[4]=((((-1.0)*gconst41*x710*x728))+(((-1.0)*gconst44*x717*x718))+(((-1.0)*gconst57*x727*x729))+((x713*x728))+((x714*x749))+((x714*x746))+(((-1.0)*x794))+(((-1.0)*x793))+((x712*x753))+(((-1.0)*x751*x764))+(((-1.0)*gconst48*x705*x718))+((x707*x709))+((x703*x741))+(((-1.0)*gconst57*x710*x724))+((x724*x761))+(((-1.0)*x708*x734))+((x723*x726))+(((-1.0)*x739*x763))+(((-1.0)*gconst52*x718*x719))+((x717*x732))+((x717*x733))+(((-1.0)*gconst45*x710*x731))+(((-1.0)*gconst40*x706*x740))+((gconst41*gconst54*x708))+(((-1.0)*gconst49*x720*x729))+(((-1.0)*x726*x759))+(((-1.0)*gconst53*x716*x729))+(((-1.0)*x743*x759))+x795+x797+(((-1.0)*gconst41*x729*x733))+(((-1.0)*gconst49*x709*x710))+(((-1.0)*x737*x762))+((x704*x721))+((x716*x730))+(((-1.0)*gconst56*x713*x718))+((gconst56*gconst59*x725))+(((-1.0)*gconst50*x715*x740))+((x732*x734))+(((-1.0)*gconst44*x730*x740))+((x742*x761))+((x754*x761))+((x715*x720))+((gconst43*r00*r10*x739))+((gconst42*gconst53*x708)));
op[5]=(((x720*x734))+((x715*x716))+((x708*x735))+(((-1.0)*gconst53*x710*x720))+(((-1.0)*x751*x762))+((x704*x749))+((x704*x746))+((x707*x732))+((x707*x733))+((x711*x712))+(((-1.0)*gconst49*x710*x732))+(((-1.0)*gconst41*x720*x729))+((x714*x753))+((gconst49*x766))+((x717*x720))+((x709*x713))+(((-1.0)*gconst50*x717*x740))+(((-1.0)*gconst49*x716*x729))+x798+(((-1.0)*gconst44*x707*x718))+(((-1.0)*gconst49*x765))+((x721*x741))+(((-1.0)*x737*x763))+(((-1.0)*x800))+(((-1.0)*x707*x708))+(((-1.0)*gconst44*x715*x740))+(((-1.0)*x705*x757))+((x705*x761))+(((-1.0)*gconst41*x709*x710))+(((-1.0)*gconst40*x705*x718)));
op[6]=(((x708*x725))+(((-1.0)*gconst53*x710*x716))+((gconst44*gconst59*x725))+((x713*x733))+((x713*x732))+(((-1.0)*gconst41*x765))+((x719*x761))+(((-1.0)*x751*x763))+(((-1.0)*gconst57*x710*x727))+(((-1.0)*gconst44*x713*x718))+(((-1.0)*gconst49*x710*x720))+((x711*x714))+((x707*x720))+(((-1.0)*gconst48*x705*x740))+(((-1.0)*x755*x759))+(((-1.0)*x708*x713))+(((-1.0)*gconst41*x716*x729))+((x741*x746))+(((-1.0)*gconst44*x717*x740))+(((-1.0)*x719*x757))+((x716*x717))+x801+((x727*x761))+(((-1.0)*x802))+((x716*x734))+((x704*x753)));
op[7]=((((-1.0)*gconst41*x710*x720))+(((-1.0)*gconst44*x707*x740))+((x713*x720))+(((-1.0)*x796))+((x707*x716))+(((-1.0)*gconst40*x705*x740))+(((-1.0)*gconst49*x710*x716))+((gconst44*gconst47*x735))+((x704*x711))+x799);
op[8]=((((-1.0)*gconst44*x713*x740))+((x711*x741))+(((-1.0)*x793))+x795+(((-1.0)*gconst41*x710*x716))+((x713*x716)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[3];
IkReal x803=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x803);
rxp1_0=(pz*r11);
rxp1_1=(r01*x803);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=1.0;
j5=0;
IkReal x804=(cj2*sj1);
IkReal x805=((6.9)*cj0);
IkReal x806=((6.9)*r00*sj0);
IkReal x807=((6.9)*r01*sj0);
IkReal x808=(x804*x805);
j6eval[0]=r22;
j6eval[1]=IKsign(r22);
j6eval[2]=((IKabs(((((-1.0)*r11*x805))+(((-100.0)*rxp1_2))+(((-1.0)*x804*x807))+((r11*x808))+x807)))+(IKabs((((x804*x806))+(((100.0)*rxp0_2))+((r10*x805))+(((-1.0)*x806))+(((-1.0)*r10*x808))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x809=((6.9)*sj0);
IkReal x810=((6.9)*cj0);
IkReal x811=(cj2*sj1);
IkReal x812=(x809*x811);
IkReal x813=(x810*x811);
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(((((-100.0)*rxp1_2))+((r01*(((((-1.0)*x812))+x809))))+((r11*(((((-1.0)*x810))+x813)))))),IkReal((((r10*(((((-1.0)*x813))+x810))))+((r00*((x812+(((-1.0)*x809))))))+(((100.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
CheckValue<IkReal> x815=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x815.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x814.value)+(((1.5707963267949)*(x815.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x816=IKcos(j6);
IkReal x817=IKsin(j6);
IkReal x818=((0.069)*cj2*sj1);
IkReal x819=((0.01)*x817);
IkReal x820=((0.01)*x816);
evalcond[0]=((((-1.0)*cj0*x818))+(((0.069)*cj0))+((r00*x819))+((r01*x820))+(((-1.0)*px)));
evalcond[1]=(((r10*x819))+(((-1.0)*sj0*x818))+(((-1.0)*py))+(((0.069)*sj0))+((r11*x820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x821=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x821);
rxp1_0=(pz*r11);
rxp1_1=(r01*x821);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=1.0;
j5=0;
IkReal x822=cj2*cj2;
IkReal x823=cj0*cj0;
IkReal x824=cj6*cj6;
IkReal x825=sj0*sj0;
IkReal x826=sj6*sj6;
IkReal x827=(x822*x825);
IkReal x828=(x822*x823);
j4eval[0]=r22;
j4eval[1]=(((x824*x828))+((x824*x827))+((x826*x827))+((x826*x828)));
j4eval[2]=IKsign(r22);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x829=(cj2*cj6);
IkReal x830=(cj0*r00);
IkReal x831=(cj0*cj2*r01);
IkReal x832=(cj2*sj0*sj6);
CheckValue<IkReal> x833 = IKatan2WithCheck(IkReal(((((-1.0)*sj6*x831))+((r10*sj0*x829))+((x829*x830))+(((-1.0)*r11*x832)))),IkReal((((r10*x832))+((cj2*sj6*x830))+((r11*sj0*x829))+((cj0*r01*x829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x833.valid){
continue;
}
CheckValue<IkReal> x834=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x833.value)+(((1.5707963267949)*(x834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x835=IKsin(j4);
IkReal x836=IKcos(j4);
IkReal x837=(cj3*r10);
IkReal x838=(sj3*sj6);
IkReal x839=(cj0*cj2);
IkReal x840=((1.0)*sj1);
IkReal x841=(cj2*sj0);
IkReal x842=((1.0)*sj6);
IkReal x843=((1.0)*cj6);
IkReal x844=(cj3*sj6);
IkReal x845=(cj3*r00);
IkReal x846=(r01*x835);
IkReal x847=(r10*x836);
IkReal x848=(r11*x836);
IkReal x849=(r11*x835);
IkReal x850=(r01*x836);
IkReal x851=(r00*x836);
IkReal x852=(x835*x843);
evalcond[0]=((((-1.0)*r10*x835*x842))+(((-1.0)*x842*x848))+(((-1.0)*x843*x849))+((cj6*x847))+x839);
evalcond[1]=((((-1.0)*r00*x835*x842))+(((-1.0)*x842*x850))+((cj6*x851))+(((-1.0)*x843*x846))+(((-1.0)*x841)));
evalcond[2]=(((x838*x846))+(((-1.0)*x838*x851))+(((-1.0)*sj3*x843*x850))+(((-1.0)*r00*sj3*x852)));
evalcond[3]=(((x838*x849))+(((-1.0)*sj3*x843*x848))+(((-1.0)*x838*x847))+(((-1.0)*r10*sj3*x852)));
evalcond[4]=((((-1.0)*cj3*x843*x848))+(((-1.0)*x840*x841))+(((-1.0)*x836*x837*x842))+((x844*x849))+(((-1.0)*x837*x852)));
evalcond[5]=((((-1.0)*x845*x852))+(((-1.0)*x836*x842*x845))+(((-1.0)*cj3*x843*x850))+(((-1.0)*x839*x840))+((x844*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[8+1], zeror[8];
int numroots;
IkReal x853=((0.01)*r11);
IkReal x854=((1.0)*py);
IkReal x855=((0.01)*r01);
IkReal x856=((1.0)*px);
IkReal x857=(cj2*sj1);
IkReal x858=((0.069)*x857);
IkReal x859=((((-1.0)*x854))+x853);
IkReal x860=((0.138)+(((-0.138)*x857)));
IkReal x861=((((-1.0)*x853))+(((-1.0)*x854)));
IkReal x862=((-0.069)+x858);
IkReal x863=(x856+x858);
IkReal x864=((0.069)+(((-1.0)*x863))+(((-1.0)*x855)));
IkReal x865=((0.069)+(((-1.0)*x863))+x855);
IkReal x866=((((-1.0)*x855))+(((-1.0)*x856))+x862);
IkReal x867=((((-1.0)*x856))+x855+x862);
IkReal gconst76=x861;
IkReal gconst77=x859;
IkReal gconst78=x864;
IkReal gconst79=x865;
IkReal gconst80=x861;
IkReal gconst81=x859;
IkReal gconst82=x864;
IkReal gconst83=x865;
IkReal gconst84=x860;
IkReal gconst85=x860;
IkReal gconst86=x860;
IkReal gconst87=x860;
IkReal gconst88=x861;
IkReal gconst89=x859;
IkReal gconst90=x866;
IkReal gconst91=x867;
IkReal gconst92=x861;
IkReal gconst93=x859;
IkReal gconst94=x866;
IkReal gconst95=x867;
IkReal x868=r00*r00;
IkReal x869=r10*r10;
IkReal x870=((1.0)*gconst85);
IkReal x871=(gconst90*gconst93);
IkReal x872=(gconst80*gconst83);
IkReal x873=(gconst78*gconst85);
IkReal x874=(gconst79*gconst81);
IkReal x875=(gconst84*gconst94);
IkReal x876=(gconst82*gconst88);
IkReal x877=(gconst77*gconst86);
IkReal x878=(gconst83*gconst90);
IkReal x879=((0.0008)*gconst80);
IkReal x880=(gconst78*gconst95);
IkReal x881=(gconst77*gconst92);
IkReal x882=(r00*r10);
IkReal x883=((1.0)*gconst76);
IkReal x884=(gconst80*gconst95);
IkReal x885=((0.0004)*gconst89);
IkReal x886=(gconst78*gconst94);
IkReal x887=((1.0)*gconst91);
IkReal x888=(gconst84*gconst95);
IkReal x889=((0.0008)*gconst85);
IkReal x890=((1.0)*gconst89);
IkReal x891=(gconst81*gconst91);
IkReal x892=(gconst81*gconst82);
IkReal x893=(gconst83*gconst92);
IkReal x894=(gconst78*gconst89);
IkReal x895=(gconst91*gconst93);
IkReal x896=(gconst76*gconst94);
IkReal x897=(gconst89*gconst92);
IkReal x898=((0.0004)*gconst94);
IkReal x899=(gconst83*gconst86);
IkReal x900=(gconst78*gconst83);
IkReal x901=(gconst77*gconst94);
IkReal x902=((1.0)*gconst90);
IkReal x903=((0.0004)*gconst80);
IkReal x904=(gconst78*gconst82);
IkReal x905=(gconst76*gconst82);
IkReal x906=(gconst77*gconst78);
IkReal x907=(gconst86*gconst91);
IkReal x908=(gconst79*gconst93);
IkReal x909=(gconst82*gconst84);
IkReal x910=((0.0008)*gconst91);
IkReal x911=(gconst87*gconst90);
IkReal x912=(gconst88*gconst94);
IkReal x913=((0.0004)*gconst92);
IkReal x914=(gconst87*gconst91);
IkReal x915=(gconst89*gconst90);
IkReal x916=((1.0)*gconst88);
IkReal x917=((0.0008)*gconst79);
IkReal x918=(gconst79*gconst87);
IkReal x919=((1.0)*gconst77);
IkReal x920=(gconst90*gconst95);
IkReal x921=(gconst92*gconst95);
IkReal x922=((1.0)*gconst79);
IkReal x923=((0.0008)*gconst89);
IkReal x924=(gconst85*gconst86);
IkReal x925=(gconst86*gconst89);
IkReal x926=(gconst85*gconst90);
IkReal x927=(gconst77*gconst90);
IkReal x928=(gconst86*gconst95);
IkReal x929=((0.0004)*gconst85);
IkReal x930=(gconst77*gconst82);
IkReal x931=((0.0004)*gconst79);
IkReal x932=(gconst85*gconst92);
IkReal x933=(gconst77*x868);
IkReal x934=(gconst80*x868);
IkReal x935=(gconst92*x868);
IkReal x936=(gconst86*x868);
IkReal x937=(gconst79*x921);
IkReal x938=(gconst82*x869);
IkReal x939=(gconst94*x869);
IkReal x940=(gconst81*gconst90*gconst94);
IkReal x941=((0.0004)*gconst82*x882);
IkReal x942=(gconst91*x882*x913);
IkReal x943=(gconst94*x882*x885);
IkReal x944=(x885*x935);
IkReal x945=(gconst91*x869*x898);
IkReal x946=(gconst85*x882*x898);
IkReal x947=((0.0004)*x882*x907);
IkReal x948=(gconst85*x868*x913);
IkReal x949=(x885*x936);
IkReal x950=(gconst82*x882*x885);
IkReal x951=(gconst91*x882*x903);
IkReal x952=(gconst79*x882*x913);
IkReal x953=(gconst77*x882*x898);
IkReal x954=((0.0004)*gconst91*x938);
IkReal x955=(x885*x934);
IkReal x956=(gconst79*x869*x898);
IkReal x957=((0.0004)*x868*x924);
IkReal x958=((0.0004)*x868*x881);
IkReal x959=(gconst86*x882*x931);
IkReal x960=(gconst82*x882*x929);
IkReal x961=((0.0004)*x868*x877);
IkReal x962=(gconst85*x868*x903);
IkReal x963=((0.0004)*x882*x930);
IkReal x964=(gconst79*x882*x903);
IkReal x965=(x931*x938);
IkReal x966=(x903*x933);
IkReal x967=(x960+x959);
IkReal x968=(x962+x961);
IkReal x969=(x963+x964);
IkReal x970=(x942+x943);
IkReal x971=(x944+x945);
IkReal x972=(x946+x947);
IkReal x973=(x966+x965);
IkReal x974=(x948+x949);
IkReal x975=(x953+x952+x951+x950);
IkReal x976=(x958+x957+x956+x955+x954);
op[0]=(((x897*x920))+(((-1.0)*gconst88*x887*x921))+((x895*x912))+(((-1.0)*gconst94*x871*x890))+x970+(((-1.0)*x971)));
op[1]=(((x915*x928))+(((-1.0)*gconst88*x887*x928))+((x920*x932))+(((-1.0)*gconst94*x870*x871))+(((-1.0)*gconst92*x887*x888))+(((-1.0)*gconst94*x890*x911))+((x912*x914))+((x875*x895))+x972+(((-1.0)*x974)));
op[2]=(((x920*x924))+((x880*x897))+((x876*x895))+((x875*x914))+(((-1.0)*gconst88*x887*x893))+(((-1.0)*x890*x940))+((x895*x896))+((x884*x915))+((x881*x920))+((gconst92*x882*x910))+(((-1.0)*gconst93*x886*x890))+((x891*x912))+(((-1.0)*gconst94*x870*x911))+(((-1.0)*gconst86*x887*x888))+(((-1.0)*x871*x901))+((gconst94*x882*x923))+((x878*x897))+(((-1.0)*gconst88*x884*x887))+(((-1.0)*x910*x939))+((x908*x912))+(((-1.0)*x916*x937))+(((-1.0)*gconst91*x883*x921))+x975+(((-1.0)*x976))+(((-0.0008)*x868*x897))+(((-1.0)*gconst82*x871*x890)));
op[3]=((((-1.0)*gconst93*x870*x886))+(((-1.0)*x870*x940))+((x895*x909))+(((-1.0)*gconst82*x890*x911))+(((-1.0)*gconst88*x887*x899))+((x880*x925))+(((-1.0)*gconst95*x883*x907))+((x875*x908))+(((-1.0)*gconst84*x887*x893))+(((-1.0)*gconst84*x884*x887))+(((-1.0)*gconst79*x916*x928))+((gconst94*x882*x889))+(((-1.0)*gconst92*x888*x922))+((x877*x920))+((x884*x926))+(((-1.0)*x889*x935))+((x876*x914))+((x878*x925))+((x878*x932))+(((-1.0)*gconst87*x901*x902))+((x912*x918))+(((0.0008)*x882*x907))+(((-1.0)*gconst82*x870*x871))+((x873*x921))+((x875*x891))+x967+(((-1.0)*gconst87*x886*x890))+(((-1.0)*x968))+((x896*x914))+(((-1.0)*x923*x936)));
op[4]=((((-0.0008)*x868*x881))+((x895*x905))+((x872*x915))+((x909*x914))+((x876*x891))+((x880*x881))+(((-1.0)*gconst88*x872*x887))+((gconst82*x882*x923))+((x875*x918))+(((-1.0)*gconst87*x870*x886))+((gconst92*x882*x917))+(((-1.0)*gconst84*x887*x899))+((gconst80*gconst89*x880))+((x874*x912))+(((-1.0)*gconst81*x901*x902))+((x884*x927))+(((-1.0)*x889*x936))+((x878*x881))+((x893*x894))+(((-1.0)*gconst79*x893*x916))+(((-1.0)*gconst89*x868*x879))+((x878*x924))+(((-1.0)*gconst86*x888*x922))+((x896*x908))+(((-1.0)*gconst93*x890*x904))+(((-1.0)*gconst90*x890*x892))+(((-1.0)*gconst79*x884*x916))+(((-1.0)*x910*x938))+(((-1.0)*gconst91*x883*x893))+(((0.0008)*x882*x901))+((x891*x896))+(((-1.0)*gconst81*x886*x890))+((x876*x908))+((x873*x928))+(((-1.0)*gconst93*x886*x919))+(((-1.0)*gconst91*x883*x884))+(((-1.0)*x883*x937))+(((-1.0)*gconst82*x870*x911))+x970+x969+(((-1.0)*x917*x939))+((gconst91*x879*x882))+(((-1.0)*gconst82*x871*x919))+(((-1.0)*x973))+(((-1.0)*x971)));
op[5]=(((x873*x893))+(((-1.0)*gconst93*x870*x904))+(((-0.0008)*x868*x877))+(((-1.0)*gconst81*x870*x886))+((x894*x899))+(((-1.0)*gconst90*x870*x892))+((x874*x875))+(((-1.0)*gconst84*x884*x922))+((gconst82*x882*x889))+((x891*x909))+((x872*x926))+((x877*x880))+(((-1.0)*gconst87*x890*x904))+(((-1.0)*gconst79*x899*x916))+(((-1.0)*gconst84*x872*x887))+(((-1.0)*gconst79*x883*x928))+(((-1.0)*gconst85*x868*x879))+((x876*x918))+(((-1.0)*gconst91*x883*x899))+((x908*x909))+((x905*x914))+(((-1.0)*gconst84*x893*x922))+x972+((gconst86*x882*x917))+((x896*x918))+(((-1.0)*gconst87*x902*x930))+((x873*x884))+(((-1.0)*x974))+(((-1.0)*gconst87*x886*x919))+((x877*x878)));
op[6]=(((x873*x899))+((x874*x896))+((x905*x908))+((x909*x918))+((x874*x876))+((x891*x905))+(((-1.0)*gconst79*x883*x884))+(((-1.0)*gconst77*x892*x902))+((x872*x927))+(((-1.0)*gconst79*x883*x893))+(((-1.0)*gconst78*x890*x892))+((gconst77*gconst80*x880))+(((-1.0)*gconst91*x872*x883))+(((0.0008)*x882*x930))+((x881*x900))+((gconst79*x879*x882))+(((-1.0)*gconst84*x899*x922))+(((-1.0)*gconst87*x870*x904))+(((-1.0)*gconst81*x886*x919))+(((-1.0)*gconst93*x904*x919))+(((-1.0)*x879*x933))+(((-1.0)*gconst79*x872*x916))+x975+(((-1.0)*x917*x938))+((x872*x894))+(((-1.0)*x976)));
op[7]=(((x872*x873))+(((-1.0)*gconst79*x883*x899))+((x874*x909))+(((-1.0)*gconst84*x872*x922))+((x877*x900))+(((-1.0)*gconst78*x870*x892))+(((-1.0)*gconst87*x904*x919))+((x905*x918))+x967+(((-1.0)*x968)));
op[8]=((((-1.0)*x892*x906))+((x874*x905))+(((-1.0)*gconst79*x872*x883))+x969+((x872*x906))+(((-1.0)*x973)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[3];
IkReal x977=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x977);
rxp1_0=(pz*r11);
rxp1_1=(r01*x977);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x978=(cj2*sj1);
IkReal x979=((6.9)*cj0);
IkReal x980=((6.9)*r00*sj0);
IkReal x981=((6.9)*r01*sj0);
IkReal x982=(x978*x979);
j6eval[0]=r22;
j6eval[1]=((IKabs(((((-100.0)*rxp0_2))+(((-1.0)*x978*x980))+((r10*x982))+x980+(((-1.0)*r10*x979)))))+(IKabs(((((100.0)*rxp1_2))+(((-1.0)*x981))+((r11*x979))+(((-1.0)*r11*x982))+((x978*x981))))));
j6eval[2]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x983=((6.9)*cj0);
IkReal x984=((6.9)*sj0);
IkReal x985=(cj2*sj1);
IkReal x986=(x983*x985);
IkReal x987=(x984*x985);
CheckValue<IkReal> x988 = IKatan2WithCheck(IkReal(((((100.0)*rxp1_2))+((r01*(((((-1.0)*x984))+x987))))+((r11*(((((-1.0)*x986))+x983)))))),IkReal(((((-100.0)*rxp0_2))+((r10*(((((-1.0)*x983))+x986))))+((r00*(((((-1.0)*x987))+x984)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x988.valid){
continue;
}
CheckValue<IkReal> x989=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x989.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x988.value)+(((1.5707963267949)*(x989.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x990=IKcos(j6);
IkReal x991=IKsin(j6);
IkReal x992=((0.069)*cj2*sj1);
IkReal x993=((0.01)*x991);
IkReal x994=((0.01)*x990);
evalcond[0]=((((-1.0)*cj0*x992))+(((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*r01*x994))+(((-1.0)*r00*x993)));
evalcond[1]=((((-1.0)*r11*x994))+(((-1.0)*r10*x993))+(((-1.0)*py))+(((0.069)*sj0))+(((-1.0)*sj0*x992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x995=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x995);
rxp1_0=(pz*r11);
rxp1_1=(r01*x995);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x996=cj2*cj2;
IkReal x997=cj0*cj0;
IkReal x998=cj6*cj6;
IkReal x999=sj0*sj0;
IkReal x1000=sj6*sj6;
IkReal x1001=(x996*x999);
IkReal x1002=(x996*x997);
j4eval[0]=r22;
j4eval[1]=(((x1000*x1002))+((x1000*x1001))+((x1001*x998))+((x1002*x998)));
j4eval[2]=IKsign(r22);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1003=(cj0*r01);
IkReal x1004=(r11*sj0);
IkReal x1005=(r10*sj0);
IkReal x1006=(cj0*r00);
IkReal x1007=(cj2*cj6);
IkReal x1008=((1.0)*x1007);
IkReal x1009=((1.0)*cj2*sj6);
CheckValue<IkReal> x1010 = IKatan2WithCheck(IkReal(((((-1.0)*x1004*x1009))+((x1006*x1007))+((x1005*x1007))+(((-1.0)*x1003*x1009)))),IkReal(((((-1.0)*x1006*x1009))+(((-1.0)*x1005*x1009))+(((-1.0)*x1004*x1008))+(((-1.0)*x1003*x1008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1010.valid){
continue;
}
CheckValue<IkReal> x1011=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1010.value)+(((-1.5707963267949)*(x1011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1012=IKsin(j4);
IkReal x1013=IKcos(j4);
IkReal x1014=(cj6*r01);
IkReal x1015=((1.0)*cj6);
IkReal x1016=(r01*sj6);
IkReal x1017=(r00*sj6);
IkReal x1018=(cj0*cj2);
IkReal x1019=(cj3*sj6);
IkReal x1020=(cj6*r11);
IkReal x1021=((1.0)*sj1);
IkReal x1022=(r11*sj6);
IkReal x1023=(cj2*sj0);
IkReal x1024=(sj3*x1013);
IkReal x1025=(r10*x1012);
IkReal x1026=(sj3*x1012);
IkReal x1027=(r10*x1013);
IkReal x1028=(cj3*x1013);
IkReal x1029=((1.0)*x1013);
IkReal x1030=(cj3*x1012);
evalcond[0]=(x1018+(((-1.0)*x1022*x1029))+((x1012*x1020))+((cj6*x1027))+((sj6*x1025)));
evalcond[1]=(((cj6*r00*x1013))+(((-1.0)*x1023))+((x1012*x1014))+((x1012*x1017))+(((-1.0)*x1016*x1029)));
evalcond[2]=(((x1017*x1024))+((x1014*x1024))+(((-1.0)*r00*x1015*x1026))+((x1016*x1026)));
evalcond[3]=((((-1.0)*sj3*x1015*x1025))+((r10*sj6*x1024))+((x1022*x1026))+((x1020*x1024)));
evalcond[4]=((((-1.0)*x1021*x1023))+((x1019*x1027))+((x1020*x1028))+(((-1.0)*cj3*x1015*x1025))+((r11*x1012*x1019)));
evalcond[5]=(((x1017*x1028))+((x1016*x1030))+(((-1.0)*x1018*x1021))+((x1014*x1028))+(((-1.0)*r00*x1015*x1030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1031=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1031);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1031);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1032=(r22*sj5);
j4eval[0]=x1032;
j4eval[1]=((IKabs(sj1))+(IKabs((cj1*sj2))));
j4eval[2]=IKsign(x1032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1033 = IKatan2WithCheck(IkReal((cj1*sj2)),IkReal(sj1),IKFAST_ATAN2_MAGTHRESH);
if(!x1033.valid){
continue;
}
CheckValue<IkReal> x1034=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1033.value)+(((1.5707963267949)*(x1034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1035=((1.0)*r22*sj5);
evalcond[0]=(sj1+(((-1.0)*x1035*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*x1035*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1036=((1.0)*sj2);
IkReal x1037=(r01*sj5);
IkReal x1038=(cj2*sj1);
IkReal x1039=(r11*sj5);
IkReal x1040=((1.0)*x1038);
IkReal x1041=(sj2+(((-1.0)*x1039)));
IkReal x1042=((1.0)*x1039);
IkReal x1043=((1.0)*x1037);
IkReal x1044=((((-1.0)*x1036))+x1039);
IkReal x1045=(x1037+(((-1.0)*x1040)));
IkReal x1046=(x1038+x1037);
IkReal x1047=(x1038+(((-1.0)*x1043)));
IkReal x1048=((((-1.0)*x1036))+(((-1.0)*x1042)));
IkReal x1049=((((-1.0)*x1040))+(((-1.0)*x1043)));
IkReal gconst112=x1041;
IkReal gconst113=x1045;
IkReal gconst114=x1049;
IkReal gconst115=x1041;
IkReal gconst116=x1045;
IkReal gconst117=x1049;
IkReal gconst118=x1044;
IkReal gconst119=x1048;
IkReal gconst120=x1046;
IkReal gconst121=x1047;
IkReal gconst122=x1044;
IkReal gconst123=x1048;
IkReal gconst124=x1046;
IkReal gconst125=x1047;
IkReal x1050=sj5*sj5;
IkReal x1051=r00*r00;
IkReal x1052=r10*r10;
IkReal x1053=sj2*sj2;
IkReal x1054=r11*r11;
IkReal x1055=sj2*sj2*sj2;
IkReal x1056=sj5*sj5*sj5;
IkReal x1057=((8.0)*sj2);
IkReal x1058=(r00*r10);
IkReal x1059=(cj2*sj1);
IkReal x1060=(r11*sj5);
IkReal x1061=(gconst119*sj2);
IkReal x1062=((2.0)*gconst115);
IkReal x1063=(gconst114*gconst116);
IkReal x1064=(gconst115*sj2);
IkReal x1065=(gconst118*sj2);
IkReal x1066=((2.0)*gconst121);
IkReal x1067=(gconst118*gconst125);
IkReal x1068=((1.0)*gconst117);
IkReal x1069=((2.0)*sj2);
IkReal x1070=((4.0)*gconst114);
IkReal x1071=(gconst113*gconst116);
IkReal x1072=(gconst119*gconst120);
IkReal x1073=(gconst123*gconst124);
IkReal x1074=((4.0)*gconst112);
IkReal x1075=(gconst113*gconst117);
IkReal x1076=(gconst112*sj2);
IkReal x1077=((2.0)*gconst120);
IkReal x1078=((4.0)*gconst119);
IkReal x1079=(r11*x1056);
IkReal x1080=(gconst114*x1053);
IkReal x1081=((2.0)*gconst122*gconst125);
IkReal x1082=(gconst112*x1050);
IkReal x1083=((2.0)*gconst112*gconst113);
IkReal x1084=(gconst124*x1050);
IkReal x1085=(gconst122*x1050);
IkReal x1086=((2.0)*x1073);
IkReal x1087=(gconst117*x1070);
IkReal x1088=(gconst114*x1050);
IkReal x1089=((2.0)*x1055);
IkReal x1090=(gconst121*x1052);
IkReal x1091=((8.0)*x1050);
IkReal x1092=((2.0)*gconst112*x1053);
IkReal x1093=(x1050*x1051);
IkReal x1094=(gconst116*x1050*x1052);
op[0]=((((-4.0)*x1084*x1090))+(((-1.0)*gconst121*gconst122*x1067))+((gconst122*gconst125*x1072))+(((4.0)*gconst121*x1058*x1085))+((x1058*x1078*x1084))+((gconst118*gconst121*x1073))+(((-1.0)*x1072*x1073))+(((-1.0)*x1051*x1078*x1085)));
op[1]=((((-8.0)*x1058*x1059*x1084))+((gconst119*x1051*x1059*x1091))+(((-1.0)*gconst123*x1065*x1066))+(((-1.0)*x1061*x1081))+(((-1.0)*x1065*x1086))+(((2.0)*gconst124*x1059*x1072))+(((-1.0)*gconst121*x1058*x1059*x1091))+(((-1.0)*x1057*x1058*x1085))+((x1061*x1086))+(((-2.0)*gconst125*x1059*x1072))+((gconst122*gconst125*x1059*x1066))+((gconst123*x1061*x1077))+(((-1.0)*gconst118*gconst124*x1059*x1066))+(((-1.0)*gconst119*x1050*x1057*x1058))+((x1059*x1066*x1067))+(((-1.0)*gconst122*gconst125*x1059*x1077))+(((8.0)*x1051*x1059*x1085))+(((-1.0)*gconst122*x1061*x1077))+((gconst122*x1065*x1066))+((x1050*x1057*x1090))+(((-1.0)*x1059*x1066*x1073))+((x1065*x1081))+((x1052*x1057*x1084))+((x1059*x1073*x1077)));
op[2]=(((gconst112*gconst120*gconst122*gconst125))+(((-1.0)*gconst117*gconst118*gconst121*gconst122))+(((-4.0)*gconst119*sj2*(r00*r00)*(sj5*sj5)))+(((32.0)*cj2*r00*r10*sj1*sj2*(sj5*sj5)))+(((-4.0)*cj2*gconst119*gconst124*sj1*sj2))+(((-1.0)*gconst113*gconst119*gconst123*gconst124))+(((4.0)*cj2*gconst121*gconst123*sj1*sj2))+(((4.0)*gconst118*gconst123*(sj2*sj2)))+(((4.0)*gconst119*gconst122*(sj2*sj2)))+((gconst115*gconst118*gconst121*gconst124))+(((4.0)*gconst121*r00*r10*sj2*(sj5*sj5)))+(((-4.0)*gconst120*gconst124*(cj2*cj2)*(sj1*sj1)))+((gconst121*gconst123*gconst124*r11*sj5))+(((-16.0)*(r10*r10)*(sj2*sj2)*(sj5*sj5)))+(((-8.0)*gconst121*gconst124*(r10*r10)*(sj5*sj5)))+(((-1.0)*gconst118*gconst121*gconst125*r11*sj5))+(((-4.0)*cj2*gconst118*gconst125*sj1*sj2))+(((-4.0)*gconst118*gconst122*(sj2*sj2)))+(((-4.0)*gconst116*gconst121*(r10*r10)*(sj5*sj5)))+(((-1.0)*gconst121*gconst122*gconst125*r11*sj5))+(((-1.0)*gconst112*gconst120*gconst123*gconst124))+((gconst119*gconst120*gconst125*r11*sj5))+(((-4.0)*gconst119*gconst123*(sj2*sj2)))+(((-1.0)*gconst114*gconst118*gconst122*gconst125))+(((-1.0)*gconst118*gconst121*gconst125*sj2))+(((-8.0)*gconst119*gconst122*(r00*r00)*(sj5*sj5)))+(((4.0)*gconst116*gconst119*r00*r10*(sj5*sj5)))+(((-4.0)*gconst121*gconst125*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst121*gconst124*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst112*gconst124*r00*r10*(sj5*sj5)))+(((4.0)*cj2*gconst120*gconst122*sj1*sj2))+(((-1.0)*gconst115*gconst119*gconst120*gconst124))+(((8.0)*gconst121*gconst122*r00*r10*(sj5*sj5)))+(((4.0)*cj2*gconst119*gconst125*sj1*sj2))+(((-4.0)*gconst119*r11*(r00*r00)*(sj5*sj5*sj5)))+(((4.0)*gconst121*r00*r10*r11*(sj5*sj5*sj5)))+(((4.0)*cj2*gconst118*gconst124*sj1*sj2))+(((4.0)*gconst114*gconst122*r00*r10*(sj5*sj5)))+(((-4.0)*gconst112*gconst122*(r00*r00)*(sj5*sj5)))+((gconst116*gconst118*gconst121*gconst123))+((gconst121*gconst123*gconst124*sj2))+(((-1.0)*gconst121*gconst122*gconst125*sj2))+((gconst119*gconst120*gconst125*sj2))+(((8.0)*gconst119*gconst124*r00*r10*(sj5*sj5)))+(((4.0)*gconst120*gconst125*(cj2*cj2)*(sj1*sj1)))+((gconst117*gconst119*gconst120*gconst122))+(((-4.0)*cj2*gconst121*gconst122*sj1*sj2))+(((-4.0)*cj2*gconst120*gconst123*sj1*sj2))+((gconst113*gconst119*gconst122*gconst125))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+((gconst114*gconst118*gconst123*gconst124))+(((-4.0)*gconst114*gconst124*(r10*r10)*(sj5*sj5)))+(((-1.0)*gconst116*gconst119*gconst120*gconst123)));
op[3]=((((-16.0)*gconst119*r00*r10*sj2*(sj5*sj5)))+(((-8.0)*r00*r10*(sj2*sj2)*(sj5*sj5)))+(((-2.0)*gconst115*gconst118*gconst121*sj2))+(((2.0)*gconst122*gconst125*r11*sj2*sj5))+(((2.0)*gconst114*gconst118*gconst122*sj2))+(((-2.0)*gconst115*gconst118*gconst124*sj2))+(((-2.0)*cj2*gconst114*gconst118*gconst124*sj1))+(((4.0)*cj2*gconst121*gconst125*r11*sj1*sj5))+(((2.0)*cj2*gconst115*gconst120*gconst124*sj1))+(((2.0)*cj2*gconst117*gconst118*gconst121*sj1))+(((-2.0)*gconst121*gconst123*(sj2*sj2)))+(((-2.0)*cj2*gconst112*gconst120*gconst125*sj1))+(((2.0)*cj2*gconst113*gconst119*gconst124*sj1))+(((2.0)*gconst113*gconst119*gconst123*sj2))+(((2.0)*gconst118*gconst121*(sj2*sj2)))+(((16.0)*cj2*gconst122*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*cj2*gconst116*gconst121*gconst123*sj1))+(((-2.0)*gconst112*gconst122*gconst125*sj2))+(((2.0)*gconst121*gconst122*r11*sj2*sj5))+(((4.0)*cj2*gconst121*gconst125*sj1*sj2))+(((-16.0)*cj2*gconst121*r00*r10*sj1*(sj5*sj5)))+(((8.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst115*gconst119*gconst124*sj2))+(((16.0)*gconst121*sj2*(r10*r10)*(sj5*sj5)))+(((-2.0)*gconst113*gconst119*gconst122*sj2))+(((2.0)*gconst115*gconst119*gconst120*sj2))+(((8.0)*gconst116*sj2*(r10*r10)*(sj5*sj5)))+(((-2.0)*gconst116*gconst118*gconst123*sj2))+(((-2.0)*cj2*gconst121*gconst124*sj1*sj2))+(((2.0)*gconst118*gconst121*r11*sj2*sj5))+(((-2.0)*gconst117*gconst119*gconst122*sj2))+(((2.0)*gconst112*gconst120*gconst123*sj2))+(((-2.0)*gconst123*gconst124*(sj2*sj2)))+(((-2.0)*cj2*gconst117*gconst119*gconst120*sj1))+(((-2.0)*gconst119*gconst125*r11*sj2*sj5))+(((-16.0)*gconst122*r00*r10*sj2*(sj5*sj5)))+(((2.0)*cj2*gconst116*gconst119*gconst120*sj1))+(((2.0)*gconst118*gconst125*r11*sj2*sj5))+(((-2.0)*gconst112*gconst120*gconst122*sj2))+(((-8.0)*r00*r10*r11*sj2*(sj5*sj5*sj5)))+(((2.0)*gconst118*gconst125*(sj2*sj2)))+(((2.0)*cj2*gconst112*gconst120*gconst124*sj1))+(((16.0)*cj2*gconst119*sj1*(r00*r00)*(sj5*sj5)))+(((8.0)*cj2*gconst112*sj1*(r00*r00)*(sj5*sj5)))+(((-16.0)*cj2*gconst124*r00*r10*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst114*gconst123*gconst124*sj1))+(((2.0)*gconst112*gconst123*gconst124*sj2))+(((-2.0)*cj2*gconst116*gconst118*gconst121*sj1))+(((-2.0)*gconst123*gconst124*r11*sj2*sj5))+(((2.0)*cj2*gconst114*gconst122*gconst125*sj1))+(((8.0)*gconst114*sj2*(r10*r10)*(sj5*sj5)))+(((-2.0)*gconst114*gconst118*gconst123*sj2))+(((16.0)*gconst124*sj2*(r10*r10)*(sj5*sj5)))+(((2.0)*cj2*gconst117*gconst121*gconst122*sj1))+(((-2.0)*cj2*gconst120*gconst125*sj1*sj2))+(((-2.0)*cj2*gconst115*gconst121*gconst124*sj1))+(((-2.0)*cj2*gconst113*gconst122*gconst125*sj1))+(((-2.0)*gconst121*gconst123*r11*sj2*sj5))+(((-2.0)*cj2*gconst120*gconst125*r11*sj1*sj5))+(((-8.0)*cj2*gconst116*r00*r10*sj1*(sj5*sj5)))+(((8.0)*cj2*r11*sj1*(r00*r00)*(sj5*sj5*sj5)))+(((2.0)*gconst122*gconst125*(sj2*sj2)))+(((-2.0)*cj2*gconst113*gconst119*gconst125*sj1))+(((-8.0)*gconst112*r00*r10*sj2*(sj5*sj5)))+(((2.0)*cj2*gconst114*gconst118*gconst125*sj1))+(((-2.0)*gconst119*gconst120*(sj2*sj2)))+(((2.0)*cj2*gconst113*gconst123*gconst124*sj1))+(((-2.0)*cj2*gconst121*gconst124*r11*sj1*sj5))+(((-8.0)*cj2*gconst114*r00*r10*sj1*(sj5*sj5)))+(((2.0)*gconst116*gconst119*gconst123*sj2))+(((-2.0)*gconst119*gconst125*(sj2*sj2)))+(((2.0)*cj2*gconst116*gconst120*gconst123*sj1))+(((2.0)*gconst121*gconst122*(sj2*sj2)))+(((2.0)*gconst117*gconst118*gconst122*sj2))+(((-2.0)*gconst119*gconst120*r11*sj2*sj5))+(((-2.0)*cj2*gconst117*gconst120*gconst122*sj1)));
op[4]=((((-4.0)*gconst112*gconst123*(sj2*sj2)))+(((4.0)*cj2*gconst124*sj1*(sj2*sj2)))+(((-4.0)*cj2*gconst114*gconst122*sj1*sj2))+(((4.0)*gconst123*r11*sj5*(sj2*sj2)))+((gconst113*gconst119*gconst125*sj2))+((gconst114*gconst123*gconst124*r11*sj5))+((gconst112*gconst113*gconst122*gconst125))+(((-1.0)*gconst114*gconst117*gconst118*gconst122))+(((4.0)*gconst114*r00*r10*sj2*(sj5*sj5)))+(((4.0)*gconst117*gconst120*(cj2*cj2)*(sj1*sj1)))+((gconst115*gconst116*gconst118*gconst121))+(((-1.0)*gconst112*gconst116*gconst120*gconst123))+(((-4.0)*cj2*gconst112*gconst124*sj1*sj2))+(((-1.0)*gconst117*gconst118*gconst121*r11*sj5))+(((-4.0)*gconst122*(sj2*sj2*sj2)))+(((8.0)*gconst114*gconst122*r00*r10*(sj5*sj5)))+(((-4.0)*gconst113*gconst124*(cj2*cj2)*(sj1*sj1)))+((gconst113*gconst119*gconst125*r11*sj5))+(((-8.0)*gconst119*r11*(r00*r00)*(sj5*sj5*sj5)))+(((64.0)*cj2*r00*r10*sj1*sj2*(sj5*sj5)))+(((4.0)*gconst119*(sj2*sj2*sj2)))+(((-32.0)*(r10*r10)*(sj2*sj2)*(sj5*sj5)))+(((4.0)*cj2*gconst116*gconst118*sj1*sj2))+(((-8.0)*gconst112*gconst122*(r00*r00)*(sj5*sj5)))+(((4.0)*gconst119*r11*sj5*(sj2*sj2)))+(((-4.0)*cj2*gconst113*gconst123*sj1*sj2))+(((4.0)*gconst114*gconst124*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst116*gconst121*(cj2*cj2)*(sj1*sj1)))+(((4.0)*cj2*gconst114*gconst123*sj1*sj2))+(((-1.0)*gconst112*gconst115*gconst120*gconst124))+(((4.0)*cj2*gconst117*gconst119*sj1*sj2))+(((-1.0)*gconst114*gconst122*gconst125*sj2))+(((-1.0)*gconst114*gconst118*gconst125*r11*sj5))+(((-1.0)*gconst117*gconst121*gconst122*r11*sj5))+(((-8.0)*gconst119*sj2*(r00*r00)*(sj5*sj5)))+((gconst115*gconst121*gconst124*sj2))+(((4.0)*cj2*gconst120*sj1*(sj2*sj2)))+(((4.0)*cj2*gconst113*gconst122*sj1*sj2))+(((4.0)*cj2*gconst112*gconst125*sj1*sj2))+(((4.0)*gconst121*gconst122*r00*r10*(sj5*sj5)))+(((-4.0)*gconst118*r11*sj5*(sj2*sj2)))+((gconst114*gconst123*gconst124*sj2))+(((8.0)*gconst121*r00*r10*sj2*(sj5*sj5)))+(((-8.0)*gconst116*gconst121*(r10*r10)*(sj5*sj5)))+(((-1.0)*gconst114*gconst118*gconst125*sj2))+(((-4.0)*gconst112*sj2*(r00*r00)*(sj5*sj5)))+(((4.0)*gconst113*gconst125*(cj2*cj2)*(sj1*sj1)))+((gconst117*gconst119*gconst120*r11*sj5))+(((-4.0)*gconst115*gconst119*(sj2*sj2)))+(((-4.0)*gconst119*gconst122*(r00*r00)*(sj5*sj5)))+((gconst116*gconst121*gconst123*r11*sj5))+(((-4.0)*cj2*gconst117*gconst118*sj1*sj2))+((gconst112*gconst120*gconst125*r11*sj5))+(((4.0)*gconst123*(sj2*sj2*sj2)))+(((-4.0)*cj2*gconst125*r11*sj1*sj2*sj5))+(((-4.0)*gconst114*gconst116*(r10*r10)*(sj5*sj5)))+(((-1.0)*gconst113*gconst115*gconst119*gconst124))+(((-1.0)*gconst114*gconst122*gconst125*r11*sj5))+(((4.0)*cj2*gconst124*r11*sj1*sj2*sj5))+(((8.0)*gconst121*r00*r10*r11*(sj5*sj5*sj5)))+((gconst115*gconst121*gconst124*r11*sj5))+(((-4.0)*cj2*gconst121*r11*sj1*sj2*sj5))+(((-4.0)*gconst118*(sj2*sj2*sj2)))+(((-4.0)*gconst121*gconst124*(r10*r10)*(sj5*sj5)))+(((-4.0)*gconst117*gconst121*(cj2*cj2)*(sj1*sj1)))+((gconst114*gconst115*gconst118*gconst124))+((gconst112*gconst120*gconst125*sj2))+(((-4.0)*gconst122*r11*sj5*(sj2*sj2)))+(((4.0)*gconst115*gconst118*(sj2*sj2)))+(((4.0)*gconst112*gconst122*(sj2*sj2)))+(((4.0)*cj2*gconst120*r11*sj1*sj2*sj5))+(((4.0)*gconst112*gconst116*r00*r10*(sj5*sj5)))+(((-1.0)*gconst115*gconst116*gconst119*gconst120))+(((-4.0)*cj2*gconst116*gconst119*sj1*sj2))+(((-1.0)*gconst121*gconst125*(r11*r11)*(sj5*sj5)))+((gconst114*gconst116*gconst118*gconst123))+(((-2.0)*gconst121*gconst125*r11*sj2*sj5))+(((-4.0)*cj2*gconst121*sj1*(sj2*sj2)))+(((-4.0)*gconst114*gconst125*(cj2*cj2)*(sj1*sj1)))+(((8.0)*gconst116*gconst119*r00*r10*(sj5*sj5)))+((gconst117*gconst119*gconst120*sj2))+(((4.0)*gconst119*gconst124*r00*r10*(sj5*sj5)))+(((-4.0)*gconst116*gconst120*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst113*gconst116*gconst119*gconst123))+(((-1.0)*gconst112*gconst113*gconst123*gconst124))+(((-1.0)*gconst121*gconst125*(sj2*sj2)))+(((-32.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+((gconst112*gconst117*gconst120*gconst122))+(((-1.0)*gconst117*gconst121*gconst122*sj2))+(((4.0)*gconst114*r00*r10*r11*(sj5*sj5*sj5)))+(((-4.0)*cj2*gconst115*gconst120*sj1*sj2))+(((-1.0)*gconst117*gconst118*gconst121*sj2))+(((-8.0)*gconst114*gconst124*(r10*r10)*(sj5*sj5)))+(((-4.0)*gconst112*r11*(r00*r00)*(sj5*sj5*sj5)))+((gconst113*gconst117*gconst119*gconst122))+(((4.0)*cj2*gconst115*gconst121*sj1*sj2))+(((-4.0)*cj2*gconst125*sj1*(sj2*sj2)))+(((8.0)*gconst112*gconst124*r00*r10*(sj5*sj5)))+((gconst116*gconst121*gconst123*sj2)));
op[5]=((((2.0)*gconst121*sj2*(r11*r11)*(sj5*sj5)))+(((-8.0)*gconst119*r00*r10*sj2*(sj5*sj5)))+(((2.0)*gconst114*gconst118*(sj2*sj2)))+(((-8.0)*gconst122*r00*r10*sj2*(sj5*sj5)))+(((2.0)*cj2*gconst112*gconst116*gconst120*sj1))+(((-2.0)*cj2*gconst117*gconst120*sj1*sj2))+(((-2.0)*gconst114*gconst123*(sj2*sj2)))+(((16.0)*gconst114*sj2*(r10*r10)*(sj5*sj5)))+(((2.0)*cj2*gconst115*gconst116*gconst120*sj1))+(((-2.0)*gconst116*gconst123*r11*sj2*sj5))+(((-2.0)*cj2*gconst113*gconst117*gconst119*sj1))+(((-2.0)*gconst115*gconst124*(sj2*sj2)))+(((2.0)*gconst115*gconst116*gconst119*sj2))+(((2.0)*cj2*gconst114*gconst117*gconst118*sj1))+(((2.0)*cj2*gconst113*gconst116*gconst119*sj1))+(((-2.0)*cj2*gconst114*gconst116*gconst118*sj1))+(((8.0)*cj2*gconst119*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*cj2*gconst113*gconst115*gconst124*sj1))+(((2.0)*cj2*gconst112*gconst113*gconst124*sj1))+(((-2.0)*cj2*gconst113*gconst125*sj1*sj2))+(((-2.0)*gconst116*gconst123*(sj2*sj2)))+(((2.0)*gconst112*gconst115*gconst124*sj2))+(((-2.0)*gconst113*gconst119*r11*sj2*sj5))+(((-2.0)*cj2*gconst115*gconst116*gconst121*sj1))+(((-2.0)*gconst114*gconst115*gconst118*sj2))+(((-2.0)*gconst115*gconst116*gconst118*sj2))+(((-2.0)*gconst113*gconst119*(sj2*sj2)))+(((2.0)*gconst117*gconst118*r11*sj2*sj5))+(((2.0)*gconst112*gconst116*gconst123*sj2))+(((-2.0)*gconst117*gconst119*r11*sj2*sj5))+(((-2.0)*gconst115*gconst121*r11*sj2*sj5))+(((2.0)*gconst117*gconst122*r11*sj2*sj5))+(((2.0)*gconst112*gconst113*gconst123*sj2))+(((4.0)*cj2*gconst117*gconst121*sj1*sj2))+(((2.0)*gconst125*(sj2*sj2*sj2)))+(((-8.0)*cj2*gconst121*r00*r10*sj1*(sj5*sj5)))+(((-16.0)*gconst112*r00*r10*sj2*(sj5*sj5)))+(((2.0)*gconst121*(sj2*sj2*sj2)))+(((16.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((16.0)*gconst116*sj2*(r10*r10)*(sj5*sj5)))+(((-2.0)*gconst112*gconst120*(sj2*sj2)))+(((-2.0)*gconst114*gconst123*r11*sj2*sj5))+(((16.0)*cj2*r11*sj1*(r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*cj2*gconst112*gconst113*gconst125*sj1))+(((8.0)*gconst124*sj2*(r10*r10)*(sj5*sj5)))+(((-2.0)*cj2*gconst113*gconst125*r11*sj1*sj5))+(((-2.0)*gconst115*gconst124*r11*sj2*sj5))+(((-2.0)*gconst115*gconst121*(sj2*sj2)))+(((-2.0)*cj2*gconst114*gconst124*sj1*sj2))+(((-16.0)*cj2*gconst114*r00*r10*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst117*gconst120*r11*sj1*sj5))+(((4.0)*cj2*gconst114*gconst125*sj1*sj2))+(((4.0)*gconst121*r11*sj5*(sj2*sj2)))+(((2.0)*gconst117*gconst122*(sj2*sj2)))+(((-2.0)*gconst112*gconst117*gconst122*sj2))+(((8.0)*cj2*gconst122*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst114*gconst122*(sj2*sj2)))+(((8.0)*gconst121*sj2*(r10*r10)*(sj5*sj5)))+(((4.0)*cj2*gconst114*gconst125*r11*sj1*sj5))+(((-2.0)*cj2*gconst114*gconst124*r11*sj1*sj5))+(((-16.0)*r00*r10*(sj2*sj2)*(sj5*sj5)))+(((-2.0)*cj2*gconst114*gconst116*gconst123*sj1))+(((-2.0)*gconst117*gconst119*(sj2*sj2)))+(((2.0)*gconst112*gconst115*gconst120*sj2))+(((2.0)*gconst117*gconst118*(sj2*sj2)))+(((-2.0)*gconst112*gconst120*r11*sj2*sj5))+(((2.0)*gconst114*gconst118*r11*sj2*sj5))+(((-2.0)*cj2*gconst114*gconst115*gconst124*sj1))+(((16.0)*cj2*gconst112*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst114*gconst122*r11*sj2*sj5))+(((4.0)*cj2*gconst117*gconst121*r11*sj1*sj5))+(((2.0)*cj2*gconst113*gconst116*gconst123*sj1))+(((2.0)*gconst125*sj2*(r11*r11)*(sj5*sj5)))+(((-2.0)*cj2*gconst116*gconst121*r11*sj1*sj5))+(((-16.0)*cj2*gconst116*r00*r10*sj1*(sj5*sj5)))+(((2.0)*cj2*gconst114*gconst117*gconst122*sj1))+(((4.0)*gconst125*r11*sj5*(sj2*sj2)))+(((-2.0)*cj2*gconst112*gconst117*gconst120*sj1))+(((-2.0)*gconst112*gconst125*r11*sj2*sj5))+(((-16.0)*r00*r10*r11*sj2*(sj5*sj5*sj5)))+(((-2.0)*cj2*gconst116*gconst121*sj1*sj2))+(((-2.0)*gconst112*gconst113*gconst122*sj2))+(((-2.0)*gconst112*gconst125*(sj2*sj2)))+(((-2.0)*cj2*gconst113*gconst117*gconst122*sj1))+(((2.0)*gconst113*gconst115*gconst119*sj2))+(((-8.0)*cj2*gconst124*r00*r10*sj1*(sj5*sj5))));
op[6]=((((-4.0)*gconst119*sj2*(r00*r00)*(sj5*sj5)))+(((-2.0)*gconst114*gconst125*r11*sj2*sj5))+((gconst113*gconst117*gconst119*sj2))+(((-8.0)*gconst112*sj2*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst112*gconst115*gconst116*gconst120))+(((-4.0)*cj2*gconst117*sj1*(sj2*sj2)))+((gconst114*gconst116*gconst123*sj2))+(((32.0)*cj2*r00*r10*sj1*sj2*(sj5*sj5)))+(((-2.0)*gconst117*gconst121*r11*sj2*sj5))+(((4.0)*gconst114*gconst116*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst114*gconst125*(sj2*sj2)))+((gconst112*gconst117*gconst120*r11*sj5))+(((4.0)*gconst112*r11*sj5*(sj2*sj2)))+(((-4.0)*(sj2*sj2*sj2*sj2)))+(((-1.0)*gconst114*gconst125*(r11*r11)*(sj5*sj5)))+(((-1.0)*gconst113*gconst115*gconst116*gconst119))+(((-4.0)*gconst112*gconst115*(sj2*sj2)))+(((4.0)*gconst121*r00*r10*sj2*(sj5*sj5)))+(((-4.0)*cj2*gconst117*r11*sj1*sj2*sj5))+((gconst115*gconst116*gconst121*r11*sj5))+((gconst112*gconst117*gconst120*sj2))+(((4.0)*cj2*gconst112*gconst117*sj1*sj2))+(((8.0)*gconst114*r00*r10*r11*(sj5*sj5*sj5)))+(((-1.0)*gconst117*gconst121*(r11*r11)*(sj5*sj5)))+((gconst113*gconst117*gconst119*r11*sj5))+(((-16.0)*(r10*r10)*(sj2*sj2)*(sj5*sj5)))+((gconst114*gconst115*gconst124*sj2))+((gconst114*gconst115*gconst116*gconst118))+(((4.0)*cj2*gconst116*r11*sj1*sj2*sj5))+(((4.0)*gconst115*r11*sj5*(sj2*sj2)))+(((-1.0)*gconst114*gconst117*gconst122*r11*sj5))+(((-8.0)*r11*sj5*(sj2*sj2*sj2)))+(((-1.0)*gconst112*gconst113*gconst116*gconst123))+(((-4.0)*gconst116*gconst121*(r10*r10)*(sj5*sj5)))+(((4.0)*gconst113*gconst117*(cj2*cj2)*(sj1*sj1)))+((gconst114*gconst116*gconst123*r11*sj5))+((gconst112*gconst113*gconst125*sj2))+(((4.0)*cj2*gconst116*sj1*(sj2*sj2)))+(((4.0)*gconst115*(sj2*sj2*sj2)))+(((-1.0)*gconst114*gconst117*gconst122*sj2))+(((-1.0)*gconst114*gconst117*gconst118*r11*sj5))+(((4.0)*gconst116*gconst119*r00*r10*(sj5*sj5)))+(((-1.0)*gconst117*gconst121*(sj2*sj2)))+(((4.0)*gconst112*(sj2*sj2*sj2)))+(((4.0)*gconst112*gconst124*r00*r10*(sj5*sj5)))+(((-4.0)*cj2*gconst114*sj1*(sj2*sj2)))+((gconst112*gconst113*gconst117*gconst122))+((gconst112*gconst113*gconst125*r11*sj5))+(((-4.0)*gconst119*r11*(r00*r00)*(sj5*sj5*sj5)))+(((4.0)*gconst121*r00*r10*r11*(sj5*sj5*sj5)))+(((4.0)*gconst114*gconst122*r00*r10*(sj5*sj5)))+(((-8.0)*gconst114*gconst116*(r10*r10)*(sj5*sj5)))+(((-1.0)*gconst112*gconst113*gconst115*gconst124))+(((-8.0)*gconst112*r11*(r00*r00)*(sj5*sj5*sj5)))+(((4.0)*cj2*gconst114*gconst115*sj1*sj2))+(((-4.0)*gconst112*gconst122*(r00*r00)*(sj5*sj5)))+(((-4.0)*cj2*gconst112*gconst116*sj1*sj2))+(((-4.0)*cj2*gconst113*gconst115*sj1*sj2))+(((-4.0)*cj2*gconst114*r11*sj1*sj2*sj5))+((gconst114*gconst115*gconst124*r11*sj5))+(((-1.0)*gconst114*gconst117*gconst118*sj2))+((gconst115*gconst116*gconst121*sj2))+(((-4.0)*gconst113*gconst116*(cj2*cj2)*(sj1*sj1)))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-4.0)*(r11*r11)*(sj2*sj2)*(sj5*sj5)))+(((4.0)*cj2*gconst113*r11*sj1*sj2*sj5))+(((8.0)*gconst114*r00*r10*sj2*(sj5*sj5)))+(((8.0)*gconst112*gconst116*r00*r10*(sj5*sj5)))+(((4.0)*cj2*gconst113*sj1*(sj2*sj2)))+(((-4.0)*gconst114*gconst117*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst114*gconst124*(r10*r10)*(sj5*sj5))));
op[7]=((((-8.0)*x1058*x1059*x1088))+(((-1.0)*gconst116*x1058*x1059*x1091))+(((-1.0)*gconst112*gconst113*x1060*x1069))+(((-1.0)*gconst114*sj2*x1060*x1062))+((x1059*x1060*x1087))+(((-1.0)*gconst116*x1053*x1062))+(((8.0)*x1051*x1059*x1079))+(((2.0)*gconst112*x1059*x1071))+(((-1.0)*x1059*x1069*x1075))+(((-1.0)*x1057*x1058*x1082))+((gconst116*x1062*x1076))+(((-2.0)*gconst112*x1059*x1075))+((gconst117*x1089))+(((-1.0)*x1057*x1058*x1079))+((sj2*x1059*x1087))+(((4.0)*gconst117*x1053*x1060))+((gconst114*x1089))+(((-1.0)*x1053*x1058*x1091))+((x1057*x1059*x1093))+(((8.0)*x1051*x1059*x1082))+(((-1.0)*gconst112*gconst117*x1060*x1069))+((x1053*x1060*x1070))+((x1059*x1062*x1071))+(((-1.0)*x1062*x1080))+(((-1.0)*x1059*x1063*x1069))+((x1054*x1069*x1088))+(((-1.0)*x1059*x1062*x1063))+(((-1.0)*gconst117*x1092))+(((-2.0)*x1059*x1060*x1075))+(((-1.0)*x1053*x1083))+(((-1.0)*gconst116*sj2*x1060*x1062))+(((-2.0)*x1059*x1060*x1063))+((x1052*x1057*x1088))+((gconst117*x1050*x1054*x1069))+((x1057*x1094))+((gconst113*x1062*x1076)));
op[8]=(((gconst112*x1060*x1075))+((x1058*x1070*x1079))+((x1075*x1076))+(((-1.0)*x1068*x1080))+(((-1.0)*gconst114*gconst117*x1060*x1069))+(((-4.0)*x1050*x1052*x1063))+(((-1.0)*sj2*x1074*x1093))+((sj2*x1050*x1058*x1070))+((x1063*x1064))+(((-1.0)*x1054*x1068*x1088))+((gconst116*x1050*x1058*x1074))+(((-1.0)*x1051*x1074*x1079))+(((-1.0)*gconst112*gconst115*x1071))+((gconst115*x1060*x1063)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[3];
IkReal x1095=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1095);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1095);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1096=cj2*cj2;
IkReal x1097=sj1*sj1;
IkReal x1098=sj0*sj0;
IkReal x1099=cj0*cj0;
IkReal x1100=sj2*sj2;
IkReal x1101=(r22*sj5);
IkReal x1102=(x1096*x1097);
j6eval[0]=x1101;
j6eval[1]=(((x1098*x1100))+((x1098*x1102))+((x1099*x1100))+((x1099*x1102)));
j6eval[2]=IKsign(x1101);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1103=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1103);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1103);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1104=(cj4*cj5*r22*sj5);
j6eval[0]=x1104;
j6eval[1]=IKsign(x1104);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1105=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1105);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1105);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1106=(sj4*sj5);
j6eval[0]=x1106;
j6eval[1]=IKsign(x1106);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1107=(r10*sj0);
IkReal x1108=(cj1*sj5);
IkReal x1109=(r11*sj0);
IkReal x1110=(cj2*sj1);
IkReal x1111=(cj4*cj5);
IkReal x1112=(cj0*r10*sj2);
IkReal x1113=((1.0)*x1111);
IkReal x1114=(cj0*r11*sj2);
IkReal x1115=((1.0)*sj4*x1110);
CheckValue<IkReal> x1116=IKPowWithIntegerCheck(IKsign((sj4*sj5)),-1);
if(!x1116.valid){
continue;
}
CheckValue<IkReal> x1117 = IKatan2WithCheck(IkReal((((x1111*x1114))+(((-1.0)*x1109*x1110*x1113))+((sj4*x1112))+(((-1.0)*x1107*x1115))+(((-1.0)*x1108*x1109)))),IkReal(((((-1.0)*x1109*x1115))+(((-1.0)*x1112*x1113))+((sj4*x1114))+((x1107*x1110*x1111))+((x1107*x1108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1117.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1116.value)))+(x1117.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1118=IKcos(j6);
IkReal x1119=IKsin(j6);
IkReal x1120=((0.36442)*cj1);
IkReal x1121=((0.069)*cj0);
IkReal x1122=(r10*sj4);
IkReal x1123=(cj4*cj5);
IkReal x1124=((1.0)*cj0);
IkReal x1125=(cj0*sj2);
IkReal x1126=(cj2*sj1);
IkReal x1127=((1.0)*sj0);
IkReal x1128=(r00*sj4);
IkReal x1129=((0.069)*sj0);
IkReal x1130=((0.01)*cj5);
IkReal x1131=((0.37429)*sj5);
IkReal x1132=(r01*sj4);
IkReal x1133=(r11*sj4);
IkReal x1134=((1.0)*x1118);
IkReal x1135=(sj5*x1119);
IkReal x1136=(cj5*x1119);
IkReal x1137=((1.0)*x1119);
IkReal x1138=(r01*x1118);
IkReal x1139=(cj4*x1118);
IkReal x1140=(r11*x1118);
evalcond[0]=(x1125+((r10*x1135))+((sj5*x1140))+(((-1.0)*x1126*x1127)));
evalcond[1]=((((-1.0)*sj2*x1127))+((r00*x1135))+((sj5*x1138))+(((-1.0)*x1124*x1126)));
evalcond[2]=((((-1.0)*r00*x1123*x1137))+((x1119*x1132))+(((-1.0)*r01*x1123*x1134))+(((-1.0)*cj1*x1124))+(((-1.0)*x1128*x1134)));
evalcond[3]=((((-1.0)*x1122*x1134))+((x1119*x1133))+(((-1.0)*cj1*x1127))+(((-1.0)*r10*x1123*x1137))+(((-1.0)*r11*x1123*x1134)));
evalcond[4]=(((r10*x1139))+((cj0*cj2))+(((-1.0)*cj4*r11*x1137))+((sj0*sj1*sj2))+(((-1.0)*x1122*x1136))+(((-1.0)*cj5*x1133*x1134)));
evalcond[5]=((((-1.0)*x1128*x1136))+((r00*x1139))+((sj1*x1125))+(((-1.0)*cj5*x1132*x1134))+(((-1.0)*cj2*x1127))+(((-1.0)*cj4*r01*x1137)));
evalcond[6]=(x1121+(((-1.0)*sj2*x1129))+((x1130*x1138))+((cj0*x1120))+(((-1.0)*x1121*x1126))+(((-1.0)*x1131*x1138))+(((-1.0)*px))+(((-1.0)*r00*x1119*x1131))+((r00*x1119*x1130)));
evalcond[7]=(x1129+(((-1.0)*x1126*x1129))+(((-1.0)*r10*x1119*x1131))+((sj0*x1120))+((x1130*x1140))+(((-1.0)*py))+(((-1.0)*x1131*x1140))+((sj2*x1121))+((r10*x1119*x1130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1141=((1.0)*r01);
IkReal x1142=((1.0)*r00);
IkReal x1143=(cj0*sj2*sj4);
IkReal x1144=(cj0*cj1*sj5);
IkReal x1145=(cj0*cj4*cj5*sj2);
IkReal x1146=(cj2*sj0*sj1*sj4);
IkReal x1147=(cj2*cj4*cj5*sj0*sj1);
CheckValue<IkReal> x1148=IKPowWithIntegerCheck(IKsign((cj4*cj5*r22*sj5)),-1);
if(!x1148.valid){
continue;
}
CheckValue<IkReal> x1149 = IKatan2WithCheck(IkReal(((((-1.0)*x1141*x1147))+(((-1.0)*r11*x1144))+((r01*x1145))+((r00*x1143))+(((-1.0)*x1142*x1146)))),IkReal(((((-1.0)*x1141*x1146))+((r01*x1143))+((r00*x1147))+(((-1.0)*x1142*x1145))+((r10*x1144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1149.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1148.value)))+(x1149.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1150=IKcos(j6);
IkReal x1151=IKsin(j6);
IkReal x1152=((0.36442)*cj1);
IkReal x1153=((0.069)*cj0);
IkReal x1154=(r10*sj4);
IkReal x1155=(cj4*cj5);
IkReal x1156=((1.0)*cj0);
IkReal x1157=(cj0*sj2);
IkReal x1158=(cj2*sj1);
IkReal x1159=((1.0)*sj0);
IkReal x1160=(r00*sj4);
IkReal x1161=((0.069)*sj0);
IkReal x1162=((0.01)*cj5);
IkReal x1163=((0.37429)*sj5);
IkReal x1164=(r01*sj4);
IkReal x1165=(r11*sj4);
IkReal x1166=((1.0)*x1150);
IkReal x1167=(sj5*x1151);
IkReal x1168=(cj5*x1151);
IkReal x1169=((1.0)*x1151);
IkReal x1170=(r01*x1150);
IkReal x1171=(cj4*x1150);
IkReal x1172=(r11*x1150);
evalcond[0]=(x1157+((r10*x1167))+(((-1.0)*x1158*x1159))+((sj5*x1172)));
evalcond[1]=(((r00*x1167))+(((-1.0)*x1156*x1158))+(((-1.0)*sj2*x1159))+((sj5*x1170)));
evalcond[2]=((((-1.0)*r01*x1155*x1166))+(((-1.0)*cj1*x1156))+(((-1.0)*x1160*x1166))+((x1151*x1164))+(((-1.0)*r00*x1155*x1169)));
evalcond[3]=((((-1.0)*r10*x1155*x1169))+(((-1.0)*cj1*x1159))+(((-1.0)*r11*x1155*x1166))+((x1151*x1165))+(((-1.0)*x1154*x1166)));
evalcond[4]=((((-1.0)*cj4*r11*x1169))+(((-1.0)*x1154*x1168))+((r10*x1171))+((cj0*cj2))+(((-1.0)*cj5*x1165*x1166))+((sj0*sj1*sj2)));
evalcond[5]=(((r00*x1171))+(((-1.0)*cj4*r01*x1169))+((sj1*x1157))+(((-1.0)*cj2*x1159))+(((-1.0)*x1160*x1168))+(((-1.0)*cj5*x1164*x1166)));
evalcond[6]=(((cj0*x1152))+x1153+(((-1.0)*sj2*x1161))+((r00*x1151*x1162))+(((-1.0)*x1163*x1170))+((x1162*x1170))+(((-1.0)*px))+(((-1.0)*x1153*x1158))+(((-1.0)*r00*x1151*x1163)));
evalcond[7]=(x1161+(((-1.0)*r10*x1151*x1163))+(((-1.0)*x1158*x1161))+((sj2*x1153))+(((-1.0)*x1163*x1172))+((x1162*x1172))+((r10*x1151*x1162))+(((-1.0)*py))+((sj0*x1152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1173=(cj0*sj2);
IkReal x1174=(sj0*sj2);
IkReal x1175=(cj2*sj1);
IkReal x1176=((1.0)*r10);
CheckValue<IkReal> x1177=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1177.valid){
continue;
}
CheckValue<IkReal> x1178 = IKatan2WithCheck(IkReal((((cj0*r11*x1175))+((r01*x1173))+((r11*x1174))+(((-1.0)*r01*sj0*x1175)))),IkReal(((((-1.0)*cj0*x1175*x1176))+((r00*sj0*x1175))+(((-1.0)*r00*x1173))+(((-1.0)*x1174*x1176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1178.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1177.value)))+(x1178.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1179=IKcos(j6);
IkReal x1180=IKsin(j6);
IkReal x1181=((0.36442)*cj1);
IkReal x1182=((0.069)*cj0);
IkReal x1183=(r10*sj4);
IkReal x1184=(cj4*cj5);
IkReal x1185=((1.0)*cj0);
IkReal x1186=(cj0*sj2);
IkReal x1187=(cj2*sj1);
IkReal x1188=((1.0)*sj0);
IkReal x1189=(r00*sj4);
IkReal x1190=((0.069)*sj0);
IkReal x1191=((0.01)*cj5);
IkReal x1192=((0.37429)*sj5);
IkReal x1193=(r01*sj4);
IkReal x1194=(r11*sj4);
IkReal x1195=((1.0)*x1179);
IkReal x1196=(sj5*x1180);
IkReal x1197=(cj5*x1180);
IkReal x1198=((1.0)*x1180);
IkReal x1199=(r01*x1179);
IkReal x1200=(cj4*x1179);
IkReal x1201=(r11*x1179);
evalcond[0]=(x1186+((r10*x1196))+(((-1.0)*x1187*x1188))+((sj5*x1201)));
evalcond[1]=(((r00*x1196))+(((-1.0)*x1185*x1187))+((sj5*x1199))+(((-1.0)*sj2*x1188)));
evalcond[2]=((((-1.0)*r00*x1184*x1198))+(((-1.0)*x1189*x1195))+((x1180*x1193))+(((-1.0)*r01*x1184*x1195))+(((-1.0)*cj1*x1185)));
evalcond[3]=(((x1180*x1194))+(((-1.0)*r11*x1184*x1195))+(((-1.0)*cj1*x1188))+(((-1.0)*x1183*x1195))+(((-1.0)*r10*x1184*x1198)));
evalcond[4]=(((r10*x1200))+(((-1.0)*cj4*r11*x1198))+(((-1.0)*cj5*x1194*x1195))+((cj0*cj2))+(((-1.0)*x1183*x1197))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj5*x1193*x1195))+((sj1*x1186))+(((-1.0)*cj2*x1188))+(((-1.0)*cj4*r01*x1198))+((r00*x1200))+(((-1.0)*x1189*x1197)));
evalcond[6]=((((-1.0)*sj2*x1190))+x1182+(((-1.0)*r00*x1180*x1192))+((cj0*x1181))+(((-1.0)*px))+(((-1.0)*x1182*x1187))+(((-1.0)*x1192*x1199))+((x1191*x1199))+((r00*x1180*x1191)));
evalcond[7]=(x1190+(((-1.0)*r10*x1180*x1192))+((r10*x1180*x1191))+((x1191*x1201))+((sj0*x1181))+(((-1.0)*py))+(((-1.0)*x1187*x1190))+((sj2*x1182))+(((-1.0)*x1192*x1201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1202=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1202);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1202);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1203=(r22*sj5);
j4eval[0]=x1203;
j4eval[1]=((IKabs(sj1))+(IKabs((cj1*sj2))));
j4eval[2]=IKsign(x1203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal((cj1*sj2)),IkReal(((-1.0)*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
CheckValue<IkReal> x1205=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1204.value)+(((1.5707963267949)*(x1205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1206=(r22*sj5);
evalcond[0]=(sj1+((x1206*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*x1206*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1207=((1.0)*sj2);
IkReal x1208=(cj2*sj1);
IkReal x1209=(r01*sj5);
IkReal x1210=(r11*sj5);
IkReal x1211=((1.0)*x1208);
IkReal x1212=(sj2+(((-1.0)*x1210)));
IkReal x1213=((1.0)*x1210);
IkReal x1214=((1.0)*x1209);
IkReal x1215=(x1210+(((-1.0)*x1207)));
IkReal x1216=(x1209+(((-1.0)*x1211)));
IkReal x1217=(x1208+(((-1.0)*x1214)));
IkReal x1218=(x1209+x1208);
IkReal x1219=((((-1.0)*x1207))+(((-1.0)*x1213)));
IkReal x1220=((((-1.0)*x1214))+(((-1.0)*x1211)));
IkReal gconst142=x1212;
IkReal gconst143=x1220;
IkReal gconst144=x1216;
IkReal gconst145=x1212;
IkReal gconst146=x1220;
IkReal gconst147=x1216;
IkReal gconst148=x1219;
IkReal gconst149=x1215;
IkReal gconst150=x1217;
IkReal gconst151=x1218;
IkReal gconst152=x1219;
IkReal gconst153=x1215;
IkReal gconst154=x1217;
IkReal gconst155=x1218;
IkReal x1221=sj5*sj5;
IkReal x1222=r00*r00;
IkReal x1223=r10*r10;
IkReal x1224=sj2*sj2;
IkReal x1225=sj2*sj2*sj2;
IkReal x1226=r11*r11;
IkReal x1227=sj5*sj5*sj5;
IkReal x1228=(gconst144*gconst146);
IkReal x1229=(r11*sj5);
IkReal x1230=(gconst152*gconst155);
IkReal x1231=(gconst149*gconst150);
IkReal x1232=(cj2*sj1);
IkReal x1233=((2.0)*gconst151);
IkReal x1234=(gconst148*gconst151);
IkReal x1235=((2.0)*gconst147);
IkReal x1236=(gconst142*gconst144);
IkReal x1237=(gconst145*gconst147);
IkReal x1238=((2.0)*sj2);
IkReal x1239=(gconst142*gconst146);
IkReal x1240=((8.0)*gconst151);
IkReal x1241=(gconst145*sj2);
IkReal x1242=(gconst148*sj2);
IkReal x1243=(gconst148*gconst154);
IkReal x1244=((1.0)*gconst146);
IkReal x1245=(gconst153*gconst154);
IkReal x1246=((2.0)*gconst150);
IkReal x1247=(gconst143*gconst145);
IkReal x1248=((8.0)*gconst144);
IkReal x1249=(r00*r10);
IkReal x1250=(gconst144*gconst145);
IkReal x1251=((4.0)*gconst146);
IkReal x1252=((8.0)*gconst146);
IkReal x1253=((8.0)*gconst154);
IkReal x1254=(gconst143*sj2);
IkReal x1255=(gconst149*x1221);
IkReal x1256=(r11*x1227);
IkReal x1257=((8.0)*x1222);
IkReal x1258=(sj2*x1221);
IkReal x1259=((4.0)*x1221);
IkReal x1260=(gconst145*x1221);
IkReal x1261=(gconst143*x1224);
IkReal x1262=((2.0)*x1225);
IkReal x1263=((2.0)*x1224);
IkReal x1264=((4.0)*x1222);
IkReal x1265=(gconst143*x1226);
IkReal x1266=(gconst152*x1221);
IkReal x1267=((8.0)*sj2*x1249);
IkReal x1268=(x1221*x1249);
op[0]=((((4.0)*gconst154*x1249*x1255))+(((-1.0)*gconst152*x1255*x1264))+(((-1.0)*gconst151*gconst154*x1223*x1259))+(((-1.0)*x1230*x1234))+((gconst151*gconst152*x1249*x1259))+((x1230*x1231))+((x1234*x1245))+(((-1.0)*x1231*x1245)));
op[1]=((((-1.0)*gconst149*x1230*x1238))+(((-1.0)*gconst153*x1238*x1243))+(((-1.0)*x1232*x1240*x1268))+(((-8.0)*gconst152*x1249*x1258))+((gconst152*x1233*x1242))+((x1223*x1240*x1258))+((x1232*x1255*x1257))+((gconst153*x1231*x1238))+((gconst148*x1230*x1238))+(((-1.0)*x1230*x1232*x1246))+(((-1.0)*x1232*x1253*x1268))+(((-1.0)*gconst152*x1231*x1238))+((gconst148*gconst155*x1232*x1233))+((x1230*x1232*x1233))+(((-1.0)*x1232*x1233*x1243))+(((-1.0)*x1232*x1233*x1245))+((gconst149*x1238*x1245))+(((2.0)*gconst154*x1231*x1232))+(((-1.0)*x1255*x1267))+(((-1.0)*gconst153*x1233*x1242))+((x1232*x1245*x1246))+((x1223*x1253*x1258))+((x1232*x1257*x1266))+(((-2.0)*gconst155*x1231*x1232)));
op[2]=((((-1.0)*gconst145*gconst148*gconst151*gconst155))+(((-1.0)*gconst143*gconst149*gconst153*gconst154))+(((32.0)*cj2*r00*r10*sj1*sj2*(sj5*sj5)))+(((4.0)*gconst154*r00*r10*sj2*(sj5*sj5)))+(((8.0)*gconst149*gconst154*r00*r10*(sj5*sj5)))+(((-1.0)*gconst150*gconst153*gconst154*sj2))+(((-1.0)*gconst144*gconst148*gconst152*gconst155))+(((4.0)*gconst146*gconst149*r00*r10*(sj5*sj5)))+(((-1.0)*gconst149*gconst150*gconst154*sj2))+(((-4.0)*gconst144*gconst154*(r10*r10)*(sj5*sj5)))+(((-4.0)*gconst146*gconst151*(r10*r10)*(sj5*sj5)))+(((-1.0)*gconst142*gconst151*gconst152*gconst155))+(((4.0)*gconst154*r00*r10*r11*(sj5*sj5*sj5)))+(((4.0)*cj2*gconst149*gconst155*sj1*sj2))+(((-4.0)*gconst152*r11*(r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*gconst151*gconst155*(cj2*cj2)*(sj1*sj1)))+((gconst147*gconst149*gconst150*gconst152))+(((-4.0)*cj2*gconst150*gconst153*sj1*sj2))+(((-4.0)*gconst150*gconst154*(cj2*cj2)*(sj1*sj1)))+(((-8.0)*gconst149*gconst152*(r00*r00)*(sj5*sj5)))+(((-16.0)*(r10*r10)*(sj2*sj2)*(sj5*sj5)))+((gconst143*gconst149*gconst152*gconst155))+(((-4.0)*gconst148*gconst152*(sj2*sj2)))+(((-8.0)*gconst151*gconst154*(r10*r10)*(sj5*sj5)))+(((-1.0)*gconst147*gconst148*gconst151*gconst152))+(((4.0)*cj2*gconst148*gconst154*sj1*sj2))+(((-1.0)*gconst150*gconst153*gconst154*r11*sj5))+(((4.0)*gconst149*gconst152*(sj2*sj2)))+((gconst144*gconst148*gconst153*gconst154))+(((-4.0)*gconst145*gconst149*(r00*r00)*(sj5*sj5)))+((gconst142*gconst151*gconst153*gconst154))+(((8.0)*gconst151*gconst152*r00*r10*(sj5*sj5)))+(((-4.0)*cj2*gconst151*gconst152*sj1*sj2))+(((4.0)*gconst151*gconst154*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst145*gconst151*r00*r10*(sj5*sj5)))+((gconst148*gconst151*gconst154*sj2))+((gconst150*gconst152*gconst155*sj2))+(((-4.0)*cj2*gconst148*gconst155*sj1*sj2))+(((4.0)*cj2*gconst150*gconst152*sj1*sj2))+(((4.0)*gconst144*gconst152*r00*r10*(sj5*sj5)))+((gconst146*gconst148*gconst151*gconst153))+(((4.0)*gconst150*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst149*gconst150*gconst154*r11*sj5))+(((-4.0)*cj2*gconst149*gconst154*sj1*sj2))+(((4.0)*gconst148*gconst153*(sj2*sj2)))+(((-4.0)*gconst149*gconst153*(sj2*sj2)))+(((4.0)*cj2*gconst151*gconst153*sj1*sj2))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-1.0)*gconst146*gconst149*gconst150*gconst153))+((gconst145*gconst149*gconst150*gconst155))+((gconst148*gconst151*gconst154*r11*sj5))+(((-4.0)*gconst152*sj2*(r00*r00)*(sj5*sj5)))+((gconst150*gconst152*gconst155*r11*sj5)));
op[3]=((((-2.0)*gconst145*gconst149*gconst150*sj2))+(((-8.0)*r00*r10*(sj2*sj2)*(sj5*sj5)))+(((2.0)*gconst149*gconst154*r11*sj2*sj5))+(((-2.0)*cj2*gconst150*gconst155*r11*sj1*sj5))+(((8.0)*gconst144*sj2*(r10*r10)*(sj5*sj5)))+(((2.0)*cj2*gconst143*gconst149*gconst154*sj1))+(((-2.0)*cj2*gconst144*gconst153*gconst154*sj1))+(((2.0)*gconst142*gconst151*gconst152*sj2))+(((2.0)*gconst144*gconst148*gconst152*sj2))+(((-2.0)*gconst142*gconst153*gconst154*sj2))+(((2.0)*gconst149*gconst150*r11*sj2*sj5))+(((-2.0)*gconst150*gconst152*(sj2*sj2)))+(((-2.0)*cj2*gconst143*gconst152*gconst155*sj1))+(((2.0)*gconst153*gconst154*(sj2*sj2)))+(((2.0)*gconst145*gconst148*gconst151*sj2))+(((-8.0)*gconst145*r00*r10*sj2*(sj5*sj5)))+(((2.0)*cj2*gconst146*gconst149*gconst150*sj1))+(((2.0)*gconst149*gconst154*(sj2*sj2)))+(((16.0)*gconst151*sj2*(r10*r10)*(sj5*sj5)))+(((8.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((-2.0)*cj2*gconst150*gconst155*sj1*sj2))+(((2.0)*cj2*gconst147*gconst151*gconst152*sj1))+(((-16.0)*gconst152*r00*r10*sj2*(sj5*sj5)))+(((2.0)*cj2*gconst144*gconst152*gconst155*sj1))+(((2.0)*gconst147*gconst148*gconst152*sj2))+(((2.0)*gconst145*gconst148*gconst155*sj2))+(((-8.0)*r00*r10*r11*sj2*(sj5*sj5*sj5)))+(((2.0)*cj2*gconst147*gconst148*gconst151*sj1))+(((-2.0)*gconst148*gconst154*r11*sj2*sj5))+(((-2.0)*cj2*gconst147*gconst150*gconst152*sj1))+(((-2.0)*gconst147*gconst149*gconst152*sj2))+(((2.0)*cj2*gconst145*gconst151*gconst155*sj1))+(((8.0)*gconst146*sj2*(r10*r10)*(sj5*sj5)))+(((2.0)*cj2*gconst142*gconst151*gconst155*sj1))+(((2.0)*cj2*gconst144*gconst148*gconst155*sj1))+(((16.0)*cj2*gconst149*sj1*(r00*r00)*(sj5*sj5)))+(((8.0)*cj2*gconst145*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*cj2*gconst146*gconst150*gconst153*sj1))+(((-2.0)*cj2*gconst146*gconst148*gconst151*sj1))+(((-16.0)*gconst149*r00*r10*sj2*(sj5*sj5)))+(((-2.0)*gconst148*gconst151*r11*sj2*sj5))+(((-2.0)*cj2*gconst147*gconst149*gconst150*sj1))+(((-2.0)*gconst145*gconst149*gconst155*sj2))+(((-2.0)*cj2*gconst146*gconst151*gconst153*sj1))+(((-2.0)*cj2*gconst145*gconst150*gconst155*sj1))+(((-2.0)*gconst150*gconst152*r11*sj2*sj5))+(((-2.0)*gconst144*gconst148*gconst153*sj2))+(((4.0)*cj2*gconst150*gconst154*sj1*sj2))+(((-2.0)*cj2*gconst142*gconst151*gconst154*sj1))+(((-16.0)*cj2*gconst151*r00*r10*sj1*(sj5*sj5)))+(((2.0)*gconst150*gconst153*r11*sj2*sj5))+(((2.0)*gconst142*gconst152*gconst155*sj2))+(((2.0)*gconst150*gconst153*(sj2*sj2)))+(((8.0)*cj2*r11*sj1*(r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*cj2*gconst151*gconst154*r11*sj1*sj5))+(((16.0)*cj2*gconst152*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*gconst148*gconst151*(sj2*sj2)))+(((-2.0)*cj2*gconst144*gconst148*gconst154*sj1))+(((2.0)*cj2*gconst143*gconst153*gconst154*sj1))+(((-2.0)*gconst152*gconst155*(sj2*sj2)))+(((2.0)*gconst153*gconst154*r11*sj2*sj5))+(((4.0)*cj2*gconst150*gconst154*r11*sj1*sj5))+(((-8.0)*cj2*gconst146*r00*r10*sj1*(sj5*sj5)))+(((-16.0)*cj2*gconst154*r00*r10*sj1*(sj5*sj5)))+(((2.0)*gconst143*gconst149*gconst153*sj2))+(((-2.0)*gconst143*gconst149*gconst152*sj2))+(((2.0)*gconst149*gconst150*(sj2*sj2)))+(((-2.0)*gconst142*gconst151*gconst153*sj2))+(((-2.0)*gconst152*gconst155*r11*sj2*sj5))+(((2.0)*gconst146*gconst149*gconst153*sj2))+(((-2.0)*gconst146*gconst148*gconst153*sj2))+(((-2.0)*cj2*gconst143*gconst149*gconst155*sj1))+(((16.0)*gconst154*sj2*(r10*r10)*(sj5*sj5)))+(((-8.0)*cj2*gconst144*r00*r10*sj1*(sj5*sj5)))+(((-2.0)*gconst148*gconst154*(sj2*sj2)))+(((-2.0)*cj2*gconst151*gconst154*sj1*sj2)));
op[4]=((((-4.0)*gconst144*gconst146*(r10*r10)*(sj5*sj5)))+(((-1.0)*gconst143*gconst153*gconst154*r11*sj5))+((gconst145*gconst150*gconst155*sj2))+(((4.0)*gconst152*r11*sj5*(sj2*sj2)))+(((-8.0)*gconst144*gconst154*(r10*r10)*(sj5*sj5)))+(((4.0)*gconst151*gconst152*r00*r10*(sj5*sj5)))+(((-4.0)*gconst145*gconst148*(sj2*sj2)))+(((4.0)*gconst144*gconst145*r00*r10*(sj5*sj5)))+(((-1.0)*gconst150*gconst154*(r11*r11)*(sj5*sj5)))+((gconst143*gconst152*gconst155*sj2))+(((-1.0)*gconst143*gconst153*gconst154*sj2))+(((-1.0)*gconst150*gconst154*(sj2*sj2)))+(((64.0)*cj2*r00*r10*sj1*sj2*(sj5*sj5)))+((gconst143*gconst145*gconst149*gconst155))+(((4.0)*cj2*gconst155*sj1*(sj2*sj2)))+(((-4.0)*gconst146*gconst150*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst147*gconst151*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst144*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-32.0)*(r10*r10)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*cj2*gconst146*gconst149*sj1*sj2))+((gconst142*gconst151*gconst154*sj2))+((gconst143*gconst152*gconst155*r11*sj5))+((gconst146*gconst148*gconst151*r11*sj5))+(((-4.0)*cj2*gconst142*gconst155*sj1*sj2))+(((4.0)*cj2*gconst143*gconst152*sj1*sj2))+(((-4.0)*cj2*gconst147*gconst148*sj1*sj2))+(((-8.0)*gconst152*sj2*(r00*r00)*(sj5*sj5)))+(((4.0)*gconst146*r00*r10*r11*(sj5*sj5*sj5)))+(((-4.0)*cj2*gconst154*sj1*(sj2*sj2)))+((gconst146*gconst148*gconst151*sj2))+(((4.0)*gconst144*gconst154*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst148*(sj2*sj2*sj2)))+(((-8.0)*gconst152*r11*(r00*r00)*(sj5*sj5*sj5)))+((gconst144*gconst148*gconst154*sj2))+(((4.0)*gconst148*r11*sj5*(sj2*sj2)))+(((4.0)*gconst145*gconst149*(sj2*sj2)))+(((4.0)*cj2*gconst145*gconst150*sj1*sj2))+(((-8.0)*gconst145*gconst149*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst146*gconst149*gconst150*r11*sj5))+((gconst147*gconst150*gconst152*r11*sj5))+(((-4.0)*gconst145*sj2*(r00*r00)*(sj5*sj5)))+(((4.0)*cj2*gconst151*r11*sj1*sj2*sj5))+((gconst142*gconst151*gconst154*r11*sj5))+(((8.0)*gconst145*gconst151*r00*r10*(sj5*sj5)))+(((-4.0)*gconst142*gconst152*(sj2*sj2)))+(((4.0)*cj2*gconst142*gconst154*sj1*sj2))+(((8.0)*gconst154*r00*r10*r11*(sj5*sj5*sj5)))+(((-1.0)*gconst142*gconst147*gconst151*gconst152))+((gconst142*gconst144*gconst153*gconst154))+(((4.0)*gconst149*gconst154*r00*r10*(sj5*sj5)))+(((-4.0)*gconst149*r11*sj5*(sj2*sj2)))+(((4.0)*gconst146*gconst151*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst153*(sj2*sj2*sj2)))+((gconst145*gconst147*gconst149*gconst150))+(((8.0)*gconst144*gconst152*r00*r10*(sj5*sj5)))+(((4.0)*cj2*gconst151*sj1*(sj2*sj2)))+(((4.0)*cj2*gconst146*gconst148*sj1*sj2))+(((-4.0)*cj2*gconst150*r11*sj1*sj2*sj5))+(((-1.0)*gconst146*gconst149*gconst150*sj2))+(((-4.0)*cj2*gconst144*gconst152*sj1*sj2))+(((4.0)*gconst147*gconst150*(cj2*cj2)*(sj1*sj1)))+((gconst147*gconst150*gconst152*sj2))+(((-1.0)*gconst145*gconst147*gconst148*gconst151))+(((-1.0)*gconst146*gconst150*gconst153*sj2))+(((-4.0)*gconst149*(sj2*sj2*sj2)))+(((4.0)*gconst152*(sj2*sj2*sj2)))+(((4.0)*gconst143*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-8.0)*gconst146*gconst151*(r10*r10)*(sj5*sj5)))+(((-4.0)*gconst151*gconst154*(r10*r10)*(sj5*sj5)))+(((8.0)*gconst146*gconst149*r00*r10*(sj5*sj5)))+((gconst145*gconst150*gconst155*r11*sj5))+(((-4.0)*cj2*gconst150*sj1*(sj2*sj2)))+(((-1.0)*gconst143*gconst146*gconst149*gconst153))+(((-4.0)*gconst145*r11*(r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*cj2*gconst154*r11*sj1*sj2*sj5))+(((8.0)*gconst154*r00*r10*sj2*(sj5*sj5)))+(((-1.0)*gconst143*gconst149*gconst154*sj2))+(((-4.0)*gconst149*gconst152*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst144*gconst147*gconst148*gconst152))+(((4.0)*gconst146*r00*r10*sj2*(sj5*sj5)))+(((-4.0)*cj2*gconst143*gconst153*sj1*sj2))+(((-4.0)*gconst143*gconst154*(cj2*cj2)*(sj1*sj1)))+(((4.0)*cj2*gconst155*r11*sj1*sj2*sj5))+(((-1.0)*gconst142*gconst145*gconst151*gconst155))+(((-32.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((4.0)*cj2*gconst147*gconst149*sj1*sj2))+(((4.0)*cj2*gconst144*gconst153*sj1*sj2))+(((-1.0)*gconst146*gconst150*gconst153*r11*sj5))+(((-1.0)*gconst144*gconst145*gconst148*gconst155))+((gconst144*gconst146*gconst148*gconst153))+((gconst142*gconst146*gconst151*gconst153))+(((-1.0)*gconst143*gconst149*gconst154*r11*sj5))+(((4.0)*gconst142*gconst153*(sj2*sj2)))+(((-2.0)*gconst150*gconst154*r11*sj2*sj5))+(((-4.0)*gconst153*r11*sj5*(sj2*sj2)))+(((-1.0)*gconst142*gconst144*gconst152*gconst155))+((gconst144*gconst148*gconst154*r11*sj5))+(((-4.0)*cj2*gconst145*gconst151*sj1*sj2))+((gconst143*gconst147*gconst149*gconst152)));
op[5]=((((-16.0)*cj2*gconst146*r00*r10*sj1*(sj5*sj5)))+(((16.0)*gconst146*sj2*(r10*r10)*(sj5*sj5)))+(((-2.0)*cj2*gconst146*gconst151*r11*sj1*sj5))+(((-2.0)*cj2*gconst142*gconst146*gconst151*sj1))+(((-16.0)*cj2*gconst144*r00*r10*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst143*gconst155*r11*sj1*sj5))+(((2.0)*gconst146*gconst153*r11*sj2*sj5))+(((2.0)*gconst150*sj2*(r11*r11)*(sj5*sj5)))+(((-2.0)*gconst146*gconst148*r11*sj2*sj5))+(((-2.0)*cj2*gconst143*gconst155*sj1*sj2))+(((2.0)*gconst145*gconst147*gconst148*sj2))+(((-2.0)*gconst147*gconst152*(sj2*sj2)))+(((2.0)*gconst143*gconst149*(sj2*sj2)))+(((-2.0)*gconst145*gconst150*(sj2*sj2)))+(((-2.0)*gconst147*gconst152*r11*sj2*sj5))+(((4.0)*cj2*gconst146*gconst150*r11*sj1*sj5))+(((-16.0)*gconst145*r00*r10*sj2*(sj5*sj5)))+(((2.0)*gconst143*gconst149*r11*sj2*sj5))+(((2.0)*gconst154*sj2*(r11*r11)*(sj5*sj5)))+(((-8.0)*cj2*gconst154*r00*r10*sj1*(sj5*sj5)))+(((2.0)*gconst144*gconst145*gconst148*sj2))+(((-2.0)*cj2*gconst142*gconst144*gconst154*sj1))+(((2.0)*cj2*gconst143*gconst146*gconst153*sj1))+(((2.0)*cj2*gconst145*gconst147*gconst151*sj1))+(((-2.0)*cj2*gconst146*gconst151*sj1*sj2))+(((8.0)*cj2*gconst152*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*cj2*gconst147*gconst150*r11*sj1*sj5))+(((2.0)*gconst143*gconst153*(sj2*sj2)))+(((-2.0)*cj2*gconst144*gconst154*r11*sj1*sj5))+(((4.0)*cj2*gconst146*gconst150*sj1*sj2))+(((2.0)*gconst142*gconst145*gconst155*sj2))+(((2.0)*gconst154*(sj2*sj2*sj2)))+(((4.0)*gconst154*r11*sj5*(sj2*sj2)))+(((-2.0)*gconst142*gconst146*gconst153*sj2))+(((2.0)*gconst142*gconst144*gconst152*sj2))+(((-2.0)*gconst142*gconst144*gconst153*sj2))+(((16.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((16.0)*gconst144*sj2*(r10*r10)*(sj5*sj5)))+(((8.0)*gconst154*sj2*(r10*r10)*(sj5*sj5)))+(((2.0)*gconst146*gconst149*r11*sj2*sj5))+(((-2.0)*cj2*gconst145*gconst147*gconst150*sj1))+(((8.0)*gconst151*sj2*(r10*r10)*(sj5*sj5)))+(((16.0)*cj2*r11*sj1*(r00*r00)*(sj5*sj5*sj5)))+(((2.0)*gconst143*gconst153*r11*sj2*sj5))+(((16.0)*cj2*gconst145*sj1*(r00*r00)*(sj5*sj5)))+(((-8.0)*gconst149*r00*r10*sj2*(sj5*sj5)))+(((-2.0)*cj2*gconst143*gconst147*gconst149*sj1))+(((-2.0)*gconst146*gconst148*(sj2*sj2)))+(((-2.0)*gconst144*gconst148*(sj2*sj2)))+(((4.0)*cj2*gconst143*gconst154*r11*sj1*sj5))+(((2.0)*cj2*gconst143*gconst146*gconst149*sj1))+(((2.0)*gconst146*gconst149*(sj2*sj2)))+(((-2.0)*cj2*gconst144*gconst146*gconst148*sj1))+(((2.0)*gconst142*gconst147*gconst152*sj2))+(((2.0)*cj2*gconst142*gconst147*gconst151*sj1))+(((2.0)*cj2*gconst142*gconst144*gconst155*sj1))+(((4.0)*cj2*gconst143*gconst154*sj1*sj2))+(((-2.0)*gconst142*gconst151*r11*sj2*sj5))+(((-2.0)*gconst143*gconst145*gconst149*sj2))+(((-16.0)*r00*r10*(sj2*sj2)*(sj5*sj5)))+(((-2.0)*gconst145*gconst155*r11*sj2*sj5))+(((-2.0)*gconst144*gconst148*r11*sj2*sj5))+(((-8.0)*gconst152*r00*r10*sj2*(sj5*sj5)))+(((2.0)*gconst150*(sj2*sj2*sj2)))+(((-2.0)*gconst145*gconst155*(sj2*sj2)))+(((-2.0)*gconst143*gconst152*r11*sj2*sj5))+(((2.0)*cj2*gconst144*gconst145*gconst155*sj1))+(((2.0)*cj2*gconst144*gconst147*gconst148*sj1))+(((4.0)*gconst150*r11*sj5*(sj2*sj2)))+(((2.0)*gconst146*gconst153*(sj2*sj2)))+(((-2.0)*gconst142*gconst154*r11*sj2*sj5))+(((-2.0)*cj2*gconst144*gconst146*gconst153*sj1))+(((-2.0)*gconst142*gconst154*(sj2*sj2)))+(((2.0)*cj2*gconst144*gconst147*gconst152*sj1))+(((-8.0)*cj2*gconst151*r00*r10*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst147*gconst150*sj1*sj2))+(((-2.0)*cj2*gconst143*gconst147*gconst152*sj1))+(((-2.0)*gconst142*gconst151*(sj2*sj2)))+(((-2.0)*gconst145*gconst147*gconst149*sj2))+(((-2.0)*gconst145*gconst150*r11*sj2*sj5))+(((-2.0)*gconst143*gconst152*(sj2*sj2)))+(((-16.0)*r00*r10*r11*sj2*(sj5*sj5*sj5)))+(((-2.0)*cj2*gconst143*gconst145*gconst155*sj1))+(((2.0)*gconst142*gconst145*gconst151*sj2))+(((-2.0)*cj2*gconst144*gconst154*sj1*sj2))+(((8.0)*cj2*gconst149*sj1*(r00*r00)*(sj5*sj5))));
op[6]=((((4.0)*cj2*gconst143*gconst145*sj1*sj2))+((gconst142*gconst146*gconst151*r11*sj5))+(((4.0)*gconst143*gconst147*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst143*gconst146*gconst153*sj2))+(((-8.0)*gconst145*sj2*(r00*r00)*(sj5*sj5)))+(((32.0)*cj2*r00*r10*sj1*sj2*(sj5*sj5)))+(((4.0)*gconst154*r00*r10*sj2*(sj5*sj5)))+(((-1.0)*gconst144*gconst145*gconst147*gconst148))+(((4.0)*cj2*gconst144*r11*sj1*sj2*sj5))+(((-4.0)*gconst143*gconst146*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*(sj2*sj2*sj2*sj2)))+(((4.0)*gconst146*gconst149*r00*r10*(sj5*sj5)))+(((8.0)*gconst146*r00*r10*r11*(sj5*sj5*sj5)))+(((-1.0)*gconst146*gconst150*(r11*r11)*(sj5*sj5)))+(((4.0)*cj2*gconst144*sj1*(sj2*sj2)))+(((-4.0)*gconst144*gconst154*(r10*r10)*(sj5*sj5)))+(((-4.0)*gconst146*gconst151*(r10*r10)*(sj5*sj5)))+(((-2.0)*gconst143*gconst154*r11*sj2*sj5))+(((4.0)*gconst154*r00*r10*r11*(sj5*sj5*sj5)))+(((-4.0)*gconst152*r11*(r00*r00)*(sj5*sj5*sj5)))+((gconst144*gconst146*gconst148*sj2))+(((8.0)*gconst146*r00*r10*sj2*(sj5*sj5)))+(((-1.0)*gconst142*gconst144*gconst145*gconst155))+(((4.0)*gconst144*gconst146*(cj2*cj2)*(sj1*sj1)))+(((-16.0)*(r10*r10)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*cj2*gconst143*r11*sj1*sj2*sj5))+(((-1.0)*gconst142*gconst144*gconst147*gconst152))+(((-4.0)*cj2*gconst146*sj1*(sj2*sj2)))+((gconst143*gconst145*gconst155*sj2))+((gconst142*gconst144*gconst146*gconst153))+(((4.0)*cj2*gconst147*sj1*(sj2*sj2)))+(((-8.0)*r11*sj5*(sj2*sj2*sj2)))+(((-1.0)*gconst143*gconst146*gconst149*r11*sj5))+(((-4.0)*cj2*gconst144*gconst145*sj1*sj2))+((gconst142*gconst146*gconst151*sj2))+(((-8.0)*gconst144*gconst146*(r10*r10)*(sj5*sj5)))+(((-4.0)*gconst144*gconst147*(cj2*cj2)*(sj1*sj1)))+((gconst144*gconst146*gconst148*r11*sj5))+((gconst143*gconst147*gconst152*sj2))+(((-4.0)*gconst145*gconst149*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst143*gconst154*(r11*r11)*(sj5*sj5)))+(((-1.0)*gconst146*gconst150*(sj2*sj2)))+((gconst142*gconst144*gconst154*r11*sj5))+((gconst142*gconst144*gconst154*sj2))+(((-2.0)*gconst146*gconst150*r11*sj2*sj5))+(((8.0)*gconst144*gconst145*r00*r10*(sj5*sj5)))+((gconst143*gconst145*gconst155*r11*sj5))+(((4.0)*gconst145*gconst151*r00*r10*(sj5*sj5)))+((gconst143*gconst145*gconst147*gconst149))+(((4.0)*gconst142*(sj2*sj2*sj2)))+(((-4.0)*cj2*gconst146*r11*sj1*sj2*sj5))+(((-1.0)*gconst142*gconst145*gconst147*gconst151))+(((-4.0)*gconst142*gconst145*(sj2*sj2)))+(((4.0)*gconst145*(sj2*sj2*sj2)))+(((4.0)*gconst145*r11*sj5*(sj2*sj2)))+(((4.0)*gconst144*gconst152*r00*r10*(sj5*sj5)))+(((4.0)*cj2*gconst142*gconst146*sj1*sj2))+(((-4.0)*cj2*gconst143*sj1*(sj2*sj2)))+(((-8.0)*gconst145*r11*(r00*r00)*(sj5*sj5*sj5)))+(((4.0)*gconst142*r11*sj5*(sj2*sj2)))+((gconst145*gconst147*gconst150*sj2))+((gconst145*gconst147*gconst150*r11*sj5))+(((-1.0)*gconst143*gconst146*gconst149*sj2))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-4.0)*cj2*gconst142*gconst147*sj1*sj2))+(((-4.0)*(r11*r11)*(sj2*sj2)*(sj5*sj5)))+((gconst143*gconst147*gconst152*r11*sj5))+(((-1.0)*gconst143*gconst146*gconst153*r11*sj5))+(((-4.0)*gconst152*sj2*(r00*r00)*(sj5*sj5)))+(((4.0)*cj2*gconst147*r11*sj1*sj2*sj5))+(((-1.0)*gconst143*gconst154*(sj2*sj2))));
op[7]=((((-1.0)*x1232*x1235*x1254))+((gconst145*x1236*x1238))+((x1232*x1235*x1250))+(((-8.0)*x1224*x1268))+(((-1.0)*x1232*x1248*x1268))+((gconst143*x1229*x1232*x1251))+((x1232*x1256*x1257))+(((-8.0)*x1241*x1268))+(((-1.0)*x1247*x1263))+(((-1.0)*x1239*x1263))+(((4.0)*x1229*x1261))+((gconst143*x1262))+(((-1.0)*x1256*x1267))+((x1223*x1248*x1258))+(((-1.0)*x1228*x1232*x1238))+((gconst146*x1221*x1226*x1238))+(((-1.0)*x1229*x1238*x1247))+((x1223*x1252*x1258))+(((-2.0)*x1228*x1229*x1232))+(((-1.0)*gconst145*x1224*x1235))+((x1224*x1229*x1251))+(((-2.0)*gconst142*x1228*x1232))+((gconst146*x1262))+((x1232*x1235*x1236))+(((-1.0)*x1232*x1235*x1247))+((x1232*x1257*x1260))+(((-1.0)*gconst143*x1229*x1232*x1235))+(((-1.0)*x1236*x1263))+((x1232*x1257*x1258))+(((-1.0)*x1232*x1252*x1268))+((x1232*x1251*x1254))+(((-1.0)*x1229*x1236*x1238))+((gconst142*x1235*x1241))+(((-1.0)*x1229*x1235*x1241))+((x1221*x1238*x1265))+(((-1.0)*x1229*x1238*x1239)));
op[8]=((((-1.0)*x1221*x1244*x1265))+(((-1.0)*gconst143*gconst146*x1229*x1238))+((gconst142*sj2*x1228))+((x1237*x1254))+(((-1.0)*x1236*x1237))+((x1249*x1251*x1256))+((x1249*x1251*x1258))+(((-1.0)*x1244*x1261))+((x1249*x1250*x1259))+(((-1.0)*x1222*x1241*x1259))+(((-1.0)*gconst145*x1256*x1264))+((gconst142*x1228*x1229))+((gconst143*x1229*x1237))+(((-1.0)*x1223*x1228*x1259)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[3];
IkReal x1269=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1269);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1269);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1270=cj2*cj2;
IkReal x1271=sj1*sj1;
IkReal x1272=sj0*sj0;
IkReal x1273=cj0*cj0;
IkReal x1274=sj2*sj2;
IkReal x1275=(r22*sj5);
IkReal x1276=(x1270*x1271);
j6eval[0]=x1275;
j6eval[1]=(((x1272*x1274))+((x1272*x1276))+((x1273*x1276))+((x1273*x1274)));
j6eval[2]=IKsign(x1275);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1277=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1277);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1277);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1278=(sj4*sj5);
j6eval[0]=x1278;
j6eval[1]=IKsign(x1278);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1279=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1279);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1279);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1280=(cj4*cj5*r22*sj5);
j6eval[0]=x1280;
j6eval[1]=IKsign(x1280);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1281=((1.0)*r01);
IkReal x1282=((1.0)*r00);
IkReal x1283=(cj0*sj2*sj4);
IkReal x1284=(cj0*cj1*sj5);
IkReal x1285=(cj0*cj4*cj5*sj2);
IkReal x1286=(cj2*sj0*sj1*sj4);
IkReal x1287=(cj2*cj4*cj5*sj0*sj1);
CheckValue<IkReal> x1288=IKPowWithIntegerCheck(IKsign((cj4*cj5*r22*sj5)),-1);
if(!x1288.valid){
continue;
}
CheckValue<IkReal> x1289 = IKatan2WithCheck(IkReal((((r01*x1285))+((r00*x1283))+(((-1.0)*r11*x1284))+(((-1.0)*x1281*x1287))+(((-1.0)*x1282*x1286)))),IkReal((((r10*x1284))+((r01*x1283))+((r00*x1287))+(((-1.0)*x1281*x1286))+(((-1.0)*x1282*x1285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1289.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1288.value)))+(x1289.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1290=IKsin(j6);
IkReal x1291=IKcos(j6);
IkReal x1292=((0.36442)*cj1);
IkReal x1293=((0.069)*cj0);
IkReal x1294=((1.0)*cj0);
IkReal x1295=(cj0*sj2);
IkReal x1296=((1.0)*sj4);
IkReal x1297=((0.069)*sj0);
IkReal x1298=(cj2*sj1);
IkReal x1299=((0.37429)*sj5);
IkReal x1300=(cj4*cj5);
IkReal x1301=((1.0)*sj0);
IkReal x1302=((1.0)*cj4);
IkReal x1303=((1.0)*sj5);
IkReal x1304=(r10*x1291);
IkReal x1305=(r11*x1290);
IkReal x1306=(r00*x1290);
IkReal x1307=(r10*x1290);
IkReal x1308=(r01*x1291);
IkReal x1309=(r11*x1291);
IkReal x1310=(r00*x1291);
IkReal x1311=(r01*x1290);
IkReal x1312=(cj5*x1306);
IkReal x1313=(sj5*x1307);
IkReal x1314=(sj5*x1308);
IkReal x1315=((0.01)*cj5*x1291);
evalcond[0]=(x1295+(((-1.0)*x1303*x1309))+(((-1.0)*x1303*x1307))+(((-1.0)*x1298*x1301)));
evalcond[1]=((((-1.0)*x1303*x1308))+(((-1.0)*x1303*x1306))+(((-1.0)*sj2*x1301))+(((-1.0)*x1294*x1298)));
evalcond[2]=(((x1300*x1308))+((x1300*x1306))+((sj4*x1310))+(((-1.0)*x1296*x1311))+(((-1.0)*cj1*x1294)));
evalcond[3]=(((x1300*x1309))+((x1300*x1307))+(((-1.0)*x1296*x1305))+((sj4*x1304))+(((-1.0)*cj1*x1301)));
evalcond[4]=((((-1.0)*cj5*x1296*x1307))+(((-1.0)*cj5*x1296*x1309))+((cj4*x1304))+((cj0*cj2))+((sj0*sj1*sj2))+(((-1.0)*x1302*x1305)));
evalcond[5]=((((-1.0)*cj5*x1296*x1308))+(((-1.0)*cj2*x1301))+((cj4*x1310))+((sj1*x1295))+(((-1.0)*x1296*x1312))+(((-1.0)*x1302*x1311)));
evalcond[6]=(x1293+(((0.01)*cj5*x1308))+(((-1.0)*sj2*x1297))+(((0.01)*x1312))+(((-1.0)*x1299*x1308))+(((-1.0)*x1299*x1306))+(((-1.0)*px))+(((-1.0)*x1293*x1298))+((cj0*x1292)));
evalcond[7]=(x1297+((sj2*x1293))+(((0.01)*cj5*x1307))+(((0.01)*cj5*x1309))+((sj0*x1292))+(((-1.0)*x1299*x1309))+(((-1.0)*x1299*x1307))+(((-1.0)*py))+(((-1.0)*x1297*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1316=(cj0*sj2);
IkReal x1317=(r10*sj0);
IkReal x1318=(cj1*sj5);
IkReal x1319=(r11*sj4);
IkReal x1320=(cj2*sj1);
IkReal x1321=(cj4*cj5);
IkReal x1322=((1.0)*x1321);
IkReal x1323=(sj0*x1320);
CheckValue<IkReal> x1324 = IKatan2WithCheck(IkReal((((r10*sj4*x1316))+(((-1.0)*r11*x1322*x1323))+((r11*x1316*x1321))+(((-1.0)*r11*sj0*x1318))+(((-1.0)*sj4*x1317*x1320)))),IkReal((((x1317*x1318))+(((-1.0)*r10*x1316*x1322))+((x1317*x1320*x1321))+((x1316*x1319))+(((-1.0)*x1319*x1323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1324.valid){
continue;
}
CheckValue<IkReal> x1325=IKPowWithIntegerCheck(IKsign((sj4*sj5)),-1);
if(!x1325.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1324.value)+(((1.5707963267949)*(x1325.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1326=IKsin(j6);
IkReal x1327=IKcos(j6);
IkReal x1328=((0.36442)*cj1);
IkReal x1329=((0.069)*cj0);
IkReal x1330=((1.0)*cj0);
IkReal x1331=(cj0*sj2);
IkReal x1332=((1.0)*sj4);
IkReal x1333=((0.069)*sj0);
IkReal x1334=(cj2*sj1);
IkReal x1335=((0.37429)*sj5);
IkReal x1336=(cj4*cj5);
IkReal x1337=((1.0)*sj0);
IkReal x1338=((1.0)*cj4);
IkReal x1339=((1.0)*sj5);
IkReal x1340=(r10*x1327);
IkReal x1341=(r11*x1326);
IkReal x1342=(r00*x1326);
IkReal x1343=(r10*x1326);
IkReal x1344=(r01*x1327);
IkReal x1345=(r11*x1327);
IkReal x1346=(r00*x1327);
IkReal x1347=(r01*x1326);
IkReal x1348=(cj5*x1342);
IkReal x1349=(sj5*x1343);
IkReal x1350=(sj5*x1344);
IkReal x1351=((0.01)*cj5*x1327);
evalcond[0]=(x1331+(((-1.0)*x1334*x1337))+(((-1.0)*x1339*x1345))+(((-1.0)*x1339*x1343)));
evalcond[1]=((((-1.0)*x1330*x1334))+(((-1.0)*x1339*x1342))+(((-1.0)*x1339*x1344))+(((-1.0)*sj2*x1337)));
evalcond[2]=((((-1.0)*cj1*x1330))+((sj4*x1346))+((x1336*x1344))+((x1336*x1342))+(((-1.0)*x1332*x1347)));
evalcond[3]=((((-1.0)*cj1*x1337))+((sj4*x1340))+((x1336*x1343))+((x1336*x1345))+(((-1.0)*x1332*x1341)));
evalcond[4]=((((-1.0)*x1338*x1341))+(((-1.0)*cj5*x1332*x1343))+(((-1.0)*cj5*x1332*x1345))+((cj0*cj2))+((cj4*x1340))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj2*x1337))+(((-1.0)*x1338*x1347))+(((-1.0)*cj5*x1332*x1344))+((sj1*x1331))+((cj4*x1346))+(((-1.0)*x1332*x1348)));
evalcond[6]=(x1329+(((0.01)*x1348))+(((-1.0)*x1335*x1344))+(((-1.0)*x1335*x1342))+(((-1.0)*px))+(((-1.0)*x1329*x1334))+(((-1.0)*sj2*x1333))+(((0.01)*cj5*x1344))+((cj0*x1328)));
evalcond[7]=(x1333+((sj2*x1329))+(((-1.0)*x1335*x1345))+(((-1.0)*x1335*x1343))+(((-1.0)*py))+(((-1.0)*x1333*x1334))+(((0.01)*cj5*x1345))+(((0.01)*cj5*x1343))+((sj0*x1328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1352=(cj0*sj2);
IkReal x1353=((1.0)*r11);
IkReal x1354=(sj0*sj2);
IkReal x1355=(cj2*sj0*sj1);
IkReal x1356=(cj0*cj2*sj1);
CheckValue<IkReal> x1357 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1352))+((r01*x1355))+(((-1.0)*x1353*x1356))+(((-1.0)*x1353*x1354)))),IkReal(((((-1.0)*r00*x1355))+((r10*x1354))+((r10*x1356))+((r00*x1352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1357.valid){
continue;
}
CheckValue<IkReal> x1358=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1358.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1357.value)+(((1.5707963267949)*(x1358.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1359=IKsin(j6);
IkReal x1360=IKcos(j6);
IkReal x1361=((0.36442)*cj1);
IkReal x1362=((0.069)*cj0);
IkReal x1363=((1.0)*cj0);
IkReal x1364=(cj0*sj2);
IkReal x1365=((1.0)*sj4);
IkReal x1366=((0.069)*sj0);
IkReal x1367=(cj2*sj1);
IkReal x1368=((0.37429)*sj5);
IkReal x1369=(cj4*cj5);
IkReal x1370=((1.0)*sj0);
IkReal x1371=((1.0)*cj4);
IkReal x1372=((1.0)*sj5);
IkReal x1373=(r10*x1360);
IkReal x1374=(r11*x1359);
IkReal x1375=(r00*x1359);
IkReal x1376=(r10*x1359);
IkReal x1377=(r01*x1360);
IkReal x1378=(r11*x1360);
IkReal x1379=(r00*x1360);
IkReal x1380=(r01*x1359);
IkReal x1381=(cj5*x1375);
IkReal x1382=(sj5*x1376);
IkReal x1383=(sj5*x1377);
IkReal x1384=((0.01)*cj5*x1360);
evalcond[0]=(x1364+(((-1.0)*x1372*x1376))+(((-1.0)*x1372*x1378))+(((-1.0)*x1367*x1370)));
evalcond[1]=((((-1.0)*x1372*x1377))+(((-1.0)*x1372*x1375))+(((-1.0)*sj2*x1370))+(((-1.0)*x1363*x1367)));
evalcond[2]=(((sj4*x1379))+(((-1.0)*cj1*x1363))+((x1369*x1375))+((x1369*x1377))+(((-1.0)*x1365*x1380)));
evalcond[3]=((((-1.0)*x1365*x1374))+((sj4*x1373))+(((-1.0)*cj1*x1370))+((x1369*x1376))+((x1369*x1378)));
evalcond[4]=((((-1.0)*cj5*x1365*x1376))+(((-1.0)*cj5*x1365*x1378))+(((-1.0)*x1371*x1374))+((cj4*x1373))+((cj0*cj2))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj5*x1365*x1377))+(((-1.0)*cj2*x1370))+((sj1*x1364))+((cj4*x1379))+(((-1.0)*x1371*x1380))+(((-1.0)*x1365*x1381)));
evalcond[6]=(x1362+(((0.01)*cj5*x1377))+(((-1.0)*sj2*x1366))+(((-1.0)*px))+(((-1.0)*x1362*x1367))+(((0.01)*x1381))+((cj0*x1361))+(((-1.0)*x1368*x1375))+(((-1.0)*x1368*x1377)));
evalcond[7]=((((-1.0)*x1366*x1367))+x1366+((sj0*x1361))+(((0.01)*cj5*x1376))+(((0.01)*cj5*x1378))+(((-1.0)*py))+((sj2*x1362))+(((-1.0)*x1368*x1376))+(((-1.0)*x1368*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1385=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1385);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1385);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1386=(r22*sj5);
j4eval[0]=x1386;
j4eval[1]=((IKabs((cj1*sj2)))+(IKabs((cj1*cj2))));
j4eval[2]=IKsign(x1386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1387=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1387.valid){
continue;
}
CheckValue<IkReal> x1388 = IKatan2WithCheck(IkReal((cj1*sj2)),IkReal(((-1.0)*cj1*cj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1387.value)))+(x1388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1389=((1.0)*r22*sj5);
evalcond[0]=((((-1.0)*x1389*(IKsin(j4))))+((cj1*sj2)));
evalcond[1]=((((-1.0)*cj1*cj2))+(((-1.0)*x1389*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
IkReal x1390=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1390);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1390);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1391=sj1*sj1;
IkReal x1392=sj2*sj2;
IkReal x1393=cj2*cj2;
IkReal x1394=(cj1*cj4);
IkReal x1395=((16.0)*cj2);
IkReal x1396=(sj1*sj2);
IkReal x1397=((4.0)*r01);
IkReal x1398=((8.0)*r00);
IkReal x1399=((8.0)*cj2);
IkReal x1400=((16.0)*r00);
IkReal x1401=((4.0)*cj2);
IkReal x1402=(sj5*x1393);
IkReal x1403=(cj1*cj5*sj4);
IkReal x1404=(r10*x1403);
IkReal x1405=(r00*sj5*x1391*x1392);
IkReal x1406=((((4.0)*r00*x1394*x1396))+((r10*x1394*x1401)));
IkReal x1407=(((x1396*x1397*x1403))+((r11*x1401*x1403))+((x1397*x1402))+((sj5*x1391*x1392*x1397)));
j6eval[0]=((((0.5)*(IKabs(((((-1.0)*x1406))+x1407)))))+(IKabs(((((-1.0)*x1407))+x1406)))+(((0.5)*(IKabs(((((16.0)*r01*x1394*x1396))+((x1395*x1404))+((r11*x1394*x1395))+((sj5*x1391*x1392*x1400))+((x1396*x1400*x1403))+((x1400*x1402)))))))+(IKabs((((x1396*x1398*x1403))+((x1399*x1404))+(((8.0)*r01*x1394*x1396))+((r11*x1394*x1399))+((sj5*x1391*x1392*x1398))+((x1398*x1402))))));
if( IKabs(j6eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x1408=sj1*sj1;
IkReal x1409=sj2*sj2;
IkReal x1410=cj2*cj2;
IkReal x1411=(cj1*cj4);
IkReal x1412=((16.0)*cj2);
IkReal x1413=(sj1*sj2);
IkReal x1414=((4.0)*r01);
IkReal x1415=((8.0)*cj2);
IkReal x1416=((16.0)*r00);
IkReal x1417=((4.0)*cj2);
IkReal x1418=((8.0)*r00*sj5);
IkReal x1419=(sj5*x1410);
IkReal x1420=(cj1*cj5*sj4);
IkReal x1421=(x1408*x1409);
IkReal x1422=(r10*x1420);
IkReal x1423=((((4.0)*r00*x1411*x1413))+((r10*x1411*x1417)));
IkReal x1424=(((x1413*x1414*x1420))+((sj5*x1414*x1421))+((r11*x1417*x1420))+((x1414*x1419)));
IkReal x1425=(x1423+(((-1.0)*x1424)));
IkReal x1426=(x1424+(((-1.0)*x1423)));
IkReal x1427=(((x1415*x1422))+((r11*x1411*x1415))+((x1410*x1418))+(((8.0)*r01*x1411*x1413))+((x1418*x1421))+(((8.0)*r00*x1413*x1420)));
op[0]=x1425;
op[1]=x1427;
op[2]=x1425;
op[3]=(((sj5*x1416*x1421))+((x1416*x1419))+((x1413*x1416*x1420))+((r11*x1411*x1412))+(((16.0)*r01*x1411*x1413))+((x1412*x1422)));
op[4]=x1426;
op[5]=x1427;
op[6]=x1426;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j0eval[4];
IkReal x1428=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1428);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1428);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=sj5;
j0eval[3]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1429=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1429);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1429);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1430=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1430);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1430);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=sj1;
j0eval[2]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(cj1,-1);
if(!x1437.valid){
continue;
}
IkReal x1431=x1437.value;
IkReal x1432=(cj1*sj6);
IkReal x1433=(cj5*sj4);
IkReal x1434=(cj1*cj6);
IkReal x1435=(cj6*r01*sj5);
IkReal x1436=(r00*sj5*sj6);
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(sj1,-1);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(sj2,-1);
if(!x1439.valid){
continue;
}
if( IKabs((x1431*(x1438.value)*(x1439.value)*((((cj4*r11*x1432))+((r11*x1433*x1434))+(((-1.0)*cj4*r10*x1434))+((cj2*x1436))+((cj2*x1435))+((r10*x1432*x1433)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1431*(((((-1.0)*x1436))+(((-1.0)*x1435)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1431*(x1438.value)*(x1439.value)*((((cj4*r11*x1432))+((r11*x1433*x1434))+(((-1.0)*cj4*r10*x1434))+((cj2*x1436))+((cj2*x1435))+((r10*x1432*x1433))))))+IKsqr((x1431*(((((-1.0)*x1436))+(((-1.0)*x1435))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1431*(x1438.value)*(x1439.value)*((((cj4*r11*x1432))+((r11*x1433*x1434))+(((-1.0)*cj4*r10*x1434))+((cj2*x1436))+((cj2*x1435))+((r10*x1432*x1433))))), (x1431*(((((-1.0)*x1436))+(((-1.0)*x1435))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1440=IKsin(j0);
IkReal x1441=IKcos(j0);
IkReal x1442=((1.0)*cj5);
IkReal x1443=(cj6*sj4);
IkReal x1444=(cj4*sj6);
IkReal x1445=((0.37429)*sj5);
IkReal x1446=(r10*sj6);
IkReal x1447=(cj2*sj1);
IkReal x1448=((1.0)*r00);
IkReal x1449=((0.36442)*cj1);
IkReal x1450=(cj6*r01);
IkReal x1451=((0.01)*cj5);
IkReal x1452=((1.0)*sj5);
IkReal x1453=(cj6*r11);
IkReal x1454=(cj4*cj6);
IkReal x1455=(r00*sj6);
IkReal x1456=(sj4*sj6);
IkReal x1457=((0.069)*x1440);
IkReal x1458=((1.0)*x1441);
IkReal x1459=(sj2*x1441);
IkReal x1460=((0.069)*x1441);
IkReal x1461=((1.0)*x1440);
evalcond[0]=((((-1.0)*cj1*x1458))+(((-1.0)*sj5*sj6*x1448))+(((-1.0)*x1450*x1452)));
evalcond[1]=((((-1.0)*cj1*x1461))+(((-1.0)*x1446*x1452))+(((-1.0)*x1452*x1453)));
evalcond[2]=(((r10*x1454))+(((-1.0)*sj4*x1442*x1446))+((sj1*sj2*x1440))+(((-1.0)*r11*x1444))+((cj2*x1441))+(((-1.0)*r11*x1442*x1443)));
evalcond[3]=((((-1.0)*r01*x1442*x1443))+(((-1.0)*cj2*x1461))+((r00*x1454))+((sj1*x1459))+(((-1.0)*sj4*x1442*x1455))+(((-1.0)*r01*x1444)));
evalcond[4]=(((r11*x1456))+(((-1.0)*cj4*x1442*x1453))+x1459+(((-1.0)*r10*x1443))+(((-1.0)*x1447*x1461))+(((-1.0)*r10*x1442*x1444)));
evalcond[5]=((((-1.0)*x1447*x1458))+(((-1.0)*cj4*x1442*x1450))+((r01*x1456))+(((-1.0)*sj2*x1461))+(((-1.0)*x1443*x1448))+(((-1.0)*r00*x1442*x1444)));
evalcond[6]=(((x1441*x1449))+((x1450*x1451))+(((-1.0)*x1445*x1450))+(((-1.0)*x1445*x1455))+(((-1.0)*px))+x1460+(((-1.0)*sj2*x1457))+(((-1.0)*x1447*x1460))+((x1451*x1455)));
evalcond[7]=((((0.069)*x1459))+(((-1.0)*x1447*x1457))+((x1446*x1451))+(((-1.0)*x1445*x1446))+((x1440*x1449))+(((-1.0)*x1445*x1453))+(((-1.0)*py))+x1457+((x1451*x1453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1470=IKPowWithIntegerCheck(cj1,-1);
if(!x1470.valid){
continue;
}
IkReal x1462=x1470.value;
IkReal x1463=(sj1*sj2);
IkReal x1464=(cj1*sj6);
IkReal x1465=(cj5*sj4);
IkReal x1466=((1.0)*r10);
IkReal x1467=(cj1*cj6);
IkReal x1468=(sj5*sj6);
IkReal x1469=(cj6*r11*sj5);
CheckValue<IkReal> x1471=IKPowWithIntegerCheck(cj2,-1);
if(!x1471.valid){
continue;
}
if( IKabs((x1462*(((((-1.0)*x1466*x1468))+(((-1.0)*x1469)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1462*(x1471.value)*((((r10*x1464*x1465))+((x1463*x1469))+((cj4*r11*x1464))+((r10*x1463*x1468))+(((-1.0)*cj4*x1466*x1467))+((r11*x1465*x1467)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1462*(((((-1.0)*x1466*x1468))+(((-1.0)*x1469))))))+IKsqr((x1462*(x1471.value)*((((r10*x1464*x1465))+((x1463*x1469))+((cj4*r11*x1464))+((r10*x1463*x1468))+(((-1.0)*cj4*x1466*x1467))+((r11*x1465*x1467))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1462*(((((-1.0)*x1466*x1468))+(((-1.0)*x1469))))), (x1462*(x1471.value)*((((r10*x1464*x1465))+((x1463*x1469))+((cj4*r11*x1464))+((r10*x1463*x1468))+(((-1.0)*cj4*x1466*x1467))+((r11*x1465*x1467))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1472=IKsin(j0);
IkReal x1473=IKcos(j0);
IkReal x1474=((1.0)*cj5);
IkReal x1475=(cj6*sj4);
IkReal x1476=(cj4*sj6);
IkReal x1477=((0.37429)*sj5);
IkReal x1478=(r10*sj6);
IkReal x1479=(cj2*sj1);
IkReal x1480=((1.0)*r00);
IkReal x1481=((0.36442)*cj1);
IkReal x1482=(cj6*r01);
IkReal x1483=((0.01)*cj5);
IkReal x1484=((1.0)*sj5);
IkReal x1485=(cj6*r11);
IkReal x1486=(cj4*cj6);
IkReal x1487=(r00*sj6);
IkReal x1488=(sj4*sj6);
IkReal x1489=((0.069)*x1472);
IkReal x1490=((1.0)*x1473);
IkReal x1491=(sj2*x1473);
IkReal x1492=((0.069)*x1473);
IkReal x1493=((1.0)*x1472);
evalcond[0]=((((-1.0)*x1482*x1484))+(((-1.0)*cj1*x1490))+(((-1.0)*sj5*sj6*x1480)));
evalcond[1]=((((-1.0)*x1484*x1485))+(((-1.0)*cj1*x1493))+(((-1.0)*x1478*x1484)));
evalcond[2]=(((r10*x1486))+(((-1.0)*sj4*x1474*x1478))+((sj1*sj2*x1472))+((cj2*x1473))+(((-1.0)*r11*x1476))+(((-1.0)*r11*x1474*x1475)));
evalcond[3]=((((-1.0)*r01*x1476))+(((-1.0)*cj2*x1493))+((sj1*x1491))+(((-1.0)*sj4*x1474*x1487))+((r00*x1486))+(((-1.0)*r01*x1474*x1475)));
evalcond[4]=((((-1.0)*x1479*x1493))+(((-1.0)*r10*x1474*x1476))+((r11*x1488))+(((-1.0)*cj4*x1474*x1485))+x1491+(((-1.0)*r10*x1475)));
evalcond[5]=((((-1.0)*x1479*x1490))+((r01*x1488))+(((-1.0)*sj2*x1493))+(((-1.0)*cj4*x1474*x1482))+(((-1.0)*x1475*x1480))+(((-1.0)*r00*x1474*x1476)));
evalcond[6]=((((-1.0)*x1479*x1492))+((x1482*x1483))+((x1473*x1481))+(((-1.0)*px))+((x1483*x1487))+(((-1.0)*sj2*x1489))+x1492+(((-1.0)*x1477*x1487))+(((-1.0)*x1477*x1482)));
evalcond[7]=((((-1.0)*x1479*x1489))+((x1472*x1481))+(((-1.0)*x1477*x1478))+(((-1.0)*py))+((x1483*x1485))+(((0.069)*x1491))+x1489+(((-1.0)*x1477*x1485))+((x1478*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1494=((1.0)*cj6*sj5);
IkReal x1495=((1.0)*sj5*sj6);
CheckValue<IkReal> x1496 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1494))+(((-1.0)*r10*x1495)))),IkReal(((((-1.0)*r00*x1495))+(((-1.0)*r01*x1494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1496.valid){
continue;
}
CheckValue<IkReal> x1497=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x1497.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1496.value)+(((1.5707963267949)*(x1497.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1498=IKsin(j0);
IkReal x1499=IKcos(j0);
IkReal x1500=((1.0)*cj5);
IkReal x1501=(cj6*sj4);
IkReal x1502=(cj4*sj6);
IkReal x1503=((0.37429)*sj5);
IkReal x1504=(r10*sj6);
IkReal x1505=(cj2*sj1);
IkReal x1506=((1.0)*r00);
IkReal x1507=((0.36442)*cj1);
IkReal x1508=(cj6*r01);
IkReal x1509=((0.01)*cj5);
IkReal x1510=((1.0)*sj5);
IkReal x1511=(cj6*r11);
IkReal x1512=(cj4*cj6);
IkReal x1513=(r00*sj6);
IkReal x1514=(sj4*sj6);
IkReal x1515=((0.069)*x1498);
IkReal x1516=((1.0)*x1499);
IkReal x1517=(sj2*x1499);
IkReal x1518=((0.069)*x1499);
IkReal x1519=((1.0)*x1498);
evalcond[0]=((((-1.0)*cj1*x1516))+(((-1.0)*sj5*sj6*x1506))+(((-1.0)*x1508*x1510)));
evalcond[1]=((((-1.0)*cj1*x1519))+(((-1.0)*x1504*x1510))+(((-1.0)*x1510*x1511)));
evalcond[2]=(((cj2*x1499))+(((-1.0)*r11*x1500*x1501))+((r10*x1512))+(((-1.0)*sj4*x1500*x1504))+((sj1*sj2*x1498))+(((-1.0)*r11*x1502)));
evalcond[3]=((((-1.0)*sj4*x1500*x1513))+(((-1.0)*r01*x1502))+((r00*x1512))+((sj1*x1517))+(((-1.0)*cj2*x1519))+(((-1.0)*r01*x1500*x1501)));
evalcond[4]=(((r11*x1514))+(((-1.0)*r10*x1501))+(((-1.0)*r10*x1500*x1502))+(((-1.0)*cj4*x1500*x1511))+x1517+(((-1.0)*x1505*x1519)));
evalcond[5]=((((-1.0)*x1501*x1506))+((r01*x1514))+(((-1.0)*cj4*x1500*x1508))+(((-1.0)*r00*x1500*x1502))+(((-1.0)*x1505*x1516))+(((-1.0)*sj2*x1519)));
evalcond[6]=(((x1509*x1513))+((x1499*x1507))+((x1508*x1509))+(((-1.0)*px))+x1518+(((-1.0)*x1503*x1508))+(((-1.0)*x1503*x1513))+(((-1.0)*x1505*x1518))+(((-1.0)*sj2*x1515)));
evalcond[7]=(((x1509*x1511))+((x1498*x1507))+((x1504*x1509))+(((-1.0)*py))+x1515+(((-1.0)*x1503*x1504))+(((-1.0)*x1503*x1511))+(((-1.0)*x1505*x1515))+(((0.069)*x1517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1520=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1520);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1520);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1521=(r22*sj5);
j4eval[0]=x1521;
j4eval[1]=((IKabs((cj1*sj2)))+(IKabs((cj1*cj2))));
j4eval[2]=IKsign(x1521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1522 = IKatan2WithCheck(IkReal((cj1*sj2)),IkReal((cj1*cj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1522.valid){
continue;
}
CheckValue<IkReal> x1523=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1522.value)+(((1.5707963267949)*(x1523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1524=(r22*sj5);
evalcond[0]=(((cj1*sj2))+(((-1.0)*x1524*(IKsin(j4)))));
evalcond[1]=((((-1.0)*cj1*cj2))+((x1524*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
IkReal x1525=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1525);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1525);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1526=sj1*sj1;
IkReal x1527=sj2*sj2;
IkReal x1528=cj2*cj2;
IkReal x1529=(cj5*r10);
IkReal x1530=(r11*sj1);
IkReal x1531=((8.0)*r00);
IkReal x1532=(cj1*cj5);
IkReal x1533=((16.0)*sj1);
IkReal x1534=(sj2*sj4);
IkReal x1535=((16.0)*r00);
IkReal x1536=(cj4*r11);
IkReal x1537=((4.0)*r01);
IkReal x1538=((8.0)*cj1);
IkReal x1539=((16.0)*cj1);
IkReal x1540=(sj5*x1528);
IkReal x1541=((4.0)*cj2*r11);
IkReal x1542=(sj5*x1527);
IkReal x1543=(cj2*x1538);
IkReal x1544=((8.0)*r10*sj1);
IkReal x1545=(cj2*x1539);
IkReal x1546=(sj4*x1545);
IkReal x1547=(cj1*cj4*sj1*sj2);
IkReal x1548=((4.0)*x1542);
IkReal x1549=((4.0)*cj1*cj4*r10);
IkReal x1550=(((sj1*x1532*x1534*x1537))+((sj4*x1532*x1541)));
IkReal x1551=(((x1530*x1548))+(((4.0)*x1530*x1540))+((sj2*x1549)));
IkReal x1552=((((4.0)*cj1*cj2*r10*sj4))+(((4.0)*r11*x1532*x1534))+(((4.0)*cj2*x1532*x1536)));
IkReal x1553=(((x1537*x1540))+((cj2*x1549))+((x1526*x1537*x1542))+(((4.0)*r00*x1547)));
j6eval[0]=((((0.5)*(IKabs((((sj2*x1536*x1539))+(((-1.0)*r10*x1533*x1540))+(((-1.0)*r10*x1533*x1542))+(((-1.0)*r11*x1546))+((cj4*x1529*x1545))+((x1529*x1534*x1539)))))))+(((0.5)*(IKabs((x1552+(((-1.0)*x1551)))))))+(IKabs((x1551+(((-1.0)*x1552)))))+(((0.5)*(IKabs((((cj1*cj4*r01*sj2*x1533))+(((-1.0)*x1526*x1535*x1542))+(((-1.0)*x1535*x1540))+((x1536*x1545))+((r00*x1532*x1533*x1534))+((x1529*x1546)))))))+(IKabs((x1553+(((-1.0)*x1550)))))+(IKabs(((((-1.0)*x1540*x1544))+(((-1.0)*r11*sj4*x1543))+((sj2*x1536*x1538))+(((-1.0)*x1542*x1544))+((cj4*x1529*x1543))+((x1529*x1534*x1538)))))+(IKabs((((cj4*r01*sj1*sj2*x1538))+((x1536*x1543))+(((-1.0)*x1526*x1531*x1542))+(((-1.0)*x1531*x1540))+((sj1*x1531*x1532*x1534))+((sj4*x1529*x1543)))))+(((0.5)*(IKabs((x1550+(((-1.0)*x1553))))))));
if( IKabs(j6eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j6evalpoly[1];
IkReal x1554=sj2*sj2;
IkReal x1555=cj2*cj2;
IkReal x1556=((8.0)*r10);
IkReal x1557=(cj1*r11);
IkReal x1558=(cj4*sj2);
IkReal x1559=(cj2*sj4);
IkReal x1560=(cj1*r10);
IkReal x1561=((4.0)*r11);
IkReal x1562=((16.0)*r10);
IkReal x1563=(cj5*sj2*sj4);
IkReal x1564=(cj2*cj4*cj5);
IkReal x1565=(sj1*sj5*x1554);
IkReal x1566=(sj1*sj5*x1555);
IkReal x1567=((((4.0)*x1559*x1560))+(((4.0)*x1557*x1564))+(((4.0)*x1557*x1563)));
IkReal x1568=(((x1561*x1565))+((x1561*x1566))+(((4.0)*x1558*x1560)));
IkReal x1569=(x1568+(((-1.0)*x1567)));
IkReal x1570=(((cj1*x1556*x1564))+((cj1*x1556*x1563))+(((-8.0)*x1557*x1559))+(((-1.0)*x1556*x1566))+(((-1.0)*x1556*x1565))+(((8.0)*x1557*x1558)));
IkReal x1571=(x1567+(((-1.0)*x1568)));
op[0]=x1569;
op[1]=x1570;
op[2]=x1569;
op[3]=((((-1.0)*x1562*x1565))+(((-1.0)*x1562*x1566))+(((-16.0)*x1557*x1559))+(((16.0)*x1560*x1563))+(((16.0)*x1560*x1564))+(((16.0)*x1557*x1558)));
op[4]=x1571;
op[5]=x1570;
op[6]=x1571;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x1572=sj1*sj1;
IkReal x1573=sj2*sj2;
IkReal x1574=cj2*cj2;
IkReal x1575=(sj1*sj2);
IkReal x1576=(cj2*r10);
IkReal x1577=(cj2*r11);
IkReal x1578=(cj1*cj4);
IkReal x1579=((8.0)*r00*sj5);
IkReal x1580=(cj1*cj5*sj4);
IkReal x1581=((4.0)*r01*sj5);
IkReal x1582=((16.0)*r00*sj5);
IkReal x1583=(x1575*x1578);
IkReal x1584=((16.0)*x1580);
IkReal x1585=(x1572*x1573);
IkReal x1586=((4.0)*x1577*x1580);
IkReal x1587=((4.0)*r01*x1575*x1580);
IkReal x1588=(x1586+x1587);
IkReal x1589=((((4.0)*r00*x1583))+(((4.0)*x1576*x1578))+((x1574*x1581))+((x1581*x1585)));
IkReal x1590=((((-1.0)*x1588))+x1589);
IkReal x1591=((((8.0)*x1577*x1578))+(((8.0)*x1576*x1580))+(((8.0)*r00*x1575*x1580))+(((-1.0)*x1574*x1579))+(((-1.0)*x1579*x1585))+(((8.0)*r01*x1583)));
j6evalpoly[0]=((((-1.0)*x1589))+(((htj6*htj6*htj6)*(((((16.0)*x1577*x1578))+((x1576*x1584))+((r00*x1575*x1584))+(((-1.0)*x1574*x1582))+(((16.0)*r01*x1583))+(((-1.0)*x1582*x1585))))))+((x1590*(htj6*htj6*htj6*htj6)))+(((htj6*htj6)*(((((-1.0)*x1589))+x1588))))+x1588+((htj6*x1591))+((x1590*(htj6*htj6*htj6*htj6*htj6*htj6)))+((x1591*(htj6*htj6*htj6*htj6*htj6))));
if( IKabs(j6evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j0eval[4];
IkReal x1592=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1592);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1592);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=sj5;
j0eval[3]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1593=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1593);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1593);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1594=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1594);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1594);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1601=IKPowWithIntegerCheck(cj1,-1);
if(!x1601.valid){
continue;
}
IkReal x1595=x1601.value;
IkReal x1596=(cj1*r10);
IkReal x1597=(cj4*cj5);
IkReal x1598=(cj1*r11);
IkReal x1599=(cj6*r01*sj5);
IkReal x1600=(r00*sj5*sj6);
CheckValue<IkReal> x1602=IKPowWithIntegerCheck(cj2,-1);
if(!x1602.valid){
continue;
}
CheckValue<IkReal> x1603=IKPowWithIntegerCheck(sj1,-1);
if(!x1603.valid){
continue;
}
if( IKabs((x1595*(x1602.value)*(x1603.value)*((((cj6*sj4*x1596))+((sj2*x1600))+((sj2*x1599))+((sj6*x1596*x1597))+((cj6*x1597*x1598))+(((-1.0)*sj4*sj6*x1598)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1595*((x1600+x1599)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1595*(x1602.value)*(x1603.value)*((((cj6*sj4*x1596))+((sj2*x1600))+((sj2*x1599))+((sj6*x1596*x1597))+((cj6*x1597*x1598))+(((-1.0)*sj4*sj6*x1598))))))+IKsqr((x1595*((x1600+x1599))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1595*(x1602.value)*(x1603.value)*((((cj6*sj4*x1596))+((sj2*x1600))+((sj2*x1599))+((sj6*x1596*x1597))+((cj6*x1597*x1598))+(((-1.0)*sj4*sj6*x1598))))), (x1595*((x1600+x1599))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1604=IKcos(j0);
IkReal x1605=IKsin(j0);
IkReal x1606=((1.0)*sj4);
IkReal x1607=(cj6*sj4);
IkReal x1608=((0.37429)*sj5);
IkReal x1609=(r10*sj6);
IkReal x1610=((0.36442)*cj1);
IkReal x1611=(cj6*r11);
IkReal x1612=(r01*sj6);
IkReal x1613=(r00*sj6);
IkReal x1614=((0.069)*sj2);
IkReal x1615=(cj6*r01);
IkReal x1616=((1.0)*sj1);
IkReal x1617=((0.01)*cj5);
IkReal x1618=((1.0)*cj1);
IkReal x1619=(cj4*cj6);
IkReal x1620=(cj4*cj5);
IkReal x1621=((1.0)*cj4);
IkReal x1622=(r11*sj6);
IkReal x1623=(cj5*x1611);
IkReal x1624=(cj2*x1604);
IkReal x1625=((0.069)*x1605);
IkReal x1626=(sj2*x1604);
IkReal x1627=((1.0)*x1605);
evalcond[0]=(((sj5*x1613))+((sj5*x1615))+(((-1.0)*x1604*x1618)));
evalcond[1]=(((sj5*x1611))+((sj5*x1609))+(((-1.0)*x1605*x1618)));
evalcond[2]=((((-1.0)*cj2*x1605*x1616))+x1626+((x1609*x1620))+((r10*x1607))+((x1611*x1620))+(((-1.0)*x1606*x1622)));
evalcond[3]=(x1624+(((-1.0)*cj5*x1606*x1609))+(((-1.0)*x1621*x1622))+((sj1*sj2*x1605))+((r10*x1619))+(((-1.0)*x1606*x1623)));
evalcond[4]=((((-1.0)*x1606*x1612))+(((-1.0)*x1616*x1624))+((r00*x1607))+((x1615*x1620))+((x1613*x1620))+(((-1.0)*sj2*x1627)));
evalcond[5]=((((-1.0)*cj2*x1627))+((r00*x1619))+((sj1*x1626))+(((-1.0)*cj5*x1606*x1615))+(((-1.0)*cj5*x1606*x1613))+(((-1.0)*x1612*x1621)));
evalcond[6]=(((x1615*x1617))+(((-1.0)*px))+(((0.069)*x1604))+(((-0.069)*sj1*x1624))+((x1604*x1610))+(((-1.0)*x1605*x1614))+(((-1.0)*x1608*x1613))+(((-1.0)*x1608*x1615))+((x1613*x1617)));
evalcond[7]=(x1625+((x1609*x1617))+(((-1.0)*cj2*sj1*x1625))+(((-1.0)*py))+((x1604*x1614))+(((-1.0)*x1608*x1611))+((x1605*x1610))+(((-1.0)*x1608*x1609))+((x1611*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(cj1,-1);
if(!x1635.valid){
continue;
}
IkReal x1628=x1635.value;
IkReal x1629=(cj2*sj1);
IkReal x1630=(cj4*cj5);
IkReal x1631=(cj1*sj6);
IkReal x1632=(r10*sj5*sj6);
IkReal x1633=((1.0)*cj1*cj6);
IkReal x1634=(cj6*r11*sj5);
CheckValue<IkReal> x1636=IKPowWithIntegerCheck(sj2,-1);
if(!x1636.valid){
continue;
}
if( IKabs((x1628*((x1632+x1634)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1628*(x1636.value)*(((((-1.0)*r10*x1630*x1631))+(((-1.0)*r10*sj4*x1633))+((x1629*x1634))+((x1629*x1632))+((r11*sj4*x1631))+(((-1.0)*r11*x1630*x1633)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1628*((x1632+x1634))))+IKsqr((x1628*(x1636.value)*(((((-1.0)*r10*x1630*x1631))+(((-1.0)*r10*sj4*x1633))+((x1629*x1634))+((x1629*x1632))+((r11*sj4*x1631))+(((-1.0)*r11*x1630*x1633))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1628*((x1632+x1634))), (x1628*(x1636.value)*(((((-1.0)*r10*x1630*x1631))+(((-1.0)*r10*sj4*x1633))+((x1629*x1634))+((x1629*x1632))+((r11*sj4*x1631))+(((-1.0)*r11*x1630*x1633))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1637=IKcos(j0);
IkReal x1638=IKsin(j0);
IkReal x1639=((1.0)*sj4);
IkReal x1640=(cj6*sj4);
IkReal x1641=((0.37429)*sj5);
IkReal x1642=(r10*sj6);
IkReal x1643=((0.36442)*cj1);
IkReal x1644=(cj6*r11);
IkReal x1645=(r01*sj6);
IkReal x1646=(r00*sj6);
IkReal x1647=((0.069)*sj2);
IkReal x1648=(cj6*r01);
IkReal x1649=((1.0)*sj1);
IkReal x1650=((0.01)*cj5);
IkReal x1651=((1.0)*cj1);
IkReal x1652=(cj4*cj6);
IkReal x1653=(cj4*cj5);
IkReal x1654=((1.0)*cj4);
IkReal x1655=(r11*sj6);
IkReal x1656=(cj5*x1644);
IkReal x1657=(cj2*x1637);
IkReal x1658=((0.069)*x1638);
IkReal x1659=(sj2*x1637);
IkReal x1660=((1.0)*x1638);
evalcond[0]=((((-1.0)*x1637*x1651))+((sj5*x1646))+((sj5*x1648)));
evalcond[1]=(((sj5*x1644))+((sj5*x1642))+(((-1.0)*x1638*x1651)));
evalcond[2]=((((-1.0)*cj2*x1638*x1649))+((r10*x1640))+x1659+((x1644*x1653))+(((-1.0)*x1639*x1655))+((x1642*x1653)));
evalcond[3]=(((r10*x1652))+(((-1.0)*x1654*x1655))+x1657+((sj1*sj2*x1638))+(((-1.0)*x1639*x1656))+(((-1.0)*cj5*x1639*x1642)));
evalcond[4]=((((-1.0)*sj2*x1660))+((x1648*x1653))+((x1646*x1653))+(((-1.0)*x1639*x1645))+((r00*x1640))+(((-1.0)*x1649*x1657)));
evalcond[5]=(((sj1*x1659))+(((-1.0)*x1645*x1654))+((r00*x1652))+(((-1.0)*cj5*x1639*x1648))+(((-1.0)*cj5*x1639*x1646))+(((-1.0)*cj2*x1660)));
evalcond[6]=((((-1.0)*x1641*x1648))+(((-1.0)*x1641*x1646))+((x1637*x1643))+((x1648*x1650))+(((-1.0)*x1638*x1647))+(((0.069)*x1637))+((x1646*x1650))+(((-1.0)*px))+(((-0.069)*sj1*x1657)));
evalcond[7]=((((-1.0)*x1641*x1642))+(((-1.0)*x1641*x1644))+((x1637*x1647))+x1658+(((-1.0)*cj2*sj1*x1658))+((x1644*x1650))+(((-1.0)*py))+((x1642*x1650))+((x1638*x1643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1661=(cj6*sj5);
IkReal x1662=(sj5*sj6);
CheckValue<IkReal> x1663=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x1663.valid){
continue;
}
CheckValue<IkReal> x1664 = IKatan2WithCheck(IkReal((((r10*x1662))+((r11*x1661)))),IkReal((((r00*x1662))+((r01*x1661)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1664.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1663.value)))+(x1664.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1665=IKcos(j0);
IkReal x1666=IKsin(j0);
IkReal x1667=((1.0)*sj4);
IkReal x1668=(cj6*sj4);
IkReal x1669=((0.37429)*sj5);
IkReal x1670=(r10*sj6);
IkReal x1671=((0.36442)*cj1);
IkReal x1672=(cj6*r11);
IkReal x1673=(r01*sj6);
IkReal x1674=(r00*sj6);
IkReal x1675=((0.069)*sj2);
IkReal x1676=(cj6*r01);
IkReal x1677=((1.0)*sj1);
IkReal x1678=((0.01)*cj5);
IkReal x1679=((1.0)*cj1);
IkReal x1680=(cj4*cj6);
IkReal x1681=(cj4*cj5);
IkReal x1682=((1.0)*cj4);
IkReal x1683=(r11*sj6);
IkReal x1684=(cj5*x1672);
IkReal x1685=(cj2*x1665);
IkReal x1686=((0.069)*x1666);
IkReal x1687=(sj2*x1665);
IkReal x1688=((1.0)*x1666);
evalcond[0]=(((sj5*x1674))+((sj5*x1676))+(((-1.0)*x1665*x1679)));
evalcond[1]=(((sj5*x1670))+((sj5*x1672))+(((-1.0)*x1666*x1679)));
evalcond[2]=(((r10*x1668))+((x1672*x1681))+((x1670*x1681))+(((-1.0)*cj2*x1666*x1677))+x1687+(((-1.0)*x1667*x1683)));
evalcond[3]=(((r10*x1680))+(((-1.0)*x1682*x1683))+x1685+((sj1*sj2*x1666))+(((-1.0)*cj5*x1667*x1670))+(((-1.0)*x1667*x1684)));
evalcond[4]=((((-1.0)*x1677*x1685))+(((-1.0)*x1667*x1673))+((r00*x1668))+((x1676*x1681))+((x1674*x1681))+(((-1.0)*sj2*x1688)));
evalcond[5]=(((r00*x1680))+((sj1*x1687))+(((-1.0)*x1673*x1682))+(((-1.0)*cj5*x1667*x1674))+(((-1.0)*cj5*x1667*x1676))+(((-1.0)*cj2*x1688)));
evalcond[6]=(((x1676*x1678))+(((-0.069)*sj1*x1685))+((x1665*x1671))+((x1674*x1678))+(((-1.0)*x1669*x1674))+(((-1.0)*x1669*x1676))+(((0.069)*x1665))+(((-1.0)*px))+(((-1.0)*x1666*x1675)));
evalcond[7]=(((x1666*x1671))+((x1665*x1675))+x1686+(((-1.0)*x1669*x1670))+(((-1.0)*x1669*x1672))+(((-1.0)*py))+(((-1.0)*cj2*sj1*x1686))+((x1672*x1678))+((x1670*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1692=IKPowWithIntegerCheck(r22,-1);
if(!x1692.valid){
continue;
}
IkReal x1689=x1692.value;
CheckValue<IkReal> x1693=IKPowWithIntegerCheck(sj5,-1);
if(!x1693.valid){
continue;
}
IkReal x1690=x1693.value;
IkReal x1691=(x1689*x1690);
CheckValue<IkReal> x1694=IKPowWithIntegerCheck(cj3,-1);
if(!x1694.valid){
continue;
}
if( IKabs((cj1*sj2*x1691)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1691*(x1694.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*cj5*r22*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x1691))+IKsqr((x1691*(x1694.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*cj5*r22*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x1691), (x1691*(x1694.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*cj5*r22*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1695=IKcos(j4);
IkReal x1696=(cj3*r22);
IkReal x1697=((1.0)*sj5);
IkReal x1698=(r22*sj3);
evalcond[0]=((((-1.0)*r22*x1697*(IKsin(j4))))+((cj1*sj2)));
evalcond[1]=(sj1+((cj5*x1696))+(((-1.0)*x1695*x1697*x1698)));
evalcond[2]=((((-1.0)*cj1*cj2))+(((-1.0)*cj5*x1698))+(((-1.0)*x1695*x1696*x1697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1699=(sj1*sj2);
IkReal x1700=(cj4*r10);
IkReal x1701=((1.0)*cj2);
IkReal x1702=(cj4*r00);
IkReal x1703=((2.0)*cj4);
IkReal x1704=(cj5*sj4);
IkReal x1705=(r11*x1704);
IkReal x1706=((1.0)*x1700);
IkReal x1707=(r01*x1704);
IkReal x1708=((1.0)*x1702);
IkReal x1709=((1.0)*x1699);
IkReal x1710=((1.0)*x1705);
IkReal x1711=((1.0)*x1707);
IkReal x1712=(cj2+x1700+(((-1.0)*x1710)));
IkReal x1713=(cj2+x1705+(((-1.0)*x1706)));
IkReal x1714=((((-2.0)*r10*x1704))+(((-1.0)*r11*x1703)));
IkReal x1715=(x1702+x1699+(((-1.0)*x1711)));
IkReal x1716=((((-1.0)*r01*x1703))+(((-2.0)*r00*x1704)));
IkReal x1717=(x1707+x1699+(((-1.0)*x1708)));
IkReal x1718=(x1700+(((-1.0)*x1710))+(((-1.0)*x1701)));
IkReal x1719=(x1705+(((-1.0)*x1701))+(((-1.0)*x1706)));
IkReal x1720=(x1702+(((-1.0)*x1711))+(((-1.0)*x1709)));
IkReal x1721=(x1707+(((-1.0)*x1709))+(((-1.0)*x1708)));
IkReal gconst0=x1712;
IkReal gconst1=x1714;
IkReal gconst2=x1713;
IkReal gconst3=x1715;
IkReal gconst4=x1716;
IkReal gconst5=x1717;
IkReal gconst6=x1712;
IkReal gconst7=x1714;
IkReal gconst8=x1713;
IkReal gconst9=x1715;
IkReal gconst10=x1716;
IkReal gconst11=x1717;
IkReal gconst12=x1718;
IkReal gconst13=x1714;
IkReal gconst14=x1719;
IkReal gconst15=x1720;
IkReal gconst16=x1716;
IkReal gconst17=x1721;
IkReal gconst18=x1718;
IkReal gconst19=x1714;
IkReal gconst20=x1719;
IkReal gconst21=x1720;
IkReal gconst22=x1716;
IkReal gconst23=x1721;
IkReal x1722=sj1*sj1;
IkReal x1723=sj2*sj2;
IkReal x1724=cj2*cj2;
IkReal x1725=((1.0)*gconst21);
IkReal x1726=(gconst15*gconst20);
IkReal x1727=(gconst13*gconst19);
IkReal x1728=((2.0)*gconst21);
IkReal x1729=(gconst23*gconst6);
IkReal x1730=(gconst2*gconst3);
IkReal x1731=(gconst2*gconst9);
IkReal x1732=(gconst19*gconst4);
IkReal x1733=(gconst11*gconst6);
IkReal x1734=(sj1*sj2);
IkReal x1735=((4.0)*cj2);
IkReal x1736=(gconst4*gconst7);
IkReal x1737=(gconst15*gconst18);
IkReal x1738=((2.0)*cj2);
IkReal x1739=(gconst12*gconst20);
IkReal x1740=(gconst17*gconst21);
IkReal x1741=(gconst0*gconst20);
IkReal x1742=(gconst14*gconst20);
IkReal x1743=((1.0)*gconst8);
IkReal x1744=(gconst5*gconst6);
IkReal x1745=(gconst3*gconst9);
IkReal x1746=((1.0)*gconst9);
IkReal x1747=(gconst1*gconst17);
IkReal x1748=((2.0)*gconst5);
IkReal x1749=(gconst0*gconst11);
IkReal x1750=(gconst21*gconst5);
IkReal x1751=(gconst16*gconst22);
IkReal x1752=(gconst5*gconst8);
IkReal x1753=(gconst2*gconst6);
IkReal x1754=(gconst14*gconst18);
IkReal x1755=(gconst13*gconst22);
IkReal x1756=(gconst1*gconst5);
IkReal x1757=(gconst16*gconst7);
IkReal x1758=(gconst5*gconst9);
IkReal x1759=(gconst1*gconst10);
IkReal x1760=(gconst14*gconst15);
IkReal x1761=((2.0)*gconst23);
IkReal x1762=((2.0)*gconst9);
IkReal x1763=(gconst1*gconst7);
IkReal x1764=(gconst0*gconst8);
IkReal x1765=(gconst12*gconst23);
IkReal x1766=(gconst10*gconst6);
IkReal x1767=(gconst0*gconst9);
IkReal x1768=(gconst17*gconst18);
IkReal x1769=((2.0)*gconst4);
IkReal x1770=(gconst13*gconst7);
IkReal x1771=(gconst11*gconst18);
IkReal x1772=((1.0)*gconst0);
IkReal x1773=((1.0)*gconst10);
IkReal x1774=(gconst10*gconst13);
IkReal x1775=(gconst16*gconst19);
IkReal x1776=((1.0)*gconst12);
IkReal x1777=(gconst18*gconst5);
IkReal x1778=(gconst12*gconst17);
IkReal x1779=(gconst14*gconst21);
IkReal x1780=(gconst17*gconst20);
IkReal x1781=((1.0)*gconst14);
IkReal x1782=(gconst18*gconst2);
IkReal x1783=(gconst14*gconst23);
IkReal x1784=(gconst5*x1772);
IkReal x1785=(gconst9*x1764);
IkReal x1786=(gconst17*x1755);
IkReal x1787=((4.0)*x1724);
IkReal x1788=(gconst21*x1775);
IkReal x1789=((1.0)*gconst22*gconst4);
IkReal x1790=(gconst14*x1775);
IkReal x1791=((4.0)*x1722*x1723);
op[0]=(((x1739*x1740))+(((-1.0)*gconst14*x1725*x1726))+((x1737*x1783))+((x1755*x1768))+(((-1.0)*gconst17*x1725*x1727))+((x1775*x1779))+(((-1.0)*x1765*x1768))+(((-1.0)*x1751*x1754)));
op[1]=(((gconst14*x1726*x1738))+((cj2*x1727*x1728))+((gconst17*x1727*x1738))+(((-2.0)*gconst18*x1734*x1751))+(((-1.0)*cj2*x1728*x1739))+((x1728*x1734*x1780))+(((-1.0)*x1734*x1761*x1778))+((x1734*x1760*x1761))+((gconst18*x1738*x1765))+(((-1.0)*x1726*x1728*x1734))+(((-1.0)*gconst17*x1738*x1739))+(((-1.0)*x1738*x1790))+(((-1.0)*gconst18*x1738*x1755))+(((-1.0)*gconst23*x1738*x1754))+(((-1.0)*x1734*x1761*x1768))+((gconst12*x1738*x1768))+(((-2.0)*gconst14*x1734*x1751))+(((-1.0)*gconst14*x1737*x1738))+((x1734*x1737*x1761))+(((2.0)*x1734*x1786))+((x1728*x1734*x1778))+((x1728*x1734*x1775))+(((-1.0)*x1728*x1734*x1760))+((cj2*x1728*x1742)));
op[2]=((((-1.0)*gconst2*x1725*x1726))+(((-1.0)*x1734*x1735*x1737))+(((-1.0)*x1754*x1789))+((x1732*x1779))+(((-1.0)*x1751*x1791))+(((-1.0)*x1734*x1735*x1780))+(((-1.0)*x1734*x1735*x1783))+(((-1.0)*gconst14*x1726*x1746))+((x1729*x1760))+(((-1.0)*x1751*x1782))+((gconst11*gconst14*x1737))+(((-1.0)*gconst12*gconst18*x1787))+((gconst18*gconst22*x1747))+(((-1.0)*gconst5*x1725*x1727))+((x1734*x1735*x1779))+(((-1.0)*x1765*x1777))+((gconst17*gconst9*x1739))+((x1740*x1791))+((x1757*x1779))+(((-1.0)*x1742*x1787))+((gconst2*x1788))+((x1739*x1787))+(((-1.0)*gconst17*x1725*x1770))+(((-1.0)*x1734*x1735*x1755))+((gconst2*gconst23*x1737))+(((-1.0)*gconst8*x1725*x1760))+(((-1.0)*gconst19*x1725*x1747))+((gconst12*gconst8*x1740))+(((-1.0)*gconst11*x1768*x1776))+(((-1.0)*gconst23*x1768*x1772))+((x1755*x1777))+((x1726*x1734*x1735))+((gconst15*gconst23*x1791))+((x1734*x1735*x1768))+((x1734*x1735*x1765))+(((-1.0)*gconst16*x1754*x1773))+(((-1.0)*gconst6*x1751*x1781))+(((-1.0)*gconst17*x1727*x1746))+(((-1.0)*gconst17*x1729*x1776))+(((-1.0)*gconst3*x1725*x1742))+(((-1.0)*x1734*x1735*x1775))+(((-1.0)*gconst17*gconst23*x1791))+((x1740*x1741))+((gconst9*x1790))+(((-1.0)*x1727*x1787))+((gconst23*gconst3*x1754))+((x1768*x1774))+(((-1.0)*gconst12*gconst21*x1734*x1735))+((x1754*x1787))+((x1739*x1750))+(((-1.0)*gconst15*gconst21*x1791))+((gconst6*x1786)));
op[3]=((((2.0)*cj2*gconst1*gconst17*gconst19))+(((2.0)*cj2*gconst14*gconst21*gconst8))+(((-2.0)*gconst12*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst16*gconst2*gconst22*sj1*sj2))+(((2.0)*gconst17*gconst21*gconst8*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst19*gconst2))+(((2.0)*cj2*gconst12*gconst18*gconst5))+(((2.0)*gconst1*gconst17*gconst22*sj1*sj2))+(((-2.0)*gconst15*gconst20*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst20*gconst9))+(((2.0)*cj2*gconst14*gconst20*gconst3))+(((2.0)*cj2*gconst1*gconst19*gconst21))+(((-2.0)*gconst18*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst17*gconst20))+(((-2.0)*cj2*gconst15*gconst18*gconst2))+(((-2.0)*cj2*gconst13*gconst22*gconst6))+(((2.0)*gconst10*gconst13*gconst17*sj1*sj2))+(((-2.0)*gconst14*gconst22*gconst4*sj1*sj2))+(((-2.0)*gconst18*gconst23*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst23*gconst6*sj1*sj2))+(((-2.0)*gconst14*gconst21*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst21*gconst8))+(((-2.0)*cj2*gconst12*gconst17*gconst8))+(((-2.0)*gconst10*gconst14*gconst16*sj1*sj2))+(((-2.0)*gconst15*gconst2*gconst21*sj1*sj2))+(((-2.0)*gconst11*gconst12*gconst17*sj1*sj2))+(((-2.0)*gconst11*gconst17*gconst18*sj1*sj2))+(((-2.0)*gconst14*gconst15*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst18*sj1*sj2))+(((2.0)*cj2*gconst12*gconst17*gconst6))+(((2.0)*gconst13*gconst22*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst23))+(((2.0)*gconst0*gconst17*gconst21*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst20*gconst9))+(((-2.0)*cj2*gconst12*gconst20*gconst5))+(((-2.0)*cj2*gconst10*gconst13*gconst18))+(((2.0)*gconst12*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst13*gconst17*gconst7))+(((2.0)*cj2*gconst15*gconst2*gconst20))+(((2.0)*gconst11*gconst14*gconst15*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst16*gconst7))+(((2.0)*cj2*gconst12*gconst23*gconst6))+(((-2.0)*gconst17*gconst23*gconst6*sj1*sj2))+(((2.0)*gconst18*gconst23*gconst3*sj1*sj2))+(((-2.0)*gconst15*gconst21*gconst8*sj1*sj2))+(((2.0)*cj2*gconst13*gconst19*gconst5))+(((2.0)*cj2*gconst13*gconst19*gconst9))+(((-2.0)*gconst0*gconst17*gconst23*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst23*gconst6))+(((-2.0)*cj2*gconst11*gconst14*gconst18))+(((-2.0)*cj2*gconst1*gconst18*gconst22))+(((2.0)*cj2*gconst11*gconst12*gconst18))+(((2.0)*gconst19*gconst21*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst19*gconst4))+(((2.0)*cj2*gconst14*gconst15*gconst8))+(((-2.0)*cj2*gconst14*gconst18*gconst3))+(((2.0)*gconst16*gconst21*gconst7*sj1*sj2))+(((2.0)*gconst16*gconst19*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst18))+(((-2.0)*cj2*gconst18*gconst2*gconst23))+(((-2.0)*gconst20*gconst21*gconst3*sj1*sj2))+(((2.0)*gconst17*gconst20*gconst9*sj1*sj2))+(((2.0)*gconst14*gconst23*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst15*gconst6))+(((2.0)*cj2*gconst2*gconst20*gconst21))+(((2.0)*gconst20*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst2*gconst23*sj1*sj2))+(((2.0)*cj2*gconst13*gconst21*gconst7))+(((2.0)*gconst12*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst18*sj1*sj2))+(((-2.0)*gconst16*gconst22*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst21)));
op[4]=((((4.0)*gconst21*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst16*gconst2*gconst22*gconst6))+((gconst14*gconst21*gconst4*gconst7))+(((-1.0)*gconst11*gconst12*gconst18*gconst5))+(((-4.0)*gconst11*gconst17*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst12*gconst6*(cj2*cj2)))+(((-1.0)*gconst12*gconst23*gconst5*gconst6))+(((4.0)*gconst18*gconst2*(cj2*cj2)))+(((-1.0)*gconst1*gconst17*gconst19*gconst9))+((gconst14*gconst23*gconst3*gconst6))+(((-1.0)*gconst0*gconst17*gconst23*gconst6))+(((4.0)*cj2*gconst17*gconst6*sj1*sj2))+((gconst1*gconst10*gconst17*gconst18))+(((-1.0)*gconst11*gconst12*gconst17*gconst6))+(((-4.0)*cj2*gconst10*gconst13*sj1*sj2))+(((-4.0)*cj2*gconst2*gconst23*sj1*sj2))+((gconst13*gconst22*gconst5*gconst6))+((gconst12*gconst20*gconst5*gconst9))+(((-4.0)*cj2*gconst12*gconst9*sj1*sj2))+(((4.0)*cj2*gconst11*gconst12*sj1*sj2))+(((4.0)*gconst11*gconst15*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst15*gconst2*gconst21*gconst8))+((gconst0*gconst20*gconst21*gconst5))+(((-4.0)*cj2*gconst17*gconst8*sj1*sj2))+((gconst15*gconst2*gconst23*gconst6))+((gconst1*gconst18*gconst22*gconst5))+(((-4.0)*gconst15*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*cj2*gconst1*gconst22*sj1*sj2))+(((4.0)*cj2*gconst14*gconst9*sj1*sj2))+(((-1.0)*gconst13*gconst17*gconst7*gconst9))+((gconst14*gconst16*gconst7*gconst9))+(((-4.0)*gconst21*gconst3*(sj1*sj1)*(sj2*sj2)))+((gconst19*gconst2*gconst21*gconst4))+(((-1.0)*gconst0*gconst11*gconst17*gconst18))+(((-4.0)*gconst23*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst22*gconst4*(sj1*sj1)*(sj2*sj2)))+(((4.0)*gconst0*gconst20*(cj2*cj2)))+(((-4.0)*cj2*gconst11*gconst14*sj1*sj2))+((gconst12*gconst21*gconst5*gconst8))+((gconst11*gconst15*gconst18*gconst2))+((gconst1*gconst17*gconst22*gconst6))+((gconst10*gconst13*gconst17*gconst6))+(((-4.0)*cj2*gconst18*gconst3*sj1*sj2))+(((-4.0)*gconst10*gconst16*(sj1*sj1)*(sj2*sj2)))+((gconst16*gconst19*gconst2*gconst9))+((gconst18*gconst2*gconst23*gconst3))+(((-1.0)*gconst15*gconst2*gconst20*gconst9))+(((-1.0)*gconst1*gconst19*gconst21*gconst5))+(((-4.0)*gconst1*gconst19*(cj2*cj2)))+((gconst16*gconst2*gconst21*gconst7))+(((-1.0)*gconst14*gconst15*gconst8*gconst9))+(((-1.0)*gconst10*gconst14*gconst18*gconst4))+(((-1.0)*gconst2*gconst20*gconst21*gconst3))+(((-4.0)*gconst13*gconst7*(cj2*cj2)))+(((4.0)*cj2*gconst15*gconst8*sj1*sj2))+(((-4.0)*cj2*gconst19*gconst4*sj1*sj2))+(((-1.0)*gconst13*gconst21*gconst5*gconst7))+(((-4.0)*cj2*gconst20*gconst5*sj1*sj2))+((gconst10*gconst13*gconst18*gconst5))+(((-1.0)*gconst14*gconst22*gconst4*gconst6))+(((-1.0)*gconst13*gconst19*gconst5*gconst9))+(((-4.0)*cj2*gconst16*gconst7*sj1*sj2))+(((-4.0)*cj2*gconst15*gconst6*sj1*sj2))+(((4.0)*cj2*gconst0*gconst23*sj1*sj2))+(((-1.0)*gconst10*gconst14*gconst16*gconst6))+(((4.0)*gconst17*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst18*gconst2*gconst22*gconst4))+(((-4.0)*gconst0*gconst18*(cj2*cj2)))+(((-4.0)*gconst14*gconst8*(cj2*cj2)))+(((4.0)*cj2*gconst18*gconst5*sj1*sj2))+((gconst11*gconst14*gconst15*gconst6))+((gconst12*gconst17*gconst8*gconst9))+(((-4.0)*gconst2*gconst20*(cj2*cj2)))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+((gconst14*gconst19*gconst4*gconst9))+((gconst11*gconst14*gconst18*gconst3))+(((4.0)*gconst14*gconst6*(cj2*cj2)))+((gconst0*gconst17*gconst20*gconst9))+(((4.0)*gconst12*gconst8*(cj2*cj2)))+(((-1.0)*gconst14*gconst21*gconst3*gconst8))+(((4.0)*gconst23*gconst3*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst1*gconst17*gconst21*gconst7))+(((-1.0)*gconst10*gconst16*gconst18*gconst2))+(((-4.0)*cj2*gconst0*gconst21*sj1*sj2))+(((-1.0)*gconst14*gconst20*gconst3*gconst9))+(((4.0)*cj2*gconst2*gconst21*sj1*sj2))+((gconst0*gconst17*gconst21*gconst8))+(((4.0)*cj2*gconst20*gconst3*sj1*sj2)));
op[5]=((((2.0)*gconst23*gconst3*gconst6*sj1*sj2))+(((-2.0)*gconst11*gconst18*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst3*gconst8))+(((-2.0)*gconst0*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst22*gconst4*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst19*gconst2*gconst4))+(((-2.0)*cj2*gconst12*gconst5*gconst8))+(((2.0)*gconst1*gconst22*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst21*gconst5*sj1*sj2))+(((-2.0)*gconst14*gconst3*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst14*gconst6))+(((-2.0)*cj2*gconst14*gconst4*gconst7))+(((-2.0)*cj2*gconst1*gconst22*gconst6))+(((-2.0)*cj2*gconst14*gconst3*gconst6))+(((2.0)*gconst17*gconst8*gconst9*sj1*sj2))+(((2.0)*gconst21*gconst4*gconst7*sj1*sj2))+(((-2.0)*gconst0*gconst11*gconst17*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst8*gconst9))+(((-2.0)*gconst15*gconst2*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst1*gconst10*gconst18))+(((-2.0)*cj2*gconst0*gconst17*gconst8))+(((2.0)*gconst2*gconst23*gconst3*sj1*sj2))+(((2.0)*gconst21*gconst5*gconst8*sj1*sj2))+(((-2.0)*gconst23*gconst5*gconst6*sj1*sj2))+(((2.0)*gconst10*gconst13*gconst5*sj1*sj2))+(((2.0)*gconst1*gconst10*gconst17*sj1*sj2))+(((-2.0)*gconst20*gconst3*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst11*gconst18))+(((-2.0)*gconst11*gconst17*gconst6*sj1*sj2))+(((2.0)*cj2*gconst1*gconst17*gconst7))+(((2.0)*gconst11*gconst14*gconst3*sj1*sj2))+(((2.0)*cj2*gconst2*gconst20*gconst3))+(((2.0)*cj2*gconst2*gconst20*gconst9))+(((2.0)*cj2*gconst1*gconst19*gconst5))+(((2.0)*cj2*gconst1*gconst19*gconst9))+(((-2.0)*gconst21*gconst3*gconst8*sj1*sj2))+(((2.0)*gconst16*gconst7*gconst9*sj1*sj2))+(((-2.0)*gconst2*gconst21*gconst3*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst6))+(((2.0)*cj2*gconst13*gconst5*gconst7))+(((2.0)*cj2*gconst1*gconst21*gconst7))+(((2.0)*cj2*gconst14*gconst8*gconst9))+(((2.0)*cj2*gconst0*gconst23*gconst6))+(((2.0)*cj2*gconst2*gconst21*gconst8))+(((2.0)*cj2*gconst13*gconst7*gconst9))+(((-2.0)*gconst2*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst21*gconst8))+(((2.0)*cj2*gconst11*gconst12*gconst6))+(((2.0)*gconst12*gconst5*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst5))+(((-2.0)*cj2*gconst0*gconst20*gconst9))+(((-2.0)*cj2*gconst15*gconst2*gconst6))+(((-2.0)*cj2*gconst2*gconst23*gconst6))+(((2.0)*gconst19*gconst4*gconst9*sj1*sj2))+(((-2.0)*gconst15*gconst8*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst18*gconst2))+(((2.0)*gconst20*gconst5*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst14*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst2*gconst7))+(((-2.0)*gconst10*gconst18*gconst4*sj1*sj2))+(((2.0)*gconst11*gconst18*gconst3*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst10*gconst13*gconst6))+(((-2.0)*gconst11*gconst12*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst5))+(((2.0)*cj2*gconst15*gconst2*gconst8))+(((2.0)*cj2*gconst12*gconst5*gconst6))+(((-2.0)*cj2*gconst18*gconst2*gconst3)));
op[6]=((((-1.0)*gconst7*x1725*x1756))+(((-1.0)*x1734*x1735*x1736))+(((-1.0)*gconst15*x1731*x1743))+(((-1.0)*x1753*x1789))+(((-1.0)*gconst14*x1743*x1745))+(((-1.0)*gconst4*x1773*x1782))+(((-1.0)*x1729*x1784))+((x1734*x1735*x1749))+((x1734*x1735*x1744))+(((-1.0)*gconst2*gconst8*x1787))+(((-1.0)*gconst10*gconst4*x1791))+((gconst14*gconst3*x1733))+(((-1.0)*gconst19*x1746*x1756))+((gconst11*gconst3*x1791))+((x1731*x1732))+((gconst14*gconst9*x1736))+(((-1.0)*gconst4*x1766*x1781))+(((-1.0)*gconst11*gconst2*x1734*x1735))+(((-1.0)*gconst0*gconst6*x1787))+(((-1.0)*gconst5*x1733*x1776))+((x1731*x1757))+(((-1.0)*x1734*x1735*x1752))+(((-1.0)*x1734*x1735*x1759))+(((-1.0)*x1745*x1791))+((x1729*x1730))+(((-1.0)*gconst16*x1753*x1773))+((gconst15*gconst2*x1733))+((gconst2*gconst21*x1736))+((gconst1*gconst22*x1744))+((gconst10*gconst18*x1756))+((gconst12*gconst9*x1752))+((gconst17*x1785))+(((-1.0)*gconst5*x1746*x1770))+(((-1.0)*gconst3*gconst6*x1734*x1735))+((gconst3*gconst8*x1734*x1735))+((x1730*x1771))+(((-1.0)*gconst17*x1733*x1772))+(((-1.0)*gconst11*gconst5*x1791))+((x1731*x1734*x1735))+(((-1.0)*x1749*x1777))+((x1744*x1774))+((x1747*x1766))+((x1758*x1791))+(((-1.0)*x1734*x1735*x1767))+(((-1.0)*gconst20*x1730*x1746))+((x1764*x1787))+(((-1.0)*gconst8*x1725*x1730))+((x1741*x1758))+(((-1.0)*gconst7*x1746*x1747))+((x1750*x1764))+((x1753*x1787))+(((-1.0)*x1763*x1787)));
op[7]=(((x1734*x1748*x1759))+(((-1.0)*x1730*x1734*x1762))+((gconst0*x1733*x1738))+(((-1.0)*gconst6*x1738*x1759))+(((-1.0)*gconst6*x1730*x1738))+(((-1.0)*x1734*x1748*x1749))+(((-2.0)*gconst8*x1734*x1745))+(((-1.0)*x1738*x1785))+(((-1.0)*gconst10*gconst2*x1734*x1769))+((gconst8*x1730*x1738))+((x1734*x1748*x1767))+(((-1.0)*gconst2*x1736*x1738))+((gconst8*gconst9*x1734*x1748))+(((-1.0)*x1734*x1766*x1769))+((gconst8*x1731*x1738))+((gconst7*x1738*x1756))+(((2.0)*gconst11*x1730*x1734))+(((-1.0)*gconst0*x1738*x1752))+((x1734*x1736*x1762))+(((-1.0)*x1733*x1734*x1748))+((gconst9*x1738*x1763))+(((2.0)*gconst3*x1733*x1734))+(((-1.0)*gconst2*x1733*x1738))+((gconst0*x1738*x1744)));
op[8]=(((x1730*x1733))+((x1731*x1736))+(((-1.0)*gconst4*x1753*x1773))+((x1744*x1759))+((x1752*x1767))+(((-1.0)*x1733*x1784))+(((-1.0)*gconst7*x1746*x1756))+(((-1.0)*gconst9*x1730*x1743)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[2];
IkReal x1792=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1792);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1792);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1793=cj4*cj4;
IkReal x1794=cj5*cj5;
IkReal x1795=(r22*x1793);
IkReal x1796=(x1795+((r22*x1794))+(((-1.0)*x1794*x1795)));
j6eval[0]=x1796;
j6eval[1]=IKsign(x1796);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1797=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1797);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1797);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1798=((((-1.0)*cj5*sj3))+(((-1.0)*cj3*cj4*sj5)));
j6eval[0]=x1798;
j6eval[1]=IKsign(x1798);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1799=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1799);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1799);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1800=(r22*sj4);
IkReal x1801=(cj4*sj3);
IkReal x1802=((((-1.0)*x1800*x1801))+((x1800*x1801*(cj5*cj5)))+((cj3*cj5*sj5*x1800)));
j6eval[0]=x1802;
j6eval[1]=IKsign(x1802);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x1803=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1803);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1803);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=1.0;
j5=0;
IkReal x1804=(cj2*sj1);
IkReal x1805=((6.9)*cj0);
IkReal x1806=((6.9)*r00*sj0);
IkReal x1807=((6.9)*r01*sj0);
IkReal x1808=(x1804*x1805);
j6eval[0]=r22;
j6eval[1]=IKsign(r22);
j6eval[2]=((IKabs(((((-1.0)*r10*x1808))+(((-1.0)*x1806))+(((100.0)*rxp0_2))+((x1804*x1806))+((r10*x1805)))))+(IKabs(((((-100.0)*rxp1_2))+(((-1.0)*x1804*x1807))+x1807+((r11*x1808))+(((-1.0)*r11*x1805))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1809=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1809);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1809);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=1.0;
j5=0;
j6eval[0]=cj4;
j6eval[1]=IKsign(cj4);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1810=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1810);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1810);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=1.0;
j5=0;
IkReal x1811=(r22*sj4);
j6eval[0]=x1811;
j6eval[1]=IKsign(x1811);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1812=(cj0*cj2);
IkReal x1813=((6.9)*cj0);
IkReal x1814=(cj4*r11);
IkReal x1815=(r10*sj4);
IkReal x1816=((100.0)*px);
IkReal x1817=((6.9)*sj1);
IkReal x1818=(r11*sj4);
IkReal x1819=(cj4*r10);
CheckValue<IkReal> x1820=IKPowWithIntegerCheck(IKsign((r22*sj4)),-1);
if(!x1820.valid){
continue;
}
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal((((x1812*x1817*x1819))+(((-1.0)*x1813*x1819))+((x1813*x1818))+((x1816*x1819))+(((-1.0)*x1816*x1818))+((r01*x1812))+(((-1.0)*x1812*x1817*x1818)))),IkReal(((((-1.0)*r00*x1812))+(((-1.0)*x1813*x1814))+(((-1.0)*x1813*x1815))+((x1812*x1814*x1817))+((x1815*x1816))+((x1814*x1816))+((x1812*x1815*x1817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1820.value)))+(x1821.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1822=IKcos(j6);
IkReal x1823=IKsin(j6);
IkReal x1824=(cj4*sj3);
IkReal x1825=((0.069)*cj0);
IkReal x1826=(cj3*cj4);
IkReal x1827=(cj3*sj4);
IkReal x1828=(sj3*sj4);
IkReal x1829=(cj2*sj1);
IkReal x1830=((0.069)*sj0);
IkReal x1831=((1.0)*sj0);
IkReal x1832=((1.0)*cj4);
IkReal x1833=((0.01)*x1822);
IkReal x1834=((1.0)*x1822);
IkReal x1835=(r11*x1823);
IkReal x1836=(r01*x1823);
IkReal x1837=(cj4*x1822);
IkReal x1838=((0.01)*x1823);
IkReal x1839=((1.0)*r10*x1823);
IkReal x1840=((1.0)*r00*x1823);
evalcond[0]=(((r01*x1833))+(((-1.0)*px))+(((-1.0)*x1825*x1829))+x1825+((r00*x1838)));
evalcond[1]=(((r10*x1838))+(((-1.0)*py))+((r11*x1833))+x1830+(((-1.0)*x1829*x1830)));
evalcond[2]=(((r10*x1837))+(((-1.0)*x1832*x1835))+(((-1.0)*sj4*x1839))+((cj0*cj2))+(((-1.0)*r11*sj4*x1834)));
evalcond[3]=((((-1.0)*sj4*x1840))+(((-1.0)*x1832*x1836))+(((-1.0)*r01*sj4*x1834))+((r00*x1837))+(((-1.0)*cj2*x1831)));
evalcond[4]=((((-1.0)*x1824*x1840))+(((-1.0)*r01*x1824*x1834))+(((-1.0)*r00*x1828*x1834))+((x1828*x1836)));
evalcond[5]=((((-1.0)*r11*x1824*x1834))+(((-1.0)*r10*x1828*x1834))+((x1828*x1835))+(((-1.0)*x1824*x1839)));
evalcond[6]=(((x1827*x1835))+(((-1.0)*r10*x1827*x1834))+(((-1.0)*r11*x1826*x1834))+(((-1.0)*x1826*x1839))+(((-1.0)*x1829*x1831)));
evalcond[7]=((((-1.0)*r01*x1826*x1834))+((x1827*x1836))+(((-1.0)*x1826*x1840))+(((-1.0)*r00*x1827*x1834))+(((-1.0)*cj0*x1829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1841=(cj2*sj1);
IkReal x1842=(cj0*cj2);
IkReal x1843=((6.9)*r10*sj0);
IkReal x1844=((100.0)*py*r11);
IkReal x1845=((100.0)*py*r10);
IkReal x1846=((6.9)*r11*sj0*sj4);
IkReal x1847=((6.9)*cj4*r11*sj0);
CheckValue<IkReal> x1848=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1848.valid){
continue;
}
CheckValue<IkReal> x1849 = IKatan2WithCheck(IkReal((((cj4*x1845))+(((-1.0)*cj4*x1843))+(((-1.0)*sj4*x1844))+(((-1.0)*x1841*x1846))+x1846+((cj4*x1841*x1843))+((r11*x1842)))),IkReal((((cj4*x1844))+((sj4*x1841*x1843))+(((-1.0)*sj4*x1843))+(((-1.0)*r10*x1842))+(((-1.0)*x1847))+((sj4*x1845))+((x1841*x1847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1849.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1848.value)))+(x1849.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1850=IKcos(j6);
IkReal x1851=IKsin(j6);
IkReal x1852=(cj4*sj3);
IkReal x1853=((0.069)*cj0);
IkReal x1854=(cj3*cj4);
IkReal x1855=(cj3*sj4);
IkReal x1856=(sj3*sj4);
IkReal x1857=(cj2*sj1);
IkReal x1858=((0.069)*sj0);
IkReal x1859=((1.0)*sj0);
IkReal x1860=((1.0)*cj4);
IkReal x1861=((0.01)*x1850);
IkReal x1862=((1.0)*x1850);
IkReal x1863=(r11*x1851);
IkReal x1864=(r01*x1851);
IkReal x1865=(cj4*x1850);
IkReal x1866=((0.01)*x1851);
IkReal x1867=((1.0)*r10*x1851);
IkReal x1868=((1.0)*r00*x1851);
evalcond[0]=((((-1.0)*px))+x1853+((r01*x1861))+(((-1.0)*x1853*x1857))+((r00*x1866)));
evalcond[1]=(((r11*x1861))+(((-1.0)*x1857*x1858))+(((-1.0)*py))+x1858+((r10*x1866)));
evalcond[2]=((((-1.0)*r11*sj4*x1862))+(((-1.0)*sj4*x1867))+(((-1.0)*x1860*x1863))+((cj0*cj2))+((r10*x1865)));
evalcond[3]=((((-1.0)*cj2*x1859))+(((-1.0)*sj4*x1868))+(((-1.0)*x1860*x1864))+(((-1.0)*r01*sj4*x1862))+((r00*x1865)));
evalcond[4]=((((-1.0)*r01*x1852*x1862))+(((-1.0)*r00*x1856*x1862))+(((-1.0)*x1852*x1868))+((x1856*x1864)));
evalcond[5]=((((-1.0)*x1852*x1867))+((x1856*x1863))+(((-1.0)*r11*x1852*x1862))+(((-1.0)*r10*x1856*x1862)));
evalcond[6]=((((-1.0)*x1854*x1867))+(((-1.0)*x1857*x1859))+(((-1.0)*r11*x1854*x1862))+((x1855*x1863))+(((-1.0)*r10*x1855*x1862)));
evalcond[7]=((((-1.0)*x1854*x1868))+(((-1.0)*r01*x1854*x1862))+(((-1.0)*r00*x1855*x1862))+(((-1.0)*cj0*x1857))+((x1855*x1864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1869=((6.9)*sj0);
IkReal x1870=((6.9)*cj0);
IkReal x1871=(cj2*sj1);
IkReal x1872=(x1869*x1871);
IkReal x1873=(x1870*x1871);
CheckValue<IkReal> x1874 = IKatan2WithCheck(IkReal(((((-100.0)*rxp1_2))+((r01*(((((-1.0)*x1872))+x1869))))+((r11*(((((-1.0)*x1870))+x1873)))))),IkReal((((r10*(((((-1.0)*x1873))+x1870))))+(((100.0)*rxp0_2))+((r00*((x1872+(((-1.0)*x1869)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
CheckValue<IkReal> x1875=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1875.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1874.value)+(((1.5707963267949)*(x1875.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1876=IKcos(j6);
IkReal x1877=IKsin(j6);
IkReal x1878=(cj4*sj3);
IkReal x1879=((0.069)*cj0);
IkReal x1880=(cj3*cj4);
IkReal x1881=(cj3*sj4);
IkReal x1882=(sj3*sj4);
IkReal x1883=(cj2*sj1);
IkReal x1884=((0.069)*sj0);
IkReal x1885=((1.0)*sj0);
IkReal x1886=((1.0)*cj4);
IkReal x1887=((0.01)*x1876);
IkReal x1888=((1.0)*x1876);
IkReal x1889=(r11*x1877);
IkReal x1890=(r01*x1877);
IkReal x1891=(cj4*x1876);
IkReal x1892=((0.01)*x1877);
IkReal x1893=((1.0)*r10*x1877);
IkReal x1894=((1.0)*r00*x1877);
evalcond[0]=((((-1.0)*x1879*x1883))+((r00*x1892))+((r01*x1887))+(((-1.0)*px))+x1879);
evalcond[1]=((((-1.0)*x1883*x1884))+((r10*x1892))+(((-1.0)*py))+x1884+((r11*x1887)));
evalcond[2]=(((cj0*cj2))+((r10*x1891))+(((-1.0)*sj4*x1893))+(((-1.0)*x1886*x1889))+(((-1.0)*r11*sj4*x1888)));
evalcond[3]=(((r00*x1891))+(((-1.0)*x1886*x1890))+(((-1.0)*cj2*x1885))+(((-1.0)*r01*sj4*x1888))+(((-1.0)*sj4*x1894)));
evalcond[4]=(((x1882*x1890))+(((-1.0)*x1878*x1894))+(((-1.0)*r01*x1878*x1888))+(((-1.0)*r00*x1882*x1888)));
evalcond[5]=((((-1.0)*x1878*x1893))+(((-1.0)*r11*x1878*x1888))+((x1882*x1889))+(((-1.0)*r10*x1882*x1888)));
evalcond[6]=((((-1.0)*r11*x1880*x1888))+(((-1.0)*x1880*x1893))+((x1881*x1889))+(((-1.0)*x1883*x1885))+(((-1.0)*r10*x1881*x1888)));
evalcond[7]=((((-1.0)*r01*x1880*x1888))+(((-1.0)*x1880*x1894))+(((-1.0)*cj0*x1883))+((x1881*x1890))+(((-1.0)*r00*x1881*x1888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x1895=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1895);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1895);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1896=(cj2*sj1);
IkReal x1897=((6.9)*cj0);
IkReal x1898=((6.9)*r00*sj0);
IkReal x1899=((6.9)*r01*sj0);
IkReal x1900=(x1896*x1897);
j6eval[0]=r22;
j6eval[1]=((IKabs(((((100.0)*rxp1_2))+((r11*x1897))+((x1896*x1899))+(((-1.0)*r11*x1900))+(((-1.0)*x1899)))))+(IKabs(((((-100.0)*rxp0_2))+(((-1.0)*r10*x1897))+x1898+(((-1.0)*x1896*x1898))+((r10*x1900))))));
j6eval[2]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1901=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1901);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1901);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
j6eval[0]=cj4;
j6eval[1]=IKsign(cj4);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1902=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1902);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1902);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1903=(r22*sj4);
j6eval[0]=x1903;
j6eval[1]=IKsign(x1903);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1904=(cj0*cj2);
IkReal x1905=((100.0)*px);
IkReal x1906=(cj4*r11);
IkReal x1907=(r10*sj4);
IkReal x1908=((6.9)*cj0);
IkReal x1909=((6.9)*sj1);
IkReal x1910=(r11*sj4);
IkReal x1911=(cj4*r10);
CheckValue<IkReal> x1912=IKPowWithIntegerCheck(IKsign((r22*sj4)),-1);
if(!x1912.valid){
continue;
}
CheckValue<IkReal> x1913 = IKatan2WithCheck(IkReal((((r01*x1904))+(((-1.0)*x1905*x1911))+(((-1.0)*x1905*x1910))+((x1908*x1911))+((x1908*x1910))+(((-1.0)*x1904*x1909*x1911))+(((-1.0)*x1904*x1909*x1910)))),IkReal((((x1905*x1907))+((x1904*x1907*x1909))+(((-1.0)*x1907*x1908))+(((-1.0)*x1905*x1906))+(((-1.0)*x1904*x1906*x1909))+((x1906*x1908))+(((-1.0)*r00*x1904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1913.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1912.value)))+(x1913.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1914=IKcos(j6);
IkReal x1915=IKsin(j6);
IkReal x1916=(cj3*cj4);
IkReal x1917=((0.069)*cj0);
IkReal x1918=(cj3*sj4);
IkReal x1919=(cj4*r00);
IkReal x1920=(cj2*sj1);
IkReal x1921=(sj3*sj4);
IkReal x1922=((0.069)*sj0);
IkReal x1923=((1.0)*sj0);
IkReal x1924=((1.0)*cj4);
IkReal x1925=(cj4*sj3);
IkReal x1926=(r10*x1915);
IkReal x1927=(r01*x1914);
IkReal x1928=(r11*x1915);
IkReal x1929=((1.0)*x1914);
IkReal x1930=(sj3*x1915);
IkReal x1931=(r11*x1914);
IkReal x1932=(r00*x1915);
IkReal x1933=(r01*x1915);
evalcond[0]=((((-1.0)*x1917*x1920))+(((-0.01)*x1932))+(((-1.0)*px))+x1917+(((-0.01)*x1927)));
evalcond[1]=((((-0.01)*x1931))+(((-1.0)*py))+x1922+(((-0.01)*x1926))+(((-1.0)*x1920*x1922)));
evalcond[2]=(((sj4*x1926))+((cj4*r10*x1914))+((cj0*cj2))+((sj4*x1931))+(((-1.0)*x1924*x1928)));
evalcond[3]=(((sj4*x1927))+((x1914*x1919))+((sj4*x1932))+(((-1.0)*x1924*x1933))+(((-1.0)*cj2*x1923)));
evalcond[4]=(((x1921*x1933))+((x1919*x1930))+(((-1.0)*r00*x1921*x1929))+((x1925*x1927)));
evalcond[5]=((((-1.0)*r10*x1921*x1929))+((x1921*x1928))+((x1925*x1931))+((x1925*x1926)));
evalcond[6]=((((-1.0)*r10*x1918*x1929))+((x1918*x1928))+((x1916*x1931))+((x1916*x1926))+(((-1.0)*x1920*x1923)));
evalcond[7]=((((-1.0)*cj0*x1920))+((x1916*x1932))+((x1916*x1927))+((x1918*x1933))+(((-1.0)*r00*x1918*x1929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1934=(cj2*sj1);
IkReal x1935=(cj0*cj2);
IkReal x1936=((6.9)*r10*sj0);
IkReal x1937=((100.0)*py*r11);
IkReal x1938=((100.0)*py*r10);
IkReal x1939=((6.9)*r11*sj0*sj4);
IkReal x1940=((6.9)*cj4*r11*sj0);
CheckValue<IkReal> x1941 = IKatan2WithCheck(IkReal((((cj4*x1936))+(((-1.0)*cj4*x1938))+(((-1.0)*x1934*x1939))+x1939+((r11*x1935))+(((-1.0)*cj4*x1934*x1936))+(((-1.0)*sj4*x1937)))),IkReal(((((-1.0)*r10*x1935))+(((-1.0)*cj4*x1937))+((sj4*x1938))+x1940+((sj4*x1934*x1936))+(((-1.0)*x1934*x1940))+(((-1.0)*sj4*x1936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1941.valid){
continue;
}
CheckValue<IkReal> x1942=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1942.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1941.value)+(((1.5707963267949)*(x1942.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1943=IKcos(j6);
IkReal x1944=IKsin(j6);
IkReal x1945=(cj3*cj4);
IkReal x1946=((0.069)*cj0);
IkReal x1947=(cj3*sj4);
IkReal x1948=(cj4*r00);
IkReal x1949=(cj2*sj1);
IkReal x1950=(sj3*sj4);
IkReal x1951=((0.069)*sj0);
IkReal x1952=((1.0)*sj0);
IkReal x1953=((1.0)*cj4);
IkReal x1954=(cj4*sj3);
IkReal x1955=(r10*x1944);
IkReal x1956=(r01*x1943);
IkReal x1957=(r11*x1944);
IkReal x1958=((1.0)*x1943);
IkReal x1959=(sj3*x1944);
IkReal x1960=(r11*x1943);
IkReal x1961=(r00*x1944);
IkReal x1962=(r01*x1944);
evalcond[0]=((((-0.01)*x1956))+(((-0.01)*x1961))+(((-1.0)*px))+(((-1.0)*x1946*x1949))+x1946);
evalcond[1]=((((-1.0)*x1949*x1951))+(((-0.01)*x1955))+(((-0.01)*x1960))+(((-1.0)*py))+x1951);
evalcond[2]=(((cj0*cj2))+(((-1.0)*x1953*x1957))+((sj4*x1955))+((sj4*x1960))+((cj4*r10*x1943)));
evalcond[3]=(((x1943*x1948))+(((-1.0)*cj2*x1952))+((sj4*x1956))+((sj4*x1961))+(((-1.0)*x1953*x1962)));
evalcond[4]=((((-1.0)*r00*x1950*x1958))+((x1950*x1962))+((x1954*x1956))+((x1948*x1959)));
evalcond[5]=(((x1950*x1957))+((x1954*x1960))+((x1954*x1955))+(((-1.0)*r10*x1950*x1958)));
evalcond[6]=((((-1.0)*x1949*x1952))+((x1945*x1955))+((x1945*x1960))+(((-1.0)*r10*x1947*x1958))+((x1947*x1957)));
evalcond[7]=((((-1.0)*r00*x1947*x1958))+((x1945*x1956))+(((-1.0)*cj0*x1949))+((x1945*x1961))+((x1947*x1962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1963=((6.9)*cj0);
IkReal x1964=((6.9)*sj0);
IkReal x1965=(cj2*sj1);
IkReal x1966=(x1963*x1965);
IkReal x1967=(x1964*x1965);
CheckValue<IkReal> x1968 = IKatan2WithCheck(IkReal(((((100.0)*rxp1_2))+((r11*(((((-1.0)*x1966))+x1963))))+((r01*(((((-1.0)*x1964))+x1967)))))),IkReal(((((-100.0)*rxp0_2))+((r00*(((((-1.0)*x1967))+x1964))))+((r10*(((((-1.0)*x1963))+x1966)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1968.valid){
continue;
}
CheckValue<IkReal> x1969=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1969.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1968.value)+(((1.5707963267949)*(x1969.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1970=IKcos(j6);
IkReal x1971=IKsin(j6);
IkReal x1972=(cj3*cj4);
IkReal x1973=((0.069)*cj0);
IkReal x1974=(cj3*sj4);
IkReal x1975=(cj4*r00);
IkReal x1976=(cj2*sj1);
IkReal x1977=(sj3*sj4);
IkReal x1978=((0.069)*sj0);
IkReal x1979=((1.0)*sj0);
IkReal x1980=((1.0)*cj4);
IkReal x1981=(cj4*sj3);
IkReal x1982=(r10*x1971);
IkReal x1983=(r01*x1970);
IkReal x1984=(r11*x1971);
IkReal x1985=((1.0)*x1970);
IkReal x1986=(sj3*x1971);
IkReal x1987=(r11*x1970);
IkReal x1988=(r00*x1971);
IkReal x1989=(r01*x1971);
evalcond[0]=((((-0.01)*x1983))+(((-0.01)*x1988))+(((-1.0)*x1973*x1976))+(((-1.0)*px))+x1973);
evalcond[1]=((((-1.0)*x1976*x1978))+(((-0.01)*x1987))+(((-0.01)*x1982))+(((-1.0)*py))+x1978);
evalcond[2]=((((-1.0)*x1980*x1984))+((cj0*cj2))+((sj4*x1982))+((sj4*x1987))+((cj4*r10*x1970)));
evalcond[3]=((((-1.0)*x1980*x1989))+((x1970*x1975))+((sj4*x1983))+((sj4*x1988))+(((-1.0)*cj2*x1979)));
evalcond[4]=(((x1975*x1986))+((x1981*x1983))+(((-1.0)*r00*x1977*x1985))+((x1977*x1989)));
evalcond[5]=(((x1981*x1982))+((x1981*x1987))+(((-1.0)*r10*x1977*x1985))+((x1977*x1984)));
evalcond[6]=((((-1.0)*x1976*x1979))+((x1972*x1987))+((x1972*x1982))+(((-1.0)*r10*x1974*x1985))+((x1974*x1984)));
evalcond[7]=(((x1972*x1983))+((x1972*x1988))+(((-1.0)*cj0*x1976))+((x1974*x1989))+(((-1.0)*r00*x1974*x1985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[4];
IkReal x1990=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1990);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1990);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
j6eval[0]=r22;
j6eval[1]=IKsign(r22);
j6eval[2]=cj2;
j6eval[3]=((cj0*cj0)+(sj0*sj0));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1991=(cj0*cj2);
IkReal x1992=(cj2*sj0);
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal((((r10*x1992))+((r00*x1991)))),IkReal((((r11*x1992))+((r01*x1991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
CheckValue<IkReal> x1994=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1994.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1993.value)+(((1.5707963267949)*(x1994.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1995=IKcos(j6);
IkReal x1996=IKsin(j6);
IkReal x1997=((0.069)*cj0);
IkReal x1998=(cj3*cj5);
IkReal x1999=(r10*sj5);
IkReal x2000=(cj5*sj3);
IkReal x2001=(cj3*sj5);
IkReal x2002=((0.37429)*sj5);
IkReal x2003=(r00*sj5);
IkReal x2004=((0.01)*cj5);
IkReal x2005=((0.069)*sj0);
IkReal x2006=(cj2*sj1);
IkReal x2007=(sj3*sj5);
IkReal x2008=((1.0)*x1996);
IkReal x2009=((0.37429)*x1996);
IkReal x2010=(sj3*x1996);
IkReal x2011=((1.0)*x2006);
IkReal x2012=(r01*x1995);
IkReal x2013=(r11*x1995);
IkReal x2014=((1.0)*x2012);
IkReal x2015=((1.0)*x2013);
evalcond[0]=((((-1.0)*r11*x2008))+((cj0*cj2))+((r10*x1995)));
evalcond[1]=((((-1.0)*r01*x2008))+(((-1.0)*cj2*sj0))+((r00*x1995)));
evalcond[2]=((((-1.0)*r00*x2001*x2008))+(((-1.0)*r00*x2000*x2008))+(((-1.0)*x2000*x2014))+(((-1.0)*x2001*x2014)));
evalcond[3]=((((-1.0)*cj3*x1999*x2008))+(((-1.0)*x2000*x2015))+(((-1.0)*x2001*x2015))+(((-1.0)*r10*x2000*x2008)));
evalcond[4]=((((-1.0)*sj0*x2011))+((x1999*x2010))+(((-1.0)*x1998*x2015))+(((-1.0)*r10*x1998*x2008))+((x2007*x2013)));
evalcond[5]=((((-1.0)*r00*x1998*x2008))+(((-1.0)*x1998*x2014))+((x2003*x2010))+((x2007*x2012))+(((-1.0)*cj0*x2011)));
evalcond[6]=((((-1.0)*r00*x1996*x2002))+((r00*x1996*x2004))+((x2004*x2012))+(((-1.0)*x2002*x2012))+(((-1.0)*px))+x1997+(((-1.0)*x1997*x2006)));
evalcond[7]=((((-1.0)*x2005*x2006))+x2005+((x2004*x2013))+(((-1.0)*x2002*x2013))+((r10*x1996*x2004))+(((-1.0)*py))+(((-1.0)*x1999*x2009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[4];
IkReal x2016=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2016);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2016);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=r22;
j6eval[1]=cj2;
j6eval[2]=((cj0*cj0)+(sj0*sj0));
j6eval[3]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2017=((1.0)*cj2);
CheckValue<IkReal> x2018 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj0*x2017))+(((-1.0)*cj0*r00*x2017)))),IkReal(((((-1.0)*cj0*r01*x2017))+(((-1.0)*r11*sj0*x2017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2018.valid){
continue;
}
CheckValue<IkReal> x2019=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2019.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2018.value)+(((1.5707963267949)*(x2019.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2020=IKsin(j6);
IkReal x2021=IKcos(j6);
IkReal x2022=((0.069)*cj0);
IkReal x2023=((1.0)*cj3);
IkReal x2024=(cj0*cj2);
IkReal x2025=(cj3*cj5);
IkReal x2026=((1.0)*sj1);
IkReal x2027=(cj2*sj0);
IkReal x2028=((0.01)*cj5);
IkReal x2029=(cj5*sj3);
IkReal x2030=(r11*x2021);
IkReal x2031=(r10*x2020);
IkReal x2032=(r01*x2021);
IkReal x2033=((1.0)*x2021);
IkReal x2034=(r00*x2020);
IkReal x2035=(sj5*x2031);
IkReal x2036=(sj5*x2032);
IkReal x2037=(sj5*x2034);
evalcond[0]=(((r11*x2020))+x2024+(((-1.0)*r10*x2033)));
evalcond[1]=(((r01*x2020))+(((-1.0)*r00*x2033))+(((-1.0)*x2027)));
evalcond[2]=((((-1.0)*x2023*x2037))+(((-1.0)*x2023*x2036))+((x2029*x2034))+((x2029*x2032)));
evalcond[3]=((((-1.0)*x2023*x2035))+((x2029*x2031))+((x2029*x2030))+(((-1.0)*sj5*x2023*x2030)));
evalcond[4]=(((sj3*sj5*x2030))+((x2025*x2030))+((x2025*x2031))+((sj3*x2035))+(((-1.0)*x2026*x2027)));
evalcond[5]=(((x2025*x2034))+((x2025*x2032))+((sj3*x2036))+((sj3*x2037))+(((-1.0)*x2024*x2026)));
evalcond[6]=(x2022+(((-1.0)*cj2*sj1*x2022))+(((-1.0)*px))+((x2028*x2034))+((x2028*x2032))+(((-0.37429)*x2036))+(((-0.37429)*x2037)));
evalcond[7]=((((-1.0)*py))+((x2028*x2031))+((x2028*x2030))+(((-0.069)*sj1*x2027))+(((-0.37429)*sj5*x2030))+(((0.069)*sj0))+(((-0.37429)*x2035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x2038=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2038);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2038);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
IkReal x2039=((6900.0)*r10);
IkReal x2040=(sj0*sj2);
IkReal x2041=((6900.0)*cj0);
IkReal x2042=((6900.0)*sj0);
j6eval[0]=r22;
j6eval[1]=IKsign(r22);
j6eval[2]=((IKabs((((x2039*x2040))+((r00*sj2*x2041))+(((-100000.0)*rxp0_2))+(((-1.0)*cj0*x2039))+((r00*x2042)))))+(IKabs((((r11*x2041))+(((-1.0)*r01*sj2*x2041))+(((-6900.0)*r11*x2040))+(((-1.0)*r01*x2042))+(((100000.0)*rxp1_2))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2043=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2043);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2043);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j6eval[0]=sj3;
j6eval[1]=IKsign(sj3);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2044=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2044);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2044);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
IkReal x2045=(cj3*r22);
j6eval[0]=x2045;
j6eval[1]=IKsign(x2045);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2046=(r00*sj3);
IkReal x2047=((100000.0)*py);
IkReal x2048=((6900.0)*sj0);
IkReal x2049=(cj3*r01);
IkReal x2050=(r01*sj3);
IkReal x2051=(cj3*r00);
IkReal x2052=((6900.0)*cj0*sj2);
IkReal x2053=(cj3*x2052);
CheckValue<IkReal> x2054=IKPowWithIntegerCheck(IKsign((cj3*r22)),-1);
if(!x2054.valid){
continue;
}
CheckValue<IkReal> x2055 = IKatan2WithCheck(IkReal(((((-1.0)*x2046*x2052))+(((-1.0)*x2049*x2052))+((x2046*x2047))+((x2047*x2049))+(((-1.0)*x2048*x2049))+(((-1.0)*x2046*x2048)))),IkReal((((x2047*x2050))+(((-1.0)*x2048*x2050))+((x2048*x2051))+(((-1.0)*x2050*x2052))+(((-1.0)*x2047*x2051))+((x2051*x2052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2055.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2054.value)))+(x2055.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2056=IKcos(j6);
IkReal x2057=IKsin(j6);
IkReal x2058=((1.0)*cj3);
IkReal x2059=((1.0)*sj3);
IkReal x2060=((0.069)*cj0);
IkReal x2061=((0.069)*sj0);
IkReal x2062=(r01*x2056);
IkReal x2063=(r10*x2056);
IkReal x2064=(r10*x2057);
IkReal x2065=(r11*x2057);
IkReal x2066=(r00*x2057);
IkReal x2067=(r11*x2056);
IkReal x2068=(r01*x2057);
IkReal x2069=(r00*x2056);
evalcond[0]=(x2060+(((-1.0)*sj2*x2061))+(((-1.0)*px))+(((-0.37429)*x2066))+(((-0.37429)*x2062)));
evalcond[1]=(((sj2*x2060))+x2061+(((-1.0)*py))+(((-0.37429)*x2067))+(((-0.37429)*x2064)));
evalcond[2]=(((sj3*x2068))+(((-1.0)*x2058*x2066))+(((-1.0)*x2058*x2062))+(((-1.0)*x2059*x2069)));
evalcond[3]=(((sj3*x2065))+(((-1.0)*x2058*x2067))+(((-1.0)*x2058*x2064))+(((-1.0)*x2059*x2063)));
evalcond[4]=(((sj3*x2067))+((sj3*x2064))+(((-1.0)*x2058*x2063))+((cj3*x2065))+((cj0*sj2)));
evalcond[5]=(((sj3*x2066))+((sj3*x2062))+(((-1.0)*x2058*x2069))+(((-1.0)*sj0*sj2))+((cj3*x2068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2070=((100000.0)*px*r00);
IkReal x2071=((6900.0)*cj0*cj3);
IkReal x2072=((6900.0)*cj0*sj3);
IkReal x2073=((100000.0)*px*r01);
IkReal x2074=((6900.0)*cj3*sj0*sj2);
IkReal x2075=((6900.0)*sj0*sj2*sj3);
CheckValue<IkReal> x2076 = IKatan2WithCheck(IkReal((((sj3*x2070))+((r01*x2074))+(((-1.0)*r01*x2071))+(((-1.0)*r00*x2072))+((r00*x2075))+((cj3*x2073)))),IkReal((((sj3*x2073))+(((-1.0)*cj3*x2070))+((r01*x2075))+(((-1.0)*r01*x2072))+(((-1.0)*r00*x2074))+((r00*x2071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2076.valid){
continue;
}
CheckValue<IkReal> x2077=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2077.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2076.value)+(((-1.5707963267949)*(x2077.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2078=IKcos(j6);
IkReal x2079=IKsin(j6);
IkReal x2080=((1.0)*cj3);
IkReal x2081=((1.0)*sj3);
IkReal x2082=((0.069)*cj0);
IkReal x2083=((0.069)*sj0);
IkReal x2084=(r01*x2078);
IkReal x2085=(r10*x2078);
IkReal x2086=(r10*x2079);
IkReal x2087=(r11*x2079);
IkReal x2088=(r00*x2079);
IkReal x2089=(r11*x2078);
IkReal x2090=(r01*x2079);
IkReal x2091=(r00*x2078);
evalcond[0]=((((-0.37429)*x2084))+(((-0.37429)*x2088))+(((-1.0)*sj2*x2083))+x2082+(((-1.0)*px)));
evalcond[1]=((((-0.37429)*x2086))+(((-0.37429)*x2089))+x2083+(((-1.0)*py))+((sj2*x2082)));
evalcond[2]=((((-1.0)*x2081*x2091))+((sj3*x2090))+(((-1.0)*x2080*x2088))+(((-1.0)*x2080*x2084)));
evalcond[3]=((((-1.0)*x2081*x2085))+(((-1.0)*x2080*x2089))+(((-1.0)*x2080*x2086))+((sj3*x2087)));
evalcond[4]=((((-1.0)*x2080*x2085))+((sj3*x2089))+((sj3*x2086))+((cj0*sj2))+((cj3*x2087)));
evalcond[5]=(((cj3*x2090))+(((-1.0)*sj0*sj2))+((sj3*x2088))+((sj3*x2084))+(((-1.0)*x2080*x2091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2092=((6900.0)*cj0);
IkReal x2093=((6900.0)*sj0);
IkReal x2094=(sj2*x2093);
IkReal x2095=(x2093+((sj2*x2092)));
CheckValue<IkReal> x2096 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2095))+((r11*(((((-1.0)*x2094))+x2092))))+(((100000.0)*rxp1_2)))),IkReal((((r00*x2095))+(((-100000.0)*rxp0_2))+((r10*(((((-1.0)*x2092))+x2094)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2096.valid){
continue;
}
CheckValue<IkReal> x2097=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2097.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2096.value)+(((1.5707963267949)*(x2097.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2098=IKcos(j6);
IkReal x2099=IKsin(j6);
IkReal x2100=((1.0)*cj3);
IkReal x2101=((1.0)*sj3);
IkReal x2102=((0.069)*cj0);
IkReal x2103=((0.069)*sj0);
IkReal x2104=(r01*x2098);
IkReal x2105=(r10*x2098);
IkReal x2106=(r10*x2099);
IkReal x2107=(r11*x2099);
IkReal x2108=(r00*x2099);
IkReal x2109=(r11*x2098);
IkReal x2110=(r01*x2099);
IkReal x2111=(r00*x2098);
evalcond[0]=((((-0.37429)*x2104))+(((-0.37429)*x2108))+(((-1.0)*sj2*x2103))+x2102+(((-1.0)*px)));
evalcond[1]=((((-0.37429)*x2106))+(((-0.37429)*x2109))+x2103+(((-1.0)*py))+((sj2*x2102)));
evalcond[2]=((((-1.0)*x2101*x2111))+(((-1.0)*x2100*x2108))+(((-1.0)*x2100*x2104))+((sj3*x2110)));
evalcond[3]=((((-1.0)*x2100*x2109))+(((-1.0)*x2100*x2106))+(((-1.0)*x2101*x2105))+((sj3*x2107)));
evalcond[4]=((((-1.0)*x2100*x2105))+((cj3*x2107))+((sj3*x2109))+((sj3*x2106))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x2100*x2111))+(((-1.0)*sj0*sj2))+((sj3*x2108))+((sj3*x2104))+((cj3*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x2112=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2112);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2112);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
IkReal x2113=((6900.0)*r10);
IkReal x2114=(sj0*sj2);
IkReal x2115=((6900.0)*cj0);
IkReal x2116=((6900.0)*sj0);
j6eval[0]=r22;
j6eval[1]=IKsign(r22);
j6eval[2]=((IKabs(((((-1.0)*r01*x2116))+(((-6900.0)*r11*x2114))+(((-1.0)*r01*sj2*x2115))+((r11*x2115))+(((100000.0)*rxp1_2)))))+(IKabs((((r00*x2116))+(((-1.0)*cj0*x2113))+(((-100000.0)*rxp0_2))+((x2113*x2114))+((r00*sj2*x2115))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2117=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2117);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2117);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j6eval[0]=sj3;
j6eval[1]=IKsign(sj3);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2118=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2118);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2118);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
IkReal x2119=(cj3*r22);
j6eval[0]=x2119;
j6eval[1]=IKsign(x2119);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2120=(r00*sj3);
IkReal x2121=((100000.0)*py);
IkReal x2122=((6900.0)*sj0);
IkReal x2123=(cj3*r01);
IkReal x2124=(r01*sj3);
IkReal x2125=(cj3*r00);
IkReal x2126=((6900.0)*cj0*sj2);
IkReal x2127=(cj3*x2126);
CheckValue<IkReal> x2128=IKPowWithIntegerCheck(IKsign((cj3*r22)),-1);
if(!x2128.valid){
continue;
}
CheckValue<IkReal> x2129 = IKatan2WithCheck(IkReal(((((-1.0)*x2122*x2123))+(((-1.0)*x2120*x2121))+((x2120*x2122))+((x2120*x2126))+((x2121*x2123))+(((-1.0)*x2123*x2126)))),IkReal((((x2125*x2126))+((x2122*x2125))+((x2122*x2124))+(((-1.0)*x2121*x2124))+(((-1.0)*x2121*x2125))+((x2124*x2126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2129.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2128.value)))+(x2129.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2130=IKcos(j6);
IkReal x2131=IKsin(j6);
IkReal x2132=((1.0)*cj3);
IkReal x2133=(cj0*sj2);
IkReal x2134=((0.069)*sj0);
IkReal x2135=(r01*x2130);
IkReal x2136=(r10*x2131);
IkReal x2137=(sj3*x2130);
IkReal x2138=(cj3*x2130);
IkReal x2139=(r00*x2131);
IkReal x2140=(r11*x2130);
IkReal x2141=((1.0)*sj3*x2131);
evalcond[0]=((((-0.37429)*x2139))+(((-0.37429)*x2135))+(((-1.0)*sj2*x2134))+(((0.069)*cj0))+(((-1.0)*px)));
evalcond[1]=((((-0.37429)*x2136))+(((0.069)*x2133))+x2134+(((-1.0)*py))+(((-0.37429)*x2140)));
evalcond[2]=((((-1.0)*r01*x2141))+((r00*x2137))+(((-1.0)*x2132*x2139))+(((-1.0)*x2132*x2135)));
evalcond[3]=((((-1.0)*x2132*x2140))+(((-1.0)*r11*x2141))+((r10*x2137))+(((-1.0)*x2132*x2136)));
evalcond[4]=(((r11*x2137))+(((-1.0)*r11*x2131*x2132))+x2133+((r10*x2138))+((sj3*x2136)));
evalcond[5]=((((-1.0)*r01*x2131*x2132))+((r00*x2138))+(((-1.0)*sj0*sj2))+((sj3*x2139))+((sj3*x2135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2142=((6900.0)*cj0);
IkReal x2143=(cj3*r01);
IkReal x2144=(r00*sj3);
IkReal x2145=(r01*sj3);
IkReal x2146=((100000.0)*px);
IkReal x2147=(r00*x2146);
IkReal x2148=((6900.0)*sj0*sj2);
IkReal x2149=(cj3*x2148);
CheckValue<IkReal> x2150 = IKatan2WithCheck(IkReal(((((-1.0)*x2144*x2146))+(((-1.0)*x2144*x2148))+(((-1.0)*x2142*x2143))+((x2143*x2148))+((x2143*x2146))+((x2142*x2144)))),IkReal(((((-1.0)*r00*x2149))+((x2142*x2145))+((cj3*r00*x2142))+(((-1.0)*x2145*x2148))+(((-1.0)*x2145*x2146))+(((-1.0)*cj3*x2147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2150.valid){
continue;
}
CheckValue<IkReal> x2151=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2151.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2150.value)+(((1.5707963267949)*(x2151.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2152=IKcos(j6);
IkReal x2153=IKsin(j6);
IkReal x2154=((1.0)*cj3);
IkReal x2155=(cj0*sj2);
IkReal x2156=((0.069)*sj0);
IkReal x2157=(r01*x2152);
IkReal x2158=(r10*x2153);
IkReal x2159=(sj3*x2152);
IkReal x2160=(cj3*x2152);
IkReal x2161=(r00*x2153);
IkReal x2162=(r11*x2152);
IkReal x2163=((1.0)*sj3*x2153);
evalcond[0]=((((-1.0)*sj2*x2156))+(((0.069)*cj0))+(((-1.0)*px))+(((-0.37429)*x2157))+(((-0.37429)*x2161)));
evalcond[1]=(x2156+(((-1.0)*py))+(((-0.37429)*x2158))+(((-0.37429)*x2162))+(((0.069)*x2155)));
evalcond[2]=((((-1.0)*r01*x2163))+(((-1.0)*x2154*x2161))+((r00*x2159))+(((-1.0)*x2154*x2157)));
evalcond[3]=((((-1.0)*x2154*x2162))+((r10*x2159))+(((-1.0)*r11*x2163))+(((-1.0)*x2154*x2158)));
evalcond[4]=((((-1.0)*r11*x2153*x2154))+x2155+((r10*x2160))+((r11*x2159))+((sj3*x2158)));
evalcond[5]=((((-1.0)*r01*x2153*x2154))+((r00*x2160))+((sj3*x2161))+(((-1.0)*sj0*sj2))+((sj3*x2157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2164=((6900.0)*cj0);
IkReal x2165=((6900.0)*sj0);
IkReal x2166=(sj2*x2165);
IkReal x2167=(x2165+((sj2*x2164)));
CheckValue<IkReal> x2168 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2167))+((r11*((x2164+(((-1.0)*x2166))))))+(((100000.0)*rxp1_2)))),IkReal((((r00*x2167))+(((-100000.0)*rxp0_2))+((r10*((x2166+(((-1.0)*x2164)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2168.valid){
continue;
}
CheckValue<IkReal> x2169=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2169.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2168.value)+(((1.5707963267949)*(x2169.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2170=IKcos(j6);
IkReal x2171=IKsin(j6);
IkReal x2172=((1.0)*cj3);
IkReal x2173=(cj0*sj2);
IkReal x2174=((0.069)*sj0);
IkReal x2175=(r01*x2170);
IkReal x2176=(r10*x2171);
IkReal x2177=(sj3*x2170);
IkReal x2178=(cj3*x2170);
IkReal x2179=(r00*x2171);
IkReal x2180=(r11*x2170);
IkReal x2181=((1.0)*sj3*x2171);
evalcond[0]=((((-1.0)*sj2*x2174))+(((0.069)*cj0))+(((-1.0)*px))+(((-0.37429)*x2179))+(((-0.37429)*x2175)));
evalcond[1]=(x2174+(((0.069)*x2173))+(((-1.0)*py))+(((-0.37429)*x2180))+(((-0.37429)*x2176)));
evalcond[2]=(((r00*x2177))+(((-1.0)*x2172*x2179))+(((-1.0)*x2172*x2175))+(((-1.0)*r01*x2181)));
evalcond[3]=((((-1.0)*x2172*x2180))+((r10*x2177))+(((-1.0)*x2172*x2176))+(((-1.0)*r11*x2181)));
evalcond[4]=(((r11*x2177))+x2173+(((-1.0)*r11*x2171*x2172))+((sj3*x2176))+((r10*x2178)));
evalcond[5]=(((r00*x2178))+((sj3*x2175))+((sj3*x2179))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x2171*x2172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x2182=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2182);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2182);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
IkReal x2183=((6900.0)*r10);
IkReal x2184=(sj0*sj2);
IkReal x2185=((6900.0)*r01);
IkReal x2186=(cj0*sj2);
IkReal x2187=((6900.0)*r11);
IkReal x2188=((6900.0)*r00);
j6eval[0]=r22;
j6eval[1]=((IKabs(((((-1.0)*x2186*x2188))+((cj0*x2183))+(((-1.0)*sj0*x2188))+(((-1.0)*x2183*x2184))+(((100000.0)*rxp0_2)))))+(IKabs(((((-1.0)*cj0*x2187))+((sj0*x2185))+(((-100000.0)*rxp1_2))+((x2184*x2187))+((x2185*x2186))))));
j6eval[2]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2189=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2189);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2189);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j6eval[0]=sj3;
j6eval[1]=IKsign(sj3);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2190=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2190);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2190);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
IkReal x2191=(cj3*r22);
j6eval[0]=x2191;
j6eval[1]=IKsign(x2191);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2192=(r00*sj3);
IkReal x2193=((100000.0)*py);
IkReal x2194=((6900.0)*sj0);
IkReal x2195=(cj3*r01);
IkReal x2196=(r01*sj3);
IkReal x2197=(cj3*r00);
IkReal x2198=((6900.0)*cj0*sj2);
IkReal x2199=(cj3*x2198);
CheckValue<IkReal> x2200=IKPowWithIntegerCheck(IKsign((cj3*r22)),-1);
if(!x2200.valid){
continue;
}
CheckValue<IkReal> x2201 = IKatan2WithCheck(IkReal((((x2192*x2193))+((x2194*x2195))+(((-1.0)*x2193*x2195))+(((-1.0)*x2192*x2198))+(((-1.0)*x2192*x2194))+((x2195*x2198)))),IkReal((((x2193*x2197))+((x2193*x2196))+(((-1.0)*x2196*x2198))+(((-1.0)*x2197*x2198))+(((-1.0)*x2194*x2197))+(((-1.0)*x2194*x2196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2201.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2200.value)))+(x2201.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2202=IKcos(j6);
IkReal x2203=IKsin(j6);
IkReal x2204=((0.069)*cj0);
IkReal x2205=((1.0)*sj3);
IkReal x2206=((0.069)*sj0);
IkReal x2207=((1.0)*cj3);
IkReal x2208=(r00*x2203);
IkReal x2209=(r10*x2202);
IkReal x2210=(r01*x2202);
IkReal x2211=(r11*x2203);
IkReal x2212=(r10*x2203);
IkReal x2213=(r01*x2203);
IkReal x2214=(r00*x2202);
IkReal x2215=(r11*x2202);
evalcond[0]=((((-1.0)*sj2*x2206))+x2204+(((0.37429)*x2210))+(((-1.0)*px))+(((0.37429)*x2208)));
evalcond[1]=(x2206+((sj2*x2204))+(((0.37429)*x2215))+(((0.37429)*x2212))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*x2205*x2214))+((sj3*x2213))+((cj3*x2208))+((cj3*x2210)));
evalcond[3]=(((sj3*x2211))+(((-1.0)*x2205*x2209))+((cj3*x2212))+((cj3*x2215)));
evalcond[4]=((((-1.0)*x2205*x2212))+(((-1.0)*x2205*x2215))+(((-1.0)*x2207*x2209))+((cj3*x2211))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x2205*x2210))+(((-1.0)*x2205*x2208))+(((-1.0)*x2207*x2214))+((cj3*x2213))+(((-1.0)*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2216=((100000.0)*px*r00);
IkReal x2217=((6900.0)*cj0*cj3);
IkReal x2218=((6900.0)*cj0*sj3);
IkReal x2219=((100000.0)*px*r01);
IkReal x2220=((6900.0)*cj3*sj0*sj2);
IkReal x2221=((6900.0)*sj0*sj2*sj3);
CheckValue<IkReal> x2222=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2222.valid){
continue;
}
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal((((r01*x2217))+((sj3*x2216))+(((-1.0)*r01*x2220))+(((-1.0)*cj3*x2219))+((r00*x2221))+(((-1.0)*r00*x2218)))),IkReal((((sj3*x2219))+((cj3*x2216))+((r00*x2220))+(((-1.0)*r01*x2218))+(((-1.0)*r00*x2217))+((r01*x2221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2222.value)))+(x2223.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2224=IKcos(j6);
IkReal x2225=IKsin(j6);
IkReal x2226=((0.069)*cj0);
IkReal x2227=((1.0)*sj3);
IkReal x2228=((0.069)*sj0);
IkReal x2229=((1.0)*cj3);
IkReal x2230=(r00*x2225);
IkReal x2231=(r10*x2224);
IkReal x2232=(r01*x2224);
IkReal x2233=(r11*x2225);
IkReal x2234=(r10*x2225);
IkReal x2235=(r01*x2225);
IkReal x2236=(r00*x2224);
IkReal x2237=(r11*x2224);
evalcond[0]=(x2226+(((-1.0)*px))+(((-1.0)*sj2*x2228))+(((0.37429)*x2232))+(((0.37429)*x2230)));
evalcond[1]=(x2228+((sj2*x2226))+(((-1.0)*py))+(((0.37429)*x2237))+(((0.37429)*x2234)));
evalcond[2]=((((-1.0)*x2227*x2236))+((sj3*x2235))+((cj3*x2232))+((cj3*x2230)));
evalcond[3]=((((-1.0)*x2227*x2231))+((sj3*x2233))+((cj3*x2237))+((cj3*x2234)));
evalcond[4]=((((-1.0)*x2227*x2237))+(((-1.0)*x2227*x2234))+(((-1.0)*x2229*x2231))+((cj3*x2233))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x2227*x2230))+(((-1.0)*x2227*x2232))+(((-1.0)*x2229*x2236))+(((-1.0)*sj0*sj2))+((cj3*x2235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2238=((6900.0)*cj0);
IkReal x2239=((6900.0)*sj0);
IkReal x2240=(sj2*x2239);
IkReal x2241=(x2239+((sj2*x2238)));
CheckValue<IkReal> x2242 = IKatan2WithCheck(IkReal((((r11*((x2240+(((-1.0)*x2238))))))+((r01*x2241))+(((-100000.0)*rxp1_2)))),IkReal(((((-1.0)*r00*x2241))+((r10*((x2238+(((-1.0)*x2240))))))+(((100000.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2242.valid){
continue;
}
CheckValue<IkReal> x2243=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2243.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2242.value)+(((1.5707963267949)*(x2243.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2244=IKcos(j6);
IkReal x2245=IKsin(j6);
IkReal x2246=((0.069)*cj0);
IkReal x2247=((1.0)*sj3);
IkReal x2248=((0.069)*sj0);
IkReal x2249=((1.0)*cj3);
IkReal x2250=(r00*x2245);
IkReal x2251=(r10*x2244);
IkReal x2252=(r01*x2244);
IkReal x2253=(r11*x2245);
IkReal x2254=(r10*x2245);
IkReal x2255=(r01*x2245);
IkReal x2256=(r00*x2244);
IkReal x2257=(r11*x2244);
evalcond[0]=(x2246+(((-1.0)*sj2*x2248))+(((0.37429)*x2252))+(((0.37429)*x2250))+(((-1.0)*px)));
evalcond[1]=(x2248+((sj2*x2246))+(((0.37429)*x2254))+(((0.37429)*x2257))+(((-1.0)*py)));
evalcond[2]=(((sj3*x2255))+((cj3*x2252))+((cj3*x2250))+(((-1.0)*x2247*x2256)));
evalcond[3]=(((sj3*x2253))+((cj3*x2257))+((cj3*x2254))+(((-1.0)*x2247*x2251)));
evalcond[4]=((((-1.0)*x2249*x2251))+((cj3*x2253))+((cj0*sj2))+(((-1.0)*x2247*x2254))+(((-1.0)*x2247*x2257)));
evalcond[5]=((((-1.0)*x2249*x2256))+((cj3*x2255))+(((-1.0)*sj0*sj2))+(((-1.0)*x2247*x2252))+(((-1.0)*x2247*x2250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x2258=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2258);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2258);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
IkReal x2259=((6900.0)*r10);
IkReal x2260=(sj0*sj2);
IkReal x2261=((6900.0)*r01);
IkReal x2262=(cj0*sj2);
IkReal x2263=((6900.0)*r11);
IkReal x2264=((6900.0)*r00);
j6eval[0]=r22;
j6eval[1]=((IKabs(((((-1.0)*sj0*x2264))+((cj0*x2259))+(((-1.0)*x2259*x2260))+(((-1.0)*x2262*x2264))+(((100000.0)*rxp0_2)))))+(IKabs((((x2260*x2263))+((sj0*x2261))+((x2261*x2262))+(((-1.0)*cj0*x2263))+(((-100000.0)*rxp1_2))))));
j6eval[2]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2265=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2265);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2265);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j6eval[0]=sj3;
j6eval[1]=IKsign(sj3);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2266=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2266);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2266);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
IkReal x2267=(cj3*r22);
j6eval[0]=x2267;
j6eval[1]=IKsign(x2267);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2268=(r00*sj3);
IkReal x2269=((100000.0)*py);
IkReal x2270=((6900.0)*sj0);
IkReal x2271=(cj3*r01);
IkReal x2272=(r01*sj3);
IkReal x2273=(cj3*r00);
IkReal x2274=((6900.0)*cj0*sj2);
IkReal x2275=(cj3*x2274);
CheckValue<IkReal> x2276=IKPowWithIntegerCheck(IKsign((cj3*r22)),-1);
if(!x2276.valid){
continue;
}
CheckValue<IkReal> x2277 = IKatan2WithCheck(IkReal((((x2270*x2271))+((x2268*x2270))+((x2268*x2274))+(((-1.0)*x2269*x2271))+(((-1.0)*x2268*x2269))+((x2271*x2274)))),IkReal((((x2270*x2272))+(((-1.0)*x2273*x2274))+((x2269*x2273))+(((-1.0)*x2270*x2273))+((x2272*x2274))+(((-1.0)*x2269*x2272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2277.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2276.value)))+(x2277.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2278=IKcos(j6);
IkReal x2279=IKsin(j6);
IkReal x2280=((0.069)*cj0);
IkReal x2281=((1.0)*sj3);
IkReal x2282=(cj3*r00);
IkReal x2283=((0.069)*sj0);
IkReal x2284=(r10*x2278);
IkReal x2285=(r01*x2278);
IkReal x2286=((0.37429)*x2279);
IkReal x2287=(r11*x2278);
IkReal x2288=(cj3*x2279);
IkReal x2289=(x2279*x2281);
evalcond[0]=(x2280+(((-1.0)*sj2*x2283))+(((0.37429)*x2285))+(((-1.0)*px))+((r00*x2286)));
evalcond[1]=(((sj2*x2280))+((r10*x2286))+x2283+(((0.37429)*x2287))+(((-1.0)*py)));
evalcond[2]=(((cj3*x2285))+((r00*sj3*x2278))+((x2279*x2282))+(((-1.0)*r01*x2289)));
evalcond[3]=(((r10*x2288))+((sj3*x2284))+((cj3*x2287))+(((-1.0)*r11*x2289)));
evalcond[4]=(((cj3*x2284))+(((-1.0)*r10*x2289))+(((-1.0)*x2281*x2287))+(((-1.0)*r11*x2288))+((cj0*sj2)));
evalcond[5]=(((x2278*x2282))+(((-1.0)*x2281*x2285))+(((-1.0)*r01*x2288))+(((-1.0)*sj0*sj2))+(((-1.0)*r00*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2290=((100000.0)*px*r00);
IkReal x2291=((6900.0)*cj0*cj3);
IkReal x2292=((6900.0)*cj0*sj3);
IkReal x2293=((100000.0)*px*r01);
IkReal x2294=((6900.0)*cj3*sj0*sj2);
IkReal x2295=((6900.0)*sj0*sj2*sj3);
CheckValue<IkReal> x2296 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x2293))+(((-1.0)*r00*x2295))+(((-1.0)*r01*x2294))+((r00*x2292))+(((-1.0)*sj3*x2290))+((r01*x2291)))),IkReal(((((-1.0)*r00*x2291))+(((-1.0)*r01*x2295))+((r00*x2294))+(((-1.0)*sj3*x2293))+((r01*x2292))+((cj3*x2290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2296.valid){
continue;
}
CheckValue<IkReal> x2297=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2297.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2296.value)+(((-1.5707963267949)*(x2297.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2298=IKcos(j6);
IkReal x2299=IKsin(j6);
IkReal x2300=((0.069)*cj0);
IkReal x2301=((1.0)*sj3);
IkReal x2302=(cj3*r00);
IkReal x2303=((0.069)*sj0);
IkReal x2304=(r10*x2298);
IkReal x2305=(r01*x2298);
IkReal x2306=((0.37429)*x2299);
IkReal x2307=(r11*x2298);
IkReal x2308=(cj3*x2299);
IkReal x2309=(x2299*x2301);
evalcond[0]=((((-1.0)*sj2*x2303))+x2300+(((-1.0)*px))+(((0.37429)*x2305))+((r00*x2306)));
evalcond[1]=(((r10*x2306))+x2303+((sj2*x2300))+(((-1.0)*py))+(((0.37429)*x2307)));
evalcond[2]=((((-1.0)*r01*x2309))+((x2299*x2302))+((r00*sj3*x2298))+((cj3*x2305)));
evalcond[3]=((((-1.0)*r11*x2309))+((r10*x2308))+((sj3*x2304))+((cj3*x2307)));
evalcond[4]=((((-1.0)*r10*x2309))+(((-1.0)*x2301*x2307))+(((-1.0)*r11*x2308))+((cj3*x2304))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x2301*x2305))+(((-1.0)*r00*x2309))+((x2298*x2302))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x2308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2310=((6900.0)*cj0);
IkReal x2311=((6900.0)*sj0);
IkReal x2312=(sj2*x2311);
IkReal x2313=(((sj2*x2310))+x2311);
CheckValue<IkReal> x2314 = IKatan2WithCheck(IkReal((((r11*((x2312+(((-1.0)*x2310))))))+((r01*x2313))+(((-100000.0)*rxp1_2)))),IkReal((((r10*((x2310+(((-1.0)*x2312))))))+(((-1.0)*r00*x2313))+(((100000.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2314.valid){
continue;
}
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2315.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2314.value)+(((1.5707963267949)*(x2315.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2316=IKcos(j6);
IkReal x2317=IKsin(j6);
IkReal x2318=((0.069)*cj0);
IkReal x2319=((1.0)*sj3);
IkReal x2320=(cj3*r00);
IkReal x2321=((0.069)*sj0);
IkReal x2322=(r10*x2316);
IkReal x2323=(r01*x2316);
IkReal x2324=((0.37429)*x2317);
IkReal x2325=(r11*x2316);
IkReal x2326=(cj3*x2317);
IkReal x2327=(x2317*x2319);
evalcond[0]=((((0.37429)*x2323))+x2318+(((-1.0)*px))+((r00*x2324))+(((-1.0)*sj2*x2321)));
evalcond[1]=(((r10*x2324))+((sj2*x2318))+(((0.37429)*x2325))+x2321+(((-1.0)*py)));
evalcond[2]=(((cj3*x2323))+((x2317*x2320))+(((-1.0)*r01*x2327))+((r00*sj3*x2316)));
evalcond[3]=(((r10*x2326))+((cj3*x2325))+((sj3*x2322))+(((-1.0)*r11*x2327)));
evalcond[4]=(((cj3*x2322))+(((-1.0)*r11*x2326))+(((-1.0)*x2319*x2325))+(((-1.0)*r10*x2327))+((cj0*sj2)));
evalcond[5]=(((x2316*x2320))+(((-1.0)*x2319*x2323))+(((-1.0)*r01*x2326))+(((-1.0)*sj0*sj2))+(((-1.0)*r00*x2327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2328=(cj4*sj3);
IkReal x2329=((1.0)*r01);
IkReal x2330=(cj3*sj5);
IkReal x2331=(sj3*sj4);
IkReal x2332=(cj0*cj2);
IkReal x2333=((1.0)*r00);
IkReal x2334=(cj5*r00);
IkReal x2335=(cj5*sj4);
IkReal x2336=(cj0*cj1);
IkReal x2337=(cj4*x2336);
IkReal x2338=(sj0*sj1*sj2);
CheckValue<IkReal> x2339 = IKatan2WithCheck(IkReal(((((-1.0)*x2329*x2330*x2338))+(((-1.0)*x2329*x2330*x2332))+(((-1.0)*x2331*x2332*x2333))+(((-1.0)*x2331*x2333*x2338))+(((-1.0)*cj5*x2328*x2329*x2338))+(((-1.0)*cj5*x2328*x2329*x2332))+(((-1.0)*r11*x2335*x2336))+((r10*x2337)))),IkReal((((x2328*x2334*x2338))+((r11*x2337))+((x2328*x2332*x2334))+((r10*x2335*x2336))+((r00*x2330*x2338))+((r00*x2330*x2332))+(((-1.0)*x2329*x2331*x2332))+(((-1.0)*x2329*x2331*x2338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2339.valid){
continue;
}
CheckValue<IkReal> x2340=IKPowWithIntegerCheck(IKsign((r22*((((cj5*x2328*x2335))+(((-1.0)*sj4*x2328))+((x2330*x2335)))))),-1);
if(!x2340.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2339.value)+(((1.5707963267949)*(x2340.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2341=IKcos(j6);
IkReal x2342=IKsin(j6);
IkReal x2343=((0.36442)*cj1);
IkReal x2344=((0.069)*cj0);
IkReal x2345=(r01*sj3);
IkReal x2346=((1.0)*cj0);
IkReal x2347=((1.0)*cj3);
IkReal x2348=(cj0*sj2);
IkReal x2349=((1.0)*sj3);
IkReal x2350=(cj2*sj1);
IkReal x2351=((0.069)*sj0);
IkReal x2352=(cj4*cj5);
IkReal x2353=((0.01)*cj5);
IkReal x2354=(r11*sj3);
IkReal x2355=((1.0)*sj0);
IkReal x2356=((1.0)*cj5);
IkReal x2357=(sj5*x2341);
IkReal x2358=(sj4*x2342);
IkReal x2359=(r10*x2341);
IkReal x2360=(r00*x2342);
IkReal x2361=(r11*x2341);
IkReal x2362=(r01*x2341);
IkReal x2363=(r10*x2342);
IkReal x2364=(sj5*x2363);
IkReal x2365=(r00*sj4*x2341);
IkReal x2366=((1.0)*cj4*x2342);
evalcond[0]=(((cj4*x2359))+(((-1.0)*sj4*x2356*x2361))+((cj0*cj2))+(((-1.0)*r10*x2356*x2358))+((sj0*sj1*sj2))+(((-1.0)*r11*x2366)));
evalcond[1]=(((sj1*x2348))+((cj4*r00*x2341))+(((-1.0)*sj4*x2356*x2362))+(((-1.0)*r01*x2366))+(((-1.0)*cj2*x2355))+(((-1.0)*r00*x2356*x2358)));
evalcond[2]=(x2344+(((-1.0)*x2344*x2350))+(((-0.37429)*sj5*x2360))+(((-1.0)*sj2*x2351))+(((-1.0)*px))+(((-0.37429)*r01*x2357))+((x2353*x2360))+((x2353*x2362))+((cj0*x2343)));
evalcond[3]=(((sj0*x2343))+x2351+(((-0.37429)*x2364))+(((-1.0)*py))+((x2353*x2361))+((x2353*x2363))+(((-1.0)*x2350*x2351))+(((-0.37429)*r11*x2357))+((sj2*x2344)));
evalcond[4]=((((-1.0)*x2349*x2365))+((x2345*x2358))+(((-1.0)*cj1*x2346))+(((-1.0)*x2349*x2352*x2360))+(((-1.0)*r01*x2347*x2357))+(((-1.0)*sj5*x2347*x2360))+(((-1.0)*x2341*x2345*x2352)));
evalcond[5]=((((-1.0)*x2347*x2364))+(((-1.0)*sj4*x2349*x2359))+((x2354*x2358))+(((-1.0)*r11*x2347*x2357))+(((-1.0)*cj1*x2355))+(((-1.0)*x2349*x2352*x2361))+(((-1.0)*x2349*x2352*x2363)));
evalcond[6]=(((cj3*r11*x2358))+x2348+((x2354*x2357))+(((-1.0)*x2347*x2352*x2363))+(((-1.0)*x2347*x2352*x2361))+((sj3*x2364))+(((-1.0)*sj4*x2347*x2359))+(((-1.0)*x2350*x2355)));
evalcond[7]=((((-1.0)*x2347*x2365))+(((-1.0)*x2346*x2350))+(((-1.0)*x2347*x2352*x2362))+(((-1.0)*x2347*x2352*x2360))+(((-1.0)*sj2*x2355))+((x2345*x2357))+((sj3*sj5*x2360))+((cj3*r01*x2358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2367=((1.0)*sj3);
IkReal x2368=(sj1*sj2);
IkReal x2369=(cj1*cj5);
IkReal x2370=(cj3*sj5);
IkReal x2371=(cj4*r00);
IkReal x2372=(cj0*cj1);
IkReal x2373=(cj2*sj0);
IkReal x2374=(sj3*sj4);
IkReal x2375=(cj5*sj3);
IkReal x2376=(cj0*r01);
IkReal x2377=(cj4*r01);
IkReal x2378=(cj0*r00*sj4);
CheckValue<IkReal> x2379 = IKatan2WithCheck(IkReal(((((-1.0)*x2368*x2370*x2376))+((x2371*x2372))+(((-1.0)*cj4*cj5*x2367*x2368*x2376))+(((-1.0)*sj4*x2369*x2376))+(((-1.0)*x2367*x2368*x2378))+((r01*x2370*x2373))+((r00*x2373*x2374))+((x2373*x2375*x2377)))),IkReal((((x2372*x2377))+((r01*x2373*x2374))+((cj0*r00*x2368*x2370))+((cj0*x2368*x2371*x2375))+(((-1.0)*sj4*x2367*x2368*x2376))+(((-1.0)*r00*x2370*x2373))+(((-1.0)*cj5*x2367*x2371*x2373))+((x2369*x2378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2379.valid){
continue;
}
CheckValue<IkReal> x2380=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x2367))+(((-1.0)*cj4*x2370)))),-1);
if(!x2380.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2379.value)+(((1.5707963267949)*(x2380.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2381=IKcos(j6);
IkReal x2382=IKsin(j6);
IkReal x2383=((0.36442)*cj1);
IkReal x2384=((0.069)*cj0);
IkReal x2385=(r01*sj3);
IkReal x2386=((1.0)*cj0);
IkReal x2387=((1.0)*cj3);
IkReal x2388=(cj0*sj2);
IkReal x2389=((1.0)*sj3);
IkReal x2390=(cj2*sj1);
IkReal x2391=((0.069)*sj0);
IkReal x2392=(cj4*cj5);
IkReal x2393=((0.01)*cj5);
IkReal x2394=(r11*sj3);
IkReal x2395=((1.0)*sj0);
IkReal x2396=((1.0)*cj5);
IkReal x2397=(sj5*x2381);
IkReal x2398=(sj4*x2382);
IkReal x2399=(r10*x2381);
IkReal x2400=(r00*x2382);
IkReal x2401=(r11*x2381);
IkReal x2402=(r01*x2381);
IkReal x2403=(r10*x2382);
IkReal x2404=(sj5*x2403);
IkReal x2405=(r00*sj4*x2381);
IkReal x2406=((1.0)*cj4*x2382);
evalcond[0]=((((-1.0)*sj4*x2396*x2401))+((cj0*cj2))+(((-1.0)*r10*x2396*x2398))+((sj0*sj1*sj2))+(((-1.0)*r11*x2406))+((cj4*x2399)));
evalcond[1]=(((cj4*r00*x2381))+(((-1.0)*r00*x2396*x2398))+(((-1.0)*sj4*x2396*x2402))+(((-1.0)*r01*x2406))+(((-1.0)*cj2*x2395))+((sj1*x2388)));
evalcond[2]=((((-0.37429)*sj5*x2400))+(((-1.0)*sj2*x2391))+x2384+((x2393*x2402))+((x2393*x2400))+((cj0*x2383))+(((-1.0)*px))+(((-0.37429)*r01*x2397))+(((-1.0)*x2384*x2390)));
evalcond[3]=((((-0.37429)*x2404))+x2391+(((-0.37429)*r11*x2397))+(((-1.0)*x2390*x2391))+((x2393*x2403))+((x2393*x2401))+((sj2*x2384))+(((-1.0)*py))+((sj0*x2383)));
evalcond[4]=((((-1.0)*x2389*x2392*x2400))+(((-1.0)*x2381*x2385*x2392))+(((-1.0)*x2389*x2405))+((x2385*x2398))+(((-1.0)*cj1*x2386))+(((-1.0)*sj5*x2387*x2400))+(((-1.0)*r01*x2387*x2397)));
evalcond[5]=((((-1.0)*x2389*x2392*x2403))+(((-1.0)*x2389*x2392*x2401))+(((-1.0)*cj1*x2395))+(((-1.0)*sj4*x2389*x2399))+((x2394*x2398))+(((-1.0)*r11*x2387*x2397))+(((-1.0)*x2387*x2404)));
evalcond[6]=(x2388+(((-1.0)*sj4*x2387*x2399))+(((-1.0)*x2390*x2395))+((sj3*x2404))+((x2394*x2397))+((cj3*r11*x2398))+(((-1.0)*x2387*x2392*x2403))+(((-1.0)*x2387*x2392*x2401)));
evalcond[7]=((((-1.0)*sj2*x2395))+((x2385*x2397))+((cj3*r01*x2398))+(((-1.0)*x2386*x2390))+((sj3*sj5*x2400))+(((-1.0)*x2387*x2405))+(((-1.0)*x2387*x2392*x2400))+(((-1.0)*x2387*x2392*x2402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2407=cj4*cj4;
IkReal x2408=cj5*cj5;
IkReal x2409=(cj4*sj0);
IkReal x2410=(cj2*r11);
IkReal x2411=(sj1*sj2);
IkReal x2412=(cj0*cj2);
IkReal x2413=(cj5*sj4);
IkReal x2414=(cj2*r10);
IkReal x2415=((1.0)*r01);
IkReal x2416=(r00*x2413);
IkReal x2417=((1.0)*cj0*cj4);
CheckValue<IkReal> x2418 = IKatan2WithCheck(IkReal((((r00*x2409*x2411))+((cj0*r11*x2411*x2413))+((x2409*x2414))+((cj4*r00*x2412))+(((-1.0)*x2412*x2413*x2415))+(((-1.0)*r10*x2411*x2417))+(((-1.0)*sj0*x2411*x2413*x2415))+(((-1.0)*sj0*x2410*x2413)))),IkReal((((sj0*x2411*x2416))+((x2409*x2410))+((sj0*x2413*x2414))+(((-1.0)*r11*x2411*x2417))+((r01*x2409*x2411))+(((-1.0)*cj0*r10*x2411*x2413))+((cj4*r01*x2412))+((x2412*x2416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2418.valid){
continue;
}
CheckValue<IkReal> x2419=IKPowWithIntegerCheck(IKsign((r22*((x2407+x2408+(((-1.0)*x2407*x2408)))))),-1);
if(!x2419.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2418.value)+(((1.5707963267949)*(x2419.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2420=IKcos(j6);
IkReal x2421=IKsin(j6);
IkReal x2422=((0.36442)*cj1);
IkReal x2423=((0.069)*cj0);
IkReal x2424=(r01*sj3);
IkReal x2425=((1.0)*cj0);
IkReal x2426=((1.0)*cj3);
IkReal x2427=(cj0*sj2);
IkReal x2428=((1.0)*sj3);
IkReal x2429=(cj2*sj1);
IkReal x2430=((0.069)*sj0);
IkReal x2431=(cj4*cj5);
IkReal x2432=((0.01)*cj5);
IkReal x2433=(r11*sj3);
IkReal x2434=((1.0)*sj0);
IkReal x2435=((1.0)*cj5);
IkReal x2436=(sj5*x2420);
IkReal x2437=(sj4*x2421);
IkReal x2438=(r10*x2420);
IkReal x2439=(r00*x2421);
IkReal x2440=(r11*x2420);
IkReal x2441=(r01*x2420);
IkReal x2442=(r10*x2421);
IkReal x2443=(sj5*x2442);
IkReal x2444=(r00*sj4*x2420);
IkReal x2445=((1.0)*cj4*x2421);
evalcond[0]=((((-1.0)*r10*x2435*x2437))+((cj0*cj2))+(((-1.0)*r11*x2445))+((sj0*sj1*sj2))+(((-1.0)*sj4*x2435*x2440))+((cj4*x2438)));
evalcond[1]=((((-1.0)*cj2*x2434))+((sj1*x2427))+(((-1.0)*r00*x2435*x2437))+(((-1.0)*sj4*x2435*x2441))+((cj4*r00*x2420))+(((-1.0)*r01*x2445)));
evalcond[2]=(((x2432*x2441))+(((-0.37429)*sj5*x2439))+x2423+(((-1.0)*x2423*x2429))+(((-1.0)*sj2*x2430))+(((-0.37429)*r01*x2436))+((x2432*x2439))+(((-1.0)*px))+((cj0*x2422)));
evalcond[3]=(((sj2*x2423))+((x2432*x2440))+((x2432*x2442))+x2430+((sj0*x2422))+(((-0.37429)*x2443))+(((-1.0)*py))+(((-1.0)*x2429*x2430))+(((-0.37429)*r11*x2436)));
evalcond[4]=((((-1.0)*x2428*x2444))+((x2424*x2437))+(((-1.0)*x2420*x2424*x2431))+(((-1.0)*cj1*x2425))+(((-1.0)*x2428*x2431*x2439))+(((-1.0)*r01*x2426*x2436))+(((-1.0)*sj5*x2426*x2439)));
evalcond[5]=((((-1.0)*x2426*x2443))+(((-1.0)*r11*x2426*x2436))+(((-1.0)*x2428*x2431*x2442))+(((-1.0)*x2428*x2431*x2440))+(((-1.0)*cj1*x2434))+((x2433*x2437))+(((-1.0)*sj4*x2428*x2438)));
evalcond[6]=(((sj3*x2443))+x2427+(((-1.0)*x2429*x2434))+((x2433*x2436))+(((-1.0)*sj4*x2426*x2438))+(((-1.0)*x2426*x2431*x2440))+(((-1.0)*x2426*x2431*x2442))+((cj3*r11*x2437)));
evalcond[7]=((((-1.0)*x2426*x2444))+((x2424*x2436))+(((-1.0)*x2426*x2431*x2439))+(((-1.0)*sj2*x2434))+(((-1.0)*x2425*x2429))+((cj3*r01*x2437))+(((-1.0)*x2426*x2431*x2441))+((sj3*sj5*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2449=IKPowWithIntegerCheck(r22,-1);
if(!x2449.valid){
continue;
}
IkReal x2446=x2449.value;
CheckValue<IkReal> x2450=IKPowWithIntegerCheck(sj5,-1);
if(!x2450.valid){
continue;
}
IkReal x2447=x2450.value;
IkReal x2448=(x2446*x2447);
CheckValue<IkReal> x2451=IKPowWithIntegerCheck(sj3,-1);
if(!x2451.valid){
continue;
}
if( IKabs((cj1*sj2*x2448)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2448*(x2451.value)*((sj1+((cj3*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x2448))+IKsqr((x2448*(x2451.value)*((sj1+((cj3*cj5*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x2448), (x2448*(x2451.value)*((sj1+((cj3*cj5*r22))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2452=IKcos(j4);
IkReal x2453=(cj3*r22);
IkReal x2454=((1.0)*sj5);
IkReal x2455=(r22*sj3);
evalcond[0]=(((cj1*sj2))+(((-1.0)*r22*x2454*(IKsin(j4)))));
evalcond[1]=(sj1+((cj5*x2453))+(((-1.0)*x2452*x2454*x2455)));
evalcond[2]=((((-1.0)*cj1*cj2))+(((-1.0)*x2452*x2453*x2454))+(((-1.0)*cj5*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x2456=(sj1*sj2);
IkReal x2457=(cj4*r10);
IkReal x2458=((1.0)*cj2);
IkReal x2459=(cj4*r00);
IkReal x2460=((2.0)*cj4);
IkReal x2461=(cj5*sj4);
IkReal x2462=(r11*x2461);
IkReal x2463=((1.0)*x2457);
IkReal x2464=(r01*x2461);
IkReal x2465=((1.0)*x2459);
IkReal x2466=((1.0)*x2456);
IkReal x2467=((1.0)*x2462);
IkReal x2468=((1.0)*x2464);
IkReal x2469=(x2457+cj2+(((-1.0)*x2467)));
IkReal x2470=(x2462+cj2+(((-1.0)*x2463)));
IkReal x2471=((((-1.0)*r11*x2460))+(((-2.0)*r10*x2461)));
IkReal x2472=(x2459+x2456+(((-1.0)*x2468)));
IkReal x2473=((((-1.0)*r01*x2460))+(((-2.0)*r00*x2461)));
IkReal x2474=(x2464+x2456+(((-1.0)*x2465)));
IkReal x2475=(x2457+(((-1.0)*x2467))+(((-1.0)*x2458)));
IkReal x2476=(x2462+(((-1.0)*x2463))+(((-1.0)*x2458)));
IkReal x2477=(x2459+(((-1.0)*x2466))+(((-1.0)*x2468)));
IkReal x2478=(x2464+(((-1.0)*x2466))+(((-1.0)*x2465)));
IkReal gconst0=x2469;
IkReal gconst1=x2471;
IkReal gconst2=x2470;
IkReal gconst3=x2472;
IkReal gconst4=x2473;
IkReal gconst5=x2474;
IkReal gconst6=x2469;
IkReal gconst7=x2471;
IkReal gconst8=x2470;
IkReal gconst9=x2472;
IkReal gconst10=x2473;
IkReal gconst11=x2474;
IkReal gconst12=x2475;
IkReal gconst13=x2471;
IkReal gconst14=x2476;
IkReal gconst15=x2477;
IkReal gconst16=x2473;
IkReal gconst17=x2478;
IkReal gconst18=x2475;
IkReal gconst19=x2471;
IkReal gconst20=x2476;
IkReal gconst21=x2477;
IkReal gconst22=x2473;
IkReal gconst23=x2478;
IkReal x2479=sj1*sj1;
IkReal x2480=sj2*sj2;
IkReal x2481=cj2*cj2;
IkReal x2482=((1.0)*gconst21);
IkReal x2483=(gconst15*gconst20);
IkReal x2484=(gconst13*gconst19);
IkReal x2485=((2.0)*gconst21);
IkReal x2486=(gconst23*gconst6);
IkReal x2487=(gconst2*gconst3);
IkReal x2488=(gconst2*gconst9);
IkReal x2489=(gconst19*gconst4);
IkReal x2490=(gconst11*gconst6);
IkReal x2491=(sj1*sj2);
IkReal x2492=((4.0)*cj2);
IkReal x2493=(gconst4*gconst7);
IkReal x2494=(gconst15*gconst18);
IkReal x2495=((2.0)*cj2);
IkReal x2496=(gconst12*gconst20);
IkReal x2497=(gconst17*gconst21);
IkReal x2498=(gconst0*gconst20);
IkReal x2499=(gconst14*gconst20);
IkReal x2500=((1.0)*gconst8);
IkReal x2501=(gconst5*gconst6);
IkReal x2502=(gconst3*gconst9);
IkReal x2503=((1.0)*gconst9);
IkReal x2504=(gconst1*gconst17);
IkReal x2505=((2.0)*gconst5);
IkReal x2506=(gconst0*gconst11);
IkReal x2507=(gconst21*gconst5);
IkReal x2508=(gconst16*gconst22);
IkReal x2509=(gconst5*gconst8);
IkReal x2510=(gconst2*gconst6);
IkReal x2511=(gconst14*gconst18);
IkReal x2512=(gconst13*gconst22);
IkReal x2513=(gconst1*gconst5);
IkReal x2514=(gconst16*gconst7);
IkReal x2515=(gconst5*gconst9);
IkReal x2516=(gconst1*gconst10);
IkReal x2517=(gconst14*gconst15);
IkReal x2518=((2.0)*gconst23);
IkReal x2519=((2.0)*gconst9);
IkReal x2520=(gconst1*gconst7);
IkReal x2521=(gconst0*gconst8);
IkReal x2522=(gconst12*gconst23);
IkReal x2523=(gconst10*gconst6);
IkReal x2524=(gconst0*gconst9);
IkReal x2525=(gconst17*gconst18);
IkReal x2526=((2.0)*gconst4);
IkReal x2527=(gconst13*gconst7);
IkReal x2528=(gconst11*gconst18);
IkReal x2529=((1.0)*gconst0);
IkReal x2530=((1.0)*gconst10);
IkReal x2531=(gconst10*gconst13);
IkReal x2532=(gconst16*gconst19);
IkReal x2533=((1.0)*gconst12);
IkReal x2534=(gconst18*gconst5);
IkReal x2535=(gconst12*gconst17);
IkReal x2536=(gconst14*gconst21);
IkReal x2537=(gconst17*gconst20);
IkReal x2538=((1.0)*gconst14);
IkReal x2539=(gconst18*gconst2);
IkReal x2540=(gconst14*gconst23);
IkReal x2541=(gconst5*x2529);
IkReal x2542=(gconst9*x2521);
IkReal x2543=(gconst17*x2512);
IkReal x2544=((4.0)*x2481);
IkReal x2545=(gconst21*x2532);
IkReal x2546=((1.0)*gconst22*gconst4);
IkReal x2547=(gconst14*x2532);
IkReal x2548=((4.0)*x2479*x2480);
op[0]=(((x2496*x2497))+(((-1.0)*gconst14*x2482*x2483))+((x2494*x2540))+(((-1.0)*x2508*x2511))+((x2532*x2536))+(((-1.0)*gconst17*x2482*x2484))+((x2512*x2525))+(((-1.0)*x2522*x2525)));
op[1]=((((-1.0)*gconst23*x2495*x2511))+((gconst18*x2495*x2522))+((x2491*x2517*x2518))+(((-1.0)*gconst17*x2495*x2496))+(((-2.0)*gconst14*x2491*x2508))+(((-1.0)*gconst18*x2495*x2512))+(((-2.0)*gconst18*x2491*x2508))+(((-1.0)*x2491*x2518*x2535))+(((-1.0)*cj2*x2485*x2496))+(((2.0)*x2491*x2543))+((gconst14*x2483*x2495))+(((-1.0)*gconst14*x2494*x2495))+(((-1.0)*x2483*x2485*x2491))+((gconst17*x2484*x2495))+((cj2*x2485*x2499))+(((-1.0)*x2495*x2547))+(((-1.0)*x2485*x2491*x2517))+(((-1.0)*x2491*x2518*x2525))+((x2485*x2491*x2535))+((x2485*x2491*x2537))+((x2485*x2491*x2532))+((cj2*x2484*x2485))+((gconst12*x2495*x2525))+((x2491*x2494*x2518)));
op[2]=((((-1.0)*gconst12*gconst18*x2544))+((gconst6*x2543))+((x2497*x2498))+((x2486*x2517))+((x2496*x2507))+((gconst12*gconst8*x2497))+(((-1.0)*gconst6*x2508*x2538))+(((-1.0)*gconst17*x2482*x2527))+(((-1.0)*gconst5*x2482*x2484))+((x2491*x2492*x2522))+((x2491*x2492*x2525))+((gconst9*x2547))+(((-1.0)*gconst23*x2525*x2529))+(((-1.0)*x2491*x2492*x2540))+(((-1.0)*x2499*x2544))+((gconst17*gconst9*x2496))+(((-1.0)*gconst17*gconst23*x2548))+(((-1.0)*gconst11*x2525*x2533))+(((-1.0)*x2522*x2534))+((x2512*x2534))+(((-1.0)*gconst2*x2482*x2483))+(((-1.0)*x2491*x2492*x2512))+(((-1.0)*gconst17*x2484*x2503))+((x2525*x2531))+((x2497*x2548))+(((-1.0)*gconst8*x2482*x2517))+((x2489*x2536))+((x2483*x2491*x2492))+((gconst2*gconst23*x2494))+((gconst2*x2545))+((x2496*x2544))+(((-1.0)*x2484*x2544))+((gconst23*gconst3*x2511))+(((-1.0)*gconst17*x2486*x2533))+(((-1.0)*x2508*x2539))+((x2491*x2492*x2536))+((gconst15*gconst23*x2548))+((x2511*x2544))+(((-1.0)*x2491*x2492*x2532))+(((-1.0)*x2491*x2492*x2537))+(((-1.0)*gconst14*x2483*x2503))+(((-1.0)*x2508*x2548))+(((-1.0)*gconst12*gconst21*x2491*x2492))+(((-1.0)*gconst16*x2511*x2530))+(((-1.0)*gconst3*x2482*x2499))+(((-1.0)*x2511*x2546))+((gconst11*gconst14*x2494))+(((-1.0)*x2491*x2492*x2494))+((x2514*x2536))+(((-1.0)*gconst19*x2482*x2504))+(((-1.0)*gconst15*gconst21*x2548))+((gconst18*gconst22*x2504)));
op[3]=((((2.0)*cj2*gconst1*gconst17*gconst19))+(((2.0)*cj2*gconst14*gconst21*gconst8))+(((-2.0)*gconst12*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst16*gconst2*gconst22*sj1*sj2))+(((2.0)*gconst17*gconst21*gconst8*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst19*gconst2))+(((2.0)*cj2*gconst12*gconst18*gconst5))+(((2.0)*gconst1*gconst17*gconst22*sj1*sj2))+(((-2.0)*gconst15*gconst20*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst20*gconst9))+(((2.0)*cj2*gconst14*gconst20*gconst3))+(((2.0)*cj2*gconst1*gconst19*gconst21))+(((-2.0)*gconst18*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst17*gconst20))+(((-2.0)*cj2*gconst15*gconst18*gconst2))+(((-2.0)*cj2*gconst13*gconst22*gconst6))+(((2.0)*gconst10*gconst13*gconst17*sj1*sj2))+(((-2.0)*gconst14*gconst22*gconst4*sj1*sj2))+(((-2.0)*gconst18*gconst23*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst23*gconst6*sj1*sj2))+(((-2.0)*gconst14*gconst21*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst21*gconst8))+(((-2.0)*cj2*gconst12*gconst17*gconst8))+(((-2.0)*gconst10*gconst14*gconst16*sj1*sj2))+(((-2.0)*gconst15*gconst2*gconst21*sj1*sj2))+(((-2.0)*gconst11*gconst12*gconst17*sj1*sj2))+(((-2.0)*gconst11*gconst17*gconst18*sj1*sj2))+(((-2.0)*gconst14*gconst15*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst18*sj1*sj2))+(((2.0)*cj2*gconst12*gconst17*gconst6))+(((2.0)*gconst13*gconst22*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst23))+(((2.0)*gconst0*gconst17*gconst21*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst20*gconst9))+(((-2.0)*cj2*gconst12*gconst20*gconst5))+(((-2.0)*cj2*gconst10*gconst13*gconst18))+(((2.0)*gconst12*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst13*gconst17*gconst7))+(((2.0)*cj2*gconst15*gconst2*gconst20))+(((2.0)*gconst11*gconst14*gconst15*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst16*gconst7))+(((2.0)*cj2*gconst12*gconst23*gconst6))+(((-2.0)*gconst17*gconst23*gconst6*sj1*sj2))+(((2.0)*gconst18*gconst23*gconst3*sj1*sj2))+(((-2.0)*gconst15*gconst21*gconst8*sj1*sj2))+(((2.0)*cj2*gconst13*gconst19*gconst5))+(((2.0)*cj2*gconst13*gconst19*gconst9))+(((-2.0)*gconst0*gconst17*gconst23*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst23*gconst6))+(((-2.0)*cj2*gconst11*gconst14*gconst18))+(((-2.0)*cj2*gconst1*gconst18*gconst22))+(((2.0)*cj2*gconst11*gconst12*gconst18))+(((2.0)*gconst19*gconst21*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst19*gconst4))+(((2.0)*cj2*gconst14*gconst15*gconst8))+(((-2.0)*cj2*gconst14*gconst18*gconst3))+(((2.0)*gconst16*gconst21*gconst7*sj1*sj2))+(((2.0)*gconst16*gconst19*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst18))+(((-2.0)*cj2*gconst18*gconst2*gconst23))+(((-2.0)*gconst20*gconst21*gconst3*sj1*sj2))+(((2.0)*gconst17*gconst20*gconst9*sj1*sj2))+(((2.0)*gconst14*gconst23*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst15*gconst6))+(((2.0)*cj2*gconst2*gconst20*gconst21))+(((2.0)*gconst20*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst2*gconst23*sj1*sj2))+(((2.0)*cj2*gconst13*gconst21*gconst7))+(((2.0)*gconst12*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst18*sj1*sj2))+(((-2.0)*gconst16*gconst22*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst21)));
op[4]=((((4.0)*gconst21*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst16*gconst2*gconst22*gconst6))+((gconst14*gconst21*gconst4*gconst7))+(((-1.0)*gconst11*gconst12*gconst18*gconst5))+(((-4.0)*gconst11*gconst17*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst12*gconst6*(cj2*cj2)))+(((-1.0)*gconst12*gconst23*gconst5*gconst6))+(((4.0)*gconst18*gconst2*(cj2*cj2)))+(((-1.0)*gconst1*gconst17*gconst19*gconst9))+((gconst14*gconst23*gconst3*gconst6))+(((-1.0)*gconst0*gconst17*gconst23*gconst6))+(((4.0)*cj2*gconst17*gconst6*sj1*sj2))+((gconst1*gconst10*gconst17*gconst18))+(((-1.0)*gconst11*gconst12*gconst17*gconst6))+(((-4.0)*cj2*gconst10*gconst13*sj1*sj2))+(((-4.0)*cj2*gconst2*gconst23*sj1*sj2))+((gconst13*gconst22*gconst5*gconst6))+((gconst12*gconst20*gconst5*gconst9))+(((-4.0)*cj2*gconst12*gconst9*sj1*sj2))+(((4.0)*cj2*gconst11*gconst12*sj1*sj2))+(((4.0)*gconst11*gconst15*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst15*gconst2*gconst21*gconst8))+((gconst0*gconst20*gconst21*gconst5))+(((-4.0)*cj2*gconst17*gconst8*sj1*sj2))+((gconst15*gconst2*gconst23*gconst6))+((gconst1*gconst18*gconst22*gconst5))+(((-4.0)*gconst15*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*cj2*gconst1*gconst22*sj1*sj2))+(((4.0)*cj2*gconst14*gconst9*sj1*sj2))+(((-1.0)*gconst13*gconst17*gconst7*gconst9))+((gconst14*gconst16*gconst7*gconst9))+(((-4.0)*gconst21*gconst3*(sj1*sj1)*(sj2*sj2)))+((gconst19*gconst2*gconst21*gconst4))+(((-1.0)*gconst0*gconst11*gconst17*gconst18))+(((-4.0)*gconst23*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst22*gconst4*(sj1*sj1)*(sj2*sj2)))+(((4.0)*gconst0*gconst20*(cj2*cj2)))+(((-4.0)*cj2*gconst11*gconst14*sj1*sj2))+((gconst12*gconst21*gconst5*gconst8))+((gconst11*gconst15*gconst18*gconst2))+((gconst1*gconst17*gconst22*gconst6))+((gconst10*gconst13*gconst17*gconst6))+(((-4.0)*cj2*gconst18*gconst3*sj1*sj2))+(((-4.0)*gconst10*gconst16*(sj1*sj1)*(sj2*sj2)))+((gconst16*gconst19*gconst2*gconst9))+((gconst18*gconst2*gconst23*gconst3))+(((-1.0)*gconst15*gconst2*gconst20*gconst9))+(((-1.0)*gconst1*gconst19*gconst21*gconst5))+(((-4.0)*gconst1*gconst19*(cj2*cj2)))+((gconst16*gconst2*gconst21*gconst7))+(((-1.0)*gconst14*gconst15*gconst8*gconst9))+(((-1.0)*gconst10*gconst14*gconst18*gconst4))+(((-1.0)*gconst2*gconst20*gconst21*gconst3))+(((-4.0)*gconst13*gconst7*(cj2*cj2)))+(((4.0)*cj2*gconst15*gconst8*sj1*sj2))+(((-4.0)*cj2*gconst19*gconst4*sj1*sj2))+(((-1.0)*gconst13*gconst21*gconst5*gconst7))+(((-4.0)*cj2*gconst20*gconst5*sj1*sj2))+((gconst10*gconst13*gconst18*gconst5))+(((-1.0)*gconst14*gconst22*gconst4*gconst6))+(((-1.0)*gconst13*gconst19*gconst5*gconst9))+(((-4.0)*cj2*gconst16*gconst7*sj1*sj2))+(((-4.0)*cj2*gconst15*gconst6*sj1*sj2))+(((4.0)*cj2*gconst0*gconst23*sj1*sj2))+(((-1.0)*gconst10*gconst14*gconst16*gconst6))+(((4.0)*gconst17*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst18*gconst2*gconst22*gconst4))+(((-4.0)*gconst0*gconst18*(cj2*cj2)))+(((-4.0)*gconst14*gconst8*(cj2*cj2)))+(((4.0)*cj2*gconst18*gconst5*sj1*sj2))+((gconst11*gconst14*gconst15*gconst6))+((gconst12*gconst17*gconst8*gconst9))+(((-4.0)*gconst2*gconst20*(cj2*cj2)))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+((gconst14*gconst19*gconst4*gconst9))+((gconst11*gconst14*gconst18*gconst3))+(((4.0)*gconst14*gconst6*(cj2*cj2)))+((gconst0*gconst17*gconst20*gconst9))+(((4.0)*gconst12*gconst8*(cj2*cj2)))+(((-1.0)*gconst14*gconst21*gconst3*gconst8))+(((4.0)*gconst23*gconst3*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst1*gconst17*gconst21*gconst7))+(((-1.0)*gconst10*gconst16*gconst18*gconst2))+(((-4.0)*cj2*gconst0*gconst21*sj1*sj2))+(((-1.0)*gconst14*gconst20*gconst3*gconst9))+(((4.0)*cj2*gconst2*gconst21*sj1*sj2))+((gconst0*gconst17*gconst21*gconst8))+(((4.0)*cj2*gconst20*gconst3*sj1*sj2)));
op[5]=((((2.0)*gconst23*gconst3*gconst6*sj1*sj2))+(((-2.0)*gconst11*gconst18*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst3*gconst8))+(((-2.0)*gconst0*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst22*gconst4*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst19*gconst2*gconst4))+(((-2.0)*cj2*gconst12*gconst5*gconst8))+(((2.0)*gconst1*gconst22*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst21*gconst5*sj1*sj2))+(((-2.0)*gconst14*gconst3*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst14*gconst6))+(((-2.0)*cj2*gconst14*gconst4*gconst7))+(((-2.0)*cj2*gconst1*gconst22*gconst6))+(((-2.0)*cj2*gconst14*gconst3*gconst6))+(((2.0)*gconst17*gconst8*gconst9*sj1*sj2))+(((2.0)*gconst21*gconst4*gconst7*sj1*sj2))+(((-2.0)*gconst0*gconst11*gconst17*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst8*gconst9))+(((-2.0)*gconst15*gconst2*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst1*gconst10*gconst18))+(((-2.0)*cj2*gconst0*gconst17*gconst8))+(((2.0)*gconst2*gconst23*gconst3*sj1*sj2))+(((2.0)*gconst21*gconst5*gconst8*sj1*sj2))+(((-2.0)*gconst23*gconst5*gconst6*sj1*sj2))+(((2.0)*gconst10*gconst13*gconst5*sj1*sj2))+(((2.0)*gconst1*gconst10*gconst17*sj1*sj2))+(((-2.0)*gconst20*gconst3*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst11*gconst18))+(((-2.0)*gconst11*gconst17*gconst6*sj1*sj2))+(((2.0)*cj2*gconst1*gconst17*gconst7))+(((2.0)*gconst11*gconst14*gconst3*sj1*sj2))+(((2.0)*cj2*gconst2*gconst20*gconst3))+(((2.0)*cj2*gconst2*gconst20*gconst9))+(((2.0)*cj2*gconst1*gconst19*gconst5))+(((2.0)*cj2*gconst1*gconst19*gconst9))+(((-2.0)*gconst21*gconst3*gconst8*sj1*sj2))+(((2.0)*gconst16*gconst7*gconst9*sj1*sj2))+(((-2.0)*gconst2*gconst21*gconst3*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst6))+(((2.0)*cj2*gconst13*gconst5*gconst7))+(((2.0)*cj2*gconst1*gconst21*gconst7))+(((2.0)*cj2*gconst14*gconst8*gconst9))+(((2.0)*cj2*gconst0*gconst23*gconst6))+(((2.0)*cj2*gconst2*gconst21*gconst8))+(((2.0)*cj2*gconst13*gconst7*gconst9))+(((-2.0)*gconst2*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst21*gconst8))+(((2.0)*cj2*gconst11*gconst12*gconst6))+(((2.0)*gconst12*gconst5*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst5))+(((-2.0)*cj2*gconst0*gconst20*gconst9))+(((-2.0)*cj2*gconst15*gconst2*gconst6))+(((-2.0)*cj2*gconst2*gconst23*gconst6))+(((2.0)*gconst19*gconst4*gconst9*sj1*sj2))+(((-2.0)*gconst15*gconst8*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst18*gconst2))+(((2.0)*gconst20*gconst5*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst14*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst2*gconst7))+(((-2.0)*gconst10*gconst18*gconst4*sj1*sj2))+(((2.0)*gconst11*gconst18*gconst3*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst10*gconst13*gconst6))+(((-2.0)*gconst11*gconst12*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst5))+(((2.0)*cj2*gconst15*gconst2*gconst8))+(((2.0)*cj2*gconst12*gconst5*gconst6))+(((-2.0)*cj2*gconst18*gconst2*gconst3)));
op[6]=((((-1.0)*gconst4*x2523*x2538))+(((-1.0)*gconst16*x2510*x2530))+(((-1.0)*x2502*x2548))+((gconst3*gconst8*x2491*x2492))+(((-1.0)*x2491*x2492*x2524))+((gconst14*gconst3*x2490))+((x2510*x2544))+(((-1.0)*x2520*x2544))+((x2488*x2489))+((x2488*x2491*x2492))+((x2515*x2548))+(((-1.0)*gconst5*x2503*x2527))+((gconst1*gconst22*x2501))+((gconst2*gconst21*x2493))+((gconst10*gconst18*x2513))+((gconst15*gconst2*x2490))+((x2487*x2528))+((gconst17*x2542))+(((-1.0)*x2491*x2492*x2516))+(((-1.0)*x2506*x2534))+(((-1.0)*gconst10*gconst4*x2548))+((x2491*x2492*x2501))+((x2491*x2492*x2506))+(((-1.0)*gconst3*gconst6*x2491*x2492))+((x2504*x2523))+(((-1.0)*gconst14*x2500*x2502))+((x2488*x2514))+((x2507*x2521))+(((-1.0)*gconst2*gconst8*x2544))+(((-1.0)*gconst7*x2503*x2504))+(((-1.0)*gconst17*x2490*x2529))+(((-1.0)*x2491*x2492*x2509))+((x2501*x2531))+(((-1.0)*gconst11*gconst2*x2491*x2492))+((x2521*x2544))+(((-1.0)*gconst4*x2530*x2539))+(((-1.0)*gconst15*x2488*x2500))+(((-1.0)*gconst20*x2487*x2503))+((gconst12*gconst9*x2509))+(((-1.0)*gconst8*x2482*x2487))+(((-1.0)*gconst19*x2503*x2513))+((x2486*x2487))+((x2498*x2515))+((gconst14*gconst9*x2493))+(((-1.0)*x2510*x2546))+(((-1.0)*x2486*x2541))+(((-1.0)*gconst7*x2482*x2513))+(((-1.0)*gconst0*gconst6*x2544))+((gconst11*gconst3*x2548))+(((-1.0)*gconst11*gconst5*x2548))+(((-1.0)*x2491*x2492*x2493))+(((-1.0)*gconst5*x2490*x2533)));
op[7]=(((gconst8*x2487*x2495))+(((2.0)*gconst3*x2490*x2491))+(((-1.0)*gconst0*x2495*x2509))+(((-1.0)*gconst6*x2495*x2516))+((x2491*x2505*x2524))+((gconst0*x2490*x2495))+(((-1.0)*gconst2*x2493*x2495))+(((-1.0)*x2491*x2505*x2506))+(((-1.0)*x2487*x2491*x2519))+(((-1.0)*gconst10*gconst2*x2491*x2526))+((gconst9*x2495*x2520))+((x2491*x2493*x2519))+(((-1.0)*x2490*x2491*x2505))+(((-1.0)*gconst2*x2490*x2495))+(((2.0)*gconst11*x2487*x2491))+(((-2.0)*gconst8*x2491*x2502))+((gconst8*x2488*x2495))+(((-1.0)*x2495*x2542))+((gconst8*gconst9*x2491*x2505))+((gconst7*x2495*x2513))+((gconst0*x2495*x2501))+(((-1.0)*gconst6*x2487*x2495))+(((-1.0)*x2491*x2523*x2526))+((x2491*x2505*x2516)));
op[8]=(((x2488*x2493))+(((-1.0)*gconst9*x2487*x2500))+(((-1.0)*x2490*x2541))+((x2487*x2490))+((x2501*x2516))+(((-1.0)*gconst7*x2503*x2513))+(((-1.0)*gconst4*x2510*x2530))+((x2509*x2524)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[2];
IkReal x2549=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2549);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2549);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x2550=cj4*cj4;
IkReal x2551=cj5*cj5;
IkReal x2552=(r22*x2550);
IkReal x2553=(x2552+((r22*x2551))+(((-1.0)*x2551*x2552)));
j6eval[0]=x2553;
j6eval[1]=IKsign(x2553);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2554=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2554);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2554);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x2555=((((-1.0)*cj5*sj3))+(((-1.0)*cj3*cj4*sj5)));
j6eval[0]=x2555;
j6eval[1]=IKsign(x2555);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2556=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2556);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2556);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x2557=(r22*sj4);
IkReal x2558=(cj4*sj3);
IkReal x2559=((((-1.0)*x2557*x2558))+((cj3*cj5*sj5*x2557))+((x2557*x2558*(cj5*cj5))));
j6eval[0]=x2559;
j6eval[1]=IKsign(x2559);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x2560=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2560);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2560);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=1.0;
j5=0;
IkReal x2561=(cj2*sj1);
IkReal x2562=((6.9)*cj0);
IkReal x2563=((6.9)*r00*sj0);
IkReal x2564=((6.9)*r01*sj0);
IkReal x2565=(x2561*x2562);
j6eval[0]=r22;
j6eval[1]=IKsign(r22);
j6eval[2]=((IKabs(((((-100.0)*rxp1_2))+x2564+(((-1.0)*x2561*x2564))+((r11*x2565))+(((-1.0)*r11*x2562)))))+(IKabs((((r10*x2562))+(((-1.0)*x2563))+(((100.0)*rxp0_2))+((x2561*x2563))+(((-1.0)*r10*x2565))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2566=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2566);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2566);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=1.0;
j5=0;
j6eval[0]=cj4;
j6eval[1]=IKsign(cj4);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2567=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2567);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2567);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=1.0;
j5=0;
IkReal x2568=(r22*sj4);
j6eval[0]=x2568;
j6eval[1]=IKsign(x2568);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2569=(cj0*cj2);
IkReal x2570=((6.9)*cj0);
IkReal x2571=(cj4*r11);
IkReal x2572=(r10*sj4);
IkReal x2573=((100.0)*px);
IkReal x2574=((6.9)*sj1);
IkReal x2575=(r11*sj4);
IkReal x2576=(cj4*r10);
CheckValue<IkReal> x2577=IKPowWithIntegerCheck(IKsign((r22*sj4)),-1);
if(!x2577.valid){
continue;
}
CheckValue<IkReal> x2578 = IKatan2WithCheck(IkReal((((x2573*x2576))+((r01*x2569))+((x2569*x2574*x2576))+(((-1.0)*x2569*x2574*x2575))+(((-1.0)*x2570*x2576))+(((-1.0)*x2573*x2575))+((x2570*x2575)))),IkReal((((x2569*x2572*x2574))+((x2571*x2573))+((x2569*x2571*x2574))+(((-1.0)*x2570*x2571))+(((-1.0)*x2570*x2572))+((x2572*x2573))+(((-1.0)*r00*x2569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2578.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x2577.value)))+(x2578.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2579=IKcos(j6);
IkReal x2580=IKsin(j6);
IkReal x2581=(cj4*sj3);
IkReal x2582=((0.069)*cj0);
IkReal x2583=(cj3*cj4);
IkReal x2584=(cj3*sj4);
IkReal x2585=(sj3*sj4);
IkReal x2586=(cj2*sj1);
IkReal x2587=((0.069)*sj0);
IkReal x2588=((1.0)*sj0);
IkReal x2589=((1.0)*cj4);
IkReal x2590=((0.01)*x2579);
IkReal x2591=((1.0)*x2579);
IkReal x2592=(r11*x2580);
IkReal x2593=(r01*x2580);
IkReal x2594=(cj4*x2579);
IkReal x2595=((0.01)*x2580);
IkReal x2596=((1.0)*r10*x2580);
IkReal x2597=((1.0)*r00*x2580);
evalcond[0]=(((r00*x2595))+x2582+((r01*x2590))+(((-1.0)*px))+(((-1.0)*x2582*x2586)));
evalcond[1]=(x2587+((r10*x2595))+(((-1.0)*py))+(((-1.0)*x2586*x2587))+((r11*x2590)));
evalcond[2]=(((cj0*cj2))+((r10*x2594))+(((-1.0)*x2589*x2592))+(((-1.0)*sj4*x2596))+(((-1.0)*r11*sj4*x2591)));
evalcond[3]=((((-1.0)*r01*sj4*x2591))+((r00*x2594))+(((-1.0)*x2589*x2593))+(((-1.0)*cj2*x2588))+(((-1.0)*sj4*x2597)));
evalcond[4]=((((-1.0)*r00*x2585*x2591))+(((-1.0)*r01*x2581*x2591))+((x2585*x2593))+(((-1.0)*x2581*x2597)));
evalcond[5]=((((-1.0)*r11*x2581*x2591))+(((-1.0)*r10*x2585*x2591))+((x2585*x2592))+(((-1.0)*x2581*x2596)));
evalcond[6]=((((-1.0)*r11*x2583*x2591))+(((-1.0)*x2586*x2588))+(((-1.0)*r10*x2584*x2591))+(((-1.0)*x2583*x2596))+((x2584*x2592)));
evalcond[7]=((((-1.0)*cj0*x2586))+(((-1.0)*r01*x2583*x2591))+(((-1.0)*r00*x2584*x2591))+(((-1.0)*x2583*x2597))+((x2584*x2593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2598=(cj2*sj1);
IkReal x2599=(cj0*cj2);
IkReal x2600=((6.9)*r10*sj0);
IkReal x2601=((100.0)*py*r11);
IkReal x2602=((100.0)*py*r10);
IkReal x2603=((6.9)*r11*sj0*sj4);
IkReal x2604=((6.9)*cj4*r11*sj0);
CheckValue<IkReal> x2605=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x2605.valid){
continue;
}
CheckValue<IkReal> x2606 = IKatan2WithCheck(IkReal(((((-1.0)*sj4*x2601))+((cj4*x2602))+(((-1.0)*cj4*x2600))+((r11*x2599))+((cj4*x2598*x2600))+(((-1.0)*x2598*x2603))+x2603)),IkReal(((((-1.0)*sj4*x2600))+((cj4*x2601))+((x2598*x2604))+((sj4*x2598*x2600))+((sj4*x2602))+(((-1.0)*x2604))+(((-1.0)*r10*x2599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2606.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2605.value)))+(x2606.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2607=IKcos(j6);
IkReal x2608=IKsin(j6);
IkReal x2609=(cj4*sj3);
IkReal x2610=((0.069)*cj0);
IkReal x2611=(cj3*cj4);
IkReal x2612=(cj3*sj4);
IkReal x2613=(sj3*sj4);
IkReal x2614=(cj2*sj1);
IkReal x2615=((0.069)*sj0);
IkReal x2616=((1.0)*sj0);
IkReal x2617=((1.0)*cj4);
IkReal x2618=((0.01)*x2607);
IkReal x2619=((1.0)*x2607);
IkReal x2620=(r11*x2608);
IkReal x2621=(r01*x2608);
IkReal x2622=(cj4*x2607);
IkReal x2623=((0.01)*x2608);
IkReal x2624=((1.0)*r10*x2608);
IkReal x2625=((1.0)*r00*x2608);
evalcond[0]=(((r00*x2623))+((r01*x2618))+(((-1.0)*x2610*x2614))+(((-1.0)*px))+x2610);
evalcond[1]=((((-1.0)*py))+((r11*x2618))+((r10*x2623))+(((-1.0)*x2614*x2615))+x2615);
evalcond[2]=((((-1.0)*x2617*x2620))+(((-1.0)*r11*sj4*x2619))+((cj0*cj2))+((r10*x2622))+(((-1.0)*sj4*x2624)));
evalcond[3]=(((r00*x2622))+(((-1.0)*x2617*x2621))+(((-1.0)*r01*sj4*x2619))+(((-1.0)*cj2*x2616))+(((-1.0)*sj4*x2625)));
evalcond[4]=((((-1.0)*r01*x2609*x2619))+(((-1.0)*r00*x2613*x2619))+(((-1.0)*x2609*x2625))+((x2613*x2621)));
evalcond[5]=((((-1.0)*r11*x2609*x2619))+(((-1.0)*r10*x2613*x2619))+(((-1.0)*x2609*x2624))+((x2613*x2620)));
evalcond[6]=((((-1.0)*r10*x2612*x2619))+(((-1.0)*x2611*x2624))+((x2612*x2620))+(((-1.0)*x2614*x2616))+(((-1.0)*r11*x2611*x2619)));
evalcond[7]=((((-1.0)*x2611*x2625))+(((-1.0)*cj0*x2614))+(((-1.0)*r00*x2612*x2619))+((x2612*x2621))+(((-1.0)*r01*x2611*x2619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2626=((6.9)*sj0);
IkReal x2627=((6.9)*cj0);
IkReal x2628=(cj2*sj1);
IkReal x2629=(x2626*x2628);
IkReal x2630=(x2627*x2628);
CheckValue<IkReal> x2631 = IKatan2WithCheck(IkReal(((((-100.0)*rxp1_2))+((r01*(((((-1.0)*x2629))+x2626))))+((r11*(((((-1.0)*x2627))+x2630)))))),IkReal((((r10*(((((-1.0)*x2630))+x2627))))+((r00*(((((-1.0)*x2626))+x2629))))+(((100.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2631.valid){
continue;
}
CheckValue<IkReal> x2632=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2632.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2631.value)+(((1.5707963267949)*(x2632.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2633=IKcos(j6);
IkReal x2634=IKsin(j6);
IkReal x2635=(cj4*sj3);
IkReal x2636=((0.069)*cj0);
IkReal x2637=(cj3*cj4);
IkReal x2638=(cj3*sj4);
IkReal x2639=(sj3*sj4);
IkReal x2640=(cj2*sj1);
IkReal x2641=((0.069)*sj0);
IkReal x2642=((1.0)*sj0);
IkReal x2643=((1.0)*cj4);
IkReal x2644=((0.01)*x2633);
IkReal x2645=((1.0)*x2633);
IkReal x2646=(r11*x2634);
IkReal x2647=(r01*x2634);
IkReal x2648=(cj4*x2633);
IkReal x2649=((0.01)*x2634);
IkReal x2650=((1.0)*r10*x2634);
IkReal x2651=((1.0)*r00*x2634);
evalcond[0]=((((-1.0)*px))+((r00*x2649))+((r01*x2644))+(((-1.0)*x2636*x2640))+x2636);
evalcond[1]=(((r11*x2644))+((r10*x2649))+(((-1.0)*x2640*x2641))+(((-1.0)*py))+x2641);
evalcond[2]=((((-1.0)*r11*sj4*x2645))+((r10*x2648))+((cj0*cj2))+(((-1.0)*x2643*x2646))+(((-1.0)*sj4*x2650)));
evalcond[3]=((((-1.0)*cj2*x2642))+((r00*x2648))+(((-1.0)*x2643*x2647))+(((-1.0)*sj4*x2651))+(((-1.0)*r01*sj4*x2645)));
evalcond[4]=((((-1.0)*x2635*x2651))+(((-1.0)*r01*x2635*x2645))+((x2639*x2647))+(((-1.0)*r00*x2639*x2645)));
evalcond[5]=((((-1.0)*x2635*x2650))+(((-1.0)*r11*x2635*x2645))+(((-1.0)*r10*x2639*x2645))+((x2639*x2646)));
evalcond[6]=((((-1.0)*r10*x2638*x2645))+(((-1.0)*x2637*x2650))+((x2638*x2646))+(((-1.0)*x2640*x2642))+(((-1.0)*r11*x2637*x2645)));
evalcond[7]=((((-1.0)*r01*x2637*x2645))+(((-1.0)*x2637*x2651))+((x2638*x2647))+(((-1.0)*r00*x2638*x2645))+(((-1.0)*cj0*x2640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x2652=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2652);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2652);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x2653=(cj2*sj1);
IkReal x2654=((6.9)*cj0);
IkReal x2655=((6.9)*r00*sj0);
IkReal x2656=((6.9)*r01*sj0);
IkReal x2657=(x2653*x2654);
j6eval[0]=r22;
j6eval[1]=((IKabs(((((100.0)*rxp1_2))+((r11*x2654))+(((-1.0)*r11*x2657))+((x2653*x2656))+(((-1.0)*x2656)))))+(IKabs(((((-100.0)*rxp0_2))+((r10*x2657))+(((-1.0)*r10*x2654))+(((-1.0)*x2653*x2655))+x2655))));
j6eval[2]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2658=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2658);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2658);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
j6eval[0]=cj4;
j6eval[1]=IKsign(cj4);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2659=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2659);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2659);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x2660=(r22*sj4);
j6eval[0]=x2660;
j6eval[1]=IKsign(x2660);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2661=(cj0*cj2);
IkReal x2662=((100.0)*px);
IkReal x2663=(cj4*r11);
IkReal x2664=(r10*sj4);
IkReal x2665=((6.9)*cj0);
IkReal x2666=((6.9)*sj1);
IkReal x2667=(r11*sj4);
IkReal x2668=(cj4*r10);
CheckValue<IkReal> x2669=IKPowWithIntegerCheck(IKsign((r22*sj4)),-1);
if(!x2669.valid){
continue;
}
CheckValue<IkReal> x2670 = IKatan2WithCheck(IkReal(((((-1.0)*x2662*x2667))+(((-1.0)*x2662*x2668))+(((-1.0)*x2661*x2666*x2668))+(((-1.0)*x2661*x2666*x2667))+((r01*x2661))+((x2665*x2668))+((x2665*x2667)))),IkReal(((((-1.0)*r00*x2661))+((x2662*x2664))+((x2663*x2665))+(((-1.0)*x2662*x2663))+(((-1.0)*x2661*x2663*x2666))+(((-1.0)*x2664*x2665))+((x2661*x2664*x2666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2670.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2669.value)))+(x2670.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2671=IKcos(j6);
IkReal x2672=IKsin(j6);
IkReal x2673=(cj3*cj4);
IkReal x2674=((0.069)*cj0);
IkReal x2675=(cj3*sj4);
IkReal x2676=(cj4*r00);
IkReal x2677=(cj2*sj1);
IkReal x2678=(sj3*sj4);
IkReal x2679=((0.069)*sj0);
IkReal x2680=((1.0)*sj0);
IkReal x2681=((1.0)*cj4);
IkReal x2682=(cj4*sj3);
IkReal x2683=(r10*x2672);
IkReal x2684=(r01*x2671);
IkReal x2685=(r11*x2672);
IkReal x2686=((1.0)*x2671);
IkReal x2687=(sj3*x2672);
IkReal x2688=(r11*x2671);
IkReal x2689=(r00*x2672);
IkReal x2690=(r01*x2672);
evalcond[0]=((((-0.01)*x2689))+(((-0.01)*x2684))+(((-1.0)*x2674*x2677))+(((-1.0)*px))+x2674);
evalcond[1]=((((-0.01)*x2688))+(((-0.01)*x2683))+(((-1.0)*x2677*x2679))+(((-1.0)*py))+x2679);
evalcond[2]=(((sj4*x2683))+((sj4*x2688))+((cj4*r10*x2671))+((cj0*cj2))+(((-1.0)*x2681*x2685)));
evalcond[3]=(((sj4*x2684))+((sj4*x2689))+(((-1.0)*x2681*x2690))+(((-1.0)*cj2*x2680))+((x2671*x2676)));
evalcond[4]=(((x2678*x2690))+((x2676*x2687))+(((-1.0)*r00*x2678*x2686))+((x2682*x2684)));
evalcond[5]=((((-1.0)*r10*x2678*x2686))+((x2678*x2685))+((x2682*x2688))+((x2682*x2683)));
evalcond[6]=(((x2673*x2688))+((x2673*x2683))+((x2675*x2685))+(((-1.0)*r10*x2675*x2686))+(((-1.0)*x2677*x2680)));
evalcond[7]=((((-1.0)*cj0*x2677))+((x2673*x2689))+((x2673*x2684))+(((-1.0)*r00*x2675*x2686))+((x2675*x2690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2691=(cj2*sj1);
IkReal x2692=(cj0*cj2);
IkReal x2693=((6.9)*r10*sj0);
IkReal x2694=((100.0)*py*r11);
IkReal x2695=((100.0)*py*r10);
IkReal x2696=((6.9)*r11*sj0*sj4);
IkReal x2697=((6.9)*cj4*r11*sj0);
CheckValue<IkReal> x2698 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x2691*x2693))+(((-1.0)*x2691*x2696))+((cj4*x2693))+(((-1.0)*sj4*x2694))+(((-1.0)*cj4*x2695))+((r11*x2692))+x2696)),IkReal((((sj4*x2695))+(((-1.0)*x2691*x2697))+(((-1.0)*r10*x2692))+(((-1.0)*sj4*x2693))+((sj4*x2691*x2693))+(((-1.0)*cj4*x2694))+x2697)),IKFAST_ATAN2_MAGTHRESH);
if(!x2698.valid){
continue;
}
CheckValue<IkReal> x2699=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x2699.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2698.value)+(((1.5707963267949)*(x2699.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2700=IKcos(j6);
IkReal x2701=IKsin(j6);
IkReal x2702=(cj3*cj4);
IkReal x2703=((0.069)*cj0);
IkReal x2704=(cj3*sj4);
IkReal x2705=(cj4*r00);
IkReal x2706=(cj2*sj1);
IkReal x2707=(sj3*sj4);
IkReal x2708=((0.069)*sj0);
IkReal x2709=((1.0)*sj0);
IkReal x2710=((1.0)*cj4);
IkReal x2711=(cj4*sj3);
IkReal x2712=(r10*x2701);
IkReal x2713=(r01*x2700);
IkReal x2714=(r11*x2701);
IkReal x2715=((1.0)*x2700);
IkReal x2716=(sj3*x2701);
IkReal x2717=(r11*x2700);
IkReal x2718=(r00*x2701);
IkReal x2719=(r01*x2701);
evalcond[0]=(x2703+(((-0.01)*x2718))+(((-0.01)*x2713))+(((-1.0)*px))+(((-1.0)*x2703*x2706)));
evalcond[1]=(x2708+(((-0.01)*x2717))+(((-0.01)*x2712))+(((-1.0)*py))+(((-1.0)*x2706*x2708)));
evalcond[2]=(((cj4*r10*x2700))+((cj0*cj2))+((sj4*x2717))+((sj4*x2712))+(((-1.0)*x2710*x2714)));
evalcond[3]=((((-1.0)*cj2*x2709))+((x2700*x2705))+((sj4*x2713))+((sj4*x2718))+(((-1.0)*x2710*x2719)));
evalcond[4]=(((x2707*x2719))+((x2711*x2713))+(((-1.0)*r00*x2707*x2715))+((x2705*x2716)));
evalcond[5]=(((x2707*x2714))+(((-1.0)*r10*x2707*x2715))+((x2711*x2712))+((x2711*x2717)));
evalcond[6]=(((x2702*x2712))+((x2702*x2717))+(((-1.0)*x2706*x2709))+((x2704*x2714))+(((-1.0)*r10*x2704*x2715)));
evalcond[7]=((((-1.0)*cj0*x2706))+((x2702*x2713))+((x2702*x2718))+((x2704*x2719))+(((-1.0)*r00*x2704*x2715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2720=((6.9)*cj0);
IkReal x2721=((6.9)*sj0);
IkReal x2722=(cj2*sj1);
IkReal x2723=(x2720*x2722);
IkReal x2724=(x2721*x2722);
CheckValue<IkReal> x2725 = IKatan2WithCheck(IkReal(((((100.0)*rxp1_2))+((r11*((x2720+(((-1.0)*x2723))))))+((r01*((x2724+(((-1.0)*x2721)))))))),IkReal((((r00*((x2721+(((-1.0)*x2724))))))+(((-100.0)*rxp0_2))+((r10*((x2723+(((-1.0)*x2720)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2725.valid){
continue;
}
CheckValue<IkReal> x2726=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2726.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2725.value)+(((1.5707963267949)*(x2726.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2727=IKcos(j6);
IkReal x2728=IKsin(j6);
IkReal x2729=(cj3*cj4);
IkReal x2730=((0.069)*cj0);
IkReal x2731=(cj3*sj4);
IkReal x2732=(cj4*r00);
IkReal x2733=(cj2*sj1);
IkReal x2734=(sj3*sj4);
IkReal x2735=((0.069)*sj0);
IkReal x2736=((1.0)*sj0);
IkReal x2737=((1.0)*cj4);
IkReal x2738=(cj4*sj3);
IkReal x2739=(r10*x2728);
IkReal x2740=(r01*x2727);
IkReal x2741=(r11*x2728);
IkReal x2742=((1.0)*x2727);
IkReal x2743=(sj3*x2728);
IkReal x2744=(r11*x2727);
IkReal x2745=(r00*x2728);
IkReal x2746=(r01*x2728);
evalcond[0]=(x2730+(((-1.0)*x2730*x2733))+(((-0.01)*x2740))+(((-0.01)*x2745))+(((-1.0)*px)));
evalcond[1]=((((-0.01)*x2739))+x2735+(((-0.01)*x2744))+(((-1.0)*x2733*x2735))+(((-1.0)*py)));
evalcond[2]=(((cj4*r10*x2727))+((cj0*cj2))+((sj4*x2744))+((sj4*x2739))+(((-1.0)*x2737*x2741)));
evalcond[3]=((((-1.0)*cj2*x2736))+((x2727*x2732))+((sj4*x2740))+((sj4*x2745))+(((-1.0)*x2737*x2746)));
evalcond[4]=(((x2734*x2746))+((x2738*x2740))+(((-1.0)*r00*x2734*x2742))+((x2732*x2743)));
evalcond[5]=(((x2734*x2741))+(((-1.0)*r10*x2734*x2742))+((x2738*x2744))+((x2738*x2739)));
evalcond[6]=(((x2731*x2741))+((x2729*x2744))+(((-1.0)*x2733*x2736))+(((-1.0)*r10*x2731*x2742))+((x2729*x2739)));
evalcond[7]=(((x2731*x2746))+((x2729*x2745))+((x2729*x2740))+(((-1.0)*cj0*x2733))+(((-1.0)*r00*x2731*x2742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[4];
IkReal x2747=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2747);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2747);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
j6eval[0]=r22;
j6eval[1]=IKsign(r22);
j6eval[2]=cj2;
j6eval[3]=((cj0*cj0)+(sj0*sj0));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2748=(cj0*cj2);
IkReal x2749=(cj2*sj0);
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal((((r10*x2749))+((r00*x2748)))),IkReal((((r11*x2749))+((r01*x2748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
CheckValue<IkReal> x2751=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2751.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2750.value)+(((1.5707963267949)*(x2751.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2752=IKcos(j6);
IkReal x2753=IKsin(j6);
IkReal x2754=((0.069)*cj0);
IkReal x2755=(cj3*cj5);
IkReal x2756=(r10*sj5);
IkReal x2757=(cj5*sj3);
IkReal x2758=(cj3*sj5);
IkReal x2759=((0.37429)*sj5);
IkReal x2760=(r00*sj5);
IkReal x2761=((0.01)*cj5);
IkReal x2762=((0.069)*sj0);
IkReal x2763=(cj2*sj1);
IkReal x2764=(sj3*sj5);
IkReal x2765=((1.0)*x2753);
IkReal x2766=((0.37429)*x2753);
IkReal x2767=(sj3*x2753);
IkReal x2768=((1.0)*x2763);
IkReal x2769=(r01*x2752);
IkReal x2770=(r11*x2752);
IkReal x2771=((1.0)*x2769);
IkReal x2772=((1.0)*x2770);
evalcond[0]=((((-1.0)*r11*x2765))+((r10*x2752))+((cj0*cj2)));
evalcond[1]=((((-1.0)*cj2*sj0))+(((-1.0)*r01*x2765))+((r00*x2752)));
evalcond[2]=((((-1.0)*x2758*x2771))+(((-1.0)*x2757*x2771))+(((-1.0)*r00*x2757*x2765))+(((-1.0)*r00*x2758*x2765)));
evalcond[3]=((((-1.0)*r10*x2757*x2765))+(((-1.0)*cj3*x2756*x2765))+(((-1.0)*x2758*x2772))+(((-1.0)*x2757*x2772)));
evalcond[4]=(((x2756*x2767))+(((-1.0)*sj0*x2768))+(((-1.0)*r10*x2755*x2765))+((x2764*x2770))+(((-1.0)*x2755*x2772)));
evalcond[5]=((((-1.0)*r00*x2755*x2765))+(((-1.0)*cj0*x2768))+((x2760*x2767))+(((-1.0)*x2755*x2771))+((x2764*x2769)));
evalcond[6]=(x2754+((r00*x2753*x2761))+((x2761*x2769))+(((-1.0)*x2759*x2769))+(((-1.0)*px))+(((-1.0)*r00*x2753*x2759))+(((-1.0)*x2754*x2763)));
evalcond[7]=(x2762+((x2761*x2770))+((r10*x2753*x2761))+(((-1.0)*x2759*x2770))+(((-1.0)*x2762*x2763))+(((-1.0)*py))+(((-1.0)*x2756*x2766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[4];
IkReal x2773=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2773);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2773);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=r22;
j6eval[1]=cj2;
j6eval[2]=((cj0*cj0)+(sj0*sj0));
j6eval[3]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2774=((1.0)*cj2);
CheckValue<IkReal> x2775 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x2774))+(((-1.0)*r10*sj0*x2774)))),IkReal(((((-1.0)*cj0*r01*x2774))+(((-1.0)*r11*sj0*x2774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2775.valid){
continue;
}
CheckValue<IkReal> x2776=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2776.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2775.value)+(((1.5707963267949)*(x2776.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2777=IKsin(j6);
IkReal x2778=IKcos(j6);
IkReal x2779=((0.069)*cj0);
IkReal x2780=((1.0)*cj3);
IkReal x2781=(cj0*cj2);
IkReal x2782=(cj3*cj5);
IkReal x2783=((1.0)*sj1);
IkReal x2784=(cj2*sj0);
IkReal x2785=((0.01)*cj5);
IkReal x2786=(cj5*sj3);
IkReal x2787=(r11*x2778);
IkReal x2788=(r10*x2777);
IkReal x2789=(r01*x2778);
IkReal x2790=((1.0)*x2778);
IkReal x2791=(r00*x2777);
IkReal x2792=(sj5*x2788);
IkReal x2793=(sj5*x2789);
IkReal x2794=(sj5*x2791);
evalcond[0]=(x2781+((r11*x2777))+(((-1.0)*r10*x2790)));
evalcond[1]=(((r01*x2777))+(((-1.0)*x2784))+(((-1.0)*r00*x2790)));
evalcond[2]=(((x2786*x2791))+(((-1.0)*x2780*x2793))+(((-1.0)*x2780*x2794))+((x2786*x2789)));
evalcond[3]=((((-1.0)*x2780*x2792))+(((-1.0)*sj5*x2780*x2787))+((x2786*x2787))+((x2786*x2788)));
evalcond[4]=(((sj3*sj5*x2787))+((sj3*x2792))+((x2782*x2787))+((x2782*x2788))+(((-1.0)*x2783*x2784)));
evalcond[5]=((((-1.0)*x2781*x2783))+((sj3*x2793))+((sj3*x2794))+((x2782*x2789))+((x2782*x2791)));
evalcond[6]=(x2779+((x2785*x2791))+((x2785*x2789))+(((-1.0)*cj2*sj1*x2779))+(((-0.37429)*x2794))+(((-0.37429)*x2793))+(((-1.0)*px)));
evalcond[7]=(((x2785*x2788))+((x2785*x2787))+(((-0.37429)*sj5*x2787))+(((-0.37429)*x2792))+(((-1.0)*py))+(((0.069)*sj0))+(((-0.069)*sj1*x2784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x2795=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2795);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2795);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
IkReal x2796=((6900.0)*r10);
IkReal x2797=(sj0*sj2);
IkReal x2798=((6900.0)*cj0);
IkReal x2799=((6900.0)*sj0);
j6eval[0]=r22;
j6eval[1]=IKsign(r22);
j6eval[2]=((IKabs(((((-1.0)*r01*sj2*x2798))+((r11*x2798))+(((-6900.0)*r11*x2797))+(((-1.0)*r01*x2799))+(((100000.0)*rxp1_2)))))+(IKabs((((r00*sj2*x2798))+((r00*x2799))+((x2796*x2797))+(((-1.0)*cj0*x2796))+(((-100000.0)*rxp0_2))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2800=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2800);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2800);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j6eval[0]=sj3;
j6eval[1]=IKsign(sj3);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2801=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2801);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2801);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
IkReal x2802=(cj3*r22);
j6eval[0]=x2802;
j6eval[1]=IKsign(x2802);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2803=(r00*sj3);
IkReal x2804=((100000.0)*py);
IkReal x2805=((6900.0)*sj0);
IkReal x2806=(cj3*r01);
IkReal x2807=(r01*sj3);
IkReal x2808=(cj3*r00);
IkReal x2809=((6900.0)*cj0*sj2);
IkReal x2810=(cj3*x2809);
CheckValue<IkReal> x2811=IKPowWithIntegerCheck(IKsign((cj3*r22)),-1);
if(!x2811.valid){
continue;
}
CheckValue<IkReal> x2812 = IKatan2WithCheck(IkReal(((((-1.0)*x2805*x2806))+((x2804*x2806))+(((-1.0)*x2803*x2809))+(((-1.0)*x2803*x2805))+(((-1.0)*x2806*x2809))+((x2803*x2804)))),IkReal((((x2808*x2809))+(((-1.0)*x2805*x2807))+((x2805*x2808))+((x2804*x2807))+(((-1.0)*x2807*x2809))+(((-1.0)*x2804*x2808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2812.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2811.value)))+(x2812.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2813=IKcos(j6);
IkReal x2814=IKsin(j6);
IkReal x2815=((1.0)*cj3);
IkReal x2816=((1.0)*sj3);
IkReal x2817=((0.069)*cj0);
IkReal x2818=((0.069)*sj0);
IkReal x2819=(r01*x2813);
IkReal x2820=(r10*x2813);
IkReal x2821=(r10*x2814);
IkReal x2822=(r11*x2814);
IkReal x2823=(r00*x2814);
IkReal x2824=(r11*x2813);
IkReal x2825=(r01*x2814);
IkReal x2826=(r00*x2813);
evalcond[0]=((((-0.37429)*x2819))+(((-1.0)*sj2*x2818))+(((-1.0)*px))+(((-0.37429)*x2823))+x2817);
evalcond[1]=(((sj2*x2817))+(((-1.0)*py))+(((-0.37429)*x2824))+(((-0.37429)*x2821))+x2818);
evalcond[2]=(((sj3*x2825))+(((-1.0)*x2816*x2826))+(((-1.0)*x2815*x2819))+(((-1.0)*x2815*x2823)));
evalcond[3]=(((sj3*x2822))+(((-1.0)*x2816*x2820))+(((-1.0)*x2815*x2824))+(((-1.0)*x2815*x2821)));
evalcond[4]=(((cj3*x2822))+((sj3*x2824))+((sj3*x2821))+((cj0*sj2))+(((-1.0)*x2815*x2820)));
evalcond[5]=(((cj3*x2825))+((sj3*x2823))+(((-1.0)*sj0*sj2))+(((-1.0)*x2815*x2826))+((sj3*x2819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2827=((100000.0)*px*r00);
IkReal x2828=((6900.0)*cj0*cj3);
IkReal x2829=((6900.0)*cj0*sj3);
IkReal x2830=((100000.0)*px*r01);
IkReal x2831=((6900.0)*cj3*sj0*sj2);
IkReal x2832=((6900.0)*sj0*sj2*sj3);
CheckValue<IkReal> x2833 = IKatan2WithCheck(IkReal((((sj3*x2827))+(((-1.0)*r00*x2829))+(((-1.0)*r01*x2828))+((cj3*x2830))+((r00*x2832))+((r01*x2831)))),IkReal(((((-1.0)*r00*x2831))+(((-1.0)*r01*x2829))+((r00*x2828))+((sj3*x2830))+(((-1.0)*cj3*x2827))+((r01*x2832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2833.valid){
continue;
}
CheckValue<IkReal> x2834=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2834.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2833.value)+(((-1.5707963267949)*(x2834.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2835=IKcos(j6);
IkReal x2836=IKsin(j6);
IkReal x2837=((1.0)*cj3);
IkReal x2838=((1.0)*sj3);
IkReal x2839=((0.069)*cj0);
IkReal x2840=((0.069)*sj0);
IkReal x2841=(r01*x2835);
IkReal x2842=(r10*x2835);
IkReal x2843=(r10*x2836);
IkReal x2844=(r11*x2836);
IkReal x2845=(r00*x2836);
IkReal x2846=(r11*x2835);
IkReal x2847=(r01*x2836);
IkReal x2848=(r00*x2835);
evalcond[0]=((((-1.0)*px))+x2839+(((-0.37429)*x2841))+(((-0.37429)*x2845))+(((-1.0)*sj2*x2840)));
evalcond[1]=((((-1.0)*py))+((sj2*x2839))+x2840+(((-0.37429)*x2843))+(((-0.37429)*x2846)));
evalcond[2]=(((sj3*x2847))+(((-1.0)*x2838*x2848))+(((-1.0)*x2837*x2841))+(((-1.0)*x2837*x2845)));
evalcond[3]=(((sj3*x2844))+(((-1.0)*x2838*x2842))+(((-1.0)*x2837*x2846))+(((-1.0)*x2837*x2843)));
evalcond[4]=(((cj3*x2844))+((sj3*x2846))+((sj3*x2843))+(((-1.0)*x2837*x2842))+((cj0*sj2)));
evalcond[5]=(((cj3*x2847))+((sj3*x2841))+((sj3*x2845))+(((-1.0)*sj0*sj2))+(((-1.0)*x2837*x2848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2849=((6900.0)*cj0);
IkReal x2850=((6900.0)*sj0);
IkReal x2851=(sj2*x2850);
IkReal x2852=(((sj2*x2849))+x2850);
CheckValue<IkReal> x2853 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2852))+((r11*((x2849+(((-1.0)*x2851))))))+(((100000.0)*rxp1_2)))),IkReal((((r10*((x2851+(((-1.0)*x2849))))))+((r00*x2852))+(((-100000.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2853.valid){
continue;
}
CheckValue<IkReal> x2854=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2854.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2853.value)+(((1.5707963267949)*(x2854.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2855=IKcos(j6);
IkReal x2856=IKsin(j6);
IkReal x2857=((1.0)*cj3);
IkReal x2858=((1.0)*sj3);
IkReal x2859=((0.069)*cj0);
IkReal x2860=((0.069)*sj0);
IkReal x2861=(r01*x2855);
IkReal x2862=(r10*x2855);
IkReal x2863=(r10*x2856);
IkReal x2864=(r11*x2856);
IkReal x2865=(r00*x2856);
IkReal x2866=(r11*x2855);
IkReal x2867=(r01*x2856);
IkReal x2868=(r00*x2855);
evalcond[0]=((((-0.37429)*x2865))+(((-0.37429)*x2861))+(((-1.0)*px))+(((-1.0)*sj2*x2860))+x2859);
evalcond[1]=((((-0.37429)*x2866))+(((-0.37429)*x2863))+((sj2*x2859))+(((-1.0)*py))+x2860);
evalcond[2]=(((sj3*x2867))+(((-1.0)*x2857*x2861))+(((-1.0)*x2857*x2865))+(((-1.0)*x2858*x2868)));
evalcond[3]=(((sj3*x2864))+(((-1.0)*x2857*x2863))+(((-1.0)*x2857*x2866))+(((-1.0)*x2858*x2862)));
evalcond[4]=(((sj3*x2863))+((sj3*x2866))+(((-1.0)*x2857*x2862))+((cj3*x2864))+((cj0*sj2)));
evalcond[5]=(((sj3*x2865))+((sj3*x2861))+(((-1.0)*x2857*x2868))+(((-1.0)*sj0*sj2))+((cj3*x2867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x2869=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2869);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2869);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
IkReal x2870=((6900.0)*r10);
IkReal x2871=(sj0*sj2);
IkReal x2872=((6900.0)*cj0);
IkReal x2873=((6900.0)*sj0);
j6eval[0]=r22;
j6eval[1]=IKsign(r22);
j6eval[2]=((IKabs(((((-6900.0)*r11*x2871))+(((-1.0)*r01*sj2*x2872))+((r11*x2872))+(((-1.0)*r01*x2873))+(((100000.0)*rxp1_2)))))+(IKabs(((((-1.0)*cj0*x2870))+((r00*x2873))+((x2870*x2871))+((r00*sj2*x2872))+(((-100000.0)*rxp0_2))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2874=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2874);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2874);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j6eval[0]=sj3;
j6eval[1]=IKsign(sj3);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2875=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2875);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2875);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
IkReal x2876=(cj3*r22);
j6eval[0]=x2876;
j6eval[1]=IKsign(x2876);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2877=(r00*sj3);
IkReal x2878=((100000.0)*py);
IkReal x2879=((6900.0)*sj0);
IkReal x2880=(cj3*r01);
IkReal x2881=(r01*sj3);
IkReal x2882=(cj3*r00);
IkReal x2883=((6900.0)*cj0*sj2);
IkReal x2884=(cj3*x2883);
CheckValue<IkReal> x2885=IKPowWithIntegerCheck(IKsign((cj3*r22)),-1);
if(!x2885.valid){
continue;
}
CheckValue<IkReal> x2886 = IKatan2WithCheck(IkReal((((x2877*x2883))+((x2877*x2879))+(((-1.0)*x2877*x2878))+(((-1.0)*x2879*x2880))+((x2878*x2880))+(((-1.0)*x2880*x2883)))),IkReal((((x2879*x2881))+((x2879*x2882))+((x2881*x2883))+(((-1.0)*x2878*x2882))+(((-1.0)*x2878*x2881))+((x2882*x2883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2886.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2885.value)))+(x2886.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2887=IKcos(j6);
IkReal x2888=IKsin(j6);
IkReal x2889=((1.0)*cj3);
IkReal x2890=(cj0*sj2);
IkReal x2891=((0.069)*sj0);
IkReal x2892=(r01*x2887);
IkReal x2893=(r10*x2888);
IkReal x2894=(sj3*x2887);
IkReal x2895=(cj3*x2887);
IkReal x2896=(r00*x2888);
IkReal x2897=(r11*x2887);
IkReal x2898=((1.0)*sj3*x2888);
evalcond[0]=((((-0.37429)*x2892))+(((-0.37429)*x2896))+(((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*sj2*x2891)));
evalcond[1]=((((-0.37429)*x2893))+(((-0.37429)*x2897))+(((-1.0)*py))+(((0.069)*x2890))+x2891);
evalcond[2]=((((-1.0)*x2889*x2892))+(((-1.0)*x2889*x2896))+((r00*x2894))+(((-1.0)*r01*x2898)));
evalcond[3]=((((-1.0)*x2889*x2893))+(((-1.0)*x2889*x2897))+((r10*x2894))+(((-1.0)*r11*x2898)));
evalcond[4]=(((sj3*x2893))+(((-1.0)*r11*x2888*x2889))+((r11*x2894))+((r10*x2895))+x2890);
evalcond[5]=(((sj3*x2896))+((sj3*x2892))+((r00*x2895))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x2888*x2889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2899=((6900.0)*cj0);
IkReal x2900=(cj3*r01);
IkReal x2901=(r00*sj3);
IkReal x2902=(r01*sj3);
IkReal x2903=((100000.0)*px);
IkReal x2904=(r00*x2903);
IkReal x2905=((6900.0)*sj0*sj2);
IkReal x2906=(cj3*x2905);
CheckValue<IkReal> x2907=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2907.valid){
continue;
}
CheckValue<IkReal> x2908 = IKatan2WithCheck(IkReal((((x2899*x2901))+(((-1.0)*x2901*x2905))+(((-1.0)*x2901*x2903))+((x2900*x2903))+((x2900*x2905))+(((-1.0)*x2899*x2900)))),IkReal(((((-1.0)*x2902*x2903))+(((-1.0)*x2902*x2905))+((x2899*x2902))+(((-1.0)*r00*x2906))+((cj3*r00*x2899))+(((-1.0)*cj3*x2904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2908.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2907.value)))+(x2908.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2909=IKcos(j6);
IkReal x2910=IKsin(j6);
IkReal x2911=((1.0)*cj3);
IkReal x2912=(cj0*sj2);
IkReal x2913=((0.069)*sj0);
IkReal x2914=(r01*x2909);
IkReal x2915=(r10*x2910);
IkReal x2916=(sj3*x2909);
IkReal x2917=(cj3*x2909);
IkReal x2918=(r00*x2910);
IkReal x2919=(r11*x2909);
IkReal x2920=((1.0)*sj3*x2910);
evalcond[0]=((((-1.0)*sj2*x2913))+(((0.069)*cj0))+(((-1.0)*px))+(((-0.37429)*x2918))+(((-0.37429)*x2914)));
evalcond[1]=((((0.069)*x2912))+(((-1.0)*py))+(((-0.37429)*x2919))+(((-0.37429)*x2915))+x2913);
evalcond[2]=(((r00*x2916))+(((-1.0)*x2911*x2918))+(((-1.0)*x2911*x2914))+(((-1.0)*r01*x2920)));
evalcond[3]=((((-1.0)*x2911*x2919))+(((-1.0)*x2911*x2915))+(((-1.0)*r11*x2920))+((r10*x2916)));
evalcond[4]=(((sj3*x2915))+((r11*x2916))+(((-1.0)*r11*x2910*x2911))+x2912+((r10*x2917)));
evalcond[5]=(((sj3*x2914))+((sj3*x2918))+(((-1.0)*r01*x2910*x2911))+((r00*x2917))+(((-1.0)*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2921=((6900.0)*cj0);
IkReal x2922=((6900.0)*sj0);
IkReal x2923=(sj2*x2922);
IkReal x2924=(((sj2*x2921))+x2922);
CheckValue<IkReal> x2925 = IKatan2WithCheck(IkReal((((r11*(((((-1.0)*x2923))+x2921))))+(((-1.0)*r01*x2924))+(((100000.0)*rxp1_2)))),IkReal((((r00*x2924))+(((-100000.0)*rxp0_2))+((r10*(((((-1.0)*x2921))+x2923)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2925.valid){
continue;
}
CheckValue<IkReal> x2926=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2926.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2925.value)+(((1.5707963267949)*(x2926.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2927=IKcos(j6);
IkReal x2928=IKsin(j6);
IkReal x2929=((1.0)*cj3);
IkReal x2930=(cj0*sj2);
IkReal x2931=((0.069)*sj0);
IkReal x2932=(r01*x2927);
IkReal x2933=(r10*x2928);
IkReal x2934=(sj3*x2927);
IkReal x2935=(cj3*x2927);
IkReal x2936=(r00*x2928);
IkReal x2937=(r11*x2927);
IkReal x2938=((1.0)*sj3*x2928);
evalcond[0]=((((-0.37429)*x2932))+(((-0.37429)*x2936))+(((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*sj2*x2931)));
evalcond[1]=((((-0.37429)*x2933))+(((-0.37429)*x2937))+(((0.069)*x2930))+(((-1.0)*py))+x2931);
evalcond[2]=(((r00*x2934))+(((-1.0)*r01*x2938))+(((-1.0)*x2929*x2932))+(((-1.0)*x2929*x2936)));
evalcond[3]=(((r10*x2934))+(((-1.0)*x2929*x2933))+(((-1.0)*x2929*x2937))+(((-1.0)*r11*x2938)));
evalcond[4]=(((r10*x2935))+((sj3*x2933))+(((-1.0)*r11*x2928*x2929))+x2930+((r11*x2934)));
evalcond[5]=((((-1.0)*r01*x2928*x2929))+((r00*x2935))+((sj3*x2932))+((sj3*x2936))+(((-1.0)*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x2939=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2939);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2939);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
IkReal x2940=((6900.0)*r10);
IkReal x2941=(sj0*sj2);
IkReal x2942=((6900.0)*r01);
IkReal x2943=(cj0*sj2);
IkReal x2944=((6900.0)*r11);
IkReal x2945=((6900.0)*r00);
j6eval[0]=r22;
j6eval[1]=((IKabs(((((-1.0)*cj0*x2944))+((x2941*x2944))+((sj0*x2942))+(((-100000.0)*rxp1_2))+((x2942*x2943)))))+(IKabs(((((-1.0)*x2940*x2941))+(((-1.0)*x2943*x2945))+((cj0*x2940))+(((100000.0)*rxp0_2))+(((-1.0)*sj0*x2945))))));
j6eval[2]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2946=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2946);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2946);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j6eval[0]=sj3;
j6eval[1]=IKsign(sj3);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2947=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2947);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2947);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
IkReal x2948=(cj3*r22);
j6eval[0]=x2948;
j6eval[1]=IKsign(x2948);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2949=(r00*sj3);
IkReal x2950=((100000.0)*py);
IkReal x2951=((6900.0)*sj0);
IkReal x2952=(cj3*r01);
IkReal x2953=(r01*sj3);
IkReal x2954=(cj3*r00);
IkReal x2955=((6900.0)*cj0*sj2);
IkReal x2956=(cj3*x2955);
CheckValue<IkReal> x2957 = IKatan2WithCheck(IkReal((((x2951*x2952))+((x2952*x2955))+(((-1.0)*x2949*x2955))+(((-1.0)*x2949*x2951))+(((-1.0)*x2950*x2952))+((x2949*x2950)))),IkReal(((((-1.0)*x2953*x2955))+((x2950*x2953))+((x2950*x2954))+(((-1.0)*x2954*x2955))+(((-1.0)*x2951*x2954))+(((-1.0)*x2951*x2953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2957.valid){
continue;
}
CheckValue<IkReal> x2958=IKPowWithIntegerCheck(IKsign((cj3*r22)),-1);
if(!x2958.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2957.value)+(((1.5707963267949)*(x2958.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2959=IKcos(j6);
IkReal x2960=IKsin(j6);
IkReal x2961=((0.069)*cj0);
IkReal x2962=((1.0)*sj3);
IkReal x2963=((0.069)*sj0);
IkReal x2964=((1.0)*cj3);
IkReal x2965=(r00*x2960);
IkReal x2966=(r10*x2959);
IkReal x2967=(r01*x2959);
IkReal x2968=(r11*x2960);
IkReal x2969=(r10*x2960);
IkReal x2970=(r01*x2960);
IkReal x2971=(r00*x2959);
IkReal x2972=(r11*x2959);
evalcond[0]=((((-1.0)*px))+(((0.37429)*x2965))+(((0.37429)*x2967))+(((-1.0)*sj2*x2963))+x2961);
evalcond[1]=((((-1.0)*py))+(((0.37429)*x2969))+((sj2*x2961))+(((0.37429)*x2972))+x2963);
evalcond[2]=((((-1.0)*x2962*x2971))+((cj3*x2965))+((cj3*x2967))+((sj3*x2970)));
evalcond[3]=(((sj3*x2968))+(((-1.0)*x2962*x2966))+((cj3*x2969))+((cj3*x2972)));
evalcond[4]=((((-1.0)*x2962*x2972))+(((-1.0)*x2962*x2969))+((cj3*x2968))+(((-1.0)*x2964*x2966))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x2964*x2971))+(((-1.0)*x2962*x2967))+(((-1.0)*x2962*x2965))+(((-1.0)*sj0*sj2))+((cj3*x2970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2973=((100000.0)*px*r00);
IkReal x2974=((6900.0)*cj0*cj3);
IkReal x2975=((6900.0)*cj0*sj3);
IkReal x2976=((100000.0)*px*r01);
IkReal x2977=((6900.0)*cj3*sj0*sj2);
IkReal x2978=((6900.0)*sj0*sj2*sj3);
CheckValue<IkReal> x2979=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2979.valid){
continue;
}
CheckValue<IkReal> x2980 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2977))+(((-1.0)*r00*x2975))+((r01*x2974))+((r00*x2978))+((sj3*x2973))+(((-1.0)*cj3*x2976)))),IkReal(((((-1.0)*r01*x2975))+(((-1.0)*r00*x2974))+((r01*x2978))+((r00*x2977))+((sj3*x2976))+((cj3*x2973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2980.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2979.value)))+(x2980.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2981=IKcos(j6);
IkReal x2982=IKsin(j6);
IkReal x2983=((0.069)*cj0);
IkReal x2984=((1.0)*sj3);
IkReal x2985=((0.069)*sj0);
IkReal x2986=((1.0)*cj3);
IkReal x2987=(r00*x2982);
IkReal x2988=(r10*x2981);
IkReal x2989=(r01*x2981);
IkReal x2990=(r11*x2982);
IkReal x2991=(r10*x2982);
IkReal x2992=(r01*x2982);
IkReal x2993=(r00*x2981);
IkReal x2994=(r11*x2981);
evalcond[0]=((((0.37429)*x2987))+(((0.37429)*x2989))+(((-1.0)*px))+(((-1.0)*sj2*x2985))+x2983);
evalcond[1]=(((sj2*x2983))+(((-1.0)*py))+x2985+(((0.37429)*x2994))+(((0.37429)*x2991)));
evalcond[2]=(((cj3*x2989))+((cj3*x2987))+(((-1.0)*x2984*x2993))+((sj3*x2992)));
evalcond[3]=(((cj3*x2991))+((cj3*x2994))+(((-1.0)*x2984*x2988))+((sj3*x2990)));
evalcond[4]=(((cj3*x2990))+(((-1.0)*x2984*x2991))+(((-1.0)*x2984*x2994))+(((-1.0)*x2986*x2988))+((cj0*sj2)));
evalcond[5]=(((cj3*x2992))+(((-1.0)*x2984*x2987))+(((-1.0)*x2984*x2989))+(((-1.0)*sj0*sj2))+(((-1.0)*x2986*x2993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2995=((6900.0)*cj0);
IkReal x2996=((6900.0)*sj0);
IkReal x2997=(sj2*x2996);
IkReal x2998=(x2996+((sj2*x2995)));
CheckValue<IkReal> x2999=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2999.valid){
continue;
}
CheckValue<IkReal> x3000 = IKatan2WithCheck(IkReal((((r01*x2998))+((r11*(((((-1.0)*x2995))+x2997))))+(((-100000.0)*rxp1_2)))),IkReal((((r10*(((((-1.0)*x2997))+x2995))))+(((-1.0)*r00*x2998))+(((100000.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3000.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2999.value)))+(x3000.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x3001=IKcos(j6);
IkReal x3002=IKsin(j6);
IkReal x3003=((0.069)*cj0);
IkReal x3004=((1.0)*sj3);
IkReal x3005=((0.069)*sj0);
IkReal x3006=((1.0)*cj3);
IkReal x3007=(r00*x3002);
IkReal x3008=(r10*x3001);
IkReal x3009=(r01*x3001);
IkReal x3010=(r11*x3002);
IkReal x3011=(r10*x3002);
IkReal x3012=(r01*x3002);
IkReal x3013=(r00*x3001);
IkReal x3014=(r11*x3001);
evalcond[0]=(x3003+(((-1.0)*px))+(((-1.0)*sj2*x3005))+(((0.37429)*x3009))+(((0.37429)*x3007)));
evalcond[1]=((((0.37429)*x3014))+(((0.37429)*x3011))+x3005+((sj2*x3003))+(((-1.0)*py)));
evalcond[2]=(((sj3*x3012))+(((-1.0)*x3004*x3013))+((cj3*x3007))+((cj3*x3009)));
evalcond[3]=(((cj3*x3011))+((cj3*x3014))+((sj3*x3010))+(((-1.0)*x3004*x3008)));
evalcond[4]=(((cj3*x3010))+(((-1.0)*x3004*x3014))+(((-1.0)*x3004*x3011))+(((-1.0)*x3006*x3008))+((cj0*sj2)));
evalcond[5]=(((cj3*x3012))+(((-1.0)*sj0*sj2))+(((-1.0)*x3004*x3009))+(((-1.0)*x3004*x3007))+(((-1.0)*x3006*x3013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
IkReal x3015=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3015);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3015);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
IkReal x3016=((6900.0)*r10);
IkReal x3017=(sj0*sj2);
IkReal x3018=((6900.0)*r01);
IkReal x3019=(cj0*sj2);
IkReal x3020=((6900.0)*r11);
IkReal x3021=((6900.0)*r00);
j6eval[0]=r22;
j6eval[1]=((IKabs((((x3017*x3020))+((x3018*x3019))+((sj0*x3018))+(((-1.0)*cj0*x3020))+(((-100000.0)*rxp1_2)))))+(IKabs((((cj0*x3016))+(((-1.0)*x3019*x3021))+(((-1.0)*sj0*x3021))+(((-1.0)*x3016*x3017))+(((100000.0)*rxp0_2))))));
j6eval[2]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x3022=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3022);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3022);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j6eval[0]=sj3;
j6eval[1]=IKsign(sj3);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x3023=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3023);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3023);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
IkReal x3024=(cj3*r22);
j6eval[0]=x3024;
j6eval[1]=IKsign(x3024);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x3025=(r00*sj3);
IkReal x3026=((100000.0)*py);
IkReal x3027=((6900.0)*sj0);
IkReal x3028=(cj3*r01);
IkReal x3029=(r01*sj3);
IkReal x3030=(cj3*r00);
IkReal x3031=((6900.0)*cj0*sj2);
IkReal x3032=(cj3*x3031);
CheckValue<IkReal> x3033=IKPowWithIntegerCheck(IKsign((cj3*r22)),-1);
if(!x3033.valid){
continue;
}
CheckValue<IkReal> x3034 = IKatan2WithCheck(IkReal((((x3028*x3031))+((x3027*x3028))+(((-1.0)*x3026*x3028))+((x3025*x3031))+(((-1.0)*x3025*x3026))+((x3025*x3027)))),IkReal((((x3026*x3030))+((x3027*x3029))+(((-1.0)*x3030*x3031))+(((-1.0)*x3026*x3029))+(((-1.0)*x3027*x3030))+((x3029*x3031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3034.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3033.value)))+(x3034.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x3035=IKcos(j6);
IkReal x3036=IKsin(j6);
IkReal x3037=((0.069)*cj0);
IkReal x3038=((1.0)*sj3);
IkReal x3039=(cj3*r00);
IkReal x3040=((0.069)*sj0);
IkReal x3041=(r10*x3035);
IkReal x3042=(r01*x3035);
IkReal x3043=((0.37429)*x3036);
IkReal x3044=(r11*x3035);
IkReal x3045=(cj3*x3036);
IkReal x3046=(x3036*x3038);
evalcond[0]=(x3037+(((-1.0)*px))+(((-1.0)*sj2*x3040))+(((0.37429)*x3042))+((r00*x3043)));
evalcond[1]=(x3040+((r10*x3043))+(((-1.0)*py))+((sj2*x3037))+(((0.37429)*x3044)));
evalcond[2]=(((x3036*x3039))+(((-1.0)*r01*x3046))+((cj3*x3042))+((r00*sj3*x3035)));
evalcond[3]=(((r10*x3045))+((sj3*x3041))+(((-1.0)*r11*x3046))+((cj3*x3044)));
evalcond[4]=((((-1.0)*x3038*x3044))+(((-1.0)*r11*x3045))+(((-1.0)*r10*x3046))+((cj3*x3041))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x3038*x3042))+(((-1.0)*r00*x3046))+((x3035*x3039))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x3045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x3047=((100000.0)*px*r00);
IkReal x3048=((6900.0)*cj0*cj3);
IkReal x3049=((6900.0)*cj0*sj3);
IkReal x3050=((100000.0)*px*r01);
IkReal x3051=((6900.0)*cj3*sj0*sj2);
IkReal x3052=((6900.0)*sj0*sj2*sj3);
CheckValue<IkReal> x3053 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x3051))+(((-1.0)*cj3*x3050))+(((-1.0)*sj3*x3047))+((r00*x3049))+((r01*x3048))+(((-1.0)*r00*x3052)))),IkReal(((((-1.0)*r01*x3052))+(((-1.0)*sj3*x3050))+((r00*x3051))+(((-1.0)*r00*x3048))+((cj3*x3047))+((r01*x3049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3053.valid){
continue;
}
CheckValue<IkReal> x3054=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3054.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x3053.value)+(((-1.5707963267949)*(x3054.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x3055=IKcos(j6);
IkReal x3056=IKsin(j6);
IkReal x3057=((0.069)*cj0);
IkReal x3058=((1.0)*sj3);
IkReal x3059=(cj3*r00);
IkReal x3060=((0.069)*sj0);
IkReal x3061=(r10*x3055);
IkReal x3062=(r01*x3055);
IkReal x3063=((0.37429)*x3056);
IkReal x3064=(r11*x3055);
IkReal x3065=(cj3*x3056);
IkReal x3066=(x3056*x3058);
evalcond[0]=(x3057+((r00*x3063))+(((-1.0)*px))+(((-1.0)*sj2*x3060))+(((0.37429)*x3062)));
evalcond[1]=(x3060+(((-1.0)*py))+((r10*x3063))+((sj2*x3057))+(((0.37429)*x3064)));
evalcond[2]=(((x3056*x3059))+((cj3*x3062))+(((-1.0)*r01*x3066))+((r00*sj3*x3055)));
evalcond[3]=(((sj3*x3061))+((cj3*x3064))+(((-1.0)*r11*x3066))+((r10*x3065)));
evalcond[4]=((((-1.0)*x3058*x3064))+(((-1.0)*r10*x3066))+((cj3*x3061))+((cj0*sj2))+(((-1.0)*r11*x3065)));
evalcond[5]=((((-1.0)*x3058*x3062))+(((-1.0)*r00*x3066))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x3065))+((x3055*x3059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x3067=((6900.0)*cj0);
IkReal x3068=((6900.0)*sj0);
IkReal x3069=(sj2*x3068);
IkReal x3070=(x3068+((sj2*x3067)));
CheckValue<IkReal> x3071 = IKatan2WithCheck(IkReal((((r01*x3070))+((r11*((x3069+(((-1.0)*x3067))))))+(((-100000.0)*rxp1_2)))),IkReal(((((-1.0)*r00*x3070))+((r10*((x3067+(((-1.0)*x3069))))))+(((100000.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3071.valid){
continue;
}
CheckValue<IkReal> x3072=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3072.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x3071.value)+(((1.5707963267949)*(x3072.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x3073=IKcos(j6);
IkReal x3074=IKsin(j6);
IkReal x3075=((0.069)*cj0);
IkReal x3076=((1.0)*sj3);
IkReal x3077=(cj3*r00);
IkReal x3078=((0.069)*sj0);
IkReal x3079=(r10*x3073);
IkReal x3080=(r01*x3073);
IkReal x3081=((0.37429)*x3074);
IkReal x3082=(r11*x3073);
IkReal x3083=(cj3*x3074);
IkReal x3084=(x3074*x3076);
evalcond[0]=(x3075+(((0.37429)*x3080))+(((-1.0)*px))+((r00*x3081))+(((-1.0)*sj2*x3078)));
evalcond[1]=(x3078+(((0.37429)*x3082))+((sj2*x3075))+(((-1.0)*py))+((r10*x3081)));
evalcond[2]=(((cj3*x3080))+((r00*sj3*x3073))+(((-1.0)*r01*x3084))+((x3074*x3077)));
evalcond[3]=(((cj3*x3082))+((sj3*x3079))+((r10*x3083))+(((-1.0)*r11*x3084)));
evalcond[4]=((((-1.0)*x3076*x3082))+((cj3*x3079))+(((-1.0)*r11*x3083))+(((-1.0)*r10*x3084))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x3076*x3080))+(((-1.0)*r01*x3083))+(((-1.0)*sj0*sj2))+(((-1.0)*r00*x3084))+((x3073*x3077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x3085=(cj4*sj3);
IkReal x3086=((1.0)*r01);
IkReal x3087=(cj3*sj5);
IkReal x3088=(sj3*sj4);
IkReal x3089=(cj0*cj2);
IkReal x3090=((1.0)*r00);
IkReal x3091=(cj5*r00);
IkReal x3092=(cj5*sj4);
IkReal x3093=(cj0*cj1);
IkReal x3094=(cj4*x3093);
IkReal x3095=(sj0*sj1*sj2);
CheckValue<IkReal> x3096=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*sj4*x3085))+((x3087*x3092))+((cj5*x3085*x3092)))))),-1);
if(!x3096.valid){
continue;
}
CheckValue<IkReal> x3097 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x3085*x3086*x3095))+(((-1.0)*cj5*x3085*x3086*x3089))+(((-1.0)*x3088*x3090*x3095))+((r10*x3094))+(((-1.0)*x3088*x3089*x3090))+(((-1.0)*x3086*x3087*x3089))+(((-1.0)*x3086*x3087*x3095))+(((-1.0)*r11*x3092*x3093)))),IkReal(((((-1.0)*x3086*x3088*x3089))+((r00*x3087*x3089))+((x3085*x3089*x3091))+((r00*x3087*x3095))+((x3085*x3091*x3095))+(((-1.0)*x3086*x3088*x3095))+((r10*x3092*x3093))+((r11*x3094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3097.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3096.value)))+(x3097.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x3098=IKcos(j6);
IkReal x3099=IKsin(j6);
IkReal x3100=((0.36442)*cj1);
IkReal x3101=((0.069)*cj0);
IkReal x3102=(r01*sj3);
IkReal x3103=((1.0)*cj0);
IkReal x3104=((1.0)*cj3);
IkReal x3105=(cj0*sj2);
IkReal x3106=((1.0)*sj3);
IkReal x3107=(cj2*sj1);
IkReal x3108=((0.069)*sj0);
IkReal x3109=(cj4*cj5);
IkReal x3110=((0.01)*cj5);
IkReal x3111=(r11*sj3);
IkReal x3112=((1.0)*sj0);
IkReal x3113=((1.0)*cj5);
IkReal x3114=(sj5*x3098);
IkReal x3115=(sj4*x3099);
IkReal x3116=(r10*x3098);
IkReal x3117=(r00*x3099);
IkReal x3118=(r11*x3098);
IkReal x3119=(r01*x3098);
IkReal x3120=(r10*x3099);
IkReal x3121=(sj5*x3120);
IkReal x3122=(r00*sj4*x3098);
IkReal x3123=((1.0)*cj4*x3099);
evalcond[0]=(((cj0*cj2))+(((-1.0)*r10*x3113*x3115))+((sj0*sj1*sj2))+(((-1.0)*r11*x3123))+(((-1.0)*sj4*x3113*x3118))+((cj4*x3116)));
evalcond[1]=(((sj1*x3105))+((cj4*r00*x3098))+(((-1.0)*cj2*x3112))+(((-1.0)*r00*x3113*x3115))+(((-1.0)*sj4*x3113*x3119))+(((-1.0)*r01*x3123)));
evalcond[2]=(x3101+(((-1.0)*sj2*x3108))+((cj0*x3100))+(((-1.0)*px))+((x3110*x3119))+((x3110*x3117))+(((-0.37429)*r01*x3114))+(((-0.37429)*sj5*x3117))+(((-1.0)*x3101*x3107)));
evalcond[3]=(((sj0*x3100))+x3108+(((-1.0)*x3107*x3108))+((x3110*x3120))+(((-0.37429)*x3121))+((sj2*x3101))+(((-1.0)*py))+(((-0.37429)*r11*x3114))+((x3110*x3118)));
evalcond[4]=((((-1.0)*sj5*x3104*x3117))+(((-1.0)*x3106*x3109*x3117))+(((-1.0)*cj1*x3103))+((x3102*x3115))+(((-1.0)*x3098*x3102*x3109))+(((-1.0)*r01*x3104*x3114))+(((-1.0)*x3106*x3122)));
evalcond[5]=((((-1.0)*x3106*x3109*x3118))+((x3111*x3115))+(((-1.0)*x3104*x3121))+(((-1.0)*cj1*x3112))+(((-1.0)*sj4*x3106*x3116))+(((-1.0)*x3106*x3109*x3120))+(((-1.0)*r11*x3104*x3114)));
evalcond[6]=(x3105+(((-1.0)*sj4*x3104*x3116))+(((-1.0)*x3104*x3109*x3120))+((x3111*x3114))+((cj3*r11*x3115))+(((-1.0)*x3104*x3109*x3118))+((sj3*x3121))+(((-1.0)*x3107*x3112)));
evalcond[7]=((((-1.0)*x3103*x3107))+(((-1.0)*x3104*x3122))+((sj3*sj5*x3117))+((x3102*x3114))+((cj3*r01*x3115))+(((-1.0)*x3104*x3109*x3117))+(((-1.0)*x3104*x3109*x3119))+(((-1.0)*sj2*x3112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x3124=((1.0)*sj3);
IkReal x3125=(sj1*sj2);
IkReal x3126=(cj1*cj5);
IkReal x3127=(cj3*sj5);
IkReal x3128=(cj4*r00);
IkReal x3129=(cj0*cj1);
IkReal x3130=(cj2*sj0);
IkReal x3131=(sj3*sj4);
IkReal x3132=(cj5*sj3);
IkReal x3133=(cj0*r01);
IkReal x3134=(cj4*r01);
IkReal x3135=(cj0*r00*sj4);
CheckValue<IkReal> x3136=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x3124))+(((-1.0)*cj4*x3127)))),-1);
if(!x3136.valid){
continue;
}
CheckValue<IkReal> x3137 = IKatan2WithCheck(IkReal(((((-1.0)*x3124*x3125*x3135))+((x3130*x3132*x3134))+((r01*x3127*x3130))+(((-1.0)*sj4*x3126*x3133))+(((-1.0)*cj4*cj5*x3124*x3125*x3133))+((x3128*x3129))+(((-1.0)*x3125*x3127*x3133))+((r00*x3130*x3131)))),IkReal(((((-1.0)*r00*x3127*x3130))+((cj0*r00*x3125*x3127))+(((-1.0)*cj5*x3124*x3128*x3130))+((cj0*x3125*x3128*x3132))+((x3126*x3135))+(((-1.0)*sj4*x3124*x3125*x3133))+((x3129*x3134))+((r01*x3130*x3131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3137.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3136.value)))+(x3137.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x3138=IKcos(j6);
IkReal x3139=IKsin(j6);
IkReal x3140=((0.36442)*cj1);
IkReal x3141=((0.069)*cj0);
IkReal x3142=(r01*sj3);
IkReal x3143=((1.0)*cj0);
IkReal x3144=((1.0)*cj3);
IkReal x3145=(cj0*sj2);
IkReal x3146=((1.0)*sj3);
IkReal x3147=(cj2*sj1);
IkReal x3148=((0.069)*sj0);
IkReal x3149=(cj4*cj5);
IkReal x3150=((0.01)*cj5);
IkReal x3151=(r11*sj3);
IkReal x3152=((1.0)*sj0);
IkReal x3153=((1.0)*cj5);
IkReal x3154=(sj5*x3138);
IkReal x3155=(sj4*x3139);
IkReal x3156=(r10*x3138);
IkReal x3157=(r00*x3139);
IkReal x3158=(r11*x3138);
IkReal x3159=(r01*x3138);
IkReal x3160=(r10*x3139);
IkReal x3161=(sj5*x3160);
IkReal x3162=(r00*sj4*x3138);
IkReal x3163=((1.0)*cj4*x3139);
evalcond[0]=(((cj4*x3156))+((cj0*cj2))+(((-1.0)*r10*x3153*x3155))+((sj0*sj1*sj2))+(((-1.0)*sj4*x3153*x3158))+(((-1.0)*r11*x3163)));
evalcond[1]=(((sj1*x3145))+((cj4*r00*x3138))+(((-1.0)*sj4*x3153*x3159))+(((-1.0)*r01*x3163))+(((-1.0)*cj2*x3152))+(((-1.0)*r00*x3153*x3155)));
evalcond[2]=(x3141+((cj0*x3140))+((x3150*x3157))+((x3150*x3159))+(((-1.0)*x3141*x3147))+(((-0.37429)*r01*x3154))+(((-0.37429)*sj5*x3157))+(((-1.0)*px))+(((-1.0)*sj2*x3148)));
evalcond[3]=(x3148+((sj2*x3141))+(((-1.0)*x3147*x3148))+((sj0*x3140))+(((-0.37429)*r11*x3154))+((x3150*x3160))+((x3150*x3158))+(((-1.0)*py))+(((-0.37429)*x3161)));
evalcond[4]=((((-1.0)*r01*x3144*x3154))+(((-1.0)*cj1*x3143))+((x3142*x3155))+(((-1.0)*x3146*x3162))+(((-1.0)*x3146*x3149*x3157))+(((-1.0)*sj5*x3144*x3157))+(((-1.0)*x3138*x3142*x3149)));
evalcond[5]=(((x3151*x3155))+(((-1.0)*cj1*x3152))+(((-1.0)*x3144*x3161))+(((-1.0)*x3146*x3149*x3158))+(((-1.0)*r11*x3144*x3154))+(((-1.0)*sj4*x3146*x3156))+(((-1.0)*x3146*x3149*x3160)));
evalcond[6]=((((-1.0)*x3144*x3149*x3158))+((x3151*x3154))+(((-1.0)*x3144*x3149*x3160))+((sj3*x3161))+x3145+(((-1.0)*sj4*x3144*x3156))+((cj3*r11*x3155))+(((-1.0)*x3147*x3152)));
evalcond[7]=((((-1.0)*x3144*x3149*x3159))+(((-1.0)*x3144*x3149*x3157))+((x3142*x3154))+(((-1.0)*x3143*x3147))+(((-1.0)*x3144*x3162))+((sj3*sj5*x3157))+(((-1.0)*sj2*x3152))+((cj3*r01*x3155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x3164=cj4*cj4;
IkReal x3165=cj5*cj5;
IkReal x3166=(cj4*sj0);
IkReal x3167=(cj2*r11);
IkReal x3168=(sj1*sj2);
IkReal x3169=(cj0*cj2);
IkReal x3170=(cj5*sj4);
IkReal x3171=(cj2*r10);
IkReal x3172=((1.0)*r01);
IkReal x3173=(r00*x3170);
IkReal x3174=((1.0)*cj0*cj4);
CheckValue<IkReal> x3175 = IKatan2WithCheck(IkReal((((x3166*x3171))+(((-1.0)*x3169*x3170*x3172))+((cj4*r00*x3169))+(((-1.0)*r10*x3168*x3174))+(((-1.0)*sj0*x3167*x3170))+((r00*x3166*x3168))+((cj0*r11*x3168*x3170))+(((-1.0)*sj0*x3168*x3170*x3172)))),IkReal((((x3166*x3167))+((cj4*r01*x3169))+(((-1.0)*cj0*r10*x3168*x3170))+((sj0*x3168*x3173))+((r01*x3166*x3168))+((sj0*x3170*x3171))+(((-1.0)*r11*x3168*x3174))+((x3169*x3173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3175.valid){
continue;
}
CheckValue<IkReal> x3176=IKPowWithIntegerCheck(IKsign((r22*((x3164+x3165+(((-1.0)*x3164*x3165)))))),-1);
if(!x3176.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x3175.value)+(((1.5707963267949)*(x3176.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x3177=IKcos(j6);
IkReal x3178=IKsin(j6);
IkReal x3179=((0.36442)*cj1);
IkReal x3180=((0.069)*cj0);
IkReal x3181=(r01*sj3);
IkReal x3182=((1.0)*cj0);
IkReal x3183=((1.0)*cj3);
IkReal x3184=(cj0*sj2);
IkReal x3185=((1.0)*sj3);
IkReal x3186=(cj2*sj1);
IkReal x3187=((0.069)*sj0);
IkReal x3188=(cj4*cj5);
IkReal x3189=((0.01)*cj5);
IkReal x3190=(r11*sj3);
IkReal x3191=((1.0)*sj0);
IkReal x3192=((1.0)*cj5);
IkReal x3193=(sj5*x3177);
IkReal x3194=(sj4*x3178);
IkReal x3195=(r10*x3177);
IkReal x3196=(r00*x3178);
IkReal x3197=(r11*x3177);
IkReal x3198=(r01*x3177);
IkReal x3199=(r10*x3178);
IkReal x3200=(sj5*x3199);
IkReal x3201=(r00*sj4*x3177);
IkReal x3202=((1.0)*cj4*x3178);
evalcond[0]=((((-1.0)*sj4*x3192*x3197))+((cj0*cj2))+((cj4*x3195))+(((-1.0)*r11*x3202))+(((-1.0)*r10*x3192*x3194))+((sj0*sj1*sj2)));
evalcond[1]=((((-1.0)*sj4*x3192*x3198))+(((-1.0)*cj2*x3191))+(((-1.0)*r00*x3192*x3194))+(((-1.0)*r01*x3202))+((cj4*r00*x3177))+((sj1*x3184)));
evalcond[2]=(x3180+(((-1.0)*x3180*x3186))+(((-0.37429)*sj5*x3196))+(((-0.37429)*r01*x3193))+(((-1.0)*px))+((cj0*x3179))+(((-1.0)*sj2*x3187))+((x3189*x3196))+((x3189*x3198)));
evalcond[3]=(x3187+((sj0*x3179))+(((-0.37429)*x3200))+(((-1.0)*x3186*x3187))+(((-1.0)*py))+((sj2*x3180))+(((-0.37429)*r11*x3193))+((x3189*x3199))+((x3189*x3197)));
evalcond[4]=((((-1.0)*x3185*x3201))+(((-1.0)*x3177*x3181*x3188))+(((-1.0)*sj5*x3183*x3196))+(((-1.0)*r01*x3183*x3193))+((x3181*x3194))+(((-1.0)*x3185*x3188*x3196))+(((-1.0)*cj1*x3182)));
evalcond[5]=((((-1.0)*sj4*x3185*x3195))+(((-1.0)*r11*x3183*x3193))+((x3190*x3194))+(((-1.0)*x3183*x3200))+(((-1.0)*x3185*x3188*x3197))+(((-1.0)*x3185*x3188*x3199))+(((-1.0)*cj1*x3191)));
evalcond[6]=(x3184+((cj3*r11*x3194))+(((-1.0)*sj4*x3183*x3195))+(((-1.0)*x3186*x3191))+((sj3*x3200))+((x3190*x3193))+(((-1.0)*x3183*x3188*x3197))+(((-1.0)*x3183*x3188*x3199)));
evalcond[7]=(((cj3*r01*x3194))+(((-1.0)*x3182*x3186))+(((-1.0)*sj2*x3191))+((x3181*x3193))+((sj3*sj5*x3196))+(((-1.0)*x3183*x3201))+(((-1.0)*x3183*x3188*x3196))+(((-1.0)*x3183*x3188*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x3203=((0.37429)*sj5);
IkReal x3204=((0.01)*cj5);
IkReal x3205=((((-1.0)*r21*x3203))+((r21*x3204)));
IkReal x3206=(((r20*x3204))+(((-1.0)*r20*x3203)));
CheckValue<IkReal> x3209 = IKatan2WithCheck(IkReal(x3205),IkReal(x3206),IKFAST_ATAN2_MAGTHRESH);
if(!x3209.valid){
continue;
}
IkReal x3207=((1.0)*(x3209.value));
if((((x3205*x3205)+(x3206*x3206))) < -0.00001)
continue;
CheckValue<IkReal> x3210=IKPowWithIntegerCheck(IKabs(IKsqrt(((x3205*x3205)+(x3206*x3206)))),-1);
if(!x3210.valid){
continue;
}
if( (((x3210.value)*(((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((x3210.value)*(((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x3208=IKasin(((x3210.value)*(((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1))))));
j6array[0]=((((-1.0)*x3208))+(((-1.0)*x3207)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+x3208+(((-1.0)*x3207)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j4eval[2];
IkReal x3211=cj6*cj6;
IkReal x3212=cj5*cj5;
IkReal x3213=r21*r21;
IkReal x3214=r22*r22;
IkReal x3215=r20*r20;
IkReal x3216=(cj6*r21);
IkReal x3217=(sj3*x3213);
IkReal x3218=(cj5*r22*sj5);
IkReal x3219=(sj3*x3214);
IkReal x3220=((1.0)*x3212);
IkReal x3221=((2.0)*r20*sj3*sj6);
IkReal x3222=(sj3*x3211*x3215);
IkReal x3223=(((x3212*x3219))+(((-1.0)*x3211*x3217*x3220))+((x3216*x3221))+((x3211*x3217))+(((-1.0)*x3219))+(((-1.0)*x3217))+(((-1.0)*x3212*x3216*x3221))+((x3212*x3222))+(((-1.0)*x3222))+(((-1.0)*x3218*x3221))+(((-2.0)*sj3*x3216*x3218))+(((-1.0)*sj3*x3215*x3220)));
j4eval[0]=x3223;
j4eval[1]=IKsign(x3223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3224=cj5*cj5;
IkReal x3225=cj6*cj6;
IkReal x3226=r22*r22;
IkReal x3227=r20*r20;
IkReal x3228=r21*r21;
IkReal x3229=((1.0)*cj3);
IkReal x3230=(cj6*r21);
IkReal x3231=(r20*sj6);
IkReal x3232=(cj3*x3225);
IkReal x3233=((1.0)*x3227);
IkReal x3234=(cj3*x3224);
IkReal x3235=((2.0)*cj3*cj5*r22*sj5);
IkReal x3236=((((-1.0)*x3224*x3225*x3228*x3229))+(((2.0)*cj3*x3230*x3231))+(((-1.0)*x3224*x3227*x3229))+(((-1.0)*x3230*x3235))+(((-1.0)*x3231*x3235))+(((-1.0)*x3225*x3227*x3229))+(((-1.0)*x3228*x3229))+((x3224*x3227*x3232))+(((-1.0)*x3226*x3229))+((x3226*x3234))+((x3228*x3232))+(((-2.0)*x3230*x3231*x3234)));
j4eval[0]=x3236;
j4eval[1]=IKsign(x3236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x3237=cj1*cj1;
IkReal x3238=cj2*cj2;
IkReal x3239=(cj2*sj1);
IkReal x3240=((50289.96)*cj1);
IkReal x3241=((10.5628985507246)*cj1);
IkReal x3242=(x3237*x3238);
j0eval[0]=((2.0)+(((-1.0)*x3242))+(((-1.0)*x3239*x3241))+(((27.8937064482252)*x3237))+x3241+(((-2.0)*x3239)));
j0eval[1]=IKsign(((9522.0)+(((-1.0)*x3239*x3240))+(((-4761.0)*x3242))+x3240+(((132801.9364)*x3237))+(((-9522.0)*x3239))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x3243=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x3243;
j0eval[1]=IKsign(x3243);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x3244=cj5*cj5;
IkReal x3245=cj6*cj6;
IkReal x3246=r20*r20;
IkReal x3247=r21*r21;
IkReal x3248=r22*r22;
IkReal x3249=(r22*sj5);
IkReal x3250=(cj6*r20);
IkReal x3251=(cj1*sj2);
IkReal x3252=(cj6*r21);
IkReal x3253=(cj5*sj1);
IkReal x3254=(r20*sj6);
IkReal x3255=(r21*sj6);
IkReal x3256=((2.0)*x3254);
IkReal x3257=((1.0)*x3244);
IkReal x3258=(x3245*x3246);
IkReal x3259=(x3245*x3247);
IkReal x3260=(((cj5*x3249*x3256))+(((2.0)*x3244*x3250*x3255))+x3248+x3247+x3258+((x3244*x3259))+(((-1.0)*x3248*x3257))+(((-1.0)*x3257*x3258))+(((-1.0)*x3259))+(((2.0)*cj5*x3249*x3252))+(((-2.0)*x3250*x3255))+((x3244*x3246)));
j4eval[0]=x3260;
j4eval[1]=((IKabs((((x3249*x3251))+((cj5*x3251*x3254))+((cj5*x3251*x3252))+(((-1.0)*sj1*x3255))+((sj1*x3250)))))+(IKabs((((sj1*x3249))+((x3252*x3253))+((x3251*x3255))+((x3253*x3254))+(((-1.0)*x3250*x3251))))));
j4eval[2]=IKsign(x3260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x3261=cj1*cj1;
IkReal x3262=cj2*cj2;
IkReal x3263=(cj2*sj1);
IkReal x3264=(x3261*x3262);
j0eval[0]=((-1.0)+(((5.28144927536232)*cj1*x3263))+x3263+x3264);
j0eval[1]=IKsign(((-69.0)+(((69.0)*x3263))+(((69.0)*x3264))+(((364.42)*cj1*x3263))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3265=(r10*sj6);
IkReal x3266=((0.863573439158322)*sj5);
IkReal x3267=((0.0230723086152)*cj5);
IkReal x3268=(cj6*r11);
IkReal x3269=(r00*sj6);
IkReal x3270=((0.0230723086152)*sj5);
IkReal x3271=((0.863573439158322)*cj5);
IkReal x3272=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+((x3265*x3266))+(((-1.0)*r12*x3270))+(((-1.0)*r12*x3271))+(((-1.0)*x3265*x3267))+(((-1.0)*x3267*x3268))+((x3266*x3268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+(((-1.0)*x3267*x3269))+(((-1.0)*x3267*x3272))+((x3266*x3272))+(((-1.0)*r02*x3271))+(((-1.0)*r02*x3270))+((x3266*x3269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+((x3265*x3266))+(((-1.0)*r12*x3270))+(((-1.0)*r12*x3271))+(((-1.0)*x3265*x3267))+(((-1.0)*x3267*x3268))+((x3266*x3268))))+IKsqr(((((2.30723086152)*px))+(((-1.0)*x3267*x3269))+(((-1.0)*x3267*x3272))+((x3266*x3272))+(((-1.0)*r02*x3271))+(((-1.0)*r02*x3270))+((x3266*x3269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+((x3265*x3266))+(((-1.0)*r12*x3270))+(((-1.0)*r12*x3271))+(((-1.0)*x3265*x3267))+(((-1.0)*x3267*x3268))+((x3266*x3268))), ((((2.30723086152)*px))+(((-1.0)*x3267*x3269))+(((-1.0)*x3267*x3272))+((x3266*x3272))+(((-1.0)*r02*x3271))+(((-1.0)*r02*x3270))+((x3266*x3269))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3273=((0.01)*cj5);
IkReal x3274=(cj6*r01);
IkReal x3275=((0.37429)*sj5);
IkReal x3276=(cj6*r11);
IkReal x3277=((0.01)*sj5);
IkReal x3278=(r00*sj6);
IkReal x3279=((0.37429)*cj5);
IkReal x3280=(r10*sj6);
evalcond[0]=(((x3273*x3278))+((x3273*x3274))+(((-1.0)*x3275*x3278))+(((-1.0)*x3274*x3275))+(((-1.0)*px))+((r02*x3277))+((r02*x3279))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=((((0.43342)*(IKsin(j0))))+((x3273*x3276))+(((-1.0)*x3275*x3276))+((x3273*x3280))+(((-1.0)*py))+(((-1.0)*x3275*x3280))+((r12*x3279))+((r12*x3277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3281=(cj0*sj6);
IkReal x3282=(cj0*cj6);
IkReal x3283=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3283;
j4eval[1]=((IKabs((((cj5*r21*x3282))+((cj0*r22*sj5))+((cj5*r20*x3281)))))+(IKabs((((r20*x3282))+(((-1.0)*r21*x3281))))));
j4eval[2]=IKsign(x3283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3284=(r21*sj0);
IkReal x3285=(r20*sj0);
IkReal x3286=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x3286;
j4eval[1]=((IKabs((((cj5*cj6*x3284))+((cj5*sj6*x3285))+((r22*sj0*sj5)))))+(IKabs((((cj6*x3285))+(((-1.0)*sj6*x3284))))));
j4eval[2]=IKsign(x3286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3287=cj6*cj6;
IkReal x3288=cj5*cj5;
IkReal x3289=(r02*r22);
IkReal x3290=(r22*sj5);
IkReal x3291=(r00*r20);
IkReal x3292=((1.0)*r21);
IkReal x3293=(r20*sj6);
IkReal x3294=(cj6*r01);
IkReal x3295=(cj0*cj5);
IkReal x3296=(r00*sj6);
IkReal x3297=((1.0)*cj5);
IkReal x3298=(cj6*r21);
IkReal x3299=(cj5*r02*sj5);
IkReal x3300=((1.0)*x3288);
IkReal x3301=(x3287*x3288);
IkReal x3302=((((-1.0)*x3287*x3291))+(((-1.0)*x3290*x3296*x3297))+((x3288*x3289))+((x3293*x3294))+(((-1.0)*cj6*x3288*x3292*x3296))+((x3291*x3301))+((x3296*x3298))+((r01*r21*x3287))+(((-1.0)*r01*x3292))+(((-1.0)*x3290*x3294*x3297))+(((-1.0)*r01*x3292*x3301))+(((-1.0)*x3293*x3294*x3300))+(((-1.0)*r02*sj5*x3293*x3297))+(((-1.0)*x3289))+(((-1.0)*x3291*x3300))+(((-1.0)*cj6*x3292*x3299)));
j4eval[0]=x3302;
j4eval[1]=((IKabs((((x3293*x3295))+((x3295*x3298))+((cj0*x3290)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x3292))))));
j4eval[2]=IKsign(x3302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3303=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x3303;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3304=((1.0)*sj5);
IkReal x3305=(((cj5*r22))+(((-1.0)*r20*sj6*x3304))+(((-1.0)*cj6*r21*x3304)));
j4eval[0]=x3305;
j4eval[1]=IKsign(x3305);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3306=cj6*cj6;
IkReal x3307=cj5*cj5;
IkReal x3308=r10*r10;
IkReal x3309=r11*r11;
IkReal x3310=r12*r12;
IkReal x3311=(r10*sj6);
IkReal x3312=(r12*sj5);
IkReal x3313=((2.0)*cj6*r11);
IkReal x3314=((1.0)*x3308);
IkReal x3315=(x3306*x3309);
IkReal x3316=(x3315+(((-2.0)*cj5*x3311*x3312))+((x3306*x3307*x3308))+(((-1.0)*x3306*x3314))+(((-1.0)*x3307*x3311*x3313))+(((-1.0)*cj5*x3312*x3313))+(((-1.0)*x3309))+(((-1.0)*x3310))+((x3307*x3310))+(((-1.0)*x3307*x3315))+(((-1.0)*x3307*x3314))+((x3311*x3313)));
j4eval[0]=x3316;
j4eval[1]=((IKabs((((cj5*x3311))+x3312+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3317=cj6*cj6;
IkReal x3318=cj5*cj5;
IkReal x3319=r10*r10;
IkReal x3320=r11*r11;
IkReal x3321=r12*r12;
IkReal x3322=(r10*sj6);
IkReal x3323=(r12*sj5);
IkReal x3324=((2.0)*cj6*r11);
IkReal x3325=(x3317*x3320);
IkReal x3326=(x3318*x3319);
CheckValue<IkReal> x3327=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3326))+(((-1.0)*x3320))+(((-1.0)*x3321))+(((-1.0)*cj5*x3323*x3324))+(((-1.0)*x3318*x3325))+x3325+(((-1.0)*x3317*x3319))+(((-1.0)*x3318*x3322*x3324))+((x3322*x3324))+((x3317*x3326))+(((-2.0)*cj5*x3322*x3323))+((x3318*x3321)))),-1);
if(!x3327.valid){
continue;
}
CheckValue<IkReal> x3328 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x3323+((cj5*cj6*r11))+((cj5*x3322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3327.value)))+(x3328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3329=IKsin(j4);
IkReal x3330=IKcos(j4);
IkReal x3331=(cj5*cj6);
IkReal x3332=(r11*sj6);
IkReal x3333=(cj6*r20);
IkReal x3334=(cj6*r10);
IkReal x3335=(cj5*sj6);
IkReal x3336=(r01*sj6);
IkReal x3337=(r21*sj6);
IkReal x3338=(cj6*r00);
IkReal x3339=((1.0)*x3330);
IkReal x3340=((1.0)*x3329);
IkReal x3341=(sj5*x3340);
evalcond[0]=(((x3330*x3333))+(((-1.0)*r21*x3331*x3340))+(((-1.0)*x3337*x3339))+(((-1.0)*r20*x3335*x3340))+(((-1.0)*r22*x3341)));
evalcond[1]=((((-1.0)*r11*x3331*x3340))+((x3330*x3334))+(((-1.0)*r10*x3335*x3340))+(((-1.0)*r12*x3341))+(((-1.0)*x3332*x3339)));
evalcond[2]=((((-1.0)*r21*x3331*x3339))+((x3329*x3337))+(((-1.0)*r22*sj5*x3339))+(((-1.0)*x3333*x3340))+(((-1.0)*r20*x3335*x3339)));
evalcond[3]=((((-1.0)*r02*sj5*x3339))+((x3329*x3336))+(((-1.0)*x3338*x3340))+(((-1.0)*r01*x3331*x3339))+(((-1.0)*r00*x3335*x3339)));
evalcond[4]=((-1.0)+((x3330*x3338))+(((-1.0)*r02*x3341))+(((-1.0)*r01*x3331*x3340))+(((-1.0)*x3336*x3339))+(((-1.0)*r00*x3335*x3340)));
evalcond[5]=((-1.0)+(((-1.0)*x3334*x3340))+((x3329*x3332))+(((-1.0)*r11*x3331*x3339))+(((-1.0)*r12*sj5*x3339))+(((-1.0)*r10*x3335*x3339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3342=((1.0)*sj5);
CheckValue<IkReal> x3343 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3343.valid){
continue;
}
CheckValue<IkReal> x3344=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x3342))+(((-1.0)*r20*sj6*x3342)))),-1);
if(!x3344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3343.value)+(((1.5707963267949)*(x3344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3345=IKsin(j4);
IkReal x3346=IKcos(j4);
IkReal x3347=(cj5*cj6);
IkReal x3348=(r11*sj6);
IkReal x3349=(cj6*r20);
IkReal x3350=(cj6*r10);
IkReal x3351=(cj5*sj6);
IkReal x3352=(r01*sj6);
IkReal x3353=(r21*sj6);
IkReal x3354=(cj6*r00);
IkReal x3355=((1.0)*x3346);
IkReal x3356=((1.0)*x3345);
IkReal x3357=(sj5*x3356);
evalcond[0]=(((x3346*x3349))+(((-1.0)*r20*x3351*x3356))+(((-1.0)*x3353*x3355))+(((-1.0)*r22*x3357))+(((-1.0)*r21*x3347*x3356)));
evalcond[1]=((((-1.0)*r11*x3347*x3356))+(((-1.0)*x3348*x3355))+(((-1.0)*r12*x3357))+(((-1.0)*r10*x3351*x3356))+((x3346*x3350)));
evalcond[2]=((((-1.0)*x3349*x3356))+(((-1.0)*r22*sj5*x3355))+(((-1.0)*r20*x3351*x3355))+((x3345*x3353))+(((-1.0)*r21*x3347*x3355)));
evalcond[3]=((((-1.0)*x3354*x3356))+((x3345*x3352))+(((-1.0)*r02*sj5*x3355))+(((-1.0)*r01*x3347*x3355))+(((-1.0)*r00*x3351*x3355)));
evalcond[4]=((-1.0)+(((-1.0)*x3352*x3355))+(((-1.0)*r02*x3357))+(((-1.0)*r01*x3347*x3356))+((x3346*x3354))+(((-1.0)*r00*x3351*x3356)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x3347*x3355))+(((-1.0)*r12*sj5*x3355))+(((-1.0)*x3350*x3356))+((x3345*x3348))+(((-1.0)*r10*x3351*x3355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3358 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3358.valid){
continue;
}
CheckValue<IkReal> x3359=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3358.value)+(((1.5707963267949)*(x3359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3360=IKsin(j4);
IkReal x3361=IKcos(j4);
IkReal x3362=(cj5*cj6);
IkReal x3363=(r11*sj6);
IkReal x3364=(cj6*r20);
IkReal x3365=(cj6*r10);
IkReal x3366=(cj5*sj6);
IkReal x3367=(r01*sj6);
IkReal x3368=(r21*sj6);
IkReal x3369=(cj6*r00);
IkReal x3370=((1.0)*x3361);
IkReal x3371=((1.0)*x3360);
IkReal x3372=(sj5*x3371);
evalcond[0]=((((-1.0)*r22*x3372))+(((-1.0)*r20*x3366*x3371))+((x3361*x3364))+(((-1.0)*r21*x3362*x3371))+(((-1.0)*x3368*x3370)));
evalcond[1]=((((-1.0)*x3363*x3370))+((x3361*x3365))+(((-1.0)*r10*x3366*x3371))+(((-1.0)*r11*x3362*x3371))+(((-1.0)*r12*x3372)));
evalcond[2]=((((-1.0)*r20*x3366*x3370))+((x3360*x3368))+(((-1.0)*r21*x3362*x3370))+(((-1.0)*x3364*x3371))+(((-1.0)*r22*sj5*x3370)));
evalcond[3]=((((-1.0)*r01*x3362*x3370))+((x3360*x3367))+(((-1.0)*r00*x3366*x3370))+(((-1.0)*r02*sj5*x3370))+(((-1.0)*x3369*x3371)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x3362*x3371))+(((-1.0)*x3367*x3370))+((x3361*x3369))+(((-1.0)*r02*x3372))+(((-1.0)*r00*x3366*x3371)));
evalcond[5]=((-1.0)+(((-1.0)*x3365*x3371))+(((-1.0)*r12*sj5*x3370))+((x3360*x3363))+(((-1.0)*r10*x3366*x3370))+(((-1.0)*r11*x3362*x3370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3373=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3373;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3373);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3374=((1.0)*sj6);
IkReal x3375=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3374)));
j4eval[0]=x3375;
j4eval[1]=IKsign(x3375);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3374))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3376=r11*r11;
IkReal x3377=cj5*cj5;
IkReal x3378=cj6*cj6;
IkReal x3379=r10*r10;
IkReal x3380=r12*r12;
IkReal x3381=(r12*sj5);
IkReal x3382=(cj6*r10);
IkReal x3383=((1.0)*x3378);
IkReal x3384=(cj5*cj6*r11);
IkReal x3385=(cj5*r10*sj6);
IkReal x3386=((2.0)*r11*sj6);
IkReal x3387=(x3377*x3379);
IkReal x3388=((((-1.0)*x3382*x3386))+x3376+x3387+x3380+(((-1.0)*x3383*x3387))+(((-1.0)*x3376*x3383))+((x3376*x3377*x3378))+((x3378*x3379))+((x3377*x3382*x3386))+(((-1.0)*x3377*x3380))+(((2.0)*x3381*x3384))+(((2.0)*x3381*x3385)));
j4eval[0]=x3388;
j4eval[1]=IKsign(x3388);
j4eval[2]=((IKabs((x3384+x3385+x3381)))+(IKabs((x3382+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3389=r11*r11;
IkReal x3390=cj5*cj5;
IkReal x3391=cj6*cj6;
IkReal x3392=r10*r10;
IkReal x3393=r12*r12;
IkReal x3394=(r10*sj6);
IkReal x3395=(r12*sj5);
IkReal x3396=((1.0)*x3391);
IkReal x3397=(cj5*cj6*r11);
IkReal x3398=((2.0)*cj6*r11);
IkReal x3399=(x3390*x3392);
CheckValue<IkReal> x3400=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3394*x3398))+(((-1.0)*x3396*x3399))+((x3391*x3392))+x3389+x3393+x3399+(((-1.0)*x3389*x3396))+(((-1.0)*x3390*x3393))+((x3389*x3390*x3391))+(((2.0)*cj5*x3394*x3395))+(((2.0)*x3395*x3397))+((x3390*x3394*x3398)))),-1);
if(!x3400.valid){
continue;
}
CheckValue<IkReal> x3401 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x3395+x3397+((cj5*x3394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3400.value)))+(x3401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3402=IKsin(j4);
IkReal x3403=IKcos(j4);
IkReal x3404=(cj5*cj6);
IkReal x3405=(r11*sj6);
IkReal x3406=(cj6*r20);
IkReal x3407=(cj6*r10);
IkReal x3408=(cj5*sj6);
IkReal x3409=(r01*sj6);
IkReal x3410=(r21*sj6);
IkReal x3411=(cj6*r00);
IkReal x3412=((1.0)*x3403);
IkReal x3413=((1.0)*x3402);
IkReal x3414=(sj5*x3413);
evalcond[0]=((((-1.0)*r22*x3414))+(((-1.0)*r21*x3404*x3413))+((x3403*x3406))+(((-1.0)*r20*x3408*x3413))+(((-1.0)*x3410*x3412)));
evalcond[1]=((((-1.0)*x3405*x3412))+(((-1.0)*r10*x3408*x3413))+((x3403*x3407))+(((-1.0)*r12*x3414))+(((-1.0)*r11*x3404*x3413)));
evalcond[2]=((((-1.0)*r22*sj5*x3412))+(((-1.0)*r21*x3404*x3412))+(((-1.0)*r20*x3408*x3412))+((x3402*x3410))+(((-1.0)*x3406*x3413)));
evalcond[3]=((((-1.0)*x3411*x3413))+(((-1.0)*r00*x3408*x3412))+(((-1.0)*r02*sj5*x3412))+((x3402*x3409))+(((-1.0)*r01*x3404*x3412)));
evalcond[4]=((1.0)+(((-1.0)*r00*x3408*x3413))+(((-1.0)*r02*x3414))+((x3403*x3411))+(((-1.0)*x3409*x3412))+(((-1.0)*r01*x3404*x3413)));
evalcond[5]=((1.0)+(((-1.0)*x3407*x3413))+(((-1.0)*r12*sj5*x3412))+(((-1.0)*r10*x3408*x3412))+(((-1.0)*r11*x3404*x3412))+((x3402*x3405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3415=((1.0)*sj6);
CheckValue<IkReal> x3416 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3415))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3416.valid){
continue;
}
CheckValue<IkReal> x3417=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3415)))),-1);
if(!x3417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3416.value)+(((1.5707963267949)*(x3417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3418=IKsin(j4);
IkReal x3419=IKcos(j4);
IkReal x3420=(cj5*cj6);
IkReal x3421=(r11*sj6);
IkReal x3422=(cj6*r20);
IkReal x3423=(cj6*r10);
IkReal x3424=(cj5*sj6);
IkReal x3425=(r01*sj6);
IkReal x3426=(r21*sj6);
IkReal x3427=(cj6*r00);
IkReal x3428=((1.0)*x3419);
IkReal x3429=((1.0)*x3418);
IkReal x3430=(sj5*x3429);
evalcond[0]=((((-1.0)*x3426*x3428))+(((-1.0)*r20*x3424*x3429))+(((-1.0)*r22*x3430))+(((-1.0)*r21*x3420*x3429))+((x3419*x3422)));
evalcond[1]=((((-1.0)*r10*x3424*x3429))+(((-1.0)*r12*x3430))+(((-1.0)*r11*x3420*x3429))+((x3419*x3423))+(((-1.0)*x3421*x3428)));
evalcond[2]=(((x3418*x3426))+(((-1.0)*r20*x3424*x3428))+(((-1.0)*r22*sj5*x3428))+(((-1.0)*x3422*x3429))+(((-1.0)*r21*x3420*x3428)));
evalcond[3]=((((-1.0)*x3427*x3429))+((x3418*x3425))+(((-1.0)*r00*x3424*x3428))+(((-1.0)*r01*x3420*x3428))+(((-1.0)*r02*sj5*x3428)));
evalcond[4]=((1.0)+(((-1.0)*r00*x3424*x3429))+(((-1.0)*x3425*x3428))+(((-1.0)*r01*x3420*x3429))+((x3419*x3427))+(((-1.0)*r02*x3430)));
evalcond[5]=((1.0)+(((-1.0)*r10*x3424*x3428))+((x3418*x3421))+(((-1.0)*r11*x3420*x3428))+(((-1.0)*x3423*x3429))+(((-1.0)*r12*sj5*x3428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3431=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3431.valid){
continue;
}
CheckValue<IkReal> x3432 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3431.value)))+(x3432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3433=IKsin(j4);
IkReal x3434=IKcos(j4);
IkReal x3435=(cj5*cj6);
IkReal x3436=(r11*sj6);
IkReal x3437=(cj6*r20);
IkReal x3438=(cj6*r10);
IkReal x3439=(cj5*sj6);
IkReal x3440=(r01*sj6);
IkReal x3441=(r21*sj6);
IkReal x3442=(cj6*r00);
IkReal x3443=((1.0)*x3434);
IkReal x3444=((1.0)*x3433);
IkReal x3445=(sj5*x3444);
evalcond[0]=(((x3434*x3437))+(((-1.0)*x3441*x3443))+(((-1.0)*r21*x3435*x3444))+(((-1.0)*r20*x3439*x3444))+(((-1.0)*r22*x3445)));
evalcond[1]=(((x3434*x3438))+(((-1.0)*r10*x3439*x3444))+(((-1.0)*r11*x3435*x3444))+(((-1.0)*x3436*x3443))+(((-1.0)*r12*x3445)));
evalcond[2]=((((-1.0)*r22*sj5*x3443))+(((-1.0)*r21*x3435*x3443))+(((-1.0)*x3437*x3444))+(((-1.0)*r20*x3439*x3443))+((x3433*x3441)));
evalcond[3]=((((-1.0)*r00*x3439*x3443))+(((-1.0)*x3442*x3444))+((x3433*x3440))+(((-1.0)*r01*x3435*x3443))+(((-1.0)*r02*sj5*x3443)));
evalcond[4]=((1.0)+(((-1.0)*r00*x3439*x3444))+((x3434*x3442))+(((-1.0)*r02*x3445))+(((-1.0)*r01*x3435*x3444))+(((-1.0)*x3440*x3443)));
evalcond[5]=((1.0)+(((-1.0)*x3438*x3444))+((x3433*x3436))+(((-1.0)*r10*x3439*x3443))+(((-1.0)*r11*x3435*x3443))+(((-1.0)*r12*sj5*x3443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3446=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3446;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3446);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3447=((1.0)*sj5);
IkReal x3448=(((cj5*r22))+(((-1.0)*cj6*r21*x3447))+(((-1.0)*r20*sj6*x3447)));
j4eval[0]=x3448;
j4eval[1]=IKsign(x3448);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3449=cj6*cj6;
IkReal x3450=cj5*cj5;
IkReal x3451=r00*r00;
IkReal x3452=r01*r01;
IkReal x3453=r02*r02;
IkReal x3454=(cj6*r00);
IkReal x3455=(cj5*cj6*r01);
IkReal x3456=((2.0)*r02*sj5);
IkReal x3457=((1.0)*x3449);
IkReal x3458=((2.0)*r01*sj6);
IkReal x3459=(cj5*r00*sj6);
IkReal x3460=(x3450*x3451);
IkReal x3461=((((-1.0)*x3451*x3457))+(((-1.0)*x3450*x3452*x3457))+(((-1.0)*x3450*x3454*x3458))+(((-1.0)*x3452))+(((-1.0)*x3453))+((x3449*x3460))+(((-1.0)*x3460))+(((-1.0)*x3455*x3456))+((x3454*x3458))+((x3449*x3452))+((x3450*x3453))+(((-1.0)*x3456*x3459)));
j4eval[0]=x3461;
j4eval[1]=((IKabs((x3455+x3459+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x3454))));
j4eval[2]=IKsign(x3461);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3462=cj6*cj6;
IkReal x3463=cj5*cj5;
IkReal x3464=r00*r00;
IkReal x3465=r01*r01;
IkReal x3466=r02*r02;
IkReal x3467=(cj6*r00);
IkReal x3468=(cj5*cj6*r01);
IkReal x3469=((2.0)*r02*sj5);
IkReal x3470=((1.0)*x3462);
IkReal x3471=((2.0)*r01*sj6);
IkReal x3472=(cj5*r00*sj6);
IkReal x3473=(x3463*x3464);
CheckValue<IkReal> x3474 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3467)),IkReal((x3472+x3468+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3474.valid){
continue;
}
CheckValue<IkReal> x3475=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3463*x3467*x3471))+((x3462*x3465))+((x3462*x3473))+((x3463*x3466))+(((-1.0)*x3463*x3465*x3470))+((x3467*x3471))+(((-1.0)*x3469*x3472))+(((-1.0)*x3473))+(((-1.0)*x3468*x3469))+(((-1.0)*x3466))+(((-1.0)*x3465))+(((-1.0)*x3464*x3470)))),-1);
if(!x3475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3474.value)+(((1.5707963267949)*(x3475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3476=IKsin(j4);
IkReal x3477=IKcos(j4);
IkReal x3478=(cj5*cj6);
IkReal x3479=(r11*sj6);
IkReal x3480=(cj6*r20);
IkReal x3481=(cj6*r10);
IkReal x3482=(cj5*sj6);
IkReal x3483=(r21*sj6);
IkReal x3484=(cj6*r00);
IkReal x3485=(r01*sj6);
IkReal x3486=((1.0)*x3477);
IkReal x3487=((1.0)*x3476);
IkReal x3488=(sj5*x3487);
evalcond[0]=((((-1.0)*x3483*x3486))+((x3477*x3480))+(((-1.0)*r22*x3488))+(((-1.0)*r21*x3478*x3487))+(((-1.0)*r20*x3482*x3487)));
evalcond[1]=((((-1.0)*r00*x3482*x3487))+(((-1.0)*x3485*x3486))+((x3477*x3484))+(((-1.0)*r02*x3488))+(((-1.0)*r01*x3478*x3487)));
evalcond[2]=((((-1.0)*r22*sj5*x3486))+((x3476*x3483))+(((-1.0)*r21*x3478*x3486))+(((-1.0)*r20*x3482*x3486))+(((-1.0)*x3480*x3487)));
evalcond[3]=(((x3476*x3479))+(((-1.0)*x3481*x3487))+(((-1.0)*r12*sj5*x3486))+(((-1.0)*r11*x3478*x3486))+(((-1.0)*r10*x3482*x3486)));
evalcond[4]=((1.0)+((x3477*x3481))+(((-1.0)*r12*x3488))+(((-1.0)*x3479*x3486))+(((-1.0)*r11*x3478*x3487))+(((-1.0)*r10*x3482*x3487)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x3482*x3486))+((x3476*x3485))+(((-1.0)*r02*sj5*x3486))+(((-1.0)*r01*x3478*x3486))+(((-1.0)*x3484*x3487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3489=((1.0)*sj5);
CheckValue<IkReal> x3490 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3490.valid){
continue;
}
CheckValue<IkReal> x3491=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x3489))+(((-1.0)*r20*sj6*x3489)))),-1);
if(!x3491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3490.value)+(((1.5707963267949)*(x3491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3492=IKsin(j4);
IkReal x3493=IKcos(j4);
IkReal x3494=(cj5*cj6);
IkReal x3495=(r11*sj6);
IkReal x3496=(cj6*r20);
IkReal x3497=(cj6*r10);
IkReal x3498=(cj5*sj6);
IkReal x3499=(r21*sj6);
IkReal x3500=(cj6*r00);
IkReal x3501=(r01*sj6);
IkReal x3502=((1.0)*x3493);
IkReal x3503=((1.0)*x3492);
IkReal x3504=(sj5*x3503);
evalcond[0]=((((-1.0)*r20*x3498*x3503))+(((-1.0)*r22*x3504))+(((-1.0)*x3499*x3502))+((x3493*x3496))+(((-1.0)*r21*x3494*x3503)));
evalcond[1]=((((-1.0)*r00*x3498*x3503))+(((-1.0)*x3501*x3502))+((x3493*x3500))+(((-1.0)*r01*x3494*x3503))+(((-1.0)*r02*x3504)));
evalcond[2]=((((-1.0)*r22*sj5*x3502))+(((-1.0)*r20*x3498*x3502))+(((-1.0)*x3496*x3503))+(((-1.0)*r21*x3494*x3502))+((x3492*x3499)));
evalcond[3]=((((-1.0)*r11*x3494*x3502))+(((-1.0)*r12*sj5*x3502))+(((-1.0)*r10*x3498*x3502))+((x3492*x3495))+(((-1.0)*x3497*x3503)));
evalcond[4]=((1.0)+(((-1.0)*r12*x3504))+(((-1.0)*x3495*x3502))+(((-1.0)*r11*x3494*x3503))+((x3493*x3497))+(((-1.0)*r10*x3498*x3503)));
evalcond[5]=((-1.0)+((x3492*x3501))+(((-1.0)*r02*sj5*x3502))+(((-1.0)*r00*x3498*x3502))+(((-1.0)*r01*x3494*x3502))+(((-1.0)*x3500*x3503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3505 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3505.valid){
continue;
}
CheckValue<IkReal> x3506=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3505.value)+(((1.5707963267949)*(x3506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3507=IKsin(j4);
IkReal x3508=IKcos(j4);
IkReal x3509=(cj5*cj6);
IkReal x3510=(r11*sj6);
IkReal x3511=(cj6*r20);
IkReal x3512=(cj6*r10);
IkReal x3513=(cj5*sj6);
IkReal x3514=(r21*sj6);
IkReal x3515=(cj6*r00);
IkReal x3516=(r01*sj6);
IkReal x3517=((1.0)*x3508);
IkReal x3518=((1.0)*x3507);
IkReal x3519=(sj5*x3518);
evalcond[0]=((((-1.0)*x3514*x3517))+(((-1.0)*r20*x3513*x3518))+((x3508*x3511))+(((-1.0)*r22*x3519))+(((-1.0)*r21*x3509*x3518)));
evalcond[1]=((((-1.0)*r02*x3519))+(((-1.0)*r01*x3509*x3518))+((x3508*x3515))+(((-1.0)*r00*x3513*x3518))+(((-1.0)*x3516*x3517)));
evalcond[2]=(((x3507*x3514))+(((-1.0)*r20*x3513*x3517))+(((-1.0)*x3511*x3518))+(((-1.0)*r22*sj5*x3517))+(((-1.0)*r21*x3509*x3517)));
evalcond[3]=((((-1.0)*r10*x3513*x3517))+(((-1.0)*x3512*x3518))+((x3507*x3510))+(((-1.0)*r11*x3509*x3517))+(((-1.0)*r12*sj5*x3517)));
evalcond[4]=((1.0)+(((-1.0)*r10*x3513*x3518))+(((-1.0)*r11*x3509*x3518))+(((-1.0)*x3510*x3517))+((x3508*x3512))+(((-1.0)*r12*x3519)));
evalcond[5]=((-1.0)+(((-1.0)*x3515*x3518))+((x3507*x3516))+(((-1.0)*r02*sj5*x3517))+(((-1.0)*r01*x3509*x3517))+(((-1.0)*r00*x3513*x3517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3520=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3520;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x3520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3521=((1.0)*sj6);
IkReal x3522=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x3521))+((cj5*r02)));
j4eval[0]=x3522;
j4eval[1]=IKsign(x3522);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x3521))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3523=cj6*cj6;
IkReal x3524=r01*r01;
IkReal x3525=cj5*cj5;
IkReal x3526=r00*r00;
IkReal x3527=r02*r02;
IkReal x3528=(cj6*r00);
IkReal x3529=(r02*sj5);
IkReal x3530=(cj5*cj6*r01);
IkReal x3531=((2.0)*r01*sj6);
IkReal x3532=(cj5*r00*sj6);
IkReal x3533=((1.0)*x3525);
IkReal x3534=(x3523*x3526);
IkReal x3535=(x3523*x3524);
IkReal x3536=(((x3525*x3526))+((x3525*x3528*x3531))+x3534+x3527+x3524+(((-1.0)*x3527*x3533))+(((-1.0)*x3528*x3531))+(((-1.0)*x3533*x3534))+(((-1.0)*x3535))+(((2.0)*x3529*x3530))+(((2.0)*x3529*x3532))+((x3525*x3535)));
j4eval[0]=x3536;
j4eval[1]=((IKabs((x3530+x3532+x3529)))+(IKabs(((((-1.0)*r01*sj6))+x3528))));
j4eval[2]=IKsign(x3536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3537=cj6*cj6;
IkReal x3538=r01*r01;
IkReal x3539=cj5*cj5;
IkReal x3540=r00*r00;
IkReal x3541=r02*r02;
IkReal x3542=(cj6*r00);
IkReal x3543=((2.0)*r01);
IkReal x3544=(cj5*cj6);
IkReal x3545=(r02*sj5);
IkReal x3546=(cj5*r00*sj6);
IkReal x3547=(x3539*x3540);
IkReal x3548=(x3537*x3538);
CheckValue<IkReal> x3549=IKPowWithIntegerCheck(IKsign((((x3539*x3548))+x3538+x3547+x3541+((x3543*x3544*x3545))+(((2.0)*x3545*x3546))+(((-1.0)*x3537*x3547))+(((-1.0)*x3548))+((sj6*x3539*x3542*x3543))+(((-1.0)*sj6*x3542*x3543))+((x3537*x3540))+(((-1.0)*x3539*x3541)))),-1);
if(!x3549.valid){
continue;
}
CheckValue<IkReal> x3550 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3542)),IkReal((((r01*x3544))+x3545+x3546)),IKFAST_ATAN2_MAGTHRESH);
if(!x3550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3549.value)))+(x3550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3551=IKsin(j4);
IkReal x3552=IKcos(j4);
IkReal x3553=(cj5*cj6);
IkReal x3554=(r11*sj6);
IkReal x3555=(cj6*r20);
IkReal x3556=(cj6*r10);
IkReal x3557=(cj5*sj6);
IkReal x3558=(r21*sj6);
IkReal x3559=(cj6*r00);
IkReal x3560=(r01*sj6);
IkReal x3561=((1.0)*x3552);
IkReal x3562=((1.0)*x3551);
IkReal x3563=(sj5*x3562);
evalcond[0]=((((-1.0)*r21*x3553*x3562))+(((-1.0)*r20*x3557*x3562))+(((-1.0)*r22*x3563))+((x3552*x3555))+(((-1.0)*x3558*x3561)));
evalcond[1]=((((-1.0)*r02*x3563))+(((-1.0)*x3560*x3561))+((x3552*x3559))+(((-1.0)*r01*x3553*x3562))+(((-1.0)*r00*x3557*x3562)));
evalcond[2]=((((-1.0)*r21*x3553*x3561))+(((-1.0)*r22*sj5*x3561))+(((-1.0)*x3555*x3562))+(((-1.0)*r20*x3557*x3561))+((x3551*x3558)));
evalcond[3]=((((-1.0)*r11*x3553*x3561))+(((-1.0)*r12*sj5*x3561))+((x3551*x3554))+(((-1.0)*r10*x3557*x3561))+(((-1.0)*x3556*x3562)));
evalcond[4]=((-1.0)+(((-1.0)*x3554*x3561))+(((-1.0)*r12*x3563))+(((-1.0)*r11*x3553*x3562))+((x3552*x3556))+(((-1.0)*r10*x3557*x3562)));
evalcond[5]=((1.0)+(((-1.0)*x3559*x3562))+((x3551*x3560))+(((-1.0)*r01*x3553*x3561))+(((-1.0)*r00*x3557*x3561))+(((-1.0)*r02*sj5*x3561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3564=((1.0)*sj6);
CheckValue<IkReal> x3565 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3564))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3565.valid){
continue;
}
CheckValue<IkReal> x3566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x3564))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x3566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3565.value)+(((1.5707963267949)*(x3566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3567=IKsin(j4);
IkReal x3568=IKcos(j4);
IkReal x3569=(cj5*cj6);
IkReal x3570=(r11*sj6);
IkReal x3571=(cj6*r20);
IkReal x3572=(cj6*r10);
IkReal x3573=(cj5*sj6);
IkReal x3574=(r21*sj6);
IkReal x3575=(cj6*r00);
IkReal x3576=(r01*sj6);
IkReal x3577=((1.0)*x3568);
IkReal x3578=((1.0)*x3567);
IkReal x3579=(sj5*x3578);
evalcond[0]=((((-1.0)*r21*x3569*x3578))+(((-1.0)*x3574*x3577))+((x3568*x3571))+(((-1.0)*r22*x3579))+(((-1.0)*r20*x3573*x3578)));
evalcond[1]=((((-1.0)*r01*x3569*x3578))+(((-1.0)*x3576*x3577))+((x3568*x3575))+(((-1.0)*r00*x3573*x3578))+(((-1.0)*r02*x3579)));
evalcond[2]=((((-1.0)*r22*sj5*x3577))+((x3567*x3574))+(((-1.0)*r21*x3569*x3577))+(((-1.0)*x3571*x3578))+(((-1.0)*r20*x3573*x3577)));
evalcond[3]=((((-1.0)*r10*x3573*x3577))+(((-1.0)*r12*sj5*x3577))+((x3567*x3570))+(((-1.0)*r11*x3569*x3577))+(((-1.0)*x3572*x3578)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x3573*x3578))+(((-1.0)*r11*x3569*x3578))+((x3568*x3572))+(((-1.0)*r12*x3579))+(((-1.0)*x3570*x3577)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x3577))+(((-1.0)*x3575*x3578))+((x3567*x3576))+(((-1.0)*r01*x3569*x3577))+(((-1.0)*r00*x3573*x3577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3580=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3580.valid){
continue;
}
CheckValue<IkReal> x3581 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3580.value)))+(x3581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3582=IKsin(j4);
IkReal x3583=IKcos(j4);
IkReal x3584=(cj5*cj6);
IkReal x3585=(r11*sj6);
IkReal x3586=(cj6*r20);
IkReal x3587=(cj6*r10);
IkReal x3588=(cj5*sj6);
IkReal x3589=(r21*sj6);
IkReal x3590=(cj6*r00);
IkReal x3591=(r01*sj6);
IkReal x3592=((1.0)*x3583);
IkReal x3593=((1.0)*x3582);
IkReal x3594=(sj5*x3593);
evalcond[0]=(((x3583*x3586))+(((-1.0)*x3589*x3592))+(((-1.0)*r22*x3594))+(((-1.0)*r21*x3584*x3593))+(((-1.0)*r20*x3588*x3593)));
evalcond[1]=((((-1.0)*r00*x3588*x3593))+((x3583*x3590))+(((-1.0)*r02*x3594))+(((-1.0)*x3591*x3592))+(((-1.0)*r01*x3584*x3593)));
evalcond[2]=((((-1.0)*r21*x3584*x3592))+(((-1.0)*r20*x3588*x3592))+(((-1.0)*x3586*x3593))+((x3582*x3589))+(((-1.0)*r22*sj5*x3592)));
evalcond[3]=((((-1.0)*x3587*x3593))+(((-1.0)*r10*x3588*x3592))+(((-1.0)*r11*x3584*x3592))+((x3582*x3585))+(((-1.0)*r12*sj5*x3592)));
evalcond[4]=((-1.0)+((x3583*x3587))+(((-1.0)*r10*x3588*x3593))+(((-1.0)*r11*x3584*x3593))+(((-1.0)*x3585*x3592))+(((-1.0)*r12*x3594)));
evalcond[5]=((1.0)+(((-1.0)*r00*x3588*x3592))+(((-1.0)*x3590*x3593))+(((-1.0)*r02*sj5*x3592))+((x3582*x3591))+(((-1.0)*r01*x3584*x3592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3595=cj6*cj6;
IkReal x3596=cj5*cj5;
IkReal x3597=(r22*sj5);
IkReal x3598=(cj0*r20);
IkReal x3599=((1.0)*r21);
IkReal x3600=(cj5*sj6);
IkReal x3601=(r02*r22);
IkReal x3602=(cj5*cj6);
IkReal x3603=(r02*sj5);
IkReal x3604=(cj6*sj6);
IkReal x3605=((1.0)*r20);
IkReal x3606=(r01*x3599);
IkReal x3607=(r00*r20*x3596);
CheckValue<IkReal> x3608=IKPowWithIntegerCheck(IKsign((((r00*r21*x3604))+(((-1.0)*r00*x3596*x3605))+(((-1.0)*x3595*x3596*x3606))+(((-1.0)*r01*x3596*x3604*x3605))+((r01*r21*x3595))+(((-1.0)*x3601))+((r01*r20*x3604))+(((-1.0)*r00*x3597*x3600))+((x3595*x3607))+(((-1.0)*x3599*x3602*x3603))+(((-1.0)*r00*x3596*x3599*x3604))+(((-1.0)*x3606))+((x3596*x3601))+(((-1.0)*r00*x3595*x3605))+(((-1.0)*r01*x3597*x3602))+(((-1.0)*x3600*x3603*x3605)))),-1);
if(!x3608.valid){
continue;
}
CheckValue<IkReal> x3609 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj6*x3599))+((cj6*x3598)))),IkReal((((cj0*r21*x3602))+((x3598*x3600))+((cj0*x3597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3608.value)))+(x3609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3610=IKsin(j4);
IkReal x3611=IKcos(j4);
IkReal x3612=((1.0)*sj0);
IkReal x3613=((1.0)*cj6);
IkReal x3614=((1.0)*sj6);
IkReal x3615=(cj5*x3611);
IkReal x3616=(r20*x3610);
IkReal x3617=(cj6*x3611);
IkReal x3618=(r11*x3610);
IkReal x3619=(r21*x3610);
IkReal x3620=(r01*x3610);
IkReal x3621=((1.0)*sj5*x3610);
IkReal x3622=((1.0)*sj5*x3611);
IkReal x3623=(cj5*x3610*x3614);
evalcond[0]=((((-1.0)*cj5*x3613*x3619))+(((-1.0)*r21*x3611*x3614))+(((-1.0)*cj5*x3614*x3616))+(((-1.0)*r22*x3621))+((r20*x3617)));
evalcond[1]=((((-1.0)*r21*x3613*x3615))+(((-1.0)*x3613*x3616))+(((-1.0)*r22*x3622))+(((-1.0)*r20*x3614*x3615))+((sj6*x3619)));
evalcond[2]=((((-1.0)*r11*x3611*x3614))+cj0+(((-1.0)*cj5*x3613*x3618))+((r10*x3617))+(((-1.0)*r12*x3621))+(((-1.0)*r10*x3623)));
evalcond[3]=((((-1.0)*cj5*x3613*x3620))+(((-1.0)*r01*x3611*x3614))+((r00*x3617))+(((-1.0)*x3612))+(((-1.0)*r00*x3623))+(((-1.0)*r02*x3621)));
evalcond[4]=((((-1.0)*r00*x3614*x3615))+(((-1.0)*r01*x3613*x3615))+((sj6*x3620))+(((-1.0)*cj0))+(((-1.0)*r02*x3622))+(((-1.0)*r00*x3610*x3613)));
evalcond[5]=((((-1.0)*r10*x3610*x3613))+(((-1.0)*r11*x3613*x3615))+(((-1.0)*r10*x3614*x3615))+(((-1.0)*r12*x3622))+(((-1.0)*x3612))+((sj6*x3618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3624=(cj5*sj0);
CheckValue<IkReal> x3625=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3625.valid){
continue;
}
CheckValue<IkReal> x3626 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((cj6*r21*x3624))+((r20*sj6*x3624))+((r22*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3625.value)))+(x3626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3627=IKsin(j4);
IkReal x3628=IKcos(j4);
IkReal x3629=((1.0)*sj0);
IkReal x3630=((1.0)*cj6);
IkReal x3631=((1.0)*sj6);
IkReal x3632=(cj5*x3628);
IkReal x3633=(r20*x3627);
IkReal x3634=(cj6*x3628);
IkReal x3635=(r11*x3627);
IkReal x3636=(r21*x3627);
IkReal x3637=(r01*x3627);
IkReal x3638=((1.0)*sj5*x3627);
IkReal x3639=((1.0)*sj5*x3628);
IkReal x3640=(cj5*x3627*x3631);
evalcond[0]=((((-1.0)*cj5*x3630*x3636))+(((-1.0)*r21*x3628*x3631))+(((-1.0)*cj5*x3631*x3633))+(((-1.0)*r22*x3638))+((r20*x3634)));
evalcond[1]=((((-1.0)*x3630*x3633))+(((-1.0)*r22*x3639))+(((-1.0)*r21*x3630*x3632))+(((-1.0)*r20*x3631*x3632))+((sj6*x3636)));
evalcond[2]=(cj0+(((-1.0)*cj5*x3630*x3635))+(((-1.0)*r12*x3638))+(((-1.0)*r10*x3640))+(((-1.0)*r11*x3628*x3631))+((r10*x3634)));
evalcond[3]=((((-1.0)*x3629))+(((-1.0)*r01*x3628*x3631))+(((-1.0)*cj5*x3630*x3637))+(((-1.0)*r02*x3638))+(((-1.0)*r00*x3640))+((r00*x3634)));
evalcond[4]=((((-1.0)*r00*x3627*x3630))+(((-1.0)*r00*x3631*x3632))+(((-1.0)*r01*x3630*x3632))+(((-1.0)*r02*x3639))+((sj6*x3637))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3629))+(((-1.0)*r12*x3639))+(((-1.0)*r10*x3631*x3632))+(((-1.0)*r10*x3627*x3630))+(((-1.0)*r11*x3630*x3632))+((sj6*x3635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3641=(cj0*sj6);
IkReal x3642=(cj0*cj6);
CheckValue<IkReal> x3643 = IKatan2WithCheck(IkReal((((r20*x3642))+(((-1.0)*r21*x3641)))),IkReal((((cj5*r21*x3642))+((cj0*r22*sj5))+((cj5*r20*x3641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3643.valid){
continue;
}
CheckValue<IkReal> x3644=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3643.value)+(((1.5707963267949)*(x3644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3645=IKsin(j4);
IkReal x3646=IKcos(j4);
IkReal x3647=((1.0)*sj0);
IkReal x3648=((1.0)*cj6);
IkReal x3649=((1.0)*sj6);
IkReal x3650=(cj5*x3646);
IkReal x3651=(r20*x3645);
IkReal x3652=(cj6*x3646);
IkReal x3653=(r11*x3645);
IkReal x3654=(r21*x3645);
IkReal x3655=(r01*x3645);
IkReal x3656=((1.0)*sj5*x3645);
IkReal x3657=((1.0)*sj5*x3646);
IkReal x3658=(cj5*x3645*x3649);
evalcond[0]=(((r20*x3652))+(((-1.0)*cj5*x3648*x3654))+(((-1.0)*r21*x3646*x3649))+(((-1.0)*r22*x3656))+(((-1.0)*cj5*x3649*x3651)));
evalcond[1]=((((-1.0)*r21*x3648*x3650))+(((-1.0)*r20*x3649*x3650))+((sj6*x3654))+(((-1.0)*x3648*x3651))+(((-1.0)*r22*x3657)));
evalcond[2]=(cj0+(((-1.0)*r10*x3658))+((r10*x3652))+(((-1.0)*cj5*x3648*x3653))+(((-1.0)*r12*x3656))+(((-1.0)*r11*x3646*x3649)));
evalcond[3]=(((r00*x3652))+(((-1.0)*cj5*x3648*x3655))+(((-1.0)*r01*x3646*x3649))+(((-1.0)*r00*x3658))+(((-1.0)*r02*x3656))+(((-1.0)*x3647)));
evalcond[4]=((((-1.0)*r00*x3649*x3650))+((sj6*x3655))+(((-1.0)*r02*x3657))+(((-1.0)*r00*x3645*x3648))+(((-1.0)*r01*x3648*x3650))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x3648*x3650))+((sj6*x3653))+(((-1.0)*r10*x3645*x3648))+(((-1.0)*r12*x3657))+(((-1.0)*r10*x3649*x3650))+(((-1.0)*x3647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3659=(r10*sj6);
IkReal x3660=((0.863573439158322)*sj5);
IkReal x3661=((0.0230723086152)*cj5);
IkReal x3662=(cj6*r11);
IkReal x3663=(r00*sj6);
IkReal x3664=((0.0230723086152)*sj5);
IkReal x3665=((0.863573439158322)*cj5);
IkReal x3666=(cj6*r01);
if( IKabs((((x3659*x3660))+(((2.30723086152)*py))+(((-1.0)*x3661*x3662))+(((-1.0)*x3659*x3661))+((x3660*x3662))+(((-1.0)*r12*x3665))+(((-1.0)*r12*x3664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+(((-1.0)*x3661*x3666))+(((-1.0)*x3661*x3663))+(((-1.0)*r02*x3664))+(((-1.0)*r02*x3665))+((x3660*x3666))+((x3660*x3663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3659*x3660))+(((2.30723086152)*py))+(((-1.0)*x3661*x3662))+(((-1.0)*x3659*x3661))+((x3660*x3662))+(((-1.0)*r12*x3665))+(((-1.0)*r12*x3664))))+IKsqr(((((2.30723086152)*px))+(((-1.0)*x3661*x3666))+(((-1.0)*x3661*x3663))+(((-1.0)*r02*x3664))+(((-1.0)*r02*x3665))+((x3660*x3666))+((x3660*x3663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x3659*x3660))+(((2.30723086152)*py))+(((-1.0)*x3661*x3662))+(((-1.0)*x3659*x3661))+((x3660*x3662))+(((-1.0)*r12*x3665))+(((-1.0)*r12*x3664))), ((((2.30723086152)*px))+(((-1.0)*x3661*x3666))+(((-1.0)*x3661*x3663))+(((-1.0)*r02*x3664))+(((-1.0)*r02*x3665))+((x3660*x3666))+((x3660*x3663))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3667=((0.01)*cj5);
IkReal x3668=(cj6*r01);
IkReal x3669=((0.37429)*sj5);
IkReal x3670=(cj6*r11);
IkReal x3671=((0.01)*sj5);
IkReal x3672=(r00*sj6);
IkReal x3673=((0.37429)*cj5);
IkReal x3674=(r10*sj6);
evalcond[0]=((((-1.0)*x3668*x3669))+((x3667*x3672))+((x3667*x3668))+(((-1.0)*px))+((r02*x3673))+((r02*x3671))+(((-1.0)*x3669*x3672))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=(((x3667*x3670))+((x3667*x3674))+(((0.43342)*(IKsin(j0))))+((r12*x3671))+((r12*x3673))+(((-1.0)*py))+(((-1.0)*x3669*x3674))+(((-1.0)*x3669*x3670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3675=(r20*sj0);
IkReal x3676=((1.0)*sj5);
IkReal x3677=(r21*sj0);
IkReal x3678=(((cj5*r12))+(((-1.0)*cj6*r11*x3676))+(((-1.0)*r10*sj6*x3676)));
j4eval[0]=x3678;
j4eval[1]=IKsign(x3678);
j4eval[2]=((IKabs((((cj5*sj6*x3675))+((r22*sj0*sj5))+((cj5*cj6*x3677)))))+(IKabs((((cj6*x3675))+(((-1.0)*sj6*x3677))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3679=(cj0*sj6);
IkReal x3680=((1.0)*sj5);
IkReal x3681=(cj0*cj6);
IkReal x3682=((((-1.0)*r00*sj6*x3680))+(((-1.0)*cj6*r01*x3680))+((cj5*r02)));
j4eval[0]=x3682;
j4eval[1]=IKsign(x3682);
j4eval[2]=((IKabs((((r20*x3681))+(((-1.0)*r21*x3679)))))+(IKabs((((cj0*r22*sj5))+((cj5*r21*x3681))+((cj5*r20*x3679))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3683=cj6*cj6;
IkReal x3684=cj5*cj5;
IkReal x3685=(r02*r22);
IkReal x3686=(r22*sj5);
IkReal x3687=(r00*r20);
IkReal x3688=((1.0)*r21);
IkReal x3689=(r20*sj6);
IkReal x3690=(cj6*r01);
IkReal x3691=(cj0*cj5);
IkReal x3692=(r00*sj6);
IkReal x3693=((1.0)*cj5);
IkReal x3694=(cj6*r21);
IkReal x3695=(cj5*r02*sj5);
IkReal x3696=((1.0)*x3684);
IkReal x3697=(x3683*x3684);
IkReal x3698=((((-1.0)*x3686*x3690*x3693))+((x3687*x3697))+((x3689*x3690))+(((-1.0)*x3689*x3690*x3696))+(((-1.0)*x3687*x3696))+(((-1.0)*r01*x3688*x3697))+((x3684*x3685))+((x3692*x3694))+(((-1.0)*r01*x3688))+(((-1.0)*r02*sj5*x3689*x3693))+(((-1.0)*x3683*x3687))+(((-1.0)*x3686*x3692*x3693))+(((-1.0)*x3685))+(((-1.0)*cj6*x3688*x3695))+(((-1.0)*cj6*x3684*x3688*x3692))+((r01*r21*x3683)));
j4eval[0]=x3698;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x3688)))))+(IKabs((((x3689*x3691))+((cj0*x3686))+((x3691*x3694))))));
j4eval[2]=IKsign(x3698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3699=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3699;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3700=((1.0)*sj6);
IkReal x3701=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3700)));
j4eval[0]=x3701;
j4eval[1]=IKsign(x3701);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3700))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3702=cj6*cj6;
IkReal x3703=cj5*cj5;
IkReal x3704=r10*r10;
IkReal x3705=r11*r11;
IkReal x3706=r12*r12;
IkReal x3707=(r10*sj6);
IkReal x3708=(r12*sj5);
IkReal x3709=((2.0)*cj6*r11);
IkReal x3710=((1.0)*x3704);
IkReal x3711=(x3702*x3705);
IkReal x3712=((((-2.0)*cj5*x3707*x3708))+(((-1.0)*x3703*x3710))+(((-1.0)*cj5*x3708*x3709))+(((-1.0)*x3703*x3707*x3709))+((x3707*x3709))+x3711+(((-1.0)*x3703*x3711))+((x3702*x3703*x3704))+(((-1.0)*x3702*x3710))+(((-1.0)*x3705))+(((-1.0)*x3706))+((x3703*x3706)));
j4eval[0]=x3712;
j4eval[1]=((IKabs((((cj5*x3707))+x3708+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3713=cj6*cj6;
IkReal x3714=cj5*cj5;
IkReal x3715=r10*r10;
IkReal x3716=r11*r11;
IkReal x3717=r12*r12;
IkReal x3718=(r10*sj6);
IkReal x3719=(r12*sj5);
IkReal x3720=((2.0)*cj6*r11);
IkReal x3721=(x3713*x3716);
IkReal x3722=(x3714*x3715);
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x3718))+x3719+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
CheckValue<IkReal> x3724=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x3719*x3720))+((x3718*x3720))+(((-1.0)*x3714*x3721))+(((-1.0)*x3713*x3715))+((x3714*x3717))+(((-1.0)*x3714*x3718*x3720))+x3721+((x3713*x3722))+(((-2.0)*cj5*x3718*x3719))+(((-1.0)*x3722))+(((-1.0)*x3716))+(((-1.0)*x3717)))),-1);
if(!x3724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3723.value)+(((1.5707963267949)*(x3724.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3725=IKsin(j4);
IkReal x3726=IKcos(j4);
IkReal x3727=(cj5*cj6);
IkReal x3728=(r11*sj6);
IkReal x3729=(cj6*r20);
IkReal x3730=(cj6*r10);
IkReal x3731=(cj5*sj6);
IkReal x3732=(r01*sj6);
IkReal x3733=(r21*sj6);
IkReal x3734=(cj6*r00);
IkReal x3735=((1.0)*x3726);
IkReal x3736=((1.0)*x3725);
IkReal x3737=(sj5*x3736);
evalcond[0]=(((x3726*x3729))+(((-1.0)*x3733*x3735))+(((-1.0)*r22*x3737))+(((-1.0)*r21*x3727*x3736))+(((-1.0)*r20*x3731*x3736)));
evalcond[1]=((((-1.0)*r12*x3737))+((x3726*x3730))+(((-1.0)*r11*x3727*x3736))+(((-1.0)*r10*x3731*x3736))+(((-1.0)*x3728*x3735)));
evalcond[2]=((((-1.0)*r22*sj5*x3735))+((x3725*x3733))+(((-1.0)*x3729*x3736))+(((-1.0)*r21*x3727*x3735))+(((-1.0)*r20*x3731*x3735)));
evalcond[3]=((((-1.0)*r02*sj5*x3735))+(((-1.0)*r00*x3731*x3735))+((x3725*x3732))+(((-1.0)*r01*x3727*x3735))+(((-1.0)*x3734*x3736)));
evalcond[4]=((1.0)+(((-1.0)*r00*x3731*x3736))+((x3726*x3734))+(((-1.0)*x3732*x3735))+(((-1.0)*r01*x3727*x3736))+(((-1.0)*r02*x3737)));
evalcond[5]=((-1.0)+((x3725*x3728))+(((-1.0)*x3730*x3736))+(((-1.0)*r12*sj5*x3735))+(((-1.0)*r11*x3727*x3735))+(((-1.0)*r10*x3731*x3735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3738=((1.0)*sj6);
CheckValue<IkReal> x3739 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3738))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3739.valid){
continue;
}
CheckValue<IkReal> x3740=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x3738))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x3740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3739.value)+(((1.5707963267949)*(x3740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3741=IKsin(j4);
IkReal x3742=IKcos(j4);
IkReal x3743=(cj5*cj6);
IkReal x3744=(r11*sj6);
IkReal x3745=(cj6*r20);
IkReal x3746=(cj6*r10);
IkReal x3747=(cj5*sj6);
IkReal x3748=(r01*sj6);
IkReal x3749=(r21*sj6);
IkReal x3750=(cj6*r00);
IkReal x3751=((1.0)*x3742);
IkReal x3752=((1.0)*x3741);
IkReal x3753=(sj5*x3752);
evalcond[0]=(((x3742*x3745))+(((-1.0)*r22*x3753))+(((-1.0)*x3749*x3751))+(((-1.0)*r21*x3743*x3752))+(((-1.0)*r20*x3747*x3752)));
evalcond[1]=((((-1.0)*r11*x3743*x3752))+((x3742*x3746))+(((-1.0)*r12*x3753))+(((-1.0)*x3744*x3751))+(((-1.0)*r10*x3747*x3752)));
evalcond[2]=((((-1.0)*r22*sj5*x3751))+(((-1.0)*x3745*x3752))+(((-1.0)*r21*x3743*x3751))+(((-1.0)*r20*x3747*x3751))+((x3741*x3749)));
evalcond[3]=((((-1.0)*r00*x3747*x3751))+(((-1.0)*x3750*x3752))+(((-1.0)*r02*sj5*x3751))+(((-1.0)*r01*x3743*x3751))+((x3741*x3748)));
evalcond[4]=((1.0)+(((-1.0)*x3748*x3751))+((x3742*x3750))+(((-1.0)*r00*x3747*x3752))+(((-1.0)*r01*x3743*x3752))+(((-1.0)*r02*x3753)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x3743*x3751))+(((-1.0)*x3746*x3752))+(((-1.0)*r12*sj5*x3751))+(((-1.0)*r10*x3747*x3751))+((x3741*x3744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3754=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3754.valid){
continue;
}
CheckValue<IkReal> x3755 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3754.value)))+(x3755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3756=IKsin(j4);
IkReal x3757=IKcos(j4);
IkReal x3758=(cj5*cj6);
IkReal x3759=(r11*sj6);
IkReal x3760=(cj6*r20);
IkReal x3761=(cj6*r10);
IkReal x3762=(cj5*sj6);
IkReal x3763=(r01*sj6);
IkReal x3764=(r21*sj6);
IkReal x3765=(cj6*r00);
IkReal x3766=((1.0)*x3757);
IkReal x3767=((1.0)*x3756);
IkReal x3768=(sj5*x3767);
evalcond[0]=((((-1.0)*r22*x3768))+(((-1.0)*x3764*x3766))+(((-1.0)*r20*x3762*x3767))+((x3757*x3760))+(((-1.0)*r21*x3758*x3767)));
evalcond[1]=((((-1.0)*r11*x3758*x3767))+(((-1.0)*x3759*x3766))+((x3757*x3761))+(((-1.0)*r12*x3768))+(((-1.0)*r10*x3762*x3767)));
evalcond[2]=(((x3756*x3764))+(((-1.0)*x3760*x3767))+(((-1.0)*r20*x3762*x3766))+(((-1.0)*r22*sj5*x3766))+(((-1.0)*r21*x3758*x3766)));
evalcond[3]=(((x3756*x3763))+(((-1.0)*x3765*x3767))+(((-1.0)*r01*x3758*x3766))+(((-1.0)*r02*sj5*x3766))+(((-1.0)*r00*x3762*x3766)));
evalcond[4]=((1.0)+(((-1.0)*x3763*x3766))+(((-1.0)*r01*x3758*x3767))+(((-1.0)*r02*x3768))+((x3757*x3765))+(((-1.0)*r00*x3762*x3767)));
evalcond[5]=((-1.0)+(((-1.0)*x3761*x3767))+(((-1.0)*r11*x3758*x3766))+(((-1.0)*r12*sj5*x3766))+((x3756*x3759))+(((-1.0)*r10*x3762*x3766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3769=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x3769;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3769);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3770=((1.0)*sj5);
IkReal x3771=(((cj5*r22))+(((-1.0)*r20*sj6*x3770))+(((-1.0)*cj6*r21*x3770)));
j4eval[0]=x3771;
j4eval[1]=IKsign(x3771);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3772=r11*r11;
IkReal x3773=cj5*cj5;
IkReal x3774=cj6*cj6;
IkReal x3775=r10*r10;
IkReal x3776=r12*r12;
IkReal x3777=(r12*sj5);
IkReal x3778=(cj6*r10);
IkReal x3779=((1.0)*x3774);
IkReal x3780=(cj5*cj6*r11);
IkReal x3781=(cj5*r10*sj6);
IkReal x3782=((2.0)*r11*sj6);
IkReal x3783=(x3773*x3775);
IkReal x3784=((((-1.0)*x3773*x3776))+((x3773*x3778*x3782))+(((-1.0)*x3778*x3782))+(((-1.0)*x3779*x3783))+(((2.0)*x3777*x3780))+(((2.0)*x3777*x3781))+x3783+x3772+x3776+((x3772*x3773*x3774))+(((-1.0)*x3772*x3779))+((x3774*x3775)));
j4eval[0]=x3784;
j4eval[1]=IKsign(x3784);
j4eval[2]=((IKabs((x3780+x3781+x3777)))+(IKabs((x3778+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3785=r11*r11;
IkReal x3786=cj5*cj5;
IkReal x3787=cj6*cj6;
IkReal x3788=r10*r10;
IkReal x3789=r12*r12;
IkReal x3790=(r10*sj6);
IkReal x3791=(r12*sj5);
IkReal x3792=((1.0)*x3787);
IkReal x3793=(cj5*cj6*r11);
IkReal x3794=((2.0)*cj6*r11);
IkReal x3795=(x3786*x3788);
CheckValue<IkReal> x3796 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x3791+x3793+((cj5*x3790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3796.valid){
continue;
}
CheckValue<IkReal> x3797=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*x3790*x3791))+((x3786*x3790*x3794))+(((2.0)*x3791*x3793))+((x3785*x3786*x3787))+((x3787*x3788))+x3785+x3789+x3795+(((-1.0)*x3790*x3794))+(((-1.0)*x3786*x3789))+(((-1.0)*x3785*x3792))+(((-1.0)*x3792*x3795)))),-1);
if(!x3797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3796.value)+(((1.5707963267949)*(x3797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3798=IKsin(j4);
IkReal x3799=IKcos(j4);
IkReal x3800=(cj5*cj6);
IkReal x3801=(r11*sj6);
IkReal x3802=(cj6*r20);
IkReal x3803=(cj6*r10);
IkReal x3804=(cj5*sj6);
IkReal x3805=(r01*sj6);
IkReal x3806=(r21*sj6);
IkReal x3807=(cj6*r00);
IkReal x3808=((1.0)*x3799);
IkReal x3809=((1.0)*x3798);
IkReal x3810=(sj5*x3809);
evalcond[0]=((((-1.0)*r22*x3810))+((x3799*x3802))+(((-1.0)*r20*x3804*x3809))+(((-1.0)*r21*x3800*x3809))+(((-1.0)*x3806*x3808)));
evalcond[1]=(((x3799*x3803))+(((-1.0)*r12*x3810))+(((-1.0)*x3801*x3808))+(((-1.0)*r11*x3800*x3809))+(((-1.0)*r10*x3804*x3809)));
evalcond[2]=((((-1.0)*r22*sj5*x3808))+((x3798*x3806))+(((-1.0)*x3802*x3809))+(((-1.0)*r20*x3804*x3808))+(((-1.0)*r21*x3800*x3808)));
evalcond[3]=((((-1.0)*r00*x3804*x3808))+((x3798*x3805))+(((-1.0)*r02*sj5*x3808))+(((-1.0)*x3807*x3809))+(((-1.0)*r01*x3800*x3808)));
evalcond[4]=((-1.0)+((x3799*x3807))+(((-1.0)*r00*x3804*x3809))+(((-1.0)*x3805*x3808))+(((-1.0)*r02*x3810))+(((-1.0)*r01*x3800*x3809)));
evalcond[5]=((1.0)+(((-1.0)*r11*x3800*x3808))+((x3798*x3801))+(((-1.0)*r12*sj5*x3808))+(((-1.0)*r10*x3804*x3808))+(((-1.0)*x3803*x3809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3811=((1.0)*sj5);
CheckValue<IkReal> x3812 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3812.valid){
continue;
}
CheckValue<IkReal> x3813=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x3811))+(((-1.0)*r20*sj6*x3811)))),-1);
if(!x3813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3812.value)+(((1.5707963267949)*(x3813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3814=IKsin(j4);
IkReal x3815=IKcos(j4);
IkReal x3816=(cj5*cj6);
IkReal x3817=(r11*sj6);
IkReal x3818=(cj6*r20);
IkReal x3819=(cj6*r10);
IkReal x3820=(cj5*sj6);
IkReal x3821=(r01*sj6);
IkReal x3822=(r21*sj6);
IkReal x3823=(cj6*r00);
IkReal x3824=((1.0)*x3815);
IkReal x3825=((1.0)*x3814);
IkReal x3826=(sj5*x3825);
evalcond[0]=((((-1.0)*r22*x3826))+(((-1.0)*r20*x3820*x3825))+(((-1.0)*r21*x3816*x3825))+(((-1.0)*x3822*x3824))+((x3815*x3818)));
evalcond[1]=((((-1.0)*r12*x3826))+(((-1.0)*x3817*x3824))+(((-1.0)*r11*x3816*x3825))+((x3815*x3819))+(((-1.0)*r10*x3820*x3825)));
evalcond[2]=((((-1.0)*r20*x3820*x3824))+(((-1.0)*r21*x3816*x3824))+((x3814*x3822))+(((-1.0)*r22*sj5*x3824))+(((-1.0)*x3818*x3825)));
evalcond[3]=((((-1.0)*r01*x3816*x3824))+(((-1.0)*x3823*x3825))+(((-1.0)*r00*x3820*x3824))+(((-1.0)*r02*sj5*x3824))+((x3814*x3821)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x3826))+(((-1.0)*x3821*x3824))+(((-1.0)*r01*x3816*x3825))+((x3815*x3823))+(((-1.0)*r00*x3820*x3825)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x3824))+(((-1.0)*r11*x3816*x3824))+((x3814*x3817))+(((-1.0)*r10*x3820*x3824))+(((-1.0)*x3819*x3825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3827 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3827.valid){
continue;
}
CheckValue<IkReal> x3828=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3827.value)+(((1.5707963267949)*(x3828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3829=IKsin(j4);
IkReal x3830=IKcos(j4);
IkReal x3831=(cj5*cj6);
IkReal x3832=(r11*sj6);
IkReal x3833=(cj6*r20);
IkReal x3834=(cj6*r10);
IkReal x3835=(cj5*sj6);
IkReal x3836=(r01*sj6);
IkReal x3837=(r21*sj6);
IkReal x3838=(cj6*r00);
IkReal x3839=((1.0)*x3830);
IkReal x3840=((1.0)*x3829);
IkReal x3841=(sj5*x3840);
evalcond[0]=((((-1.0)*r21*x3831*x3840))+(((-1.0)*r20*x3835*x3840))+(((-1.0)*r22*x3841))+(((-1.0)*x3837*x3839))+((x3830*x3833)));
evalcond[1]=((((-1.0)*x3832*x3839))+(((-1.0)*r11*x3831*x3840))+(((-1.0)*r12*x3841))+(((-1.0)*r10*x3835*x3840))+((x3830*x3834)));
evalcond[2]=((((-1.0)*r20*x3835*x3839))+((x3829*x3837))+(((-1.0)*r21*x3831*x3839))+(((-1.0)*r22*sj5*x3839))+(((-1.0)*x3833*x3840)));
evalcond[3]=((((-1.0)*r02*sj5*x3839))+(((-1.0)*r01*x3831*x3839))+((x3829*x3836))+(((-1.0)*x3838*x3840))+(((-1.0)*r00*x3835*x3839)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x3831*x3840))+(((-1.0)*r02*x3841))+(((-1.0)*r00*x3835*x3840))+(((-1.0)*x3836*x3839))+((x3830*x3838)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x3839))+((x3829*x3832))+(((-1.0)*x3834*x3840))+(((-1.0)*r10*x3835*x3839))+(((-1.0)*r11*x3831*x3839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3842=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3842;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x3842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3843=((1.0)*sj6);
IkReal x3844=((((-1.0)*r00*sj5*x3843))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x3844;
j4eval[1]=IKsign(x3844);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3843))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3845=cj6*cj6;
IkReal x3846=cj5*cj5;
IkReal x3847=r00*r00;
IkReal x3848=r01*r01;
IkReal x3849=r02*r02;
IkReal x3850=(cj6*r00);
IkReal x3851=(cj5*cj6*r01);
IkReal x3852=((2.0)*r02*sj5);
IkReal x3853=((1.0)*x3845);
IkReal x3854=((2.0)*r01*sj6);
IkReal x3855=(cj5*r00*sj6);
IkReal x3856=(x3846*x3847);
IkReal x3857=(((x3850*x3854))+((x3846*x3849))+(((-1.0)*x3856))+((x3845*x3848))+(((-1.0)*x3846*x3850*x3854))+(((-1.0)*x3848))+(((-1.0)*x3849))+((x3845*x3856))+(((-1.0)*x3852*x3855))+(((-1.0)*x3851*x3852))+(((-1.0)*x3847*x3853))+(((-1.0)*x3846*x3848*x3853)));
j4eval[0]=x3857;
j4eval[1]=((IKabs((((r02*sj5))+x3855+x3851)))+(IKabs(((((-1.0)*r01*sj6))+x3850))));
j4eval[2]=IKsign(x3857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3858=cj6*cj6;
IkReal x3859=cj5*cj5;
IkReal x3860=r00*r00;
IkReal x3861=r01*r01;
IkReal x3862=r02*r02;
IkReal x3863=(cj6*r00);
IkReal x3864=(cj5*cj6*r01);
IkReal x3865=((2.0)*r02*sj5);
IkReal x3866=((1.0)*x3858);
IkReal x3867=((2.0)*r01*sj6);
IkReal x3868=(cj5*r00*sj6);
IkReal x3869=(x3859*x3860);
CheckValue<IkReal> x3870 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3863)),IkReal((((r02*sj5))+x3868+x3864)),IKFAST_ATAN2_MAGTHRESH);
if(!x3870.valid){
continue;
}
CheckValue<IkReal> x3871=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3860*x3866))+(((-1.0)*x3865*x3868))+(((-1.0)*x3859*x3861*x3866))+(((-1.0)*x3864*x3865))+(((-1.0)*x3862))+(((-1.0)*x3861))+(((-1.0)*x3869))+((x3863*x3867))+((x3858*x3869))+((x3858*x3861))+((x3859*x3862))+(((-1.0)*x3859*x3863*x3867)))),-1);
if(!x3871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3870.value)+(((1.5707963267949)*(x3871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3872=IKsin(j4);
IkReal x3873=IKcos(j4);
IkReal x3874=(cj5*cj6);
IkReal x3875=(r11*sj6);
IkReal x3876=(cj6*r20);
IkReal x3877=(cj6*r10);
IkReal x3878=(cj5*sj6);
IkReal x3879=(r21*sj6);
IkReal x3880=(cj6*r00);
IkReal x3881=(r01*sj6);
IkReal x3882=((1.0)*x3873);
IkReal x3883=((1.0)*x3872);
IkReal x3884=(sj5*x3883);
evalcond[0]=((((-1.0)*r20*x3878*x3883))+(((-1.0)*x3879*x3882))+(((-1.0)*r22*x3884))+((x3873*x3876))+(((-1.0)*r21*x3874*x3883)));
evalcond[1]=(((x3873*x3880))+(((-1.0)*r02*x3884))+(((-1.0)*r00*x3878*x3883))+(((-1.0)*r01*x3874*x3883))+(((-1.0)*x3881*x3882)));
evalcond[2]=((((-1.0)*r20*x3878*x3882))+(((-1.0)*r22*sj5*x3882))+((x3872*x3879))+(((-1.0)*r21*x3874*x3882))+(((-1.0)*x3876*x3883)));
evalcond[3]=((((-1.0)*r12*sj5*x3882))+((x3872*x3875))+(((-1.0)*x3877*x3883))+(((-1.0)*r11*x3874*x3882))+(((-1.0)*r10*x3878*x3882)));
evalcond[4]=((-1.0)+((x3873*x3877))+(((-1.0)*r11*x3874*x3883))+(((-1.0)*r10*x3878*x3883))+(((-1.0)*r12*x3884))+(((-1.0)*x3875*x3882)));
evalcond[5]=((-1.0)+((x3872*x3881))+(((-1.0)*x3880*x3883))+(((-1.0)*r00*x3878*x3882))+(((-1.0)*r01*x3874*x3882))+(((-1.0)*r02*sj5*x3882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3885=((1.0)*sj6);
CheckValue<IkReal> x3886 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3885))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3886.valid){
continue;
}
CheckValue<IkReal> x3887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x3885))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x3887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3886.value)+(((1.5707963267949)*(x3887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3888=IKsin(j4);
IkReal x3889=IKcos(j4);
IkReal x3890=(cj5*cj6);
IkReal x3891=(r11*sj6);
IkReal x3892=(cj6*r20);
IkReal x3893=(cj6*r10);
IkReal x3894=(cj5*sj6);
IkReal x3895=(r21*sj6);
IkReal x3896=(cj6*r00);
IkReal x3897=(r01*sj6);
IkReal x3898=((1.0)*x3889);
IkReal x3899=((1.0)*x3888);
IkReal x3900=(sj5*x3899);
evalcond[0]=((((-1.0)*x3895*x3898))+(((-1.0)*r22*x3900))+((x3889*x3892))+(((-1.0)*r20*x3894*x3899))+(((-1.0)*r21*x3890*x3899)));
evalcond[1]=(((x3889*x3896))+(((-1.0)*r01*x3890*x3899))+(((-1.0)*x3897*x3898))+(((-1.0)*r02*x3900))+(((-1.0)*r00*x3894*x3899)));
evalcond[2]=(((x3888*x3895))+(((-1.0)*x3892*x3899))+(((-1.0)*r22*sj5*x3898))+(((-1.0)*r20*x3894*x3898))+(((-1.0)*r21*x3890*x3898)));
evalcond[3]=((((-1.0)*r12*sj5*x3898))+((x3888*x3891))+(((-1.0)*r11*x3890*x3898))+(((-1.0)*x3893*x3899))+(((-1.0)*r10*x3894*x3898)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x3900))+((x3889*x3893))+(((-1.0)*r11*x3890*x3899))+(((-1.0)*x3891*x3898))+(((-1.0)*r10*x3894*x3899)));
evalcond[5]=((-1.0)+((x3888*x3897))+(((-1.0)*r01*x3890*x3898))+(((-1.0)*x3896*x3899))+(((-1.0)*r02*sj5*x3898))+(((-1.0)*r00*x3894*x3898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3901=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3901.valid){
continue;
}
CheckValue<IkReal> x3902 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3901.value)))+(x3902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3903=IKsin(j4);
IkReal x3904=IKcos(j4);
IkReal x3905=(cj5*cj6);
IkReal x3906=(r11*sj6);
IkReal x3907=(cj6*r20);
IkReal x3908=(cj6*r10);
IkReal x3909=(cj5*sj6);
IkReal x3910=(r21*sj6);
IkReal x3911=(cj6*r00);
IkReal x3912=(r01*sj6);
IkReal x3913=((1.0)*x3904);
IkReal x3914=((1.0)*x3903);
IkReal x3915=(sj5*x3914);
evalcond[0]=((((-1.0)*r22*x3915))+((x3904*x3907))+(((-1.0)*x3910*x3913))+(((-1.0)*r21*x3905*x3914))+(((-1.0)*r20*x3909*x3914)));
evalcond[1]=((((-1.0)*x3912*x3913))+(((-1.0)*r02*x3915))+((x3904*x3911))+(((-1.0)*r00*x3909*x3914))+(((-1.0)*r01*x3905*x3914)));
evalcond[2]=(((x3903*x3910))+(((-1.0)*x3907*x3914))+(((-1.0)*r22*sj5*x3913))+(((-1.0)*r21*x3905*x3913))+(((-1.0)*r20*x3909*x3913)));
evalcond[3]=(((x3903*x3906))+(((-1.0)*x3908*x3914))+(((-1.0)*r12*sj5*x3913))+(((-1.0)*r10*x3909*x3913))+(((-1.0)*r11*x3905*x3913)));
evalcond[4]=((-1.0)+(((-1.0)*x3906*x3913))+((x3904*x3908))+(((-1.0)*r10*x3909*x3914))+(((-1.0)*r12*x3915))+(((-1.0)*r11*x3905*x3914)));
evalcond[5]=((-1.0)+(((-1.0)*x3911*x3914))+((x3903*x3912))+(((-1.0)*r02*sj5*x3913))+(((-1.0)*r00*x3909*x3913))+(((-1.0)*r01*x3905*x3913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3916=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3916;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3917=((1.0)*sj5);
IkReal x3918=(((cj5*r22))+(((-1.0)*r20*sj6*x3917))+(((-1.0)*cj6*r21*x3917)));
j4eval[0]=x3918;
j4eval[1]=IKsign(x3918);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3919=cj6*cj6;
IkReal x3920=r01*r01;
IkReal x3921=cj5*cj5;
IkReal x3922=r00*r00;
IkReal x3923=r02*r02;
IkReal x3924=(cj6*r00);
IkReal x3925=(r02*sj5);
IkReal x3926=(cj5*cj6*r01);
IkReal x3927=((2.0)*r01*sj6);
IkReal x3928=(cj5*r00*sj6);
IkReal x3929=((1.0)*x3921);
IkReal x3930=(x3919*x3922);
IkReal x3931=(x3919*x3920);
IkReal x3932=(((x3921*x3922))+(((-1.0)*x3929*x3930))+((x3921*x3924*x3927))+(((2.0)*x3925*x3926))+(((2.0)*x3925*x3928))+(((-1.0)*x3931))+(((-1.0)*x3924*x3927))+((x3921*x3931))+x3923+x3920+x3930+(((-1.0)*x3923*x3929)));
j4eval[0]=x3932;
j4eval[1]=((IKabs((x3926+x3925+x3928)))+(IKabs(((((-1.0)*r01*sj6))+x3924))));
j4eval[2]=IKsign(x3932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3933=cj6*cj6;
IkReal x3934=r01*r01;
IkReal x3935=cj5*cj5;
IkReal x3936=r00*r00;
IkReal x3937=r02*r02;
IkReal x3938=(cj6*r00);
IkReal x3939=((2.0)*r01);
IkReal x3940=(cj5*cj6);
IkReal x3941=(r02*sj5);
IkReal x3942=(cj5*r00*sj6);
IkReal x3943=(x3935*x3936);
IkReal x3944=(x3933*x3934);
CheckValue<IkReal> x3945=IKPowWithIntegerCheck(IKsign((((sj6*x3935*x3938*x3939))+(((-1.0)*x3944))+(((-1.0)*x3935*x3937))+(((2.0)*x3941*x3942))+((x3933*x3936))+x3934+x3937+x3943+(((-1.0)*x3933*x3943))+((x3935*x3944))+((x3939*x3940*x3941))+(((-1.0)*sj6*x3938*x3939)))),-1);
if(!x3945.valid){
continue;
}
CheckValue<IkReal> x3946 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3938)),IkReal((((r01*x3940))+x3941+x3942)),IKFAST_ATAN2_MAGTHRESH);
if(!x3946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3945.value)))+(x3946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3947=IKsin(j4);
IkReal x3948=IKcos(j4);
IkReal x3949=(cj5*cj6);
IkReal x3950=(r11*sj6);
IkReal x3951=(cj6*r20);
IkReal x3952=(cj6*r10);
IkReal x3953=(cj5*sj6);
IkReal x3954=(r21*sj6);
IkReal x3955=(cj6*r00);
IkReal x3956=(r01*sj6);
IkReal x3957=((1.0)*x3948);
IkReal x3958=((1.0)*x3947);
IkReal x3959=(sj5*x3958);
evalcond[0]=((((-1.0)*x3954*x3957))+(((-1.0)*r22*x3959))+((x3948*x3951))+(((-1.0)*r21*x3949*x3958))+(((-1.0)*r20*x3953*x3958)));
evalcond[1]=((((-1.0)*x3956*x3957))+(((-1.0)*r01*x3949*x3958))+(((-1.0)*r00*x3953*x3958))+((x3948*x3955))+(((-1.0)*r02*x3959)));
evalcond[2]=((((-1.0)*r22*sj5*x3957))+(((-1.0)*r21*x3949*x3957))+(((-1.0)*r20*x3953*x3957))+(((-1.0)*x3951*x3958))+((x3947*x3954)));
evalcond[3]=((((-1.0)*r12*sj5*x3957))+(((-1.0)*x3952*x3958))+(((-1.0)*r10*x3953*x3957))+((x3947*x3950))+(((-1.0)*r11*x3949*x3957)));
evalcond[4]=((1.0)+((x3948*x3952))+(((-1.0)*r12*x3959))+(((-1.0)*x3950*x3957))+(((-1.0)*r10*x3953*x3958))+(((-1.0)*r11*x3949*x3958)));
evalcond[5]=((1.0)+(((-1.0)*x3955*x3958))+(((-1.0)*r01*x3949*x3957))+(((-1.0)*r00*x3953*x3957))+((x3947*x3956))+(((-1.0)*r02*sj5*x3957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3960=((1.0)*sj5);
CheckValue<IkReal> x3961 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3961.valid){
continue;
}
CheckValue<IkReal> x3962=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x3960))+(((-1.0)*cj6*r21*x3960)))),-1);
if(!x3962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3961.value)+(((1.5707963267949)*(x3962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3963=IKsin(j4);
IkReal x3964=IKcos(j4);
IkReal x3965=(cj5*cj6);
IkReal x3966=(r11*sj6);
IkReal x3967=(cj6*r20);
IkReal x3968=(cj6*r10);
IkReal x3969=(cj5*sj6);
IkReal x3970=(r21*sj6);
IkReal x3971=(cj6*r00);
IkReal x3972=(r01*sj6);
IkReal x3973=((1.0)*x3964);
IkReal x3974=((1.0)*x3963);
IkReal x3975=(sj5*x3974);
evalcond[0]=((((-1.0)*x3970*x3973))+((x3964*x3967))+(((-1.0)*r22*x3975))+(((-1.0)*r21*x3965*x3974))+(((-1.0)*r20*x3969*x3974)));
evalcond[1]=((((-1.0)*x3972*x3973))+(((-1.0)*r02*x3975))+((x3964*x3971))+(((-1.0)*r01*x3965*x3974))+(((-1.0)*r00*x3969*x3974)));
evalcond[2]=((((-1.0)*r22*sj5*x3973))+(((-1.0)*r21*x3965*x3973))+(((-1.0)*x3967*x3974))+(((-1.0)*r20*x3969*x3973))+((x3963*x3970)));
evalcond[3]=((((-1.0)*x3968*x3974))+(((-1.0)*r12*sj5*x3973))+((x3963*x3966))+(((-1.0)*r10*x3969*x3973))+(((-1.0)*r11*x3965*x3973)));
evalcond[4]=((1.0)+(((-1.0)*r12*x3975))+((x3964*x3968))+(((-1.0)*r10*x3969*x3974))+(((-1.0)*x3966*x3973))+(((-1.0)*r11*x3965*x3974)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x3973))+(((-1.0)*x3971*x3974))+((x3963*x3972))+(((-1.0)*r01*x3965*x3973))+(((-1.0)*r00*x3969*x3973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3976 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3976.valid){
continue;
}
CheckValue<IkReal> x3977=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3976.value)+(((1.5707963267949)*(x3977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3978=IKsin(j4);
IkReal x3979=IKcos(j4);
IkReal x3980=(cj5*cj6);
IkReal x3981=(r11*sj6);
IkReal x3982=(cj6*r20);
IkReal x3983=(cj6*r10);
IkReal x3984=(cj5*sj6);
IkReal x3985=(r21*sj6);
IkReal x3986=(cj6*r00);
IkReal x3987=(r01*sj6);
IkReal x3988=((1.0)*x3979);
IkReal x3989=((1.0)*x3978);
IkReal x3990=(sj5*x3989);
evalcond[0]=((((-1.0)*x3985*x3988))+(((-1.0)*r21*x3980*x3989))+((x3979*x3982))+(((-1.0)*r20*x3984*x3989))+(((-1.0)*r22*x3990)));
evalcond[1]=((((-1.0)*r00*x3984*x3989))+(((-1.0)*r02*x3990))+(((-1.0)*x3987*x3988))+((x3979*x3986))+(((-1.0)*r01*x3980*x3989)));
evalcond[2]=((((-1.0)*x3982*x3989))+(((-1.0)*r21*x3980*x3988))+((x3978*x3985))+(((-1.0)*r20*x3984*x3988))+(((-1.0)*r22*sj5*x3988)));
evalcond[3]=((((-1.0)*r11*x3980*x3988))+(((-1.0)*r12*sj5*x3988))+(((-1.0)*r10*x3984*x3988))+(((-1.0)*x3983*x3989))+((x3978*x3981)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3980*x3989))+(((-1.0)*x3981*x3988))+(((-1.0)*r12*x3990))+(((-1.0)*r10*x3984*x3989))+((x3979*x3983)));
evalcond[5]=((1.0)+(((-1.0)*r00*x3984*x3988))+(((-1.0)*x3986*x3989))+((x3978*x3987))+(((-1.0)*r02*sj5*x3988))+(((-1.0)*r01*x3980*x3988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3991=cj6*cj6;
IkReal x3992=cj5*cj5;
IkReal x3993=(r22*sj5);
IkReal x3994=(cj0*r20);
IkReal x3995=((1.0)*r21);
IkReal x3996=(cj5*sj6);
IkReal x3997=(r02*r22);
IkReal x3998=(cj5*cj6);
IkReal x3999=(r02*sj5);
IkReal x4000=(cj6*sj6);
IkReal x4001=((1.0)*r20);
IkReal x4002=(r01*x3995);
IkReal x4003=(r00*r20*x3992);
CheckValue<IkReal> x4004 = IKatan2WithCheck(IkReal((((cj6*x3994))+(((-1.0)*cj0*sj6*x3995)))),IkReal((((x3994*x3996))+((cj0*r21*x3998))+((cj0*x3993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4004.valid){
continue;
}
CheckValue<IkReal> x4005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3991*x4001))+((r01*r20*x4000))+(((-1.0)*r00*x3993*x3996))+(((-1.0)*r00*x3992*x4001))+(((-1.0)*x4002))+(((-1.0)*r00*x3992*x3995*x4000))+(((-1.0)*r01*x3992*x4000*x4001))+((r00*r21*x4000))+(((-1.0)*r01*x3993*x3998))+((x3991*x4003))+(((-1.0)*x3997))+(((-1.0)*x3996*x3999*x4001))+((r01*r21*x3991))+((x3992*x3997))+(((-1.0)*x3995*x3998*x3999))+(((-1.0)*x3991*x3992*x4002)))),-1);
if(!x4005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4004.value)+(((1.5707963267949)*(x4005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4006=IKsin(j4);
IkReal x4007=IKcos(j4);
IkReal x4008=((1.0)*cj0);
IkReal x4009=(cj6*r20);
IkReal x4010=(cj5*sj6);
IkReal x4011=((1.0)*sj6);
IkReal x4012=(r21*sj6);
IkReal x4013=(cj6*r00);
IkReal x4014=((1.0)*cj5*cj6);
IkReal x4015=(r01*x4007);
IkReal x4016=(r11*x4006);
IkReal x4017=((1.0)*x4006);
IkReal x4018=(r11*x4007);
IkReal x4019=(r10*x4007);
IkReal x4020=((1.0)*x4007);
IkReal x4021=(r01*x4006);
IkReal x4022=(sj5*x4017);
evalcond[0]=((((-1.0)*r22*x4022))+(((-1.0)*r20*x4010*x4017))+((x4007*x4009))+(((-1.0)*r21*x4007*x4011))+(((-1.0)*r21*x4006*x4014)));
evalcond[1]=((((-1.0)*x4009*x4017))+(((-1.0)*r22*sj5*x4020))+(((-1.0)*r20*x4010*x4020))+((x4006*x4012))+(((-1.0)*r21*x4007*x4014)));
evalcond[2]=(sj0+(((-1.0)*x4011*x4015))+(((-1.0)*r02*x4022))+(((-1.0)*r00*x4010*x4017))+(((-1.0)*x4014*x4021))+((x4007*x4013)));
evalcond[3]=((((-1.0)*r12*x4022))+(((-1.0)*x4008))+(((-1.0)*x4011*x4018))+((cj6*x4019))+(((-1.0)*x4014*x4016))+(((-1.0)*r10*x4010*x4017)));
evalcond[4]=((((-1.0)*r02*sj5*x4020))+(((-1.0)*x4008))+(((-1.0)*x4013*x4017))+(((-1.0)*r00*x4010*x4020))+(((-1.0)*x4014*x4015))+((sj6*x4021)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*sj5*x4020))+(((-1.0)*cj6*r10*x4017))+(((-1.0)*x4014*x4018))+(((-1.0)*x4010*x4019))+((sj6*x4016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4023=(cj0*sj6);
IkReal x4024=((1.0)*sj5);
IkReal x4025=(cj0*cj6);
CheckValue<IkReal> x4026=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x4024))+(((-1.0)*r00*sj6*x4024))+((cj5*r02)))),-1);
if(!x4026.valid){
continue;
}
CheckValue<IkReal> x4027 = IKatan2WithCheck(IkReal((((r20*x4025))+(((-1.0)*r21*x4023)))),IkReal((((cj5*r20*x4023))+((cj0*r22*sj5))+((cj5*r21*x4025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4026.value)))+(x4027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4028=IKsin(j4);
IkReal x4029=IKcos(j4);
IkReal x4030=((1.0)*cj0);
IkReal x4031=(cj6*r20);
IkReal x4032=(cj5*sj6);
IkReal x4033=((1.0)*sj6);
IkReal x4034=(r21*sj6);
IkReal x4035=(cj6*r00);
IkReal x4036=((1.0)*cj5*cj6);
IkReal x4037=(r01*x4029);
IkReal x4038=(r11*x4028);
IkReal x4039=((1.0)*x4028);
IkReal x4040=(r11*x4029);
IkReal x4041=(r10*x4029);
IkReal x4042=((1.0)*x4029);
IkReal x4043=(r01*x4028);
IkReal x4044=(sj5*x4039);
evalcond[0]=((((-1.0)*r20*x4032*x4039))+((x4029*x4031))+(((-1.0)*r21*x4029*x4033))+(((-1.0)*r21*x4028*x4036))+(((-1.0)*r22*x4044)));
evalcond[1]=((((-1.0)*x4031*x4039))+((x4028*x4034))+(((-1.0)*r20*x4032*x4042))+(((-1.0)*r21*x4029*x4036))+(((-1.0)*r22*sj5*x4042)));
evalcond[2]=(sj0+(((-1.0)*x4036*x4043))+((x4029*x4035))+(((-1.0)*r00*x4032*x4039))+(((-1.0)*r02*x4044))+(((-1.0)*x4033*x4037)));
evalcond[3]=(((cj6*x4041))+(((-1.0)*r12*x4044))+(((-1.0)*x4033*x4040))+(((-1.0)*x4036*x4038))+(((-1.0)*x4030))+(((-1.0)*r10*x4032*x4039)));
evalcond[4]=((((-1.0)*r00*x4032*x4042))+((sj6*x4043))+(((-1.0)*x4035*x4039))+(((-1.0)*x4036*x4037))+(((-1.0)*x4030))+(((-1.0)*r02*sj5*x4042)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4036*x4040))+(((-1.0)*r12*sj5*x4042))+((sj6*x4038))+(((-1.0)*x4032*x4041))+(((-1.0)*cj6*r10*x4039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4045=(cj5*sj0);
IkReal x4046=((1.0)*sj5);
CheckValue<IkReal> x4047 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r20*sj6*x4045))+((r22*sj0*sj5))+((cj6*r21*x4045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4047.valid){
continue;
}
CheckValue<IkReal> x4048=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x4046))+(((-1.0)*cj6*r11*x4046)))),-1);
if(!x4048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4047.value)+(((1.5707963267949)*(x4048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4049=IKsin(j4);
IkReal x4050=IKcos(j4);
IkReal x4051=((1.0)*cj0);
IkReal x4052=(cj6*r20);
IkReal x4053=(cj5*sj6);
IkReal x4054=((1.0)*sj6);
IkReal x4055=(r21*sj6);
IkReal x4056=(cj6*r00);
IkReal x4057=((1.0)*cj5*cj6);
IkReal x4058=(r01*x4050);
IkReal x4059=(r11*x4049);
IkReal x4060=((1.0)*x4049);
IkReal x4061=(r11*x4050);
IkReal x4062=(r10*x4050);
IkReal x4063=((1.0)*x4050);
IkReal x4064=(r01*x4049);
IkReal x4065=(sj5*x4060);
evalcond[0]=((((-1.0)*r21*x4049*x4057))+(((-1.0)*r20*x4053*x4060))+((x4050*x4052))+(((-1.0)*r22*x4065))+(((-1.0)*r21*x4050*x4054)));
evalcond[1]=(((x4049*x4055))+(((-1.0)*x4052*x4060))+(((-1.0)*r20*x4053*x4063))+(((-1.0)*r22*sj5*x4063))+(((-1.0)*r21*x4050*x4057)));
evalcond[2]=(sj0+(((-1.0)*r00*x4053*x4060))+(((-1.0)*x4054*x4058))+(((-1.0)*x4057*x4064))+((x4050*x4056))+(((-1.0)*r02*x4065)));
evalcond[3]=((((-1.0)*r12*x4065))+((cj6*x4062))+(((-1.0)*x4054*x4061))+(((-1.0)*x4051))+(((-1.0)*x4057*x4059))+(((-1.0)*r10*x4053*x4060)));
evalcond[4]=((((-1.0)*r00*x4053*x4063))+((sj6*x4064))+(((-1.0)*x4051))+(((-1.0)*x4057*x4058))+(((-1.0)*r02*sj5*x4063))+(((-1.0)*x4056*x4060)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4053*x4062))+((sj6*x4059))+(((-1.0)*x4057*x4061))+(((-1.0)*cj6*r10*x4060))+(((-1.0)*r12*sj5*x4063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4066=(cj6*sj5);
IkReal x4067=(sj5*sj6);
IkReal x4068=((1.0)*cj5);
if( IKabs(((((-1.0)*r12*x4068))+((r11*x4066))+((r10*x4067)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x4067))+(((-1.0)*r02*x4068))+((r01*x4066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x4068))+((r11*x4066))+((r10*x4067))))+IKsqr((((r00*x4067))+(((-1.0)*r02*x4068))+((r01*x4066))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x4068))+((r11*x4066))+((r10*x4067))), (((r00*x4067))+(((-1.0)*r02*x4068))+((r01*x4066))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4069=(cj6*sj5);
IkReal x4070=(sj5*sj6);
IkReal x4071=((1.0)*cj5);
evalcond[0]=(((r10*x4070))+((r11*x4069))+(((-1.0)*r12*x4071))+(((-1.0)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*r02*x4071))+((r00*x4070))+(((-1.0)*(IKcos(j0))))+((r01*x4069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4072=((1.0)*cj5);
IkReal x4073=((((-1.0)*r12*x4072))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4073;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs(((((-1.0)*r00*sj6*x4072))+(((-1.0)*cj6*r01*x4072))+(((-1.0)*r02*sj5))))));
j4eval[2]=IKsign(x4073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4074=(cj0*sj6);
IkReal x4075=(cj0*cj6);
IkReal x4076=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4076;
j4eval[1]=((IKabs((((cj5*r20*x4074))+((cj0*r22*sj5))+((cj5*r21*x4075)))))+(IKabs((((r20*x4075))+(((-1.0)*r21*x4074))))));
j4eval[2]=IKsign(x4076);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4077=cj5*cj5;
IkReal x4078=cj6*cj6;
IkReal x4079=r20*r20;
IkReal x4080=r21*r21;
IkReal x4081=r22*r22;
IkReal x4082=(r22*sj5);
IkReal x4083=(cj6*r21);
IkReal x4084=((2.0)*r20*sj6);
IkReal x4085=((1.0)*x4077);
IkReal x4086=(x4078*x4079);
IkReal x4087=(x4078*x4080);
IkReal x4088=(((x4077*x4079))+(((-1.0)*x4083*x4084))+x4080+x4081+x4086+(((-1.0)*x4085*x4086))+(((-1.0)*x4087))+(((2.0)*cj5*x4082*x4083))+((cj5*x4082*x4084))+((x4077*x4087))+((x4077*x4083*x4084))+(((-1.0)*x4081*x4085)));
j4eval[0]=x4088;
j4eval[1]=IKsign(x4088);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*x4083))+((cj5*r20*sj6))+x4082))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4089=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4089;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4090=((1.0)*sj5);
IkReal x4091=(((cj5*r22))+(((-1.0)*r20*sj6*x4090))+(((-1.0)*cj6*r21*x4090)));
j4eval[0]=x4091;
j4eval[1]=IKsign(x4091);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4092=cj5*cj5;
IkReal x4093=cj6*cj6;
IkReal x4094=r20*r20;
IkReal x4095=r21*r21;
IkReal x4096=r22*r22;
IkReal x4097=(r22*sj5);
IkReal x4098=(cj6*r21);
IkReal x4099=((2.0)*r20*sj6);
IkReal x4100=((1.0)*x4092);
IkReal x4101=(x4093*x4094);
IkReal x4102=(x4093*x4095);
IkReal x4103=((((-1.0)*x4102))+(((-1.0)*x4096*x4100))+((x4092*x4102))+((cj5*x4097*x4099))+(((-1.0)*x4098*x4099))+(((2.0)*cj5*x4097*x4098))+x4096+x4095+x4101+((x4092*x4098*x4099))+(((-1.0)*x4100*x4101))+((x4092*x4094)));
j4eval[0]=x4103;
j4eval[1]=IKsign(x4103);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r20*sj6))+x4097+((cj5*x4098))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4104=cj5*cj5;
IkReal x4105=cj6*cj6;
IkReal x4106=r20*r20;
IkReal x4107=r21*r21;
IkReal x4108=r22*r22;
IkReal x4109=(cj6*r21);
IkReal x4110=(r22*sj5);
IkReal x4111=((1.0)*x4104);
IkReal x4112=((2.0)*r20*sj6);
IkReal x4113=(x4105*x4106);
IkReal x4114=(x4105*x4107);
CheckValue<IkReal> x4115 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((cj5*x4109))+x4110)),IKFAST_ATAN2_MAGTHRESH);
if(!x4115.valid){
continue;
}
CheckValue<IkReal> x4116=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4109*x4112))+(((-1.0)*x4111*x4113))+(((2.0)*cj5*x4109*x4110))+x4113+x4107+x4108+((x4104*x4114))+(((-1.0)*x4108*x4111))+((x4104*x4109*x4112))+((x4104*x4106))+((cj5*x4110*x4112))+(((-1.0)*x4114)))),-1);
if(!x4116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4115.value)+(((1.5707963267949)*(x4116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4117=IKsin(j4);
IkReal x4118=IKcos(j4);
IkReal x4119=(cj5*cj6);
IkReal x4120=(r11*sj6);
IkReal x4121=(cj6*r20);
IkReal x4122=(cj5*sj6);
IkReal x4123=(cj6*r10);
IkReal x4124=(r01*sj6);
IkReal x4125=(r21*sj6);
IkReal x4126=(cj6*r00);
IkReal x4127=((1.0)*x4118);
IkReal x4128=((1.0)*x4117);
IkReal x4129=(sj5*x4128);
evalcond[0]=((((-1.0)*r22*x4129))+(((-1.0)*r21*x4119*x4128))+((x4118*x4121))+(((-1.0)*x4125*x4127))+(((-1.0)*r20*x4122*x4128)));
evalcond[1]=((((-1.0)*r12*x4129))+(((-1.0)*r10*x4122*x4128))+((x4118*x4123))+(((-1.0)*r11*x4119*x4128))+(((-1.0)*x4120*x4127)));
evalcond[2]=((((-1.0)*r00*x4122*x4127))+(((-1.0)*r02*sj5*x4127))+((x4117*x4124))+(((-1.0)*x4126*x4128))+(((-1.0)*r01*x4119*x4127)));
evalcond[3]=((((-1.0)*r10*x4122*x4127))+(((-1.0)*r12*sj5*x4127))+((x4117*x4120))+(((-1.0)*x4123*x4128))+(((-1.0)*r11*x4119*x4127)));
evalcond[4]=((-1.0)+(((-1.0)*x4124*x4127))+(((-1.0)*r00*x4122*x4128))+((x4118*x4126))+(((-1.0)*r02*x4129))+(((-1.0)*r01*x4119*x4128)));
evalcond[5]=((1.0)+(((-1.0)*x4121*x4128))+(((-1.0)*r21*x4119*x4127))+((x4117*x4125))+(((-1.0)*r20*x4122*x4127))+(((-1.0)*r22*sj5*x4127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4130=((1.0)*sj5);
CheckValue<IkReal> x4131 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4131.valid){
continue;
}
CheckValue<IkReal> x4132=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x4130))+(((-1.0)*cj6*r21*x4130)))),-1);
if(!x4132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4131.value)+(((1.5707963267949)*(x4132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4133=IKsin(j4);
IkReal x4134=IKcos(j4);
IkReal x4135=(cj5*cj6);
IkReal x4136=(r11*sj6);
IkReal x4137=(cj6*r20);
IkReal x4138=(cj5*sj6);
IkReal x4139=(cj6*r10);
IkReal x4140=(r01*sj6);
IkReal x4141=(r21*sj6);
IkReal x4142=(cj6*r00);
IkReal x4143=((1.0)*x4134);
IkReal x4144=((1.0)*x4133);
IkReal x4145=(sj5*x4144);
evalcond[0]=((((-1.0)*x4141*x4143))+(((-1.0)*r21*x4135*x4144))+(((-1.0)*r20*x4138*x4144))+((x4134*x4137))+(((-1.0)*r22*x4145)));
evalcond[1]=((((-1.0)*r11*x4135*x4144))+(((-1.0)*r10*x4138*x4144))+((x4134*x4139))+(((-1.0)*x4136*x4143))+(((-1.0)*r12*x4145)));
evalcond[2]=((((-1.0)*r00*x4138*x4143))+(((-1.0)*x4142*x4144))+((x4133*x4140))+(((-1.0)*r01*x4135*x4143))+(((-1.0)*r02*sj5*x4143)));
evalcond[3]=((((-1.0)*r11*x4135*x4143))+(((-1.0)*r10*x4138*x4143))+(((-1.0)*x4139*x4144))+(((-1.0)*r12*sj5*x4143))+((x4133*x4136)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x4138*x4144))+(((-1.0)*r02*x4145))+(((-1.0)*x4140*x4143))+(((-1.0)*r01*x4135*x4144))+((x4134*x4142)));
evalcond[5]=((1.0)+(((-1.0)*r22*sj5*x4143))+(((-1.0)*r21*x4135*x4143))+(((-1.0)*r20*x4138*x4143))+((x4133*x4141))+(((-1.0)*x4137*x4144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4146 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4146.valid){
continue;
}
CheckValue<IkReal> x4147=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x4147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4146.value)+(((1.5707963267949)*(x4147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4148=IKsin(j4);
IkReal x4149=IKcos(j4);
IkReal x4150=(cj5*cj6);
IkReal x4151=(r11*sj6);
IkReal x4152=(cj6*r20);
IkReal x4153=(cj5*sj6);
IkReal x4154=(cj6*r10);
IkReal x4155=(r01*sj6);
IkReal x4156=(r21*sj6);
IkReal x4157=(cj6*r00);
IkReal x4158=((1.0)*x4149);
IkReal x4159=((1.0)*x4148);
IkReal x4160=(sj5*x4159);
evalcond[0]=((((-1.0)*x4156*x4158))+(((-1.0)*r20*x4153*x4159))+((x4149*x4152))+(((-1.0)*r22*x4160))+(((-1.0)*r21*x4150*x4159)));
evalcond[1]=((((-1.0)*r11*x4150*x4159))+(((-1.0)*r12*x4160))+(((-1.0)*x4151*x4158))+(((-1.0)*r10*x4153*x4159))+((x4149*x4154)));
evalcond[2]=((((-1.0)*r01*x4150*x4158))+(((-1.0)*r00*x4153*x4158))+(((-1.0)*x4157*x4159))+((x4148*x4155))+(((-1.0)*r02*sj5*x4158)));
evalcond[3]=((((-1.0)*r11*x4150*x4158))+(((-1.0)*x4154*x4159))+(((-1.0)*r10*x4153*x4158))+((x4148*x4151))+(((-1.0)*r12*sj5*x4158)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x4150*x4159))+(((-1.0)*r02*x4160))+(((-1.0)*x4155*x4158))+(((-1.0)*r00*x4153*x4159))+((x4149*x4157)));
evalcond[5]=((1.0)+(((-1.0)*r22*sj5*x4158))+(((-1.0)*r20*x4153*x4158))+(((-1.0)*x4152*x4159))+((x4148*x4156))+(((-1.0)*r21*x4150*x4158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4161=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4161;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4162=((1.0)*sj6);
IkReal x4163=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4162)));
j4eval[0]=x4163;
j4eval[1]=IKsign(x4163);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x4162))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4164=cj5*cj5;
IkReal x4165=cj6*cj6;
IkReal x4166=r20*r20;
IkReal x4167=r21*r21;
IkReal x4168=r22*r22;
IkReal x4169=(r22*sj5);
IkReal x4170=(cj6*r21);
IkReal x4171=((2.0)*r20*sj6);
IkReal x4172=((1.0)*x4164);
IkReal x4173=(x4165*x4166);
IkReal x4174=(x4165*x4167);
IkReal x4175=((((-1.0)*x4170*x4171))+(((-1.0)*x4168*x4172))+(((-1.0)*x4172*x4173))+((cj5*x4169*x4171))+(((-1.0)*x4174))+((x4164*x4174))+x4167+x4168+x4173+((x4164*x4170*x4171))+(((2.0)*cj5*x4169*x4170))+((x4164*x4166)));
j4eval[0]=x4175;
j4eval[1]=IKsign(x4175);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r20*sj6))+((cj5*x4170))+x4169))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4176=cj5*cj5;
IkReal x4177=cj6*cj6;
IkReal x4178=r20*r20;
IkReal x4179=r21*r21;
IkReal x4180=r22*r22;
IkReal x4181=(cj6*r21);
IkReal x4182=(r22*sj5);
IkReal x4183=((1.0)*x4176);
IkReal x4184=((2.0)*r20*sj6);
IkReal x4185=(x4177*x4178);
IkReal x4186=(x4177*x4179);
CheckValue<IkReal> x4187=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4183*x4185))+(((-1.0)*x4181*x4184))+((x4176*x4181*x4184))+(((-1.0)*x4180*x4183))+((cj5*x4182*x4184))+(((-1.0)*x4186))+(((2.0)*cj5*x4181*x4182))+x4180+x4185+x4179+((x4176*x4178))+((x4176*x4186)))),-1);
if(!x4187.valid){
continue;
}
CheckValue<IkReal> x4188 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+x4182+((cj5*x4181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4187.value)))+(x4188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4189=IKsin(j4);
IkReal x4190=IKcos(j4);
IkReal x4191=(cj5*cj6);
IkReal x4192=(r11*sj6);
IkReal x4193=(cj6*r20);
IkReal x4194=(cj5*sj6);
IkReal x4195=(cj6*r10);
IkReal x4196=(r01*sj6);
IkReal x4197=(r21*sj6);
IkReal x4198=(cj6*r00);
IkReal x4199=((1.0)*x4190);
IkReal x4200=((1.0)*x4189);
IkReal x4201=(sj5*x4200);
evalcond[0]=((((-1.0)*r21*x4191*x4200))+(((-1.0)*r20*x4194*x4200))+(((-1.0)*r22*x4201))+((x4190*x4193))+(((-1.0)*x4197*x4199)));
evalcond[1]=((((-1.0)*r10*x4194*x4200))+(((-1.0)*r12*x4201))+(((-1.0)*r11*x4191*x4200))+((x4190*x4195))+(((-1.0)*x4192*x4199)));
evalcond[2]=((((-1.0)*r01*x4191*x4199))+(((-1.0)*r00*x4194*x4199))+(((-1.0)*x4198*x4200))+(((-1.0)*r02*sj5*x4199))+((x4189*x4196)));
evalcond[3]=((((-1.0)*r12*sj5*x4199))+(((-1.0)*r11*x4191*x4199))+(((-1.0)*x4195*x4200))+(((-1.0)*r10*x4194*x4199))+((x4189*x4192)));
evalcond[4]=((1.0)+(((-1.0)*r02*x4201))+(((-1.0)*r01*x4191*x4200))+((x4190*x4198))+(((-1.0)*x4196*x4199))+(((-1.0)*r00*x4194*x4200)));
evalcond[5]=((1.0)+(((-1.0)*x4193*x4200))+(((-1.0)*r20*x4194*x4199))+((x4189*x4197))+(((-1.0)*r22*sj5*x4199))+(((-1.0)*r21*x4191*x4199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4202=((1.0)*sj6);
CheckValue<IkReal> x4203=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4202)))),-1);
if(!x4203.valid){
continue;
}
CheckValue<IkReal> x4204 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x4202)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4203.value)))+(x4204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4205=IKsin(j4);
IkReal x4206=IKcos(j4);
IkReal x4207=(cj5*cj6);
IkReal x4208=(r11*sj6);
IkReal x4209=(cj6*r20);
IkReal x4210=(cj5*sj6);
IkReal x4211=(cj6*r10);
IkReal x4212=(r01*sj6);
IkReal x4213=(r21*sj6);
IkReal x4214=(cj6*r00);
IkReal x4215=((1.0)*x4206);
IkReal x4216=((1.0)*x4205);
IkReal x4217=(sj5*x4216);
evalcond[0]=((((-1.0)*x4213*x4215))+(((-1.0)*r22*x4217))+((x4206*x4209))+(((-1.0)*r20*x4210*x4216))+(((-1.0)*r21*x4207*x4216)));
evalcond[1]=((((-1.0)*r12*x4217))+((x4206*x4211))+(((-1.0)*x4208*x4215))+(((-1.0)*r10*x4210*x4216))+(((-1.0)*r11*x4207*x4216)));
evalcond[2]=(((x4205*x4212))+(((-1.0)*r01*x4207*x4215))+(((-1.0)*r02*sj5*x4215))+(((-1.0)*x4214*x4216))+(((-1.0)*r00*x4210*x4215)));
evalcond[3]=((((-1.0)*r12*sj5*x4215))+((x4205*x4208))+(((-1.0)*x4211*x4216))+(((-1.0)*r10*x4210*x4215))+(((-1.0)*r11*x4207*x4215)));
evalcond[4]=((1.0)+(((-1.0)*r02*x4217))+(((-1.0)*r01*x4207*x4216))+((x4206*x4214))+(((-1.0)*x4212*x4215))+(((-1.0)*r00*x4210*x4216)));
evalcond[5]=((1.0)+((x4205*x4213))+(((-1.0)*r22*sj5*x4215))+(((-1.0)*r20*x4210*x4215))+(((-1.0)*x4209*x4216))+(((-1.0)*r21*x4207*x4215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4218=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4218.valid){
continue;
}
CheckValue<IkReal> x4219 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4218.value)))+(x4219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4220=IKsin(j4);
IkReal x4221=IKcos(j4);
IkReal x4222=(cj5*cj6);
IkReal x4223=(r11*sj6);
IkReal x4224=(cj6*r20);
IkReal x4225=(cj5*sj6);
IkReal x4226=(cj6*r10);
IkReal x4227=(r01*sj6);
IkReal x4228=(r21*sj6);
IkReal x4229=(cj6*r00);
IkReal x4230=((1.0)*x4221);
IkReal x4231=((1.0)*x4220);
IkReal x4232=(sj5*x4231);
evalcond[0]=((((-1.0)*r21*x4222*x4231))+(((-1.0)*r20*x4225*x4231))+(((-1.0)*r22*x4232))+(((-1.0)*x4228*x4230))+((x4221*x4224)));
evalcond[1]=((((-1.0)*r12*x4232))+(((-1.0)*x4223*x4230))+(((-1.0)*r10*x4225*x4231))+(((-1.0)*r11*x4222*x4231))+((x4221*x4226)));
evalcond[2]=((((-1.0)*r00*x4225*x4230))+((x4220*x4227))+(((-1.0)*x4229*x4231))+(((-1.0)*r02*sj5*x4230))+(((-1.0)*r01*x4222*x4230)));
evalcond[3]=((((-1.0)*x4226*x4231))+((x4220*x4223))+(((-1.0)*r12*sj5*x4230))+(((-1.0)*r10*x4225*x4230))+(((-1.0)*r11*x4222*x4230)));
evalcond[4]=((1.0)+(((-1.0)*x4227*x4230))+(((-1.0)*r00*x4225*x4231))+(((-1.0)*r02*x4232))+((x4221*x4229))+(((-1.0)*r01*x4222*x4231)));
evalcond[5]=((1.0)+(((-1.0)*x4224*x4231))+(((-1.0)*r22*sj5*x4230))+((x4220*x4228))+(((-1.0)*r21*x4222*x4230))+(((-1.0)*r20*x4225*x4230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4233=cj5*cj5;
IkReal x4234=cj6*cj6;
IkReal x4235=r20*r20;
IkReal x4236=r21*r21;
IkReal x4237=r22*r22;
IkReal x4238=(cj6*r21);
IkReal x4239=(r22*sj5);
IkReal x4240=((1.0)*x4233);
IkReal x4241=((2.0)*r20*sj6);
IkReal x4242=(x4234*x4235);
IkReal x4243=(x4234*x4236);
CheckValue<IkReal> x4244 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*x4238))+((cj5*r20*sj6))+x4239)),IKFAST_ATAN2_MAGTHRESH);
if(!x4244.valid){
continue;
}
CheckValue<IkReal> x4245=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4240*x4242))+((x4233*x4238*x4241))+((cj5*x4239*x4241))+(((2.0)*cj5*x4238*x4239))+(((-1.0)*x4237*x4240))+(((-1.0)*x4238*x4241))+x4242+x4237+x4236+((x4233*x4235))+(((-1.0)*x4243))+((x4233*x4243)))),-1);
if(!x4245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4244.value)+(((1.5707963267949)*(x4245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4246=IKsin(j4);
IkReal x4247=IKcos(j4);
IkReal x4248=(cj5*cj6);
IkReal x4249=(r11*sj6);
IkReal x4250=(cj6*r20);
IkReal x4251=(cj6*r10);
IkReal x4252=(cj5*sj6);
IkReal x4253=(r01*sj6);
IkReal x4254=(r21*sj6);
IkReal x4255=(cj6*r00);
IkReal x4256=((1.0)*x4247);
IkReal x4257=((1.0)*x4246);
IkReal x4258=(sj5*x4257);
evalcond[0]=(((x4247*x4250))+(((-1.0)*x4254*x4256))+(((-1.0)*r22*x4258))+(((-1.0)*r20*x4252*x4257))+(((-1.0)*r21*x4248*x4257)));
evalcond[1]=((((-1.0)*x4255*x4257))+(((-1.0)*r00*x4252*x4256))+((x4246*x4253))+(((-1.0)*r01*x4248*x4256))+(((-1.0)*r02*sj5*x4256)));
evalcond[2]=(((x4246*x4249))+(((-1.0)*r10*x4252*x4256))+(((-1.0)*x4251*x4257))+(((-1.0)*r11*x4248*x4256))+(((-1.0)*r12*sj5*x4256)));
evalcond[3]=(((x4247*x4251))+cj0+(((-1.0)*r10*x4252*x4257))+(((-1.0)*r11*x4248*x4257))+(((-1.0)*x4249*x4256))+(((-1.0)*r12*x4258)));
evalcond[4]=((1.0)+(((-1.0)*r22*sj5*x4256))+((x4246*x4254))+(((-1.0)*r20*x4252*x4256))+(((-1.0)*r21*x4248*x4256))+(((-1.0)*x4250*x4257)));
evalcond[5]=((((-1.0)*sj0))+((x4247*x4255))+(((-1.0)*x4253*x4256))+(((-1.0)*r00*x4252*x4257))+(((-1.0)*r01*x4248*x4257))+(((-1.0)*r02*x4258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4259=(cj0*sj6);
IkReal x4260=(cj0*cj6);
CheckValue<IkReal> x4261 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4259))+((r20*x4260)))),IkReal((((cj5*r20*x4259))+((cj0*r22*sj5))+((cj5*r21*x4260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4261.valid){
continue;
}
CheckValue<IkReal> x4262=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4261.value)+(((1.5707963267949)*(x4262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4263=IKsin(j4);
IkReal x4264=IKcos(j4);
IkReal x4265=(cj5*cj6);
IkReal x4266=(r11*sj6);
IkReal x4267=(cj6*r20);
IkReal x4268=(cj6*r10);
IkReal x4269=(cj5*sj6);
IkReal x4270=(r01*sj6);
IkReal x4271=(r21*sj6);
IkReal x4272=(cj6*r00);
IkReal x4273=((1.0)*x4264);
IkReal x4274=((1.0)*x4263);
IkReal x4275=(sj5*x4274);
evalcond[0]=((((-1.0)*r21*x4265*x4274))+(((-1.0)*r22*x4275))+(((-1.0)*x4271*x4273))+((x4264*x4267))+(((-1.0)*r20*x4269*x4274)));
evalcond[1]=((((-1.0)*r02*sj5*x4273))+((x4263*x4270))+(((-1.0)*x4272*x4274))+(((-1.0)*r01*x4265*x4273))+(((-1.0)*r00*x4269*x4273)));
evalcond[2]=((((-1.0)*r12*sj5*x4273))+(((-1.0)*r10*x4269*x4273))+((x4263*x4266))+(((-1.0)*r11*x4265*x4273))+(((-1.0)*x4268*x4274)));
evalcond[3]=((((-1.0)*r12*x4275))+cj0+(((-1.0)*r10*x4269*x4274))+((x4264*x4268))+(((-1.0)*r11*x4265*x4274))+(((-1.0)*x4266*x4273)));
evalcond[4]=((1.0)+(((-1.0)*r22*sj5*x4273))+(((-1.0)*r21*x4265*x4273))+((x4263*x4271))+(((-1.0)*r20*x4269*x4273))+(((-1.0)*x4267*x4274)));
evalcond[5]=((((-1.0)*sj0))+((x4264*x4272))+(((-1.0)*r02*x4275))+(((-1.0)*r01*x4265*x4274))+(((-1.0)*x4270*x4273))+(((-1.0)*r00*x4269*x4274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4276=((1.0)*cj5);
CheckValue<IkReal> x4277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x4276))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x4277.valid){
continue;
}
CheckValue<IkReal> x4278 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj6*x4276))+(((-1.0)*r02*sj5))+(((-1.0)*cj6*r01*x4276)))),IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4277.value)))+(x4278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4279=IKsin(j4);
IkReal x4280=IKcos(j4);
IkReal x4281=(cj5*cj6);
IkReal x4282=(r11*sj6);
IkReal x4283=(cj6*r20);
IkReal x4284=(cj6*r10);
IkReal x4285=(cj5*sj6);
IkReal x4286=(r01*sj6);
IkReal x4287=(r21*sj6);
IkReal x4288=(cj6*r00);
IkReal x4289=((1.0)*x4280);
IkReal x4290=((1.0)*x4279);
IkReal x4291=(sj5*x4290);
evalcond[0]=((((-1.0)*r22*x4291))+((x4280*x4283))+(((-1.0)*r20*x4285*x4290))+(((-1.0)*x4287*x4289))+(((-1.0)*r21*x4281*x4290)));
evalcond[1]=((((-1.0)*x4288*x4290))+((x4279*x4286))+(((-1.0)*r01*x4281*x4289))+(((-1.0)*r00*x4285*x4289))+(((-1.0)*r02*sj5*x4289)));
evalcond[2]=((((-1.0)*r10*x4285*x4289))+((x4279*x4282))+(((-1.0)*r11*x4281*x4289))+(((-1.0)*x4284*x4290))+(((-1.0)*r12*sj5*x4289)));
evalcond[3]=((((-1.0)*r11*x4281*x4290))+((x4280*x4284))+(((-1.0)*x4282*x4289))+cj0+(((-1.0)*r12*x4291))+(((-1.0)*r10*x4285*x4290)));
evalcond[4]=((1.0)+((x4279*x4287))+(((-1.0)*r20*x4285*x4289))+(((-1.0)*r21*x4281*x4289))+(((-1.0)*x4283*x4290))+(((-1.0)*r22*sj5*x4289)));
evalcond[5]=(((x4280*x4288))+(((-1.0)*x4286*x4289))+(((-1.0)*sj0))+(((-1.0)*r01*x4281*x4290))+(((-1.0)*r00*x4285*x4290))+(((-1.0)*r02*x4291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4292=((1.26697583102024)*cj5);
IkReal x4293=((0.0338501117053686)*cj5);
IkReal x4294=(r00*sj6);
IkReal x4295=(r10*sj6);
IkReal x4296=((1.26697583102024)*sj5);
IkReal x4297=(cj6*r11);
IkReal x4298=((0.0338501117053686)*sj5);
IkReal x4299=(cj6*r01);
if( IKabs((((x4293*x4297))+((x4293*x4295))+(((-1.0)*x4296*x4297))+(((-3.38501117053686)*py))+(((-1.0)*x4295*x4296))+((r12*x4292))+((r12*x4298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4293*x4294))+((x4293*x4299))+(((-1.0)*x4296*x4299))+(((-3.38501117053686)*px))+(((-1.0)*x4294*x4296))+((r02*x4298))+((r02*x4292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4293*x4297))+((x4293*x4295))+(((-1.0)*x4296*x4297))+(((-3.38501117053686)*py))+(((-1.0)*x4295*x4296))+((r12*x4292))+((r12*x4298))))+IKsqr((((x4293*x4294))+((x4293*x4299))+(((-1.0)*x4296*x4299))+(((-3.38501117053686)*px))+(((-1.0)*x4294*x4296))+((r02*x4298))+((r02*x4292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x4293*x4297))+((x4293*x4295))+(((-1.0)*x4296*x4297))+(((-3.38501117053686)*py))+(((-1.0)*x4295*x4296))+((r12*x4292))+((r12*x4298))), (((x4293*x4294))+((x4293*x4299))+(((-1.0)*x4296*x4299))+(((-3.38501117053686)*px))+(((-1.0)*x4294*x4296))+((r02*x4298))+((r02*x4292))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4300=((0.01)*cj5);
IkReal x4301=(cj6*r01);
IkReal x4302=(r00*sj6);
IkReal x4303=((0.01)*sj5);
IkReal x4304=((0.37429)*sj5);
IkReal x4305=((0.37429)*cj5);
IkReal x4306=(r10*sj6);
IkReal x4307=(cj6*r11);
evalcond[0]=(((x4300*x4302))+((x4300*x4301))+((r02*x4303))+((r02*x4305))+(((-1.0)*px))+(((-0.29542)*(IKcos(j0))))+(((-1.0)*x4301*x4304))+(((-1.0)*x4302*x4304)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+((r12*x4305))+((r12*x4303))+((x4300*x4307))+((x4300*x4306))+(((-1.0)*py))+(((-1.0)*x4304*x4307))+(((-1.0)*x4304*x4306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4308=(cj0*sj6);
IkReal x4309=(cj0*cj6);
IkReal x4310=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4310;
j4eval[1]=((IKabs(((((-1.0)*r21*x4308))+((r20*x4309)))))+(IKabs((((cj5*r20*x4308))+((cj0*r22*sj5))+((cj5*r21*x4309))))));
j4eval[2]=IKsign(x4310);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4311=cj5*cj5;
IkReal x4312=cj6*cj6;
IkReal x4313=(r00*r20);
IkReal x4314=(r02*r22);
IkReal x4315=(r22*sj5);
IkReal x4316=(cj6*r21);
IkReal x4317=(r00*sj6);
IkReal x4318=(r20*sj6);
IkReal x4319=(cj6*r01);
IkReal x4320=(cj0*cj5);
IkReal x4321=((1.0)*x4311);
IkReal x4322=(cj5*r02*sj5);
IkReal x4323=(r01*r21*x4312);
IkReal x4324=((((-1.0)*x4314*x4321))+((x4311*x4313))+((cj5*x4315*x4317))+((cj5*x4315*x4319))+((x4318*x4322))+(((-1.0)*x4323))+((r01*r21))+((x4311*x4318*x4319))+((x4316*x4322))+((x4311*x4323))+(((-1.0)*x4316*x4317))+((x4311*x4316*x4317))+x4314+(((-1.0)*x4318*x4319))+(((-1.0)*x4312*x4313*x4321))+((x4312*x4313)));
j4eval[0]=x4324;
j4eval[1]=IKsign(x4324);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x4318*x4320))+((x4316*x4320))+((cj0*x4315))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4325=cj6*cj6;
IkReal x4326=cj5*cj5;
IkReal x4327=(r12*sj5);
IkReal x4328=(r22*sj5);
IkReal x4329=((1.0)*r11);
IkReal x4330=(r20*sj0);
IkReal x4331=(r10*r20);
IkReal x4332=(cj5*sj6);
IkReal x4333=(cj6*r10);
IkReal x4334=(r12*r22);
IkReal x4335=(cj5*cj6*r21);
IkReal x4336=(r21*x4325);
IkReal x4337=(cj6*r20*sj6);
IkReal x4338=(r11*x4326);
IkReal x4339=((1.0)*r21*sj6);
IkReal x4340=((1.0)*x4326);
IkReal x4341=(((x4337*x4338))+(((-1.0)*x4333*x4339))+((r11*r21))+((x4326*x4331))+((x4327*x4335))+((cj5*cj6*r11*x4328))+(((-1.0)*x4325*x4331*x4340))+((x4325*x4331))+((r21*sj6*x4326*x4333))+((r10*x4328*x4332))+x4334+(((-1.0)*x4329*x4337))+(((-1.0)*x4329*x4336))+((r20*x4327*x4332))+(((-1.0)*x4334*x4340))+((x4336*x4338)));
j4eval[0]=x4341;
j4eval[1]=IKsign(x4341);
j4eval[2]=((IKabs((((cj6*x4330))+(((-1.0)*sj0*x4339)))))+(IKabs((((sj0*x4328))+((sj0*x4335))+((x4330*x4332))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4342=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4342;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4343=((1.0)*sj5);
IkReal x4344=(((cj5*r22))+(((-1.0)*r20*sj6*x4343))+(((-1.0)*cj6*r21*x4343)));
j4eval[0]=x4344;
j4eval[1]=IKsign(x4344);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4345=cj6*cj6;
IkReal x4346=r01*r01;
IkReal x4347=cj5*cj5;
IkReal x4348=r00*r00;
IkReal x4349=r02*r02;
IkReal x4350=(cj6*r00);
IkReal x4351=(r02*sj5);
IkReal x4352=(cj5*cj6*r01);
IkReal x4353=((2.0)*r01*sj6);
IkReal x4354=(cj5*r00*sj6);
IkReal x4355=((1.0)*x4347);
IkReal x4356=(x4345*x4348);
IkReal x4357=(x4345*x4346);
IkReal x4358=((((2.0)*x4351*x4354))+(((2.0)*x4351*x4352))+((x4347*x4348))+(((-1.0)*x4349*x4355))+((x4347*x4357))+(((-1.0)*x4350*x4353))+((x4347*x4350*x4353))+x4356+x4349+x4346+(((-1.0)*x4355*x4356))+(((-1.0)*x4357)));
j4eval[0]=x4358;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x4350)))+(IKabs((x4354+x4351+x4352))));
j4eval[2]=IKsign(x4358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4359=cj6*cj6;
IkReal x4360=r01*r01;
IkReal x4361=cj5*cj5;
IkReal x4362=r00*r00;
IkReal x4363=r02*r02;
IkReal x4364=(cj6*r00);
IkReal x4365=((2.0)*r01);
IkReal x4366=(cj5*cj6);
IkReal x4367=(r02*sj5);
IkReal x4368=(cj5*r00*sj6);
IkReal x4369=(x4361*x4362);
IkReal x4370=(x4359*x4360);
CheckValue<IkReal> x4371 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x4364)),IkReal((((r01*x4366))+x4367+x4368)),IKFAST_ATAN2_MAGTHRESH);
if(!x4371.valid){
continue;
}
CheckValue<IkReal> x4372=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4361*x4363))+(((-1.0)*x4359*x4369))+((sj6*x4361*x4364*x4365))+((x4359*x4362))+((x4365*x4366*x4367))+((x4361*x4370))+(((-1.0)*x4370))+x4360+x4363+x4369+(((-1.0)*sj6*x4364*x4365))+(((2.0)*x4367*x4368)))),-1);
if(!x4372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4371.value)+(((1.5707963267949)*(x4372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4373=IKsin(j4);
IkReal x4374=IKcos(j4);
IkReal x4375=(cj5*cj6);
IkReal x4376=(r11*sj6);
IkReal x4377=(cj6*r20);
IkReal x4378=(cj6*r10);
IkReal x4379=(cj5*sj6);
IkReal x4380=(r21*sj6);
IkReal x4381=(cj6*r00);
IkReal x4382=(r01*sj6);
IkReal x4383=((1.0)*x4374);
IkReal x4384=((1.0)*x4373);
IkReal x4385=(sj5*x4384);
evalcond[0]=((((-1.0)*x4380*x4383))+((x4374*x4377))+(((-1.0)*r20*x4379*x4384))+(((-1.0)*r22*x4385))+(((-1.0)*r21*x4375*x4384)));
evalcond[1]=((((-1.0)*r02*x4385))+(((-1.0)*x4382*x4383))+(((-1.0)*r00*x4379*x4384))+(((-1.0)*r01*x4375*x4384))+((x4374*x4381)));
evalcond[2]=((((-1.0)*r20*x4379*x4383))+((x4373*x4380))+(((-1.0)*r21*x4375*x4383))+(((-1.0)*x4377*x4384))+(((-1.0)*r22*sj5*x4383)));
evalcond[3]=((((-1.0)*r12*sj5*x4383))+(((-1.0)*x4378*x4384))+(((-1.0)*r10*x4379*x4383))+((x4373*x4376))+(((-1.0)*r11*x4375*x4383)));
evalcond[4]=((1.0)+(((-1.0)*r12*x4385))+((x4374*x4378))+(((-1.0)*r10*x4379*x4384))+(((-1.0)*x4376*x4383))+(((-1.0)*r11*x4375*x4384)));
evalcond[5]=((1.0)+(((-1.0)*x4381*x4384))+(((-1.0)*r02*sj5*x4383))+((x4373*x4382))+(((-1.0)*r00*x4379*x4383))+(((-1.0)*r01*x4375*x4383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4386=((1.0)*sj5);
CheckValue<IkReal> x4387=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x4386))+(((-1.0)*r20*sj6*x4386)))),-1);
if(!x4387.valid){
continue;
}
CheckValue<IkReal> x4388 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4387.value)))+(x4388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4389=IKsin(j4);
IkReal x4390=IKcos(j4);
IkReal x4391=(cj5*cj6);
IkReal x4392=(r11*sj6);
IkReal x4393=(cj6*r20);
IkReal x4394=(cj6*r10);
IkReal x4395=(cj5*sj6);
IkReal x4396=(r21*sj6);
IkReal x4397=(cj6*r00);
IkReal x4398=(r01*sj6);
IkReal x4399=((1.0)*x4390);
IkReal x4400=((1.0)*x4389);
IkReal x4401=(sj5*x4400);
evalcond[0]=((((-1.0)*r21*x4391*x4400))+(((-1.0)*x4396*x4399))+((x4390*x4393))+(((-1.0)*r22*x4401))+(((-1.0)*r20*x4395*x4400)));
evalcond[1]=((((-1.0)*r00*x4395*x4400))+(((-1.0)*r02*x4401))+((x4390*x4397))+(((-1.0)*r01*x4391*x4400))+(((-1.0)*x4398*x4399)));
evalcond[2]=((((-1.0)*r22*sj5*x4399))+((x4389*x4396))+(((-1.0)*r20*x4395*x4399))+(((-1.0)*r21*x4391*x4399))+(((-1.0)*x4393*x4400)));
evalcond[3]=(((x4389*x4392))+(((-1.0)*r12*sj5*x4399))+(((-1.0)*r11*x4391*x4399))+(((-1.0)*x4394*x4400))+(((-1.0)*r10*x4395*x4399)));
evalcond[4]=((1.0)+(((-1.0)*r11*x4391*x4400))+(((-1.0)*r12*x4401))+((x4390*x4394))+(((-1.0)*r10*x4395*x4400))+(((-1.0)*x4392*x4399)));
evalcond[5]=((1.0)+(((-1.0)*r01*x4391*x4399))+((x4389*x4398))+(((-1.0)*r02*sj5*x4399))+(((-1.0)*x4397*x4400))+(((-1.0)*r00*x4395*x4399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4402 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4402.valid){
continue;
}
CheckValue<IkReal> x4403=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4402.value)+(((1.5707963267949)*(x4403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4404=IKsin(j4);
IkReal x4405=IKcos(j4);
IkReal x4406=(cj5*cj6);
IkReal x4407=(r11*sj6);
IkReal x4408=(cj6*r20);
IkReal x4409=(cj6*r10);
IkReal x4410=(cj5*sj6);
IkReal x4411=(r21*sj6);
IkReal x4412=(cj6*r00);
IkReal x4413=(r01*sj6);
IkReal x4414=((1.0)*x4405);
IkReal x4415=((1.0)*x4404);
IkReal x4416=(sj5*x4415);
evalcond[0]=((((-1.0)*r20*x4410*x4415))+(((-1.0)*r21*x4406*x4415))+(((-1.0)*x4411*x4414))+((x4405*x4408))+(((-1.0)*r22*x4416)));
evalcond[1]=((((-1.0)*r02*x4416))+((x4405*x4412))+(((-1.0)*x4413*x4414))+(((-1.0)*r01*x4406*x4415))+(((-1.0)*r00*x4410*x4415)));
evalcond[2]=((((-1.0)*r22*sj5*x4414))+(((-1.0)*x4408*x4415))+(((-1.0)*r20*x4410*x4414))+(((-1.0)*r21*x4406*x4414))+((x4404*x4411)));
evalcond[3]=((((-1.0)*x4409*x4415))+(((-1.0)*r10*x4410*x4414))+((x4404*x4407))+(((-1.0)*r11*x4406*x4414))+(((-1.0)*r12*sj5*x4414)));
evalcond[4]=((1.0)+(((-1.0)*r10*x4410*x4415))+(((-1.0)*x4407*x4414))+(((-1.0)*r12*x4416))+((x4405*x4409))+(((-1.0)*r11*x4406*x4415)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x4414))+(((-1.0)*x4412*x4415))+((x4404*x4413))+(((-1.0)*r01*x4406*x4414))+(((-1.0)*r00*x4410*x4414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4417=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4417;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x4417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4418=((1.0)*sj6);
IkReal x4419=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x4418))+((cj5*r02)));
j4eval[0]=x4419;
j4eval[1]=IKsign(x4419);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4418))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4420=cj6*cj6;
IkReal x4421=cj5*cj5;
IkReal x4422=r00*r00;
IkReal x4423=r01*r01;
IkReal x4424=r02*r02;
IkReal x4425=(cj6*r00);
IkReal x4426=(cj5*cj6*r01);
IkReal x4427=((2.0)*r02*sj5);
IkReal x4428=((1.0)*x4420);
IkReal x4429=((2.0)*r01*sj6);
IkReal x4430=(cj5*r00*sj6);
IkReal x4431=(x4421*x4422);
IkReal x4432=((((-1.0)*x4427*x4430))+((x4425*x4429))+(((-1.0)*x4422*x4428))+(((-1.0)*x4421*x4425*x4429))+((x4420*x4423))+(((-1.0)*x4426*x4427))+(((-1.0)*x4431))+((x4420*x4431))+((x4421*x4424))+(((-1.0)*x4424))+(((-1.0)*x4423))+(((-1.0)*x4421*x4423*x4428)));
j4eval[0]=x4432;
j4eval[1]=((IKabs((x4430+x4426+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x4425))));
j4eval[2]=IKsign(x4432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4433=cj6*cj6;
IkReal x4434=cj5*cj5;
IkReal x4435=r00*r00;
IkReal x4436=r01*r01;
IkReal x4437=r02*r02;
IkReal x4438=(cj6*r00);
IkReal x4439=(cj5*cj6*r01);
IkReal x4440=((2.0)*r02*sj5);
IkReal x4441=((1.0)*x4433);
IkReal x4442=((2.0)*r01*sj6);
IkReal x4443=(cj5*r00*sj6);
IkReal x4444=(x4434*x4435);
CheckValue<IkReal> x4445=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4434*x4438*x4442))+(((-1.0)*x4437))+(((-1.0)*x4436))+(((-1.0)*x4435*x4441))+(((-1.0)*x4444))+((x4434*x4437))+((x4438*x4442))+(((-1.0)*x4439*x4440))+(((-1.0)*x4440*x4443))+((x4433*x4436))+(((-1.0)*x4434*x4436*x4441))+((x4433*x4444)))),-1);
if(!x4445.valid){
continue;
}
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x4438)),IkReal((x4439+x4443+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4445.value)))+(x4446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4447=IKsin(j4);
IkReal x4448=IKcos(j4);
IkReal x4449=(cj5*cj6);
IkReal x4450=(r11*sj6);
IkReal x4451=(cj6*r20);
IkReal x4452=(cj6*r10);
IkReal x4453=(cj5*sj6);
IkReal x4454=(r21*sj6);
IkReal x4455=(cj6*r00);
IkReal x4456=(r01*sj6);
IkReal x4457=((1.0)*x4448);
IkReal x4458=((1.0)*x4447);
IkReal x4459=(sj5*x4458);
evalcond[0]=((((-1.0)*r20*x4453*x4458))+(((-1.0)*r22*x4459))+(((-1.0)*x4454*x4457))+(((-1.0)*r21*x4449*x4458))+((x4448*x4451)));
evalcond[1]=((((-1.0)*r01*x4449*x4458))+(((-1.0)*r02*x4459))+(((-1.0)*x4456*x4457))+((x4448*x4455))+(((-1.0)*r00*x4453*x4458)));
evalcond[2]=((((-1.0)*r20*x4453*x4457))+(((-1.0)*r22*sj5*x4457))+(((-1.0)*r21*x4449*x4457))+((x4447*x4454))+(((-1.0)*x4451*x4458)));
evalcond[3]=((((-1.0)*r11*x4449*x4457))+(((-1.0)*r10*x4453*x4457))+(((-1.0)*r12*sj5*x4457))+((x4447*x4450))+(((-1.0)*x4452*x4458)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4449*x4458))+(((-1.0)*r12*x4459))+(((-1.0)*r10*x4453*x4458))+((x4448*x4452))+(((-1.0)*x4450*x4457)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x4449*x4457))+(((-1.0)*x4455*x4458))+(((-1.0)*r02*sj5*x4457))+((x4447*x4456))+(((-1.0)*r00*x4453*x4457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4460=((1.0)*sj6);
CheckValue<IkReal> x4461 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4460))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4461.valid){
continue;
}
CheckValue<IkReal> x4462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x4460))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x4462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4461.value)+(((1.5707963267949)*(x4462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4463=IKsin(j4);
IkReal x4464=IKcos(j4);
IkReal x4465=(cj5*cj6);
IkReal x4466=(r11*sj6);
IkReal x4467=(cj6*r20);
IkReal x4468=(cj6*r10);
IkReal x4469=(cj5*sj6);
IkReal x4470=(r21*sj6);
IkReal x4471=(cj6*r00);
IkReal x4472=(r01*sj6);
IkReal x4473=((1.0)*x4464);
IkReal x4474=((1.0)*x4463);
IkReal x4475=(sj5*x4474);
evalcond[0]=((((-1.0)*r20*x4469*x4474))+(((-1.0)*x4470*x4473))+(((-1.0)*r21*x4465*x4474))+((x4464*x4467))+(((-1.0)*r22*x4475)));
evalcond[1]=((((-1.0)*x4472*x4473))+((x4464*x4471))+(((-1.0)*r01*x4465*x4474))+(((-1.0)*r00*x4469*x4474))+(((-1.0)*r02*x4475)));
evalcond[2]=((((-1.0)*r22*sj5*x4473))+((x4463*x4470))+(((-1.0)*r20*x4469*x4473))+(((-1.0)*x4467*x4474))+(((-1.0)*r21*x4465*x4473)));
evalcond[3]=((((-1.0)*r12*sj5*x4473))+(((-1.0)*r11*x4465*x4473))+((x4463*x4466))+(((-1.0)*r10*x4469*x4473))+(((-1.0)*x4468*x4474)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x4475))+(((-1.0)*r11*x4465*x4474))+(((-1.0)*r10*x4469*x4474))+(((-1.0)*x4466*x4473))+((x4464*x4468)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x4473))+((x4463*x4472))+(((-1.0)*x4471*x4474))+(((-1.0)*r01*x4465*x4473))+(((-1.0)*r00*x4469*x4473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4476=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4476.valid){
continue;
}
CheckValue<IkReal> x4477 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4476.value)))+(x4477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4478=IKsin(j4);
IkReal x4479=IKcos(j4);
IkReal x4480=(cj5*cj6);
IkReal x4481=(r11*sj6);
IkReal x4482=(cj6*r20);
IkReal x4483=(cj6*r10);
IkReal x4484=(cj5*sj6);
IkReal x4485=(r21*sj6);
IkReal x4486=(cj6*r00);
IkReal x4487=(r01*sj6);
IkReal x4488=((1.0)*x4479);
IkReal x4489=((1.0)*x4478);
IkReal x4490=(sj5*x4489);
evalcond[0]=(((x4479*x4482))+(((-1.0)*x4485*x4488))+(((-1.0)*r21*x4480*x4489))+(((-1.0)*r22*x4490))+(((-1.0)*r20*x4484*x4489)));
evalcond[1]=((((-1.0)*x4487*x4488))+(((-1.0)*r02*x4490))+(((-1.0)*r01*x4480*x4489))+((x4479*x4486))+(((-1.0)*r00*x4484*x4489)));
evalcond[2]=(((x4478*x4485))+(((-1.0)*r21*x4480*x4488))+(((-1.0)*r22*sj5*x4488))+(((-1.0)*r20*x4484*x4488))+(((-1.0)*x4482*x4489)));
evalcond[3]=((((-1.0)*r12*sj5*x4488))+((x4478*x4481))+(((-1.0)*r10*x4484*x4488))+(((-1.0)*r11*x4480*x4488))+(((-1.0)*x4483*x4489)));
evalcond[4]=((-1.0)+(((-1.0)*x4481*x4488))+((x4479*x4483))+(((-1.0)*r10*x4484*x4489))+(((-1.0)*r11*x4480*x4489))+(((-1.0)*r12*x4490)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x4480*x4488))+(((-1.0)*x4486*x4489))+(((-1.0)*r02*sj5*x4488))+((x4478*x4487))+(((-1.0)*r00*x4484*x4488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4491=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4491;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4492=((1.0)*sj5);
IkReal x4493=(((cj5*r22))+(((-1.0)*cj6*r21*x4492))+(((-1.0)*r20*sj6*x4492)));
j4eval[0]=x4493;
j4eval[1]=IKsign(x4493);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4494=r11*r11;
IkReal x4495=cj5*cj5;
IkReal x4496=cj6*cj6;
IkReal x4497=r10*r10;
IkReal x4498=r12*r12;
IkReal x4499=(r12*sj5);
IkReal x4500=(cj6*r10);
IkReal x4501=((1.0)*x4496);
IkReal x4502=(cj5*cj6*r11);
IkReal x4503=(cj5*r10*sj6);
IkReal x4504=((2.0)*r11*sj6);
IkReal x4505=(x4495*x4497);
IkReal x4506=((((-1.0)*x4494*x4501))+((x4495*x4500*x4504))+x4494+x4498+((x4494*x4495*x4496))+x4505+(((2.0)*x4499*x4502))+(((2.0)*x4499*x4503))+(((-1.0)*x4501*x4505))+(((-1.0)*x4500*x4504))+(((-1.0)*x4495*x4498))+((x4496*x4497)));
j4eval[0]=x4506;
j4eval[1]=IKsign(x4506);
j4eval[2]=((IKabs((x4499+x4503+x4502)))+(IKabs((x4500+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4507=r11*r11;
IkReal x4508=cj5*cj5;
IkReal x4509=cj6*cj6;
IkReal x4510=r10*r10;
IkReal x4511=r12*r12;
IkReal x4512=(r10*sj6);
IkReal x4513=(r12*sj5);
IkReal x4514=((1.0)*x4509);
IkReal x4515=(cj5*cj6*r11);
IkReal x4516=((2.0)*cj6*r11);
IkReal x4517=(x4508*x4510);
CheckValue<IkReal> x4518 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x4513+x4515+((cj5*x4512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4518.valid){
continue;
}
CheckValue<IkReal> x4519=IKPowWithIntegerCheck(IKsign((((x4507*x4508*x4509))+x4511+x4517+x4507+(((-1.0)*x4512*x4516))+((x4508*x4512*x4516))+(((2.0)*cj5*x4512*x4513))+(((-1.0)*x4508*x4511))+(((-1.0)*x4507*x4514))+(((-1.0)*x4514*x4517))+(((2.0)*x4513*x4515))+((x4509*x4510)))),-1);
if(!x4519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4518.value)+(((1.5707963267949)*(x4519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4520=IKsin(j4);
IkReal x4521=IKcos(j4);
IkReal x4522=(cj5*cj6);
IkReal x4523=(r11*sj6);
IkReal x4524=(cj6*r20);
IkReal x4525=(cj6*r10);
IkReal x4526=(cj5*sj6);
IkReal x4527=(r01*sj6);
IkReal x4528=(r21*sj6);
IkReal x4529=(cj6*r00);
IkReal x4530=((1.0)*x4521);
IkReal x4531=((1.0)*x4520);
IkReal x4532=(sj5*x4531);
evalcond[0]=(((x4521*x4524))+(((-1.0)*r21*x4522*x4531))+(((-1.0)*x4528*x4530))+(((-1.0)*r22*x4532))+(((-1.0)*r20*x4526*x4531)));
evalcond[1]=((((-1.0)*r11*x4522*x4531))+((x4521*x4525))+(((-1.0)*x4523*x4530))+(((-1.0)*r10*x4526*x4531))+(((-1.0)*r12*x4532)));
evalcond[2]=((((-1.0)*r22*sj5*x4530))+(((-1.0)*r21*x4522*x4530))+(((-1.0)*x4524*x4531))+(((-1.0)*r20*x4526*x4530))+((x4520*x4528)));
evalcond[3]=((((-1.0)*r02*sj5*x4530))+(((-1.0)*r01*x4522*x4530))+((x4520*x4527))+(((-1.0)*x4529*x4531))+(((-1.0)*r00*x4526*x4530)));
evalcond[4]=((-1.0)+((x4521*x4529))+(((-1.0)*r01*x4522*x4531))+(((-1.0)*x4527*x4530))+(((-1.0)*r02*x4532))+(((-1.0)*r00*x4526*x4531)));
evalcond[5]=((1.0)+(((-1.0)*r11*x4522*x4530))+(((-1.0)*x4525*x4531))+(((-1.0)*r12*sj5*x4530))+((x4520*x4523))+(((-1.0)*r10*x4526*x4530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4533=((1.0)*sj5);
CheckValue<IkReal> x4534 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4534.valid){
continue;
}
CheckValue<IkReal> x4535=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x4533))+(((-1.0)*cj6*r21*x4533)))),-1);
if(!x4535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4534.value)+(((1.5707963267949)*(x4535.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4536=IKsin(j4);
IkReal x4537=IKcos(j4);
IkReal x4538=(cj5*cj6);
IkReal x4539=(r11*sj6);
IkReal x4540=(cj6*r20);
IkReal x4541=(cj6*r10);
IkReal x4542=(cj5*sj6);
IkReal x4543=(r01*sj6);
IkReal x4544=(r21*sj6);
IkReal x4545=(cj6*r00);
IkReal x4546=((1.0)*x4537);
IkReal x4547=((1.0)*x4536);
IkReal x4548=(sj5*x4547);
evalcond[0]=((((-1.0)*r22*x4548))+((x4537*x4540))+(((-1.0)*x4544*x4546))+(((-1.0)*r21*x4538*x4547))+(((-1.0)*r20*x4542*x4547)));
evalcond[1]=((((-1.0)*r10*x4542*x4547))+((x4537*x4541))+(((-1.0)*r12*x4548))+(((-1.0)*x4539*x4546))+(((-1.0)*r11*x4538*x4547)));
evalcond[2]=((((-1.0)*r21*x4538*x4546))+(((-1.0)*r22*sj5*x4546))+(((-1.0)*x4540*x4547))+(((-1.0)*r20*x4542*x4546))+((x4536*x4544)));
evalcond[3]=((((-1.0)*r02*sj5*x4546))+(((-1.0)*x4545*x4547))+((x4536*x4543))+(((-1.0)*r00*x4542*x4546))+(((-1.0)*r01*x4538*x4546)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x4548))+((x4537*x4545))+(((-1.0)*x4543*x4546))+(((-1.0)*r00*x4542*x4547))+(((-1.0)*r01*x4538*x4547)));
evalcond[5]=((1.0)+(((-1.0)*r10*x4542*x4546))+((x4536*x4539))+(((-1.0)*r12*sj5*x4546))+(((-1.0)*x4541*x4547))+(((-1.0)*r11*x4538*x4546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4549 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4549.valid){
continue;
}
CheckValue<IkReal> x4550=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x4550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4549.value)+(((1.5707963267949)*(x4550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4551=IKsin(j4);
IkReal x4552=IKcos(j4);
IkReal x4553=(cj5*cj6);
IkReal x4554=(r11*sj6);
IkReal x4555=(cj6*r20);
IkReal x4556=(cj6*r10);
IkReal x4557=(cj5*sj6);
IkReal x4558=(r01*sj6);
IkReal x4559=(r21*sj6);
IkReal x4560=(cj6*r00);
IkReal x4561=((1.0)*x4552);
IkReal x4562=((1.0)*x4551);
IkReal x4563=(sj5*x4562);
evalcond[0]=(((x4552*x4555))+(((-1.0)*r21*x4553*x4562))+(((-1.0)*r22*x4563))+(((-1.0)*x4559*x4561))+(((-1.0)*r20*x4557*x4562)));
evalcond[1]=((((-1.0)*r10*x4557*x4562))+((x4552*x4556))+(((-1.0)*r12*x4563))+(((-1.0)*r11*x4553*x4562))+(((-1.0)*x4554*x4561)));
evalcond[2]=(((x4551*x4559))+(((-1.0)*r22*sj5*x4561))+(((-1.0)*x4555*x4562))+(((-1.0)*r21*x4553*x4561))+(((-1.0)*r20*x4557*x4561)));
evalcond[3]=(((x4551*x4558))+(((-1.0)*r02*sj5*x4561))+(((-1.0)*x4560*x4562))+(((-1.0)*r01*x4553*x4561))+(((-1.0)*r00*x4557*x4561)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x4563))+((x4552*x4560))+(((-1.0)*x4558*x4561))+(((-1.0)*r01*x4553*x4562))+(((-1.0)*r00*x4557*x4562)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x4561))+(((-1.0)*x4556*x4562))+(((-1.0)*r10*x4557*x4561))+((x4551*x4554))+(((-1.0)*r11*x4553*x4561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4564=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4564;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4565=((1.0)*sj6);
IkReal x4566=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4565)));
j4eval[0]=x4566;
j4eval[1]=IKsign(x4566);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4565))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4567=cj6*cj6;
IkReal x4568=cj5*cj5;
IkReal x4569=r10*r10;
IkReal x4570=r11*r11;
IkReal x4571=r12*r12;
IkReal x4572=(r10*sj6);
IkReal x4573=(r12*sj5);
IkReal x4574=((2.0)*cj6*r11);
IkReal x4575=((1.0)*x4569);
IkReal x4576=(x4567*x4570);
IkReal x4577=((((-1.0)*x4567*x4575))+x4576+(((-1.0)*x4568*x4572*x4574))+(((-1.0)*cj5*x4573*x4574))+(((-1.0)*x4568*x4576))+((x4568*x4571))+(((-2.0)*cj5*x4572*x4573))+(((-1.0)*x4568*x4575))+((x4567*x4568*x4569))+(((-1.0)*x4570))+(((-1.0)*x4571))+((x4572*x4574)));
j4eval[0]=x4577;
j4eval[1]=((IKabs((x4573+((cj5*x4572))+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4578=cj6*cj6;
IkReal x4579=cj5*cj5;
IkReal x4580=r10*r10;
IkReal x4581=r11*r11;
IkReal x4582=r12*r12;
IkReal x4583=(r10*sj6);
IkReal x4584=(r12*sj5);
IkReal x4585=((2.0)*cj6*r11);
IkReal x4586=(x4578*x4581);
IkReal x4587=(x4579*x4580);
CheckValue<IkReal> x4588=IKPowWithIntegerCheck(IKsign((((x4578*x4587))+(((-2.0)*cj5*x4583*x4584))+x4586+(((-1.0)*x4578*x4580))+(((-1.0)*x4582))+(((-1.0)*x4587))+(((-1.0)*x4581))+((x4579*x4582))+((x4583*x4585))+(((-1.0)*cj5*x4584*x4585))+(((-1.0)*x4579*x4586))+(((-1.0)*x4579*x4583*x4585)))),-1);
if(!x4588.valid){
continue;
}
CheckValue<IkReal> x4589 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x4584+((cj5*x4583))+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4588.value)))+(x4589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4590=IKsin(j4);
IkReal x4591=IKcos(j4);
IkReal x4592=(cj5*cj6);
IkReal x4593=(r11*sj6);
IkReal x4594=(cj6*r20);
IkReal x4595=(cj6*r10);
IkReal x4596=(cj5*sj6);
IkReal x4597=(r01*sj6);
IkReal x4598=(r21*sj6);
IkReal x4599=(cj6*r00);
IkReal x4600=((1.0)*x4591);
IkReal x4601=((1.0)*x4590);
IkReal x4602=(sj5*x4601);
evalcond[0]=((((-1.0)*r21*x4592*x4601))+(((-1.0)*r20*x4596*x4601))+((x4591*x4594))+(((-1.0)*x4598*x4600))+(((-1.0)*r22*x4602)));
evalcond[1]=((((-1.0)*x4593*x4600))+(((-1.0)*r11*x4592*x4601))+(((-1.0)*r12*x4602))+((x4591*x4595))+(((-1.0)*r10*x4596*x4601)));
evalcond[2]=(((x4590*x4598))+(((-1.0)*r21*x4592*x4600))+(((-1.0)*r20*x4596*x4600))+(((-1.0)*x4594*x4601))+(((-1.0)*r22*sj5*x4600)));
evalcond[3]=(((x4590*x4597))+(((-1.0)*r00*x4596*x4600))+(((-1.0)*x4599*x4601))+(((-1.0)*r02*sj5*x4600))+(((-1.0)*r01*x4592*x4600)));
evalcond[4]=((1.0)+(((-1.0)*r00*x4596*x4601))+(((-1.0)*r02*x4602))+(((-1.0)*x4597*x4600))+((x4591*x4599))+(((-1.0)*r01*x4592*x4601)));
evalcond[5]=((-1.0)+((x4590*x4593))+(((-1.0)*r12*sj5*x4600))+(((-1.0)*x4595*x4601))+(((-1.0)*r11*x4592*x4600))+(((-1.0)*r10*x4596*x4600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4603=((1.0)*sj6);
CheckValue<IkReal> x4604 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4603))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4604.valid){
continue;
}
CheckValue<IkReal> x4605=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x4603))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x4605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4604.value)+(((1.5707963267949)*(x4605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4606=IKsin(j4);
IkReal x4607=IKcos(j4);
IkReal x4608=(cj5*cj6);
IkReal x4609=(r11*sj6);
IkReal x4610=(cj6*r20);
IkReal x4611=(cj6*r10);
IkReal x4612=(cj5*sj6);
IkReal x4613=(r01*sj6);
IkReal x4614=(r21*sj6);
IkReal x4615=(cj6*r00);
IkReal x4616=((1.0)*x4607);
IkReal x4617=((1.0)*x4606);
IkReal x4618=(sj5*x4617);
evalcond[0]=((((-1.0)*r20*x4612*x4617))+(((-1.0)*x4614*x4616))+(((-1.0)*r22*x4618))+(((-1.0)*r21*x4608*x4617))+((x4607*x4610)));
evalcond[1]=((((-1.0)*r11*x4608*x4617))+(((-1.0)*r12*x4618))+(((-1.0)*x4609*x4616))+(((-1.0)*r10*x4612*x4617))+((x4607*x4611)));
evalcond[2]=((((-1.0)*r20*x4612*x4616))+(((-1.0)*r22*sj5*x4616))+((x4606*x4614))+(((-1.0)*r21*x4608*x4616))+(((-1.0)*x4610*x4617)));
evalcond[3]=((((-1.0)*r01*x4608*x4616))+(((-1.0)*r00*x4612*x4616))+(((-1.0)*x4615*x4617))+((x4606*x4613))+(((-1.0)*r02*sj5*x4616)));
evalcond[4]=((1.0)+(((-1.0)*r02*x4618))+(((-1.0)*r01*x4608*x4617))+(((-1.0)*r00*x4612*x4617))+((x4607*x4615))+(((-1.0)*x4613*x4616)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x4608*x4616))+(((-1.0)*r12*sj5*x4616))+((x4606*x4609))+(((-1.0)*x4611*x4617))+(((-1.0)*r10*x4612*x4616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4619=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4619.valid){
continue;
}
CheckValue<IkReal> x4620 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4619.value)))+(x4620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4621=IKsin(j4);
IkReal x4622=IKcos(j4);
IkReal x4623=(cj5*cj6);
IkReal x4624=(r11*sj6);
IkReal x4625=(cj6*r20);
IkReal x4626=(cj6*r10);
IkReal x4627=(cj5*sj6);
IkReal x4628=(r01*sj6);
IkReal x4629=(r21*sj6);
IkReal x4630=(cj6*r00);
IkReal x4631=((1.0)*x4622);
IkReal x4632=((1.0)*x4621);
IkReal x4633=(sj5*x4632);
evalcond[0]=((((-1.0)*r21*x4623*x4632))+((x4622*x4625))+(((-1.0)*x4629*x4631))+(((-1.0)*r20*x4627*x4632))+(((-1.0)*r22*x4633)));
evalcond[1]=((((-1.0)*r11*x4623*x4632))+(((-1.0)*r10*x4627*x4632))+(((-1.0)*x4624*x4631))+((x4622*x4626))+(((-1.0)*r12*x4633)));
evalcond[2]=((((-1.0)*r21*x4623*x4631))+(((-1.0)*r22*sj5*x4631))+((x4621*x4629))+(((-1.0)*x4625*x4632))+(((-1.0)*r20*x4627*x4631)));
evalcond[3]=((((-1.0)*r00*x4627*x4631))+(((-1.0)*r01*x4623*x4631))+((x4621*x4628))+(((-1.0)*x4630*x4632))+(((-1.0)*r02*sj5*x4631)));
evalcond[4]=((1.0)+(((-1.0)*r02*x4633))+(((-1.0)*r00*x4627*x4632))+(((-1.0)*r01*x4623*x4632))+(((-1.0)*x4628*x4631))+((x4622*x4630)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x4623*x4631))+(((-1.0)*r10*x4627*x4631))+((x4621*x4624))+(((-1.0)*x4626*x4632))+(((-1.0)*r12*sj5*x4631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4634=cj6*cj6;
IkReal x4635=cj5*cj5;
IkReal x4636=((1.0)*r11);
IkReal x4637=(cj5*sj0);
IkReal x4638=(cj6*r21);
IkReal x4639=(r22*sj5);
IkReal x4640=(r20*sj6);
IkReal x4641=(r12*r22);
IkReal x4642=((1.0)*sj6);
IkReal x4643=(r21*x4634);
IkReal x4644=(r10*x4635);
IkReal x4645=(r11*x4635);
IkReal x4646=(r20*x4634);
IkReal x4647=(cj5*r12*sj5);
CheckValue<IkReal> x4648=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4636*x4643))+(((-1.0)*cj6*x4636*x4640))+((r11*r21))+((x4638*x4647))+(((-1.0)*x4635*x4641))+x4641+((r10*x4646))+((cj6*x4640*x4645))+((x4643*x4645))+(((-1.0)*r10*x4638*x4642))+((cj5*cj6*r11*x4639))+((cj5*r10*sj6*x4639))+((sj6*x4638*x4644))+((r20*x4644))+(((-1.0)*x4644*x4646))+((x4640*x4647)))),-1);
if(!x4648.valid){
continue;
}
CheckValue<IkReal> x4649 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x4642))+((cj6*r20*sj0)))),IkReal((((sj0*x4639))+((x4637*x4640))+((x4637*x4638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4648.value)))+(x4649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4650=IKsin(j4);
IkReal x4651=IKcos(j4);
IkReal x4652=(cj5*cj6);
IkReal x4653=(r11*sj6);
IkReal x4654=(cj6*r20);
IkReal x4655=(cj5*sj6);
IkReal x4656=(cj6*r10);
IkReal x4657=(r01*sj6);
IkReal x4658=(r21*sj6);
IkReal x4659=(cj6*r00);
IkReal x4660=((1.0)*x4651);
IkReal x4661=((1.0)*x4650);
IkReal x4662=(sj5*x4661);
evalcond[0]=((((-1.0)*r21*x4652*x4661))+(((-1.0)*x4658*x4660))+(((-1.0)*r22*x4662))+(((-1.0)*r20*x4655*x4661))+((x4651*x4654)));
evalcond[1]=((((-1.0)*x4654*x4661))+((x4650*x4658))+(((-1.0)*r21*x4652*x4660))+(((-1.0)*r22*sj5*x4660))+(((-1.0)*r20*x4655*x4660)));
evalcond[2]=((((-1.0)*r10*x4655*x4661))+cj0+(((-1.0)*x4653*x4660))+(((-1.0)*r12*x4662))+(((-1.0)*r11*x4652*x4661))+((x4651*x4656)));
evalcond[3]=((((-1.0)*r01*x4652*x4660))+((x4650*x4657))+(((-1.0)*x4659*x4661))+cj0+(((-1.0)*r00*x4655*x4660))+(((-1.0)*r02*sj5*x4660)));
evalcond[4]=(((x4650*x4653))+sj0+(((-1.0)*x4656*x4661))+(((-1.0)*r10*x4655*x4660))+(((-1.0)*r12*sj5*x4660))+(((-1.0)*r11*x4652*x4660)));
evalcond[5]=((((-1.0)*r01*x4652*x4661))+(((-1.0)*sj0))+(((-1.0)*r00*x4655*x4661))+(((-1.0)*x4657*x4660))+(((-1.0)*r02*x4662))+((x4651*x4659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4663=cj5*cj5;
IkReal x4664=cj6*cj6;
IkReal x4665=(r22*sj5);
IkReal x4666=(cj6*r21);
IkReal x4667=(r20*sj6);
IkReal x4668=((1.0)*sj6);
IkReal x4669=(cj0*cj5);
IkReal x4670=(r02*r22);
IkReal x4671=(cj6*r01);
IkReal x4672=(r00*sj6);
IkReal x4673=(cj5*r02*sj5);
IkReal x4674=(r01*x4663);
IkReal x4675=(r21*x4664);
IkReal x4676=(r00*r20*x4663);
CheckValue<IkReal> x4677=IKPowWithIntegerCheck(IKsign((((x4667*x4673))+(((-1.0)*x4664*x4676))+((r00*r20*x4664))+(((-1.0)*x4667*x4671))+(((-1.0)*r01*x4675))+x4676+x4670+((r01*r21))+((x4674*x4675))+((x4663*x4667*x4671))+((cj5*x4665*x4672))+((cj5*x4665*x4671))+(((-1.0)*x4663*x4670))+((x4666*x4673))+(((-1.0)*r00*x4666*x4668))+((x4663*x4666*x4672)))),-1);
if(!x4677.valid){
continue;
}
CheckValue<IkReal> x4678 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x4668)))),IkReal((((x4666*x4669))+((cj0*x4665))+((x4667*x4669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4677.value)))+(x4678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4679=IKsin(j4);
IkReal x4680=IKcos(j4);
IkReal x4681=(cj5*cj6);
IkReal x4682=(r11*sj6);
IkReal x4683=(cj6*r20);
IkReal x4684=(cj5*sj6);
IkReal x4685=(cj6*r10);
IkReal x4686=(r01*sj6);
IkReal x4687=(r21*sj6);
IkReal x4688=(cj6*r00);
IkReal x4689=((1.0)*x4680);
IkReal x4690=((1.0)*x4679);
IkReal x4691=(sj5*x4690);
evalcond[0]=((((-1.0)*x4687*x4689))+((x4680*x4683))+(((-1.0)*r21*x4681*x4690))+(((-1.0)*r20*x4684*x4690))+(((-1.0)*r22*x4691)));
evalcond[1]=((((-1.0)*r22*sj5*x4689))+(((-1.0)*r21*x4681*x4689))+(((-1.0)*x4683*x4690))+(((-1.0)*r20*x4684*x4689))+((x4679*x4687)));
evalcond[2]=((((-1.0)*r12*x4691))+(((-1.0)*r10*x4684*x4690))+((x4680*x4685))+cj0+(((-1.0)*x4682*x4689))+(((-1.0)*r11*x4681*x4690)));
evalcond[3]=((((-1.0)*r02*sj5*x4689))+cj0+(((-1.0)*x4688*x4690))+(((-1.0)*r00*x4684*x4689))+(((-1.0)*r01*x4681*x4689))+((x4679*x4686)));
evalcond[4]=((((-1.0)*r12*sj5*x4689))+sj0+(((-1.0)*r10*x4684*x4689))+(((-1.0)*r11*x4681*x4689))+((x4679*x4682))+(((-1.0)*x4685*x4690)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4686*x4689))+((x4680*x4688))+(((-1.0)*r01*x4681*x4690))+(((-1.0)*r00*x4684*x4690))+(((-1.0)*r02*x4691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4692=(cj0*sj6);
IkReal x4693=(cj0*cj6);
CheckValue<IkReal> x4694 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4692))+((r20*x4693)))),IkReal((((cj5*r20*x4692))+((cj5*r21*x4693))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4694.valid){
continue;
}
CheckValue<IkReal> x4695=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4694.value)+(((1.5707963267949)*(x4695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4696=IKsin(j4);
IkReal x4697=IKcos(j4);
IkReal x4698=(cj5*cj6);
IkReal x4699=(r11*sj6);
IkReal x4700=(cj6*r20);
IkReal x4701=(cj5*sj6);
IkReal x4702=(cj6*r10);
IkReal x4703=(r01*sj6);
IkReal x4704=(r21*sj6);
IkReal x4705=(cj6*r00);
IkReal x4706=((1.0)*x4697);
IkReal x4707=((1.0)*x4696);
IkReal x4708=(sj5*x4707);
evalcond[0]=((((-1.0)*r22*x4708))+(((-1.0)*r21*x4698*x4707))+((x4697*x4700))+(((-1.0)*x4704*x4706))+(((-1.0)*r20*x4701*x4707)));
evalcond[1]=((((-1.0)*x4700*x4707))+(((-1.0)*r21*x4698*x4706))+(((-1.0)*r22*sj5*x4706))+((x4696*x4704))+(((-1.0)*r20*x4701*x4706)));
evalcond[2]=((((-1.0)*r11*x4698*x4707))+cj0+(((-1.0)*r12*x4708))+((x4697*x4702))+(((-1.0)*r10*x4701*x4707))+(((-1.0)*x4699*x4706)));
evalcond[3]=((((-1.0)*r02*sj5*x4706))+cj0+(((-1.0)*r00*x4701*x4706))+((x4696*x4703))+(((-1.0)*x4705*x4707))+(((-1.0)*r01*x4698*x4706)));
evalcond[4]=(((x4696*x4699))+(((-1.0)*r11*x4698*x4706))+sj0+(((-1.0)*x4702*x4707))+(((-1.0)*r12*sj5*x4706))+(((-1.0)*r10*x4701*x4706)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4708))+(((-1.0)*x4703*x4706))+(((-1.0)*r00*x4701*x4707))+((x4697*x4705))+(((-1.0)*r01*x4698*x4707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4709=((1.26697583102024)*cj5);
IkReal x4710=((0.0338501117053686)*cj5);
IkReal x4711=(r00*sj6);
IkReal x4712=(r10*sj6);
IkReal x4713=((1.26697583102024)*sj5);
IkReal x4714=(cj6*r11);
IkReal x4715=((0.0338501117053686)*sj5);
IkReal x4716=(cj6*r01);
if( IKabs(((((-1.0)*x4712*x4713))+(((-3.38501117053686)*py))+((x4710*x4712))+((x4710*x4714))+((r12*x4715))+(((-1.0)*x4713*x4714))+((r12*x4709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.38501117053686)*px))+(((-1.0)*x4711*x4713))+((x4710*x4711))+((x4710*x4716))+((r02*x4709))+((r02*x4715))+(((-1.0)*x4713*x4716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4712*x4713))+(((-3.38501117053686)*py))+((x4710*x4712))+((x4710*x4714))+((r12*x4715))+(((-1.0)*x4713*x4714))+((r12*x4709))))+IKsqr(((((-3.38501117053686)*px))+(((-1.0)*x4711*x4713))+((x4710*x4711))+((x4710*x4716))+((r02*x4709))+((r02*x4715))+(((-1.0)*x4713*x4716))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x4712*x4713))+(((-3.38501117053686)*py))+((x4710*x4712))+((x4710*x4714))+((r12*x4715))+(((-1.0)*x4713*x4714))+((r12*x4709))), ((((-3.38501117053686)*px))+(((-1.0)*x4711*x4713))+((x4710*x4711))+((x4710*x4716))+((r02*x4709))+((r02*x4715))+(((-1.0)*x4713*x4716))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4717=((0.01)*cj5);
IkReal x4718=(cj6*r01);
IkReal x4719=(r00*sj6);
IkReal x4720=((0.01)*sj5);
IkReal x4721=((0.37429)*sj5);
IkReal x4722=((0.37429)*cj5);
IkReal x4723=(r10*sj6);
IkReal x4724=(cj6*r11);
evalcond[0]=(((x4717*x4719))+((x4717*x4718))+((r02*x4720))+((r02*x4722))+(((-1.0)*px))+(((-1.0)*x4719*x4721))+(((-1.0)*x4718*x4721))+(((-0.29542)*(IKcos(j0)))));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+(((-1.0)*py))+((x4717*x4724))+((x4717*x4723))+((r12*x4720))+((r12*x4722))+(((-1.0)*x4721*x4724))+(((-1.0)*x4721*x4723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4725=(r20*sj0);
IkReal x4726=((1.0)*sj5);
IkReal x4727=(r21*sj0);
IkReal x4728=(((cj5*r12))+(((-1.0)*cj6*r11*x4726))+(((-1.0)*r10*sj6*x4726)));
j4eval[0]=x4728;
j4eval[1]=IKsign(x4728);
j4eval[2]=((IKabs((((r22*sj0*sj5))+((cj5*cj6*x4727))+((cj5*sj6*x4725)))))+(IKabs((((cj6*x4725))+(((-1.0)*sj6*x4727))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4729=cj5*cj5;
IkReal x4730=cj6*cj6;
IkReal x4731=(r00*r20);
IkReal x4732=(r02*r22);
IkReal x4733=(r22*sj5);
IkReal x4734=(cj6*r21);
IkReal x4735=(r00*sj6);
IkReal x4736=(r20*sj6);
IkReal x4737=(cj6*r01);
IkReal x4738=(cj0*cj5);
IkReal x4739=((1.0)*x4729);
IkReal x4740=(cj5*r02*sj5);
IkReal x4741=(r01*r21*x4730);
IkReal x4742=((((-1.0)*x4734*x4735))+((x4730*x4731))+((x4729*x4741))+(((-1.0)*x4730*x4731*x4739))+((x4734*x4740))+((x4729*x4731))+((cj5*x4733*x4737))+((cj5*x4733*x4735))+((r01*r21))+((x4729*x4736*x4737))+x4732+(((-1.0)*x4732*x4739))+(((-1.0)*x4736*x4737))+((x4736*x4740))+((x4729*x4734*x4735))+(((-1.0)*x4741)));
j4eval[0]=x4742;
j4eval[1]=IKsign(x4742);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x4734*x4738))+((cj0*x4733))+((x4736*x4738))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4743=cj6*cj6;
IkReal x4744=cj5*cj5;
IkReal x4745=(r12*sj5);
IkReal x4746=(r22*sj5);
IkReal x4747=((1.0)*r11);
IkReal x4748=(r20*sj0);
IkReal x4749=(r10*r20);
IkReal x4750=(cj5*sj6);
IkReal x4751=(cj6*r10);
IkReal x4752=(r12*r22);
IkReal x4753=(cj5*cj6*r21);
IkReal x4754=(r21*x4743);
IkReal x4755=(cj6*r20*sj6);
IkReal x4756=(r11*x4744);
IkReal x4757=((1.0)*r21*sj6);
IkReal x4758=((1.0)*x4744);
IkReal x4759=(((x4745*x4753))+((r11*r21))+((x4754*x4756))+((x4755*x4756))+x4752+((r10*x4746*x4750))+(((-1.0)*x4752*x4758))+(((-1.0)*x4743*x4749*x4758))+(((-1.0)*x4751*x4757))+((cj5*cj6*r11*x4746))+((x4743*x4749))+(((-1.0)*x4747*x4754))+(((-1.0)*x4747*x4755))+((r20*x4745*x4750))+((r21*sj6*x4744*x4751))+((x4744*x4749)));
j4eval[0]=x4759;
j4eval[1]=IKsign(x4759);
j4eval[2]=((IKabs((((cj6*x4748))+(((-1.0)*sj0*x4757)))))+(IKabs((((x4748*x4750))+((sj0*x4753))+((sj0*x4746))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4760=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4760;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x4760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4761=((1.0)*sj6);
IkReal x4762=((((-1.0)*r00*sj5*x4761))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x4762;
j4eval[1]=IKsign(x4762);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4761))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4763=cj6*cj6;
IkReal x4764=r01*r01;
IkReal x4765=cj5*cj5;
IkReal x4766=r00*r00;
IkReal x4767=r02*r02;
IkReal x4768=(cj6*r00);
IkReal x4769=(r02*sj5);
IkReal x4770=(cj5*cj6*r01);
IkReal x4771=((2.0)*r01*sj6);
IkReal x4772=(cj5*r00*sj6);
IkReal x4773=((1.0)*x4765);
IkReal x4774=(x4763*x4766);
IkReal x4775=(x4763*x4764);
IkReal x4776=((((-1.0)*x4775))+(((-1.0)*x4773*x4774))+(((-1.0)*x4767*x4773))+((x4765*x4775))+x4774+x4764+x4767+(((2.0)*x4769*x4772))+(((2.0)*x4769*x4770))+(((-1.0)*x4768*x4771))+((x4765*x4768*x4771))+((x4765*x4766)));
j4eval[0]=x4776;
j4eval[1]=((IKabs((x4772+x4770+x4769)))+(IKabs(((((-1.0)*r01*sj6))+x4768))));
j4eval[2]=IKsign(x4776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4777=cj6*cj6;
IkReal x4778=r01*r01;
IkReal x4779=cj5*cj5;
IkReal x4780=r00*r00;
IkReal x4781=r02*r02;
IkReal x4782=(cj6*r00);
IkReal x4783=((2.0)*r01);
IkReal x4784=(cj5*cj6);
IkReal x4785=(r02*sj5);
IkReal x4786=(cj5*r00*sj6);
IkReal x4787=(x4779*x4780);
IkReal x4788=(x4777*x4778);
CheckValue<IkReal> x4789=IKPowWithIntegerCheck(IKsign((((x4779*x4788))+(((-1.0)*x4777*x4787))+((x4777*x4780))+((sj6*x4779*x4782*x4783))+x4778+x4787+x4781+(((2.0)*x4785*x4786))+(((-1.0)*x4779*x4781))+(((-1.0)*x4788))+((x4783*x4784*x4785))+(((-1.0)*sj6*x4782*x4783)))),-1);
if(!x4789.valid){
continue;
}
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x4782)),IkReal((((r01*x4784))+x4786+x4785)),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4789.value)))+(x4790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4791=IKsin(j4);
IkReal x4792=IKcos(j4);
IkReal x4793=(cj5*cj6);
IkReal x4794=(r11*sj6);
IkReal x4795=(cj6*r20);
IkReal x4796=(cj6*r10);
IkReal x4797=(cj5*sj6);
IkReal x4798=(r21*sj6);
IkReal x4799=(cj6*r00);
IkReal x4800=(r01*sj6);
IkReal x4801=((1.0)*x4792);
IkReal x4802=((1.0)*x4791);
IkReal x4803=(sj5*x4802);
evalcond[0]=((((-1.0)*r21*x4793*x4802))+(((-1.0)*r22*x4803))+((x4792*x4795))+(((-1.0)*x4798*x4801))+(((-1.0)*r20*x4797*x4802)));
evalcond[1]=((((-1.0)*x4800*x4801))+((x4792*x4799))+(((-1.0)*r02*x4803))+(((-1.0)*r00*x4797*x4802))+(((-1.0)*r01*x4793*x4802)));
evalcond[2]=((((-1.0)*r21*x4793*x4801))+((x4791*x4798))+(((-1.0)*r22*sj5*x4801))+(((-1.0)*x4795*x4802))+(((-1.0)*r20*x4797*x4801)));
evalcond[3]=((((-1.0)*r10*x4797*x4801))+(((-1.0)*x4796*x4802))+(((-1.0)*r11*x4793*x4801))+((x4791*x4794))+(((-1.0)*r12*sj5*x4801)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x4797*x4802))+((x4792*x4796))+(((-1.0)*r11*x4793*x4802))+(((-1.0)*r12*x4803))+(((-1.0)*x4794*x4801)));
evalcond[5]=((1.0)+((x4791*x4800))+(((-1.0)*x4799*x4802))+(((-1.0)*r00*x4797*x4801))+(((-1.0)*r02*sj5*x4801))+(((-1.0)*r01*x4793*x4801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4804=((1.0)*sj6);
CheckValue<IkReal> x4805 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4804))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4805.valid){
continue;
}
CheckValue<IkReal> x4806=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x4804))+((cj5*r02)))),-1);
if(!x4806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4805.value)+(((1.5707963267949)*(x4806.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4807=IKsin(j4);
IkReal x4808=IKcos(j4);
IkReal x4809=(cj5*cj6);
IkReal x4810=(r11*sj6);
IkReal x4811=(cj6*r20);
IkReal x4812=(cj6*r10);
IkReal x4813=(cj5*sj6);
IkReal x4814=(r21*sj6);
IkReal x4815=(cj6*r00);
IkReal x4816=(r01*sj6);
IkReal x4817=((1.0)*x4808);
IkReal x4818=((1.0)*x4807);
IkReal x4819=(sj5*x4818);
evalcond[0]=((((-1.0)*x4814*x4817))+((x4808*x4811))+(((-1.0)*r21*x4809*x4818))+(((-1.0)*r22*x4819))+(((-1.0)*r20*x4813*x4818)));
evalcond[1]=(((x4808*x4815))+(((-1.0)*r02*x4819))+(((-1.0)*x4816*x4817))+(((-1.0)*r00*x4813*x4818))+(((-1.0)*r01*x4809*x4818)));
evalcond[2]=((((-1.0)*x4811*x4818))+((x4807*x4814))+(((-1.0)*r22*sj5*x4817))+(((-1.0)*r21*x4809*x4817))+(((-1.0)*r20*x4813*x4817)));
evalcond[3]=(((x4807*x4810))+(((-1.0)*r11*x4809*x4817))+(((-1.0)*r10*x4813*x4817))+(((-1.0)*r12*sj5*x4817))+(((-1.0)*x4812*x4818)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4809*x4818))+((x4808*x4812))+(((-1.0)*r10*x4813*x4818))+(((-1.0)*x4810*x4817))+(((-1.0)*r12*x4819)));
evalcond[5]=((1.0)+(((-1.0)*x4815*x4818))+((x4807*x4816))+(((-1.0)*r02*sj5*x4817))+(((-1.0)*r00*x4813*x4817))+(((-1.0)*r01*x4809*x4817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4820=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4820.valid){
continue;
}
CheckValue<IkReal> x4821 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4820.value)))+(x4821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4822=IKsin(j4);
IkReal x4823=IKcos(j4);
IkReal x4824=(cj5*cj6);
IkReal x4825=(r11*sj6);
IkReal x4826=(cj6*r20);
IkReal x4827=(cj6*r10);
IkReal x4828=(cj5*sj6);
IkReal x4829=(r21*sj6);
IkReal x4830=(cj6*r00);
IkReal x4831=(r01*sj6);
IkReal x4832=((1.0)*x4823);
IkReal x4833=((1.0)*x4822);
IkReal x4834=(sj5*x4833);
evalcond[0]=((((-1.0)*r20*x4828*x4833))+((x4823*x4826))+(((-1.0)*x4829*x4832))+(((-1.0)*r22*x4834))+(((-1.0)*r21*x4824*x4833)));
evalcond[1]=((((-1.0)*r01*x4824*x4833))+(((-1.0)*x4831*x4832))+((x4823*x4830))+(((-1.0)*r02*x4834))+(((-1.0)*r00*x4828*x4833)));
evalcond[2]=((((-1.0)*r20*x4828*x4832))+(((-1.0)*r22*sj5*x4832))+((x4822*x4829))+(((-1.0)*x4826*x4833))+(((-1.0)*r21*x4824*x4832)));
evalcond[3]=((((-1.0)*r11*x4824*x4832))+((x4822*x4825))+(((-1.0)*x4827*x4833))+(((-1.0)*r12*sj5*x4832))+(((-1.0)*r10*x4828*x4832)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4824*x4833))+((x4823*x4827))+(((-1.0)*r12*x4834))+(((-1.0)*x4825*x4832))+(((-1.0)*r10*x4828*x4833)));
evalcond[5]=((1.0)+(((-1.0)*r01*x4824*x4832))+((x4822*x4831))+(((-1.0)*x4830*x4833))+(((-1.0)*r02*sj5*x4832))+(((-1.0)*r00*x4828*x4832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4835=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4835;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4836=((1.0)*sj5);
IkReal x4837=((((-1.0)*r20*sj6*x4836))+((cj5*r22))+(((-1.0)*cj6*r21*x4836)));
j4eval[0]=x4837;
j4eval[1]=IKsign(x4837);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4838=cj6*cj6;
IkReal x4839=cj5*cj5;
IkReal x4840=r00*r00;
IkReal x4841=r01*r01;
IkReal x4842=r02*r02;
IkReal x4843=(cj6*r00);
IkReal x4844=(cj5*cj6*r01);
IkReal x4845=((2.0)*r02*sj5);
IkReal x4846=((1.0)*x4838);
IkReal x4847=((2.0)*r01*sj6);
IkReal x4848=(cj5*r00*sj6);
IkReal x4849=(x4839*x4840);
IkReal x4850=((((-1.0)*x4839*x4843*x4847))+(((-1.0)*x4844*x4845))+(((-1.0)*x4840*x4846))+(((-1.0)*x4839*x4841*x4846))+((x4838*x4841))+((x4838*x4849))+(((-1.0)*x4845*x4848))+((x4839*x4842))+(((-1.0)*x4841))+(((-1.0)*x4842))+(((-1.0)*x4849))+((x4843*x4847)));
j4eval[0]=x4850;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x4843)))+(IKabs((((r02*sj5))+x4848+x4844))));
j4eval[2]=IKsign(x4850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4851=cj6*cj6;
IkReal x4852=cj5*cj5;
IkReal x4853=r00*r00;
IkReal x4854=r01*r01;
IkReal x4855=r02*r02;
IkReal x4856=(cj6*r00);
IkReal x4857=(cj5*cj6*r01);
IkReal x4858=((2.0)*r02*sj5);
IkReal x4859=((1.0)*x4851);
IkReal x4860=((2.0)*r01*sj6);
IkReal x4861=(cj5*r00*sj6);
IkReal x4862=(x4852*x4853);
CheckValue<IkReal> x4863 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x4856)),IkReal((((r02*sj5))+x4857+x4861)),IKFAST_ATAN2_MAGTHRESH);
if(!x4863.valid){
continue;
}
CheckValue<IkReal> x4864=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4853*x4859))+(((-1.0)*x4858*x4861))+(((-1.0)*x4852*x4856*x4860))+(((-1.0)*x4857*x4858))+(((-1.0)*x4855))+(((-1.0)*x4854))+(((-1.0)*x4862))+(((-1.0)*x4852*x4854*x4859))+((x4856*x4860))+((x4851*x4862))+((x4852*x4855))+((x4851*x4854)))),-1);
if(!x4864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4863.value)+(((1.5707963267949)*(x4864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4865=IKsin(j4);
IkReal x4866=IKcos(j4);
IkReal x4867=(cj5*cj6);
IkReal x4868=(r11*sj6);
IkReal x4869=(cj6*r20);
IkReal x4870=(cj6*r10);
IkReal x4871=(cj5*sj6);
IkReal x4872=(r21*sj6);
IkReal x4873=(cj6*r00);
IkReal x4874=(r01*sj6);
IkReal x4875=((1.0)*x4866);
IkReal x4876=((1.0)*x4865);
IkReal x4877=(sj5*x4876);
evalcond[0]=((((-1.0)*r21*x4867*x4876))+(((-1.0)*r22*x4877))+(((-1.0)*r20*x4871*x4876))+((x4866*x4869))+(((-1.0)*x4872*x4875)));
evalcond[1]=((((-1.0)*x4874*x4875))+((x4866*x4873))+(((-1.0)*r00*x4871*x4876))+(((-1.0)*r02*x4877))+(((-1.0)*r01*x4867*x4876)));
evalcond[2]=((((-1.0)*r21*x4867*x4875))+(((-1.0)*x4869*x4876))+(((-1.0)*r20*x4871*x4875))+((x4865*x4872))+(((-1.0)*r22*sj5*x4875)));
evalcond[3]=((((-1.0)*r10*x4871*x4875))+(((-1.0)*x4870*x4876))+(((-1.0)*r11*x4867*x4875))+((x4865*x4868))+(((-1.0)*r12*sj5*x4875)));
evalcond[4]=((1.0)+(((-1.0)*x4868*x4875))+(((-1.0)*r10*x4871*x4876))+((x4866*x4870))+(((-1.0)*r12*x4877))+(((-1.0)*r11*x4867*x4876)));
evalcond[5]=((-1.0)+((x4865*x4874))+(((-1.0)*r00*x4871*x4875))+(((-1.0)*r01*x4867*x4875))+(((-1.0)*x4873*x4876))+(((-1.0)*r02*sj5*x4875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4878=((1.0)*sj5);
CheckValue<IkReal> x4879=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x4878))+(((-1.0)*cj6*r21*x4878)))),-1);
if(!x4879.valid){
continue;
}
CheckValue<IkReal> x4880 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4879.value)))+(x4880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4881=IKsin(j4);
IkReal x4882=IKcos(j4);
IkReal x4883=(cj5*cj6);
IkReal x4884=(r11*sj6);
IkReal x4885=(cj6*r20);
IkReal x4886=(cj6*r10);
IkReal x4887=(cj5*sj6);
IkReal x4888=(r21*sj6);
IkReal x4889=(cj6*r00);
IkReal x4890=(r01*sj6);
IkReal x4891=((1.0)*x4882);
IkReal x4892=((1.0)*x4881);
IkReal x4893=(sj5*x4892);
evalcond[0]=((((-1.0)*x4888*x4891))+(((-1.0)*r20*x4887*x4892))+(((-1.0)*r21*x4883*x4892))+(((-1.0)*r22*x4893))+((x4882*x4885)));
evalcond[1]=((((-1.0)*r01*x4883*x4892))+(((-1.0)*r00*x4887*x4892))+(((-1.0)*r02*x4893))+(((-1.0)*x4890*x4891))+((x4882*x4889)));
evalcond[2]=((((-1.0)*r20*x4887*x4891))+(((-1.0)*x4885*x4892))+((x4881*x4888))+(((-1.0)*r21*x4883*x4891))+(((-1.0)*r22*sj5*x4891)));
evalcond[3]=((((-1.0)*r10*x4887*x4891))+(((-1.0)*x4886*x4892))+((x4881*x4884))+(((-1.0)*r11*x4883*x4891))+(((-1.0)*r12*sj5*x4891)));
evalcond[4]=((1.0)+(((-1.0)*r12*x4893))+(((-1.0)*r10*x4887*x4892))+(((-1.0)*x4884*x4891))+(((-1.0)*r11*x4883*x4892))+((x4882*x4886)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x4883*x4891))+(((-1.0)*r02*sj5*x4891))+(((-1.0)*r00*x4887*x4891))+(((-1.0)*x4889*x4892))+((x4881*x4890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4894 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4894.valid){
continue;
}
CheckValue<IkReal> x4895=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4894.value)+(((1.5707963267949)*(x4895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4896=IKsin(j4);
IkReal x4897=IKcos(j4);
IkReal x4898=(cj5*cj6);
IkReal x4899=(r11*sj6);
IkReal x4900=(cj6*r20);
IkReal x4901=(cj6*r10);
IkReal x4902=(cj5*sj6);
IkReal x4903=(r21*sj6);
IkReal x4904=(cj6*r00);
IkReal x4905=(r01*sj6);
IkReal x4906=((1.0)*x4897);
IkReal x4907=((1.0)*x4896);
IkReal x4908=(sj5*x4907);
evalcond[0]=((((-1.0)*x4903*x4906))+(((-1.0)*r20*x4902*x4907))+(((-1.0)*r21*x4898*x4907))+(((-1.0)*r22*x4908))+((x4897*x4900)));
evalcond[1]=((((-1.0)*r00*x4902*x4907))+(((-1.0)*x4905*x4906))+(((-1.0)*r02*x4908))+(((-1.0)*r01*x4898*x4907))+((x4897*x4904)));
evalcond[2]=(((x4896*x4903))+(((-1.0)*r20*x4902*x4906))+(((-1.0)*r21*x4898*x4906))+(((-1.0)*r22*sj5*x4906))+(((-1.0)*x4900*x4907)));
evalcond[3]=((((-1.0)*r11*x4898*x4906))+((x4896*x4899))+(((-1.0)*r12*sj5*x4906))+(((-1.0)*x4901*x4907))+(((-1.0)*r10*x4902*x4906)));
evalcond[4]=((1.0)+(((-1.0)*r12*x4908))+(((-1.0)*x4899*x4906))+(((-1.0)*r11*x4898*x4907))+((x4897*x4901))+(((-1.0)*r10*x4902*x4907)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x4902*x4906))+((x4896*x4905))+(((-1.0)*x4904*x4907))+(((-1.0)*r01*x4898*x4906))+(((-1.0)*r02*sj5*x4906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4909=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4909;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4910=((1.0)*sj6);
IkReal x4911=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4910)));
j4eval[0]=x4911;
j4eval[1]=IKsign(x4911);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x4910))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4912=r11*r11;
IkReal x4913=cj5*cj5;
IkReal x4914=cj6*cj6;
IkReal x4915=r10*r10;
IkReal x4916=r12*r12;
IkReal x4917=(r12*sj5);
IkReal x4918=(cj6*r10);
IkReal x4919=((1.0)*x4914);
IkReal x4920=(cj5*cj6*r11);
IkReal x4921=(cj5*r10*sj6);
IkReal x4922=((2.0)*r11*sj6);
IkReal x4923=(x4913*x4915);
IkReal x4924=((((-1.0)*x4912*x4919))+x4923+x4916+x4912+((x4913*x4918*x4922))+(((2.0)*x4917*x4921))+(((2.0)*x4917*x4920))+(((-1.0)*x4913*x4916))+(((-1.0)*x4918*x4922))+(((-1.0)*x4919*x4923))+((x4912*x4913*x4914))+((x4914*x4915)));
j4eval[0]=x4924;
j4eval[1]=IKsign(x4924);
j4eval[2]=((IKabs((x4921+x4920+x4917)))+(IKabs((x4918+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4925=r11*r11;
IkReal x4926=cj5*cj5;
IkReal x4927=cj6*cj6;
IkReal x4928=r10*r10;
IkReal x4929=r12*r12;
IkReal x4930=(r10*sj6);
IkReal x4931=(r12*sj5);
IkReal x4932=((1.0)*x4927);
IkReal x4933=(cj5*cj6*r11);
IkReal x4934=((2.0)*cj6*r11);
IkReal x4935=(x4926*x4928);
CheckValue<IkReal> x4936=IKPowWithIntegerCheck(IKsign(((((2.0)*x4931*x4933))+(((-1.0)*x4925*x4932))+x4935+x4925+x4929+(((2.0)*cj5*x4930*x4931))+((x4927*x4928))+(((-1.0)*x4932*x4935))+(((-1.0)*x4930*x4934))+(((-1.0)*x4926*x4929))+((x4925*x4926*x4927))+((x4926*x4930*x4934)))),-1);
if(!x4936.valid){
continue;
}
CheckValue<IkReal> x4937 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x4931+x4933+((cj5*x4930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4936.value)))+(x4937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4938=IKsin(j4);
IkReal x4939=IKcos(j4);
IkReal x4940=(cj5*cj6);
IkReal x4941=(r11*sj6);
IkReal x4942=(cj6*r20);
IkReal x4943=(cj6*r10);
IkReal x4944=(cj5*sj6);
IkReal x4945=(r01*sj6);
IkReal x4946=(r21*sj6);
IkReal x4947=(cj6*r00);
IkReal x4948=((1.0)*x4939);
IkReal x4949=((1.0)*x4938);
IkReal x4950=(sj5*x4949);
evalcond[0]=((((-1.0)*x4946*x4948))+(((-1.0)*r21*x4940*x4949))+((x4939*x4942))+(((-1.0)*r22*x4950))+(((-1.0)*r20*x4944*x4949)));
evalcond[1]=((((-1.0)*x4941*x4948))+(((-1.0)*r11*x4940*x4949))+(((-1.0)*r10*x4944*x4949))+((x4939*x4943))+(((-1.0)*r12*x4950)));
evalcond[2]=((((-1.0)*x4942*x4949))+(((-1.0)*r21*x4940*x4948))+(((-1.0)*r22*sj5*x4948))+((x4938*x4946))+(((-1.0)*r20*x4944*x4948)));
evalcond[3]=((((-1.0)*x4947*x4949))+(((-1.0)*r01*x4940*x4948))+(((-1.0)*r00*x4944*x4948))+((x4938*x4945))+(((-1.0)*r02*sj5*x4948)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4940*x4949))+((x4939*x4947))+(((-1.0)*x4945*x4948))+(((-1.0)*r02*x4950))+(((-1.0)*r00*x4944*x4949)));
evalcond[5]=((1.0)+(((-1.0)*x4943*x4949))+(((-1.0)*r11*x4940*x4948))+(((-1.0)*r10*x4944*x4948))+((x4938*x4941))+(((-1.0)*r12*sj5*x4948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4951=((1.0)*sj6);
CheckValue<IkReal> x4952 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4951))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4952.valid){
continue;
}
CheckValue<IkReal> x4953=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4951)))),-1);
if(!x4953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4952.value)+(((1.5707963267949)*(x4953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4954=IKsin(j4);
IkReal x4955=IKcos(j4);
IkReal x4956=(cj5*cj6);
IkReal x4957=(r11*sj6);
IkReal x4958=(cj6*r20);
IkReal x4959=(cj6*r10);
IkReal x4960=(cj5*sj6);
IkReal x4961=(r01*sj6);
IkReal x4962=(r21*sj6);
IkReal x4963=(cj6*r00);
IkReal x4964=((1.0)*x4955);
IkReal x4965=((1.0)*x4954);
IkReal x4966=(sj5*x4965);
evalcond[0]=((((-1.0)*r20*x4960*x4965))+(((-1.0)*r21*x4956*x4965))+(((-1.0)*r22*x4966))+(((-1.0)*x4962*x4964))+((x4955*x4958)));
evalcond[1]=((((-1.0)*x4957*x4964))+(((-1.0)*r11*x4956*x4965))+(((-1.0)*r12*x4966))+((x4955*x4959))+(((-1.0)*r10*x4960*x4965)));
evalcond[2]=((((-1.0)*r20*x4960*x4964))+(((-1.0)*x4958*x4965))+(((-1.0)*r22*sj5*x4964))+(((-1.0)*r21*x4956*x4964))+((x4954*x4962)));
evalcond[3]=((((-1.0)*r01*x4956*x4964))+((x4954*x4961))+(((-1.0)*x4963*x4965))+(((-1.0)*r00*x4960*x4964))+(((-1.0)*r02*sj5*x4964)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4956*x4965))+(((-1.0)*x4961*x4964))+(((-1.0)*r02*x4966))+((x4955*x4963))+(((-1.0)*r00*x4960*x4965)));
evalcond[5]=((1.0)+(((-1.0)*x4959*x4965))+(((-1.0)*r11*x4956*x4964))+((x4954*x4957))+(((-1.0)*r12*sj5*x4964))+(((-1.0)*r10*x4960*x4964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4967=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4967.valid){
continue;
}
CheckValue<IkReal> x4968 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4967.value)))+(x4968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4969=IKsin(j4);
IkReal x4970=IKcos(j4);
IkReal x4971=(cj5*cj6);
IkReal x4972=(r11*sj6);
IkReal x4973=(cj6*r20);
IkReal x4974=(cj6*r10);
IkReal x4975=(cj5*sj6);
IkReal x4976=(r01*sj6);
IkReal x4977=(r21*sj6);
IkReal x4978=(cj6*r00);
IkReal x4979=((1.0)*x4970);
IkReal x4980=((1.0)*x4969);
IkReal x4981=(sj5*x4980);
evalcond[0]=((((-1.0)*r22*x4981))+((x4970*x4973))+(((-1.0)*r21*x4971*x4980))+(((-1.0)*x4977*x4979))+(((-1.0)*r20*x4975*x4980)));
evalcond[1]=(((x4970*x4974))+(((-1.0)*r11*x4971*x4980))+(((-1.0)*r10*x4975*x4980))+(((-1.0)*r12*x4981))+(((-1.0)*x4972*x4979)));
evalcond[2]=((((-1.0)*r21*x4971*x4979))+(((-1.0)*x4973*x4980))+(((-1.0)*r22*sj5*x4979))+((x4969*x4977))+(((-1.0)*r20*x4975*x4979)));
evalcond[3]=((((-1.0)*r01*x4971*x4979))+((x4969*x4976))+(((-1.0)*x4978*x4980))+(((-1.0)*r00*x4975*x4979))+(((-1.0)*r02*sj5*x4979)));
evalcond[4]=((1.0)+(((-1.0)*r00*x4975*x4980))+((x4970*x4978))+(((-1.0)*x4976*x4979))+(((-1.0)*r02*x4981))+(((-1.0)*r01*x4971*x4980)));
evalcond[5]=((1.0)+(((-1.0)*r10*x4975*x4979))+(((-1.0)*r11*x4971*x4979))+((x4969*x4972))+(((-1.0)*x4974*x4980))+(((-1.0)*r12*sj5*x4979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4982=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4982;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4983=((1.0)*sj5);
IkReal x4984=(((cj5*r22))+(((-1.0)*cj6*r21*x4983))+(((-1.0)*r20*sj6*x4983)));
j4eval[0]=x4984;
j4eval[1]=IKsign(x4984);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4985=cj6*cj6;
IkReal x4986=cj5*cj5;
IkReal x4987=r10*r10;
IkReal x4988=r11*r11;
IkReal x4989=r12*r12;
IkReal x4990=(r10*sj6);
IkReal x4991=(r12*sj5);
IkReal x4992=((2.0)*cj6*r11);
IkReal x4993=((1.0)*x4987);
IkReal x4994=(x4985*x4988);
IkReal x4995=(x4994+(((-1.0)*x4986*x4993))+(((-2.0)*cj5*x4990*x4991))+(((-1.0)*x4986*x4990*x4992))+((x4985*x4986*x4987))+(((-1.0)*cj5*x4991*x4992))+(((-1.0)*x4986*x4994))+((x4986*x4989))+(((-1.0)*x4985*x4993))+(((-1.0)*x4989))+(((-1.0)*x4988))+((x4990*x4992)));
j4eval[0]=x4995;
j4eval[1]=((IKabs((x4991+((cj5*cj6*r11))+((cj5*x4990)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4996=cj6*cj6;
IkReal x4997=cj5*cj5;
IkReal x4998=r10*r10;
IkReal x4999=r11*r11;
IkReal x5000=r12*r12;
IkReal x5001=(r10*sj6);
IkReal x5002=(r12*sj5);
IkReal x5003=((2.0)*cj6*r11);
IkReal x5004=(x4996*x4999);
IkReal x5005=(x4997*x4998);
CheckValue<IkReal> x5006=IKPowWithIntegerCheck(IKsign((((x5001*x5003))+((x4996*x5005))+(((-1.0)*x4996*x4998))+(((-1.0)*x5005))+(((-1.0)*x5000))+((x4997*x5000))+x5004+(((-1.0)*cj5*x5002*x5003))+(((-2.0)*cj5*x5001*x5002))+(((-1.0)*x4999))+(((-1.0)*x4997*x5004))+(((-1.0)*x4997*x5001*x5003)))),-1);
if(!x5006.valid){
continue;
}
CheckValue<IkReal> x5007 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x5001))+x5002+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5006.value)))+(x5007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5008=IKsin(j4);
IkReal x5009=IKcos(j4);
IkReal x5010=(cj5*cj6);
IkReal x5011=(r11*sj6);
IkReal x5012=(cj6*r20);
IkReal x5013=(cj6*r10);
IkReal x5014=(cj5*sj6);
IkReal x5015=(r01*sj6);
IkReal x5016=(r21*sj6);
IkReal x5017=(cj6*r00);
IkReal x5018=((1.0)*x5009);
IkReal x5019=((1.0)*x5008);
IkReal x5020=(sj5*x5019);
evalcond[0]=((((-1.0)*r21*x5010*x5019))+(((-1.0)*x5016*x5018))+((x5009*x5012))+(((-1.0)*r22*x5020))+(((-1.0)*r20*x5014*x5019)));
evalcond[1]=((((-1.0)*r12*x5020))+(((-1.0)*r11*x5010*x5019))+(((-1.0)*r10*x5014*x5019))+(((-1.0)*x5011*x5018))+((x5009*x5013)));
evalcond[2]=((((-1.0)*r22*sj5*x5018))+(((-1.0)*r21*x5010*x5018))+((x5008*x5016))+(((-1.0)*x5012*x5019))+(((-1.0)*r20*x5014*x5018)));
evalcond[3]=((((-1.0)*r00*x5014*x5018))+(((-1.0)*r01*x5010*x5018))+(((-1.0)*r02*sj5*x5018))+(((-1.0)*x5017*x5019))+((x5008*x5015)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5020))+(((-1.0)*r00*x5014*x5019))+(((-1.0)*r01*x5010*x5019))+((x5009*x5017))+(((-1.0)*x5015*x5018)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x5010*x5018))+(((-1.0)*r10*x5014*x5018))+(((-1.0)*x5013*x5019))+((x5008*x5011))+(((-1.0)*r12*sj5*x5018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5021=((1.0)*sj5);
CheckValue<IkReal> x5022=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x5021))+(((-1.0)*r20*sj6*x5021)))),-1);
if(!x5022.valid){
continue;
}
CheckValue<IkReal> x5023 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5022.value)))+(x5023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5024=IKsin(j4);
IkReal x5025=IKcos(j4);
IkReal x5026=(cj5*cj6);
IkReal x5027=(r11*sj6);
IkReal x5028=(cj6*r20);
IkReal x5029=(cj6*r10);
IkReal x5030=(cj5*sj6);
IkReal x5031=(r01*sj6);
IkReal x5032=(r21*sj6);
IkReal x5033=(cj6*r00);
IkReal x5034=((1.0)*x5025);
IkReal x5035=((1.0)*x5024);
IkReal x5036=(sj5*x5035);
evalcond[0]=((((-1.0)*x5032*x5034))+((x5025*x5028))+(((-1.0)*r20*x5030*x5035))+(((-1.0)*r22*x5036))+(((-1.0)*r21*x5026*x5035)));
evalcond[1]=((((-1.0)*x5027*x5034))+(((-1.0)*r11*x5026*x5035))+(((-1.0)*r12*x5036))+((x5025*x5029))+(((-1.0)*r10*x5030*x5035)));
evalcond[2]=((((-1.0)*x5028*x5035))+((x5024*x5032))+(((-1.0)*r20*x5030*x5034))+(((-1.0)*r22*sj5*x5034))+(((-1.0)*r21*x5026*x5034)));
evalcond[3]=((((-1.0)*r01*x5026*x5034))+(((-1.0)*x5033*x5035))+((x5024*x5031))+(((-1.0)*r00*x5030*x5034))+(((-1.0)*r02*sj5*x5034)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5026*x5035))+(((-1.0)*x5031*x5034))+(((-1.0)*r00*x5030*x5035))+((x5025*x5033))+(((-1.0)*r02*x5036)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x5034))+(((-1.0)*r11*x5026*x5034))+(((-1.0)*x5029*x5035))+((x5024*x5027))+(((-1.0)*r10*x5030*x5034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5037 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5037.valid){
continue;
}
CheckValue<IkReal> x5038=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5037.value)+(((1.5707963267949)*(x5038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5039=IKsin(j4);
IkReal x5040=IKcos(j4);
IkReal x5041=(cj5*cj6);
IkReal x5042=(r11*sj6);
IkReal x5043=(cj6*r20);
IkReal x5044=(cj6*r10);
IkReal x5045=(cj5*sj6);
IkReal x5046=(r01*sj6);
IkReal x5047=(r21*sj6);
IkReal x5048=(cj6*r00);
IkReal x5049=((1.0)*x5040);
IkReal x5050=((1.0)*x5039);
IkReal x5051=(sj5*x5050);
evalcond[0]=((((-1.0)*r21*x5041*x5050))+((x5040*x5043))+(((-1.0)*r22*x5051))+(((-1.0)*r20*x5045*x5050))+(((-1.0)*x5047*x5049)));
evalcond[1]=((((-1.0)*r11*x5041*x5050))+(((-1.0)*x5042*x5049))+((x5040*x5044))+(((-1.0)*r12*x5051))+(((-1.0)*r10*x5045*x5050)));
evalcond[2]=((((-1.0)*r20*x5045*x5049))+(((-1.0)*r21*x5041*x5049))+((x5039*x5047))+(((-1.0)*x5043*x5050))+(((-1.0)*r22*sj5*x5049)));
evalcond[3]=((((-1.0)*r01*x5041*x5049))+((x5039*x5046))+(((-1.0)*r00*x5045*x5049))+(((-1.0)*r02*sj5*x5049))+(((-1.0)*x5048*x5050)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x5045*x5050))+((x5040*x5048))+(((-1.0)*r01*x5041*x5050))+(((-1.0)*r02*x5051))+(((-1.0)*x5046*x5049)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x5041*x5049))+(((-1.0)*x5044*x5050))+(((-1.0)*r10*x5045*x5049))+((x5039*x5042))+(((-1.0)*r12*sj5*x5049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5052=cj6*cj6;
IkReal x5053=cj5*cj5;
IkReal x5054=((1.0)*r11);
IkReal x5055=(cj5*sj0);
IkReal x5056=(cj6*r21);
IkReal x5057=(r22*sj5);
IkReal x5058=(r20*sj6);
IkReal x5059=(r12*r22);
IkReal x5060=((1.0)*sj6);
IkReal x5061=(r21*x5052);
IkReal x5062=(r10*x5053);
IkReal x5063=(r11*x5053);
IkReal x5064=(r20*x5052);
IkReal x5065=(cj5*r12*sj5);
CheckValue<IkReal> x5066 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x5060))+((cj6*r20*sj0)))),IkReal((((x5055*x5058))+((x5055*x5056))+((sj0*x5057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5066.valid){
continue;
}
CheckValue<IkReal> x5067=IKPowWithIntegerCheck(IKsign((((r20*x5062))+((r11*r21))+((cj5*r10*sj6*x5057))+((x5058*x5065))+x5059+((cj5*cj6*r11*x5057))+(((-1.0)*x5054*x5061))+((r10*x5064))+(((-1.0)*cj6*x5054*x5058))+(((-1.0)*x5053*x5059))+((x5061*x5063))+((x5056*x5065))+((sj6*x5056*x5062))+((cj6*x5058*x5063))+(((-1.0)*r10*x5056*x5060))+(((-1.0)*x5062*x5064)))),-1);
if(!x5067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5066.value)+(((1.5707963267949)*(x5067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5068=IKsin(j4);
IkReal x5069=IKcos(j4);
IkReal x5070=(cj5*cj6);
IkReal x5071=(r11*sj6);
IkReal x5072=(cj6*r20);
IkReal x5073=(cj6*r10);
IkReal x5074=(cj5*sj6);
IkReal x5075=(r01*sj6);
IkReal x5076=(r21*sj6);
IkReal x5077=(cj6*r00);
IkReal x5078=((1.0)*x5069);
IkReal x5079=((1.0)*x5068);
IkReal x5080=(sj5*x5079);
evalcond[0]=((((-1.0)*r20*x5074*x5079))+(((-1.0)*x5076*x5078))+(((-1.0)*r21*x5070*x5079))+((x5069*x5072))+(((-1.0)*r22*x5080)));
evalcond[1]=(((x5068*x5076))+(((-1.0)*r20*x5074*x5078))+(((-1.0)*x5072*x5079))+(((-1.0)*r21*x5070*x5078))+(((-1.0)*r22*sj5*x5078)));
evalcond[2]=(sj0+(((-1.0)*r01*x5070*x5079))+(((-1.0)*r00*x5074*x5079))+(((-1.0)*r02*x5080))+((x5069*x5077))+(((-1.0)*x5075*x5078)));
evalcond[3]=(((x5068*x5075))+cj0+(((-1.0)*r01*x5070*x5078))+(((-1.0)*r00*x5074*x5078))+(((-1.0)*r02*sj5*x5078))+(((-1.0)*x5077*x5079)));
evalcond[4]=(((x5068*x5071))+(((-1.0)*r10*x5074*x5078))+sj0+(((-1.0)*r11*x5070*x5078))+(((-1.0)*r12*sj5*x5078))+(((-1.0)*x5073*x5079)));
evalcond[5]=((((-1.0)*r12*x5080))+(((-1.0)*r10*x5074*x5079))+(((-1.0)*r11*x5070*x5079))+((x5069*x5073))+(((-1.0)*cj0))+(((-1.0)*x5071*x5078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5081=cj5*cj5;
IkReal x5082=cj6*cj6;
IkReal x5083=(r22*sj5);
IkReal x5084=(cj6*r21);
IkReal x5085=(r20*sj6);
IkReal x5086=((1.0)*sj6);
IkReal x5087=(cj0*cj5);
IkReal x5088=(r02*r22);
IkReal x5089=(cj6*r01);
IkReal x5090=(r00*sj6);
IkReal x5091=(cj5*r02*sj5);
IkReal x5092=(r01*x5081);
IkReal x5093=(r21*x5082);
IkReal x5094=(r00*r20*x5081);
CheckValue<IkReal> x5095 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x5086)))),IkReal((((x5084*x5087))+((x5085*x5087))+((cj0*x5083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5095.valid){
continue;
}
CheckValue<IkReal> x5096=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5085*x5089))+((x5084*x5091))+((x5081*x5084*x5090))+(((-1.0)*x5082*x5094))+(((-1.0)*r00*x5084*x5086))+((r01*r21))+x5094+x5088+((r00*r20*x5082))+((x5085*x5091))+((x5081*x5085*x5089))+((cj5*x5083*x5090))+((cj5*x5083*x5089))+(((-1.0)*x5081*x5088))+((x5092*x5093))+(((-1.0)*r01*x5093)))),-1);
if(!x5096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5095.value)+(((1.5707963267949)*(x5096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5097=IKsin(j4);
IkReal x5098=IKcos(j4);
IkReal x5099=(cj5*cj6);
IkReal x5100=(r11*sj6);
IkReal x5101=(cj6*r20);
IkReal x5102=(cj6*r10);
IkReal x5103=(cj5*sj6);
IkReal x5104=(r01*sj6);
IkReal x5105=(r21*sj6);
IkReal x5106=(cj6*r00);
IkReal x5107=((1.0)*x5098);
IkReal x5108=((1.0)*x5097);
IkReal x5109=(sj5*x5108);
evalcond[0]=(((x5098*x5101))+(((-1.0)*r22*x5109))+(((-1.0)*r20*x5103*x5108))+(((-1.0)*x5105*x5107))+(((-1.0)*r21*x5099*x5108)));
evalcond[1]=((((-1.0)*x5101*x5108))+(((-1.0)*r20*x5103*x5107))+(((-1.0)*r22*sj5*x5107))+((x5097*x5105))+(((-1.0)*r21*x5099*x5107)));
evalcond[2]=(sj0+((x5098*x5106))+(((-1.0)*r02*x5109))+(((-1.0)*r01*x5099*x5108))+(((-1.0)*x5104*x5107))+(((-1.0)*r00*x5103*x5108)));
evalcond[3]=((((-1.0)*x5106*x5108))+cj0+(((-1.0)*r01*x5099*x5107))+(((-1.0)*r02*sj5*x5107))+((x5097*x5104))+(((-1.0)*r00*x5103*x5107)));
evalcond[4]=((((-1.0)*r12*sj5*x5107))+sj0+(((-1.0)*r10*x5103*x5107))+(((-1.0)*x5102*x5108))+(((-1.0)*r11*x5099*x5107))+((x5097*x5100)));
evalcond[5]=((((-1.0)*r10*x5103*x5108))+((x5098*x5102))+(((-1.0)*x5100*x5107))+(((-1.0)*r11*x5099*x5108))+(((-1.0)*r12*x5109))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5110=(cj5*sj0);
IkReal x5111=((1.0)*sj5);
CheckValue<IkReal> x5112 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r22*sj0*sj5))+((cj6*r21*x5110))+((r20*sj6*x5110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5112.valid){
continue;
}
CheckValue<IkReal> x5113=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x5111))+(((-1.0)*cj6*r11*x5111)))),-1);
if(!x5113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5112.value)+(((1.5707963267949)*(x5113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5114=IKsin(j4);
IkReal x5115=IKcos(j4);
IkReal x5116=(cj5*cj6);
IkReal x5117=(r11*sj6);
IkReal x5118=(cj6*r20);
IkReal x5119=(cj6*r10);
IkReal x5120=(cj5*sj6);
IkReal x5121=(r01*sj6);
IkReal x5122=(r21*sj6);
IkReal x5123=(cj6*r00);
IkReal x5124=((1.0)*x5115);
IkReal x5125=((1.0)*x5114);
IkReal x5126=(sj5*x5125);
evalcond[0]=(((x5115*x5118))+(((-1.0)*r21*x5116*x5125))+(((-1.0)*x5122*x5124))+(((-1.0)*r20*x5120*x5125))+(((-1.0)*r22*x5126)));
evalcond[1]=((((-1.0)*r22*sj5*x5124))+(((-1.0)*x5118*x5125))+(((-1.0)*r21*x5116*x5124))+(((-1.0)*r20*x5120*x5124))+((x5114*x5122)));
evalcond[2]=(sj0+(((-1.0)*r01*x5116*x5125))+(((-1.0)*r00*x5120*x5125))+(((-1.0)*x5121*x5124))+(((-1.0)*r02*x5126))+((x5115*x5123)));
evalcond[3]=(cj0+(((-1.0)*r02*sj5*x5124))+(((-1.0)*r01*x5116*x5124))+(((-1.0)*r00*x5120*x5124))+(((-1.0)*x5123*x5125))+((x5114*x5121)));
evalcond[4]=(sj0+(((-1.0)*r12*sj5*x5124))+((x5114*x5117))+(((-1.0)*x5119*x5125))+(((-1.0)*r10*x5120*x5124))+(((-1.0)*r11*x5116*x5124)));
evalcond[5]=(((x5115*x5119))+(((-1.0)*x5117*x5124))+(((-1.0)*r12*x5126))+(((-1.0)*cj0))+(((-1.0)*r10*x5120*x5125))+(((-1.0)*r11*x5116*x5125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5127=(cj6*sj5);
IkReal x5128=(sj5*sj6);
IkReal x5129=((1.0)*cj5);
if( IKabs((((r10*x5128))+((r11*x5127))+(((-1.0)*r12*x5129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x5128))+((r01*x5127))+(((-1.0)*r02*x5129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x5128))+((r11*x5127))+(((-1.0)*r12*x5129))))+IKsqr((((r00*x5128))+((r01*x5127))+(((-1.0)*r02*x5129))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x5128))+((r11*x5127))+(((-1.0)*r12*x5129))), (((r00*x5128))+((r01*x5127))+(((-1.0)*r02*x5129))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5130=(cj6*sj5);
IkReal x5131=(sj5*sj6);
IkReal x5132=((1.0)*cj5);
evalcond[0]=(((r10*x5131))+((r11*x5130))+(((-1.0)*(IKsin(j0))))+(((-1.0)*r12*x5132)));
evalcond[1]=(((r01*x5130))+((r00*x5131))+(((-1.0)*(IKcos(j0))))+(((-1.0)*r02*x5132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5133=((1.0)*cj5);
IkReal x5134=((1.0)*sj5);
IkReal x5135=(((cj5*r12))+(((-1.0)*cj6*r11*x5134))+(((-1.0)*r10*sj6*x5134)));
j4eval[0]=x5135;
j4eval[1]=((IKabs(((((-1.0)*r00*sj6*x5133))+(((-1.0)*cj6*r01*x5133))+(((-1.0)*r02*x5134)))))+(IKabs(((((-1.0)*r01*sj6))+((cj6*r00))))));
j4eval[2]=IKsign(x5135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5136=(r20*sj0);
IkReal x5137=((1.0)*sj5);
IkReal x5138=(r21*sj0);
IkReal x5139=(((cj5*r12))+(((-1.0)*cj6*r11*x5137))+(((-1.0)*r10*sj6*x5137)));
j4eval[0]=x5139;
j4eval[1]=IKsign(x5139);
j4eval[2]=((IKabs(((((-1.0)*sj6*x5138))+((cj6*x5136)))))+(IKabs((((cj5*cj6*x5138))+((r22*sj0*sj5))+((cj5*sj6*x5136))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5140=cj5*cj5;
IkReal x5141=cj6*cj6;
IkReal x5142=r22*r22;
IkReal x5143=r21*r21;
IkReal x5144=r20*r20;
IkReal x5145=(r22*sj5);
IkReal x5146=(r21*sj6);
IkReal x5147=(cj6*r20);
IkReal x5148=(cj5*r20*sj6);
IkReal x5149=((1.0)*x5140);
IkReal x5150=(cj5*cj6*r21);
IkReal x5151=(x5141*x5143);
IkReal x5152=(x5141*x5144);
IkReal x5153=((((-2.0)*x5145*x5148))+(((-2.0)*x5145*x5150))+x5151+(((-2.0)*x5140*x5146*x5147))+(((-1.0)*x5142))+(((-1.0)*x5143))+(((-1.0)*x5152))+(((-1.0)*x5149*x5151))+(((2.0)*x5146*x5147))+((x5140*x5142))+((x5140*x5152))+(((-1.0)*x5144*x5149)));
j4eval[0]=x5153;
j4eval[1]=IKsign(x5153);
j4eval[2]=((IKabs((x5147+(((-1.0)*x5146)))))+(IKabs((x5150+x5148+x5145))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5154=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5154;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5155=((1.0)*sj6);
IkReal x5156=((((-1.0)*r00*sj5*x5155))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x5156;
j4eval[1]=IKsign(x5156);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x5155))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5157=cj5*cj5;
IkReal x5158=cj6*cj6;
IkReal x5159=r22*r22;
IkReal x5160=r21*r21;
IkReal x5161=r20*r20;
IkReal x5162=(r22*sj5);
IkReal x5163=(r21*sj6);
IkReal x5164=(cj6*r20);
IkReal x5165=(cj5*r20*sj6);
IkReal x5166=((1.0)*x5157);
IkReal x5167=(cj5*cj6*r21);
IkReal x5168=(x5158*x5160);
IkReal x5169=(x5158*x5161);
IkReal x5170=((((2.0)*x5163*x5164))+((x5157*x5159))+(((-2.0)*x5162*x5165))+(((-2.0)*x5162*x5167))+(((-1.0)*x5161*x5166))+x5168+(((-1.0)*x5160))+(((-1.0)*x5169))+((x5157*x5169))+(((-1.0)*x5159))+(((-1.0)*x5166*x5168))+(((-2.0)*x5157*x5163*x5164)));
j4eval[0]=x5170;
j4eval[1]=IKsign(x5170);
j4eval[2]=((IKabs((x5164+(((-1.0)*x5163)))))+(IKabs((x5162+x5165+x5167))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5171=cj5*cj5;
IkReal x5172=cj6*cj6;
IkReal x5173=r22*r22;
IkReal x5174=r21*r21;
IkReal x5175=r20*r20;
IkReal x5176=(r21*sj6);
IkReal x5177=(cj6*r20);
IkReal x5178=(cj5*cj6*r21);
IkReal x5179=((1.0)*x5171);
IkReal x5180=(cj5*r20*sj6);
IkReal x5181=((2.0)*r22*sj5);
IkReal x5182=(x5172*x5174);
IkReal x5183=(x5172*x5175);
CheckValue<IkReal> x5184=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5175*x5179))+x5182+(((-1.0)*x5174))+(((-1.0)*x5173))+(((-2.0)*x5171*x5176*x5177))+((x5171*x5183))+(((-1.0)*x5180*x5181))+(((-1.0)*x5179*x5182))+(((2.0)*x5176*x5177))+(((-1.0)*x5183))+((x5171*x5173))+(((-1.0)*x5178*x5181)))),-1);
if(!x5184.valid){
continue;
}
CheckValue<IkReal> x5185 = IKatan2WithCheck(IkReal((x5177+(((-1.0)*x5176)))),IkReal((((r22*sj5))+x5180+x5178)),IKFAST_ATAN2_MAGTHRESH);
if(!x5185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5184.value)))+(x5185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5186=IKsin(j4);
IkReal x5187=IKcos(j4);
IkReal x5188=(cj5*cj6);
IkReal x5189=(r11*sj6);
IkReal x5190=(cj6*r20);
IkReal x5191=(cj5*sj6);
IkReal x5192=(cj6*r10);
IkReal x5193=(r01*sj6);
IkReal x5194=(r21*sj6);
IkReal x5195=(cj6*r00);
IkReal x5196=((1.0)*x5187);
IkReal x5197=((1.0)*x5186);
IkReal x5198=(sj5*x5197);
evalcond[0]=((((-1.0)*r22*x5198))+(((-1.0)*r20*x5191*x5197))+(((-1.0)*r21*x5188*x5197))+(((-1.0)*x5194*x5196))+((x5187*x5190)));
evalcond[1]=((((-1.0)*r01*x5188*x5197))+(((-1.0)*x5193*x5196))+(((-1.0)*r02*x5198))+(((-1.0)*r00*x5191*x5197))+((x5187*x5195)));
evalcond[2]=((((-1.0)*r01*x5188*x5196))+((x5186*x5193))+(((-1.0)*x5195*x5197))+(((-1.0)*r02*sj5*x5196))+(((-1.0)*r00*x5191*x5196)));
evalcond[3]=((((-1.0)*r10*x5191*x5196))+((x5186*x5189))+(((-1.0)*r11*x5188*x5196))+(((-1.0)*x5192*x5197))+(((-1.0)*r12*sj5*x5196)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x5198))+(((-1.0)*r10*x5191*x5197))+(((-1.0)*r11*x5188*x5197))+(((-1.0)*x5189*x5196))+((x5187*x5192)));
evalcond[5]=((-1.0)+(((-1.0)*x5190*x5197))+((x5186*x5194))+(((-1.0)*r20*x5191*x5196))+(((-1.0)*r22*sj5*x5196))+(((-1.0)*r21*x5188*x5196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5199=((1.0)*sj6);
CheckValue<IkReal> x5200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x5199))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x5200.valid){
continue;
}
CheckValue<IkReal> x5201 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5199))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5200.value)))+(x5201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5202=IKsin(j4);
IkReal x5203=IKcos(j4);
IkReal x5204=(cj5*cj6);
IkReal x5205=(r11*sj6);
IkReal x5206=(cj6*r20);
IkReal x5207=(cj5*sj6);
IkReal x5208=(cj6*r10);
IkReal x5209=(r01*sj6);
IkReal x5210=(r21*sj6);
IkReal x5211=(cj6*r00);
IkReal x5212=((1.0)*x5203);
IkReal x5213=((1.0)*x5202);
IkReal x5214=(sj5*x5213);
evalcond[0]=(((x5203*x5206))+(((-1.0)*r20*x5207*x5213))+(((-1.0)*r22*x5214))+(((-1.0)*r21*x5204*x5213))+(((-1.0)*x5210*x5212)));
evalcond[1]=((((-1.0)*r00*x5207*x5213))+((x5203*x5211))+(((-1.0)*r01*x5204*x5213))+(((-1.0)*x5209*x5212))+(((-1.0)*r02*x5214)));
evalcond[2]=((((-1.0)*r00*x5207*x5212))+((x5202*x5209))+(((-1.0)*r01*x5204*x5212))+(((-1.0)*r02*sj5*x5212))+(((-1.0)*x5211*x5213)));
evalcond[3]=(((x5202*x5205))+(((-1.0)*r11*x5204*x5212))+(((-1.0)*r10*x5207*x5212))+(((-1.0)*r12*sj5*x5212))+(((-1.0)*x5208*x5213)));
evalcond[4]=((-1.0)+((x5203*x5208))+(((-1.0)*r11*x5204*x5213))+(((-1.0)*r10*x5207*x5213))+(((-1.0)*x5205*x5212))+(((-1.0)*r12*x5214)));
evalcond[5]=((-1.0)+(((-1.0)*r22*sj5*x5212))+(((-1.0)*x5206*x5213))+(((-1.0)*r20*x5207*x5212))+((x5202*x5210))+(((-1.0)*r21*x5204*x5212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5215=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5215.valid){
continue;
}
CheckValue<IkReal> x5216 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5215.value)))+(x5216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5217=IKsin(j4);
IkReal x5218=IKcos(j4);
IkReal x5219=(cj5*cj6);
IkReal x5220=(r11*sj6);
IkReal x5221=(cj6*r20);
IkReal x5222=(cj5*sj6);
IkReal x5223=(cj6*r10);
IkReal x5224=(r01*sj6);
IkReal x5225=(r21*sj6);
IkReal x5226=(cj6*r00);
IkReal x5227=((1.0)*x5218);
IkReal x5228=((1.0)*x5217);
IkReal x5229=(sj5*x5228);
evalcond[0]=((((-1.0)*r20*x5222*x5228))+(((-1.0)*r21*x5219*x5228))+((x5218*x5221))+(((-1.0)*x5225*x5227))+(((-1.0)*r22*x5229)));
evalcond[1]=((((-1.0)*r01*x5219*x5228))+((x5218*x5226))+(((-1.0)*x5224*x5227))+(((-1.0)*r00*x5222*x5228))+(((-1.0)*r02*x5229)));
evalcond[2]=(((x5217*x5224))+(((-1.0)*r01*x5219*x5227))+(((-1.0)*r02*sj5*x5227))+(((-1.0)*r00*x5222*x5227))+(((-1.0)*x5226*x5228)));
evalcond[3]=(((x5217*x5220))+(((-1.0)*x5223*x5228))+(((-1.0)*r10*x5222*x5227))+(((-1.0)*r11*x5219*x5227))+(((-1.0)*r12*sj5*x5227)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x5222*x5228))+(((-1.0)*r11*x5219*x5228))+((x5218*x5223))+(((-1.0)*r12*x5229))+(((-1.0)*x5220*x5227)));
evalcond[5]=((-1.0)+((x5217*x5225))+(((-1.0)*r20*x5222*x5227))+(((-1.0)*r21*x5219*x5227))+(((-1.0)*x5221*x5228))+(((-1.0)*r22*sj5*x5227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5230=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5230;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5231=((1.0)*sj5);
IkReal x5232=(((cj5*r22))+(((-1.0)*cj6*r21*x5231))+(((-1.0)*r20*sj6*x5231)));
j4eval[0]=x5232;
j4eval[1]=IKsign(x5232);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5233=cj5*cj5;
IkReal x5234=cj6*cj6;
IkReal x5235=r22*r22;
IkReal x5236=r21*r21;
IkReal x5237=r20*r20;
IkReal x5238=(r22*sj5);
IkReal x5239=(r21*sj6);
IkReal x5240=(cj6*r20);
IkReal x5241=(cj5*r20*sj6);
IkReal x5242=((1.0)*x5233);
IkReal x5243=(cj5*cj6*r21);
IkReal x5244=(x5234*x5236);
IkReal x5245=(x5234*x5237);
IkReal x5246=((((-1.0)*x5245))+(((-1.0)*x5242*x5244))+(((-1.0)*x5235))+(((-1.0)*x5236))+((x5233*x5235))+x5244+((x5233*x5245))+(((2.0)*x5239*x5240))+(((-1.0)*x5237*x5242))+(((-2.0)*x5238*x5241))+(((-2.0)*x5238*x5243))+(((-2.0)*x5233*x5239*x5240)));
j4eval[0]=x5246;
j4eval[1]=IKsign(x5246);
j4eval[2]=((IKabs((x5241+x5243+x5238)))+(IKabs(((((-1.0)*x5239))+x5240))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5247=cj5*cj5;
IkReal x5248=cj6*cj6;
IkReal x5249=r22*r22;
IkReal x5250=r21*r21;
IkReal x5251=r20*r20;
IkReal x5252=(r21*sj6);
IkReal x5253=(cj6*r20);
IkReal x5254=(cj5*cj6*r21);
IkReal x5255=((1.0)*x5247);
IkReal x5256=(cj5*r20*sj6);
IkReal x5257=((2.0)*r22*sj5);
IkReal x5258=(x5248*x5250);
IkReal x5259=(x5248*x5251);
CheckValue<IkReal> x5260 = IKatan2WithCheck(IkReal(((((-1.0)*x5252))+x5253)),IkReal((((r22*sj5))+x5256+x5254)),IKFAST_ATAN2_MAGTHRESH);
if(!x5260.valid){
continue;
}
CheckValue<IkReal> x5261=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5259))+(((-1.0)*x5250))+(((-1.0)*x5254*x5257))+(((-1.0)*x5249))+((x5247*x5249))+(((-1.0)*x5255*x5258))+(((-2.0)*x5247*x5252*x5253))+x5258+(((2.0)*x5252*x5253))+((x5247*x5259))+(((-1.0)*x5251*x5255))+(((-1.0)*x5256*x5257)))),-1);
if(!x5261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5260.value)+(((1.5707963267949)*(x5261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5262=IKsin(j4);
IkReal x5263=IKcos(j4);
IkReal x5264=(cj5*cj6);
IkReal x5265=(r11*sj6);
IkReal x5266=(cj6*r20);
IkReal x5267=(cj5*sj6);
IkReal x5268=(cj6*r10);
IkReal x5269=(r01*sj6);
IkReal x5270=(r21*sj6);
IkReal x5271=(cj6*r00);
IkReal x5272=((1.0)*x5263);
IkReal x5273=((1.0)*x5262);
IkReal x5274=(sj5*x5273);
evalcond[0]=((((-1.0)*r21*x5264*x5273))+(((-1.0)*r20*x5267*x5273))+(((-1.0)*x5270*x5272))+((x5263*x5266))+(((-1.0)*r22*x5274)));
evalcond[1]=((((-1.0)*r00*x5267*x5273))+(((-1.0)*r02*x5274))+((x5263*x5271))+(((-1.0)*x5269*x5272))+(((-1.0)*r01*x5264*x5273)));
evalcond[2]=(((x5262*x5269))+(((-1.0)*r00*x5267*x5272))+(((-1.0)*x5271*x5273))+(((-1.0)*r02*sj5*x5272))+(((-1.0)*r01*x5264*x5272)));
evalcond[3]=(((x5262*x5265))+(((-1.0)*r11*x5264*x5272))+(((-1.0)*r10*x5267*x5272))+(((-1.0)*r12*sj5*x5272))+(((-1.0)*x5268*x5273)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5264*x5273))+(((-1.0)*x5265*x5272))+(((-1.0)*r10*x5267*x5273))+(((-1.0)*r12*x5274))+((x5263*x5268)));
evalcond[5]=((-1.0)+((x5262*x5270))+(((-1.0)*r21*x5264*x5272))+(((-1.0)*x5266*x5273))+(((-1.0)*r20*x5267*x5272))+(((-1.0)*r22*sj5*x5272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5275=((1.0)*sj5);
CheckValue<IkReal> x5276 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5276.valid){
continue;
}
CheckValue<IkReal> x5277=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x5275))+(((-1.0)*cj6*r21*x5275)))),-1);
if(!x5277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5276.value)+(((1.5707963267949)*(x5277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5278=IKsin(j4);
IkReal x5279=IKcos(j4);
IkReal x5280=(cj5*cj6);
IkReal x5281=(r11*sj6);
IkReal x5282=(cj6*r20);
IkReal x5283=(cj5*sj6);
IkReal x5284=(cj6*r10);
IkReal x5285=(r01*sj6);
IkReal x5286=(r21*sj6);
IkReal x5287=(cj6*r00);
IkReal x5288=((1.0)*x5279);
IkReal x5289=((1.0)*x5278);
IkReal x5290=(sj5*x5289);
evalcond[0]=((((-1.0)*r22*x5290))+((x5279*x5282))+(((-1.0)*r21*x5280*x5289))+(((-1.0)*x5286*x5288))+(((-1.0)*r20*x5283*x5289)));
evalcond[1]=(((x5279*x5287))+(((-1.0)*r00*x5283*x5289))+(((-1.0)*r02*x5290))+(((-1.0)*r01*x5280*x5289))+(((-1.0)*x5285*x5288)));
evalcond[2]=((((-1.0)*x5287*x5289))+((x5278*x5285))+(((-1.0)*r00*x5283*x5288))+(((-1.0)*r02*sj5*x5288))+(((-1.0)*r01*x5280*x5288)));
evalcond[3]=((((-1.0)*x5284*x5289))+((x5278*x5281))+(((-1.0)*r10*x5283*x5288))+(((-1.0)*r12*sj5*x5288))+(((-1.0)*r11*x5280*x5288)));
evalcond[4]=((1.0)+(((-1.0)*x5281*x5288))+((x5279*x5284))+(((-1.0)*r12*x5290))+(((-1.0)*r10*x5283*x5289))+(((-1.0)*r11*x5280*x5289)));
evalcond[5]=((-1.0)+(((-1.0)*r21*x5280*x5288))+((x5278*x5286))+(((-1.0)*r20*x5283*x5288))+(((-1.0)*x5282*x5289))+(((-1.0)*r22*sj5*x5288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5291 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5291.valid){
continue;
}
CheckValue<IkReal> x5292=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5291.value)+(((1.5707963267949)*(x5292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5293=IKsin(j4);
IkReal x5294=IKcos(j4);
IkReal x5295=(cj5*cj6);
IkReal x5296=(r11*sj6);
IkReal x5297=(cj6*r20);
IkReal x5298=(cj5*sj6);
IkReal x5299=(cj6*r10);
IkReal x5300=(r01*sj6);
IkReal x5301=(r21*sj6);
IkReal x5302=(cj6*r00);
IkReal x5303=((1.0)*x5294);
IkReal x5304=((1.0)*x5293);
IkReal x5305=(sj5*x5304);
evalcond[0]=((((-1.0)*r22*x5305))+((x5294*x5297))+(((-1.0)*r20*x5298*x5304))+(((-1.0)*x5301*x5303))+(((-1.0)*r21*x5295*x5304)));
evalcond[1]=((((-1.0)*r00*x5298*x5304))+(((-1.0)*x5300*x5303))+(((-1.0)*r01*x5295*x5304))+(((-1.0)*r02*x5305))+((x5294*x5302)));
evalcond[2]=((((-1.0)*r00*x5298*x5303))+(((-1.0)*x5302*x5304))+(((-1.0)*r01*x5295*x5303))+((x5293*x5300))+(((-1.0)*r02*sj5*x5303)));
evalcond[3]=((((-1.0)*r12*sj5*x5303))+(((-1.0)*r10*x5298*x5303))+(((-1.0)*r11*x5295*x5303))+((x5293*x5296))+(((-1.0)*x5299*x5304)));
evalcond[4]=((1.0)+((x5294*x5299))+(((-1.0)*x5296*x5303))+(((-1.0)*r10*x5298*x5304))+(((-1.0)*r12*x5305))+(((-1.0)*r11*x5295*x5304)));
evalcond[5]=((-1.0)+(((-1.0)*x5297*x5304))+(((-1.0)*r20*x5298*x5303))+(((-1.0)*r22*sj5*x5303))+(((-1.0)*r21*x5295*x5303))+((x5293*x5301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5306=cj5*cj5;
IkReal x5307=cj6*cj6;
IkReal x5308=r22*r22;
IkReal x5309=r21*r21;
IkReal x5310=r20*r20;
IkReal x5311=(r21*sj6);
IkReal x5312=(cj6*r20);
IkReal x5313=(cj5*cj6*r21);
IkReal x5314=((1.0)*x5306);
IkReal x5315=(cj5*r20*sj6);
IkReal x5316=((2.0)*r22*sj5);
IkReal x5317=(x5307*x5309);
IkReal x5318=(x5307*x5310);
CheckValue<IkReal> x5319 = IKatan2WithCheck(IkReal((x5312+(((-1.0)*x5311)))),IkReal((x5313+x5315+((r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5319.valid){
continue;
}
CheckValue<IkReal> x5320=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5310*x5314))+(((-1.0)*x5314*x5317))+((x5306*x5308))+x5317+(((-1.0)*x5313*x5316))+(((2.0)*x5311*x5312))+(((-2.0)*x5306*x5311*x5312))+(((-1.0)*x5309))+(((-1.0)*x5308))+(((-1.0)*x5318))+(((-1.0)*x5315*x5316))+((x5306*x5318)))),-1);
if(!x5320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5319.value)+(((1.5707963267949)*(x5320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5321=IKsin(j4);
IkReal x5322=IKcos(j4);
IkReal x5323=(cj5*cj6);
IkReal x5324=(r11*sj6);
IkReal x5325=(cj6*r20);
IkReal x5326=(cj6*r10);
IkReal x5327=(cj5*sj6);
IkReal x5328=(r21*sj6);
IkReal x5329=(cj6*r00);
IkReal x5330=(r01*sj6);
IkReal x5331=((1.0)*x5322);
IkReal x5332=((1.0)*x5321);
IkReal x5333=(sj5*x5332);
evalcond[0]=(((x5322*x5325))+(((-1.0)*r22*x5333))+(((-1.0)*x5328*x5331))+(((-1.0)*r20*x5327*x5332))+(((-1.0)*r21*x5323*x5332)));
evalcond[1]=((((-1.0)*r00*x5327*x5331))+(((-1.0)*r01*x5323*x5331))+(((-1.0)*x5329*x5332))+(((-1.0)*r02*sj5*x5331))+((x5321*x5330)));
evalcond[2]=((((-1.0)*r10*x5327*x5331))+(((-1.0)*x5326*x5332))+((x5321*x5324))+(((-1.0)*r12*sj5*x5331))+(((-1.0)*r11*x5323*x5331)));
evalcond[3]=(((x5322*x5329))+(((-1.0)*x5330*x5331))+sj0+(((-1.0)*r00*x5327*x5332))+(((-1.0)*r01*x5323*x5332))+(((-1.0)*r02*x5333)));
evalcond[4]=((-1.0)+(((-1.0)*r20*x5327*x5331))+((x5321*x5328))+(((-1.0)*r21*x5323*x5331))+(((-1.0)*r22*sj5*x5331))+(((-1.0)*x5325*x5332)));
evalcond[5]=(((x5322*x5326))+(((-1.0)*r10*x5327*x5332))+(((-1.0)*r12*x5333))+(((-1.0)*x5324*x5331))+(((-1.0)*r11*x5323*x5332))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5334=(cj5*sj0);
IkReal x5335=((1.0)*sj5);
CheckValue<IkReal> x5336=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x5335))+(((-1.0)*cj6*r11*x5335)))),-1);
if(!x5336.valid){
continue;
}
CheckValue<IkReal> x5337 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r22*sj0*sj5))+((cj6*r21*x5334))+((r20*sj6*x5334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5336.value)))+(x5337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5338=IKsin(j4);
IkReal x5339=IKcos(j4);
IkReal x5340=(cj5*cj6);
IkReal x5341=(r11*sj6);
IkReal x5342=(cj6*r20);
IkReal x5343=(cj6*r10);
IkReal x5344=(cj5*sj6);
IkReal x5345=(r21*sj6);
IkReal x5346=(cj6*r00);
IkReal x5347=(r01*sj6);
IkReal x5348=((1.0)*x5339);
IkReal x5349=((1.0)*x5338);
IkReal x5350=(sj5*x5349);
evalcond[0]=((((-1.0)*x5345*x5348))+(((-1.0)*r20*x5344*x5349))+((x5339*x5342))+(((-1.0)*r22*x5350))+(((-1.0)*r21*x5340*x5349)));
evalcond[1]=((((-1.0)*x5346*x5349))+(((-1.0)*r01*x5340*x5348))+(((-1.0)*r00*x5344*x5348))+((x5338*x5347))+(((-1.0)*r02*sj5*x5348)));
evalcond[2]=((((-1.0)*r11*x5340*x5348))+((x5338*x5341))+(((-1.0)*r12*sj5*x5348))+(((-1.0)*r10*x5344*x5348))+(((-1.0)*x5343*x5349)));
evalcond[3]=(sj0+(((-1.0)*r02*x5350))+(((-1.0)*r01*x5340*x5349))+(((-1.0)*r00*x5344*x5349))+((x5339*x5346))+(((-1.0)*x5347*x5348)));
evalcond[4]=((-1.0)+((x5338*x5345))+(((-1.0)*r20*x5344*x5348))+(((-1.0)*x5342*x5349))+(((-1.0)*r22*sj5*x5348))+(((-1.0)*r21*x5340*x5348)));
evalcond[5]=((((-1.0)*r12*x5350))+(((-1.0)*r11*x5340*x5349))+((x5339*x5343))+(((-1.0)*x5341*x5348))+(((-1.0)*r10*x5344*x5349))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5351=((1.0)*cj5);
IkReal x5352=((1.0)*sj5);
CheckValue<IkReal> x5353=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x5352))+(((-1.0)*r10*sj6*x5352)))),-1);
if(!x5353.valid){
continue;
}
CheckValue<IkReal> x5354 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5352))+(((-1.0)*cj6*r01*x5351))+(((-1.0)*r00*sj6*x5351)))),IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5353.value)))+(x5354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5355=IKsin(j4);
IkReal x5356=IKcos(j4);
IkReal x5357=(cj5*cj6);
IkReal x5358=(r11*sj6);
IkReal x5359=(cj6*r20);
IkReal x5360=(cj6*r10);
IkReal x5361=(cj5*sj6);
IkReal x5362=(r21*sj6);
IkReal x5363=(cj6*r00);
IkReal x5364=(r01*sj6);
IkReal x5365=((1.0)*x5356);
IkReal x5366=((1.0)*x5355);
IkReal x5367=(sj5*x5366);
evalcond[0]=((((-1.0)*r22*x5367))+((x5356*x5359))+(((-1.0)*x5362*x5365))+(((-1.0)*r20*x5361*x5366))+(((-1.0)*r21*x5357*x5366)));
evalcond[1]=(((x5355*x5364))+(((-1.0)*r02*sj5*x5365))+(((-1.0)*x5363*x5366))+(((-1.0)*r00*x5361*x5365))+(((-1.0)*r01*x5357*x5365)));
evalcond[2]=((((-1.0)*r12*sj5*x5365))+(((-1.0)*r10*x5361*x5365))+(((-1.0)*x5360*x5366))+(((-1.0)*r11*x5357*x5365))+((x5355*x5358)));
evalcond[3]=(((x5356*x5363))+sj0+(((-1.0)*x5364*x5365))+(((-1.0)*r02*x5367))+(((-1.0)*r00*x5361*x5366))+(((-1.0)*r01*x5357*x5366)));
evalcond[4]=((-1.0)+((x5355*x5362))+(((-1.0)*r22*sj5*x5365))+(((-1.0)*x5359*x5366))+(((-1.0)*r20*x5361*x5365))+(((-1.0)*r21*x5357*x5365)));
evalcond[5]=(((x5356*x5360))+(((-1.0)*r10*x5361*x5366))+(((-1.0)*r11*x5357*x5366))+(((-1.0)*x5358*x5365))+(((-1.0)*r12*x5367))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5368=(cj2*sj1);
IkReal x5369=((364.42)*cj1);
IkReal x5370=((1000.0)*px);
IkReal x5371=(cj5*sj2);
IkReal x5372=(cj6*r01);
IkReal x5373=((69.0)*r12);
IkReal x5374=(sj5*sj6);
IkReal x5375=((69.0)*r10);
IkReal x5376=((374.29)*r00);
IkReal x5377=((374.29)*sj5);
IkReal x5378=((374.29)*r02);
IkReal x5379=((10.0)*r02*sj5);
IkReal x5380=((10.0)*r00*sj6);
IkReal x5381=(cj6*r11*sj5);
CheckValue<IkReal> x5382=IKPowWithIntegerCheck(IKsign(((-69.0)+(((69.0)*x5368))+((x5368*x5369))+(((69.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x5382.valid){
continue;
}
CheckValue<IkReal> x5383 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x5373))+(((-1.0)*cj5*r12*x5369))+((sj2*x5370))+(((-1.0)*x5371*x5378))+((r10*x5369*x5374))+((cj5*x5368*x5373))+(((-69.0)*x5368*x5381))+((x5369*x5381))+((sj2*x5372*x5377))+(((-1.0)*x5371*x5380))+((sj2*x5374*x5376))+(((-1.0)*sj2*x5379))+(((-1.0)*x5368*x5374*x5375))+(((-10.0)*x5371*x5372))+((x5374*x5375))+(((69.0)*x5381)))),IkReal((((x5368*x5374*x5376))+(((-10.0)*cj5*x5368*x5372))+(((-1.0)*cj5*x5368*x5380))+(((-1.0)*cj5*x5368*x5378))+((x5368*x5370))+(((-1.0)*x5371*x5373))+(((69.0)*sj2*x5381))+((x5368*x5372*x5377))+((sj2*x5374*x5375))+(((-1.0)*x5368*x5379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5383.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5382.value)))+(x5383.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5384=IKsin(j0);
IkReal x5385=IKcos(j0);
IkReal x5386=(cj6*r11);
IkReal x5387=((0.01)*cj5);
IkReal x5388=(sj5*sj6);
IkReal x5389=((0.36442)*cj1);
IkReal x5390=(cj2*sj1);
IkReal x5391=(cj6*r01);
IkReal x5392=((0.37429)*sj5);
IkReal x5393=(cj5*r02);
IkReal x5394=((0.01)*sj5);
IkReal x5395=(cj5*r12);
IkReal x5396=((0.069)*x5384);
IkReal x5397=((0.069)*x5385);
IkReal x5398=((1.0)*x5384);
evalcond[0]=(((r10*x5388))+((sj2*x5385))+(((-1.0)*x5390*x5398))+((sj5*x5386))+(((-1.0)*x5395)));
evalcond[1]=(((r00*x5388))+((sj5*x5391))+(((-1.0)*sj2*x5398))+(((-1.0)*x5393))+(((-1.0)*x5385*x5390)));
evalcond[2]=(((r02*x5394))+(((0.37429)*x5393))+x5397+((r00*sj6*x5387))+(((-0.37429)*r00*x5388))+(((-1.0)*x5391*x5392))+(((-1.0)*px))+((x5385*x5389))+(((-1.0)*x5390*x5397))+(((-1.0)*sj2*x5396))+((x5387*x5391)));
evalcond[3]=(((r10*sj6*x5387))+(((0.37429)*x5395))+x5396+((x5384*x5389))+(((-0.37429)*r10*x5388))+(((-1.0)*py))+((sj2*x5397))+((r12*x5394))+(((-1.0)*x5390*x5396))+(((-1.0)*x5386*x5392))+((x5386*x5387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5399=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5399;
j4eval[1]=IKsign(x5399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5400=((1.0)*sj5);
IkReal x5401=((((-1.0)*cj6*r01*x5400))+(((-1.0)*r00*sj6*x5400))+((cj5*r02)));
j4eval[0]=x5401;
j4eval[1]=IKsign(x5401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5402=cj5*cj5;
IkReal x5403=cj6*cj6;
IkReal x5404=r20*r20;
IkReal x5405=r21*r21;
IkReal x5406=r22*r22;
IkReal x5407=(r22*sj5);
IkReal x5408=(cj6*r20);
IkReal x5409=(cj1*sj2);
IkReal x5410=(cj6*r21);
IkReal x5411=(cj5*sj1);
IkReal x5412=(r20*sj6);
IkReal x5413=(r21*sj6);
IkReal x5414=((2.0)*x5412);
IkReal x5415=((1.0)*x5402);
IkReal x5416=(x5403*x5404);
IkReal x5417=(x5403*x5405);
IkReal x5418=((((-1.0)*x5417))+(((2.0)*cj5*x5407*x5410))+(((-2.0)*x5408*x5413))+(((-1.0)*x5415*x5416))+x5416+x5406+x5405+(((-1.0)*x5406*x5415))+((x5402*x5417))+((cj5*x5407*x5414))+((x5402*x5404))+(((2.0)*x5402*x5408*x5413)));
j4eval[0]=x5418;
j4eval[1]=((IKabs((((sj1*x5408))+((x5407*x5409))+(((-1.0)*sj1*x5413))+((cj5*x5409*x5410))+((cj5*x5409*x5412)))))+(IKabs((((x5410*x5411))+((sj1*x5407))+((x5411*x5412))+(((-1.0)*x5408*x5409))+((x5409*x5413))))));
j4eval[2]=IKsign(x5418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5419=(cj0*sj6);
IkReal x5420=(cj0*cj6);
IkReal x5421=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5421;
j4eval[1]=((IKabs((((cj5*r21*x5420))+((cj5*r20*x5419))+((cj0*r22*sj5)))))+(IKabs(((((-1.0)*r21*x5419))+((r20*x5420))))));
j4eval[2]=IKsign(x5421);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5422=(r21*sj0);
IkReal x5423=(r20*sj0);
IkReal x5424=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5424;
j4eval[1]=((IKabs(((((-1.0)*sj6*x5422))+((cj6*x5423)))))+(IKabs((((cj5*cj6*x5422))+((r22*sj0*sj5))+((cj5*sj6*x5423))))));
j4eval[2]=IKsign(x5424);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5425=cj6*cj6;
IkReal x5426=cj5*cj5;
IkReal x5427=(r02*r22);
IkReal x5428=(r22*sj5);
IkReal x5429=(r00*r20);
IkReal x5430=((1.0)*r21);
IkReal x5431=(r20*sj6);
IkReal x5432=(cj6*r01);
IkReal x5433=(cj0*cj5);
IkReal x5434=(r00*sj6);
IkReal x5435=((1.0)*cj5);
IkReal x5436=(cj6*r21);
IkReal x5437=(cj5*r02*sj5);
IkReal x5438=((1.0)*x5426);
IkReal x5439=(x5425*x5426);
IkReal x5440=((((-1.0)*r01*x5430))+(((-1.0)*x5428*x5432*x5435))+(((-1.0)*x5431*x5432*x5438))+(((-1.0)*r01*x5430*x5439))+(((-1.0)*x5428*x5434*x5435))+((x5426*x5427))+(((-1.0)*r02*sj5*x5431*x5435))+(((-1.0)*x5429*x5438))+((x5431*x5432))+((r01*r21*x5425))+(((-1.0)*x5425*x5429))+((x5429*x5439))+(((-1.0)*cj6*x5430*x5437))+(((-1.0)*x5427))+((x5434*x5436))+(((-1.0)*cj6*x5426*x5430*x5434)));
j4eval[0]=x5440;
j4eval[1]=((IKabs((((cj0*x5428))+((x5431*x5433))+((x5433*x5436)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x5430))))));
j4eval[2]=IKsign(x5440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5441=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5441;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5442=((1.0)*sj5);
IkReal x5443=(((cj5*r22))+(((-1.0)*r20*sj6*x5442))+(((-1.0)*cj6*r21*x5442)));
j4eval[0]=x5443;
j4eval[1]=IKsign(x5443);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5444=cj6*cj6;
IkReal x5445=cj5*cj5;
IkReal x5446=r10*r10;
IkReal x5447=r11*r11;
IkReal x5448=r12*r12;
IkReal x5449=(r10*sj6);
IkReal x5450=(r12*sj5);
IkReal x5451=((2.0)*cj6*r11);
IkReal x5452=((1.0)*x5446);
IkReal x5453=(x5444*x5447);
IkReal x5454=((((-1.0)*x5448))+(((-1.0)*x5447))+((x5444*x5445*x5446))+(((-1.0)*cj5*x5450*x5451))+x5453+(((-2.0)*cj5*x5449*x5450))+(((-1.0)*x5445*x5449*x5451))+((x5445*x5448))+(((-1.0)*x5444*x5452))+((x5449*x5451))+(((-1.0)*x5445*x5452))+(((-1.0)*x5445*x5453)));
j4eval[0]=x5454;
j4eval[1]=((IKabs(((((-1.0)*r11*sj6))+((cj6*r10)))))+(IKabs((((cj5*x5449))+x5450+((cj5*cj6*r11))))));
j4eval[2]=IKsign(x5454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5455=cj6*cj6;
IkReal x5456=cj5*cj5;
IkReal x5457=r10*r10;
IkReal x5458=r11*r11;
IkReal x5459=r12*r12;
IkReal x5460=(r10*sj6);
IkReal x5461=(r12*sj5);
IkReal x5462=((2.0)*cj6*r11);
IkReal x5463=(x5455*x5458);
IkReal x5464=(x5456*x5457);
CheckValue<IkReal> x5465=IKPowWithIntegerCheck(IKsign((((x5456*x5459))+x5463+(((-2.0)*cj5*x5460*x5461))+(((-1.0)*cj5*x5461*x5462))+(((-1.0)*x5456*x5463))+((x5455*x5464))+(((-1.0)*x5456*x5460*x5462))+(((-1.0)*x5455*x5457))+(((-1.0)*x5464))+((x5460*x5462))+(((-1.0)*x5458))+(((-1.0)*x5459)))),-1);
if(!x5465.valid){
continue;
}
CheckValue<IkReal> x5466 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x5461+((cj5*x5460))+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5465.value)))+(x5466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5467=IKsin(j4);
IkReal x5468=IKcos(j4);
IkReal x5469=(cj5*cj6);
IkReal x5470=(r11*sj6);
IkReal x5471=(cj6*r20);
IkReal x5472=(cj6*r10);
IkReal x5473=(cj5*sj6);
IkReal x5474=(r01*sj6);
IkReal x5475=(r21*sj6);
IkReal x5476=(cj6*r00);
IkReal x5477=((1.0)*x5468);
IkReal x5478=((1.0)*x5467);
IkReal x5479=(sj5*x5478);
evalcond[0]=((((-1.0)*x5475*x5477))+(((-1.0)*r20*x5473*x5478))+(((-1.0)*r22*x5479))+((x5468*x5471))+(((-1.0)*r21*x5469*x5478)));
evalcond[1]=((((-1.0)*r12*x5479))+(((-1.0)*x5470*x5477))+((x5468*x5472))+(((-1.0)*r11*x5469*x5478))+(((-1.0)*r10*x5473*x5478)));
evalcond[2]=(((x5467*x5475))+(((-1.0)*r20*x5473*x5477))+(((-1.0)*x5471*x5478))+(((-1.0)*r22*sj5*x5477))+(((-1.0)*r21*x5469*x5477)));
evalcond[3]=((((-1.0)*x5476*x5478))+((x5467*x5474))+(((-1.0)*r01*x5469*x5477))+(((-1.0)*r02*sj5*x5477))+(((-1.0)*r00*x5473*x5477)));
evalcond[4]=((-1.0)+(((-1.0)*x5474*x5477))+(((-1.0)*r01*x5469*x5478))+((x5468*x5476))+(((-1.0)*r02*x5479))+(((-1.0)*r00*x5473*x5478)));
evalcond[5]=((-1.0)+((x5467*x5470))+(((-1.0)*x5472*x5478))+(((-1.0)*r12*sj5*x5477))+(((-1.0)*r11*x5469*x5477))+(((-1.0)*r10*x5473*x5477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5480=((1.0)*sj5);
CheckValue<IkReal> x5481 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5481.valid){
continue;
}
CheckValue<IkReal> x5482=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x5480))+(((-1.0)*cj6*r21*x5480)))),-1);
if(!x5482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5481.value)+(((1.5707963267949)*(x5482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5483=IKsin(j4);
IkReal x5484=IKcos(j4);
IkReal x5485=(cj5*cj6);
IkReal x5486=(r11*sj6);
IkReal x5487=(cj6*r20);
IkReal x5488=(cj6*r10);
IkReal x5489=(cj5*sj6);
IkReal x5490=(r01*sj6);
IkReal x5491=(r21*sj6);
IkReal x5492=(cj6*r00);
IkReal x5493=((1.0)*x5484);
IkReal x5494=((1.0)*x5483);
IkReal x5495=(sj5*x5494);
evalcond[0]=((((-1.0)*r20*x5489*x5494))+(((-1.0)*r21*x5485*x5494))+(((-1.0)*x5491*x5493))+(((-1.0)*r22*x5495))+((x5484*x5487)));
evalcond[1]=((((-1.0)*r12*x5495))+((x5484*x5488))+(((-1.0)*x5486*x5493))+(((-1.0)*r11*x5485*x5494))+(((-1.0)*r10*x5489*x5494)));
evalcond[2]=((((-1.0)*r20*x5489*x5493))+(((-1.0)*r21*x5485*x5493))+((x5483*x5491))+(((-1.0)*x5487*x5494))+(((-1.0)*r22*sj5*x5493)));
evalcond[3]=(((x5483*x5490))+(((-1.0)*r01*x5485*x5493))+(((-1.0)*x5492*x5494))+(((-1.0)*r00*x5489*x5493))+(((-1.0)*r02*sj5*x5493)));
evalcond[4]=((-1.0)+((x5484*x5492))+(((-1.0)*r01*x5485*x5494))+(((-1.0)*r00*x5489*x5494))+(((-1.0)*r02*x5495))+(((-1.0)*x5490*x5493)));
evalcond[5]=((-1.0)+((x5483*x5486))+(((-1.0)*x5488*x5494))+(((-1.0)*r12*sj5*x5493))+(((-1.0)*r11*x5485*x5493))+(((-1.0)*r10*x5489*x5493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5496 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5496.valid){
continue;
}
CheckValue<IkReal> x5497=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5496.value)+(((1.5707963267949)*(x5497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5498=IKsin(j4);
IkReal x5499=IKcos(j4);
IkReal x5500=(cj5*cj6);
IkReal x5501=(r11*sj6);
IkReal x5502=(cj6*r20);
IkReal x5503=(cj6*r10);
IkReal x5504=(cj5*sj6);
IkReal x5505=(r01*sj6);
IkReal x5506=(r21*sj6);
IkReal x5507=(cj6*r00);
IkReal x5508=((1.0)*x5499);
IkReal x5509=((1.0)*x5498);
IkReal x5510=(sj5*x5509);
evalcond[0]=((((-1.0)*r21*x5500*x5509))+(((-1.0)*r22*x5510))+(((-1.0)*x5506*x5508))+((x5499*x5502))+(((-1.0)*r20*x5504*x5509)));
evalcond[1]=((((-1.0)*r11*x5500*x5509))+(((-1.0)*x5501*x5508))+(((-1.0)*r12*x5510))+((x5499*x5503))+(((-1.0)*r10*x5504*x5509)));
evalcond[2]=((((-1.0)*r21*x5500*x5508))+(((-1.0)*r22*sj5*x5508))+(((-1.0)*x5502*x5509))+((x5498*x5506))+(((-1.0)*r20*x5504*x5508)));
evalcond[3]=((((-1.0)*r02*sj5*x5508))+((x5498*x5505))+(((-1.0)*x5507*x5509))+(((-1.0)*r01*x5500*x5508))+(((-1.0)*r00*x5504*x5508)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5510))+((x5499*x5507))+(((-1.0)*x5505*x5508))+(((-1.0)*r01*x5500*x5509))+(((-1.0)*r00*x5504*x5509)));
evalcond[5]=((-1.0)+(((-1.0)*x5503*x5509))+(((-1.0)*r11*x5500*x5508))+((x5498*x5501))+(((-1.0)*r12*sj5*x5508))+(((-1.0)*r10*x5504*x5508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5511=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5511;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5512=((1.0)*sj6);
IkReal x5513=(((cj5*r12))+(((-1.0)*r10*sj5*x5512))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x5513;
j4eval[1]=IKsign(x5513);
j4eval[2]=((IKabs(((((-1.0)*r21*x5512))+((cj6*r20)))))+(IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5514=r11*r11;
IkReal x5515=cj5*cj5;
IkReal x5516=cj6*cj6;
IkReal x5517=r10*r10;
IkReal x5518=r12*r12;
IkReal x5519=(r12*sj5);
IkReal x5520=(cj6*r10);
IkReal x5521=((1.0)*x5516);
IkReal x5522=(cj5*cj6*r11);
IkReal x5523=(cj5*r10*sj6);
IkReal x5524=((2.0)*r11*sj6);
IkReal x5525=(x5515*x5517);
IkReal x5526=(x5525+x5518+x5514+(((-1.0)*x5515*x5518))+(((-1.0)*x5514*x5521))+(((2.0)*x5519*x5523))+(((2.0)*x5519*x5522))+((x5515*x5520*x5524))+((x5516*x5517))+(((-1.0)*x5521*x5525))+(((-1.0)*x5520*x5524))+((x5514*x5515*x5516)));
j4eval[0]=x5526;
j4eval[1]=IKsign(x5526);
j4eval[2]=((IKabs((x5522+x5523+x5519)))+(IKabs((x5520+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5527=r11*r11;
IkReal x5528=cj5*cj5;
IkReal x5529=cj6*cj6;
IkReal x5530=r10*r10;
IkReal x5531=r12*r12;
IkReal x5532=(r10*sj6);
IkReal x5533=(r12*sj5);
IkReal x5534=((1.0)*x5529);
IkReal x5535=(cj5*cj6*r11);
IkReal x5536=((2.0)*cj6*r11);
IkReal x5537=(x5528*x5530);
CheckValue<IkReal> x5538 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x5533+x5535+((cj5*x5532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5538.valid){
continue;
}
CheckValue<IkReal> x5539=IKPowWithIntegerCheck(IKsign((((x5527*x5528*x5529))+x5527+x5531+x5537+(((2.0)*cj5*x5532*x5533))+(((2.0)*x5533*x5535))+(((-1.0)*x5534*x5537))+(((-1.0)*x5527*x5534))+((x5528*x5532*x5536))+(((-1.0)*x5532*x5536))+(((-1.0)*x5528*x5531))+((x5529*x5530)))),-1);
if(!x5539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5538.value)+(((1.5707963267949)*(x5539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5540=IKsin(j4);
IkReal x5541=IKcos(j4);
IkReal x5542=(cj5*cj6);
IkReal x5543=(r11*sj6);
IkReal x5544=(cj6*r20);
IkReal x5545=(cj6*r10);
IkReal x5546=(cj5*sj6);
IkReal x5547=(r01*sj6);
IkReal x5548=(r21*sj6);
IkReal x5549=(cj6*r00);
IkReal x5550=((1.0)*x5541);
IkReal x5551=((1.0)*x5540);
IkReal x5552=(sj5*x5551);
evalcond[0]=((((-1.0)*r21*x5542*x5551))+((x5541*x5544))+(((-1.0)*x5548*x5550))+(((-1.0)*r22*x5552))+(((-1.0)*r20*x5546*x5551)));
evalcond[1]=((((-1.0)*x5543*x5550))+(((-1.0)*r10*x5546*x5551))+((x5541*x5545))+(((-1.0)*r12*x5552))+(((-1.0)*r11*x5542*x5551)));
evalcond[2]=((((-1.0)*r21*x5542*x5550))+(((-1.0)*x5544*x5551))+((x5540*x5548))+(((-1.0)*r20*x5546*x5550))+(((-1.0)*r22*sj5*x5550)));
evalcond[3]=((((-1.0)*x5549*x5551))+((x5540*x5547))+(((-1.0)*r02*sj5*x5550))+(((-1.0)*r00*x5546*x5550))+(((-1.0)*r01*x5542*x5550)));
evalcond[4]=((1.0)+((x5541*x5549))+(((-1.0)*r02*x5552))+(((-1.0)*r00*x5546*x5551))+(((-1.0)*x5547*x5550))+(((-1.0)*r01*x5542*x5551)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5546*x5550))+(((-1.0)*x5545*x5551))+((x5540*x5543))+(((-1.0)*r11*x5542*x5550))+(((-1.0)*r12*sj5*x5550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5553=((1.0)*sj6);
CheckValue<IkReal> x5554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5*x5553))+((cj5*r12))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x5554.valid){
continue;
}
CheckValue<IkReal> x5555 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5553))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5554.value)))+(x5555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5556=IKsin(j4);
IkReal x5557=IKcos(j4);
IkReal x5558=(cj5*cj6);
IkReal x5559=(r11*sj6);
IkReal x5560=(cj6*r20);
IkReal x5561=(cj6*r10);
IkReal x5562=(cj5*sj6);
IkReal x5563=(r01*sj6);
IkReal x5564=(r21*sj6);
IkReal x5565=(cj6*r00);
IkReal x5566=((1.0)*x5557);
IkReal x5567=((1.0)*x5556);
IkReal x5568=(sj5*x5567);
evalcond[0]=((((-1.0)*x5564*x5566))+(((-1.0)*r22*x5568))+(((-1.0)*r20*x5562*x5567))+(((-1.0)*r21*x5558*x5567))+((x5557*x5560)));
evalcond[1]=((((-1.0)*r10*x5562*x5567))+(((-1.0)*r12*x5568))+(((-1.0)*r11*x5558*x5567))+(((-1.0)*x5559*x5566))+((x5557*x5561)));
evalcond[2]=((((-1.0)*r22*sj5*x5566))+((x5556*x5564))+(((-1.0)*r20*x5562*x5566))+(((-1.0)*r21*x5558*x5566))+(((-1.0)*x5560*x5567)));
evalcond[3]=((((-1.0)*r02*sj5*x5566))+((x5556*x5563))+(((-1.0)*r01*x5558*x5566))+(((-1.0)*x5565*x5567))+(((-1.0)*r00*x5562*x5566)));
evalcond[4]=((1.0)+(((-1.0)*x5563*x5566))+(((-1.0)*r02*x5568))+(((-1.0)*r01*x5558*x5567))+(((-1.0)*r00*x5562*x5567))+((x5557*x5565)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5562*x5566))+((x5556*x5559))+(((-1.0)*r12*sj5*x5566))+(((-1.0)*r11*x5558*x5566))+(((-1.0)*x5561*x5567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5569=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5569.valid){
continue;
}
CheckValue<IkReal> x5570 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5569.value)))+(x5570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5571=IKsin(j4);
IkReal x5572=IKcos(j4);
IkReal x5573=(cj5*cj6);
IkReal x5574=(r11*sj6);
IkReal x5575=(cj6*r20);
IkReal x5576=(cj6*r10);
IkReal x5577=(cj5*sj6);
IkReal x5578=(r01*sj6);
IkReal x5579=(r21*sj6);
IkReal x5580=(cj6*r00);
IkReal x5581=((1.0)*x5572);
IkReal x5582=((1.0)*x5571);
IkReal x5583=(sj5*x5582);
evalcond[0]=(((x5572*x5575))+(((-1.0)*x5579*x5581))+(((-1.0)*r20*x5577*x5582))+(((-1.0)*r21*x5573*x5582))+(((-1.0)*r22*x5583)));
evalcond[1]=(((x5572*x5576))+(((-1.0)*r12*x5583))+(((-1.0)*x5574*x5581))+(((-1.0)*r11*x5573*x5582))+(((-1.0)*r10*x5577*x5582)));
evalcond[2]=((((-1.0)*x5575*x5582))+(((-1.0)*r20*x5577*x5581))+(((-1.0)*r21*x5573*x5581))+(((-1.0)*r22*sj5*x5581))+((x5571*x5579)));
evalcond[3]=((((-1.0)*r02*sj5*x5581))+(((-1.0)*r01*x5573*x5581))+(((-1.0)*x5580*x5582))+(((-1.0)*r00*x5577*x5581))+((x5571*x5578)));
evalcond[4]=((1.0)+(((-1.0)*x5578*x5581))+((x5572*x5580))+(((-1.0)*r02*x5583))+(((-1.0)*r01*x5573*x5582))+(((-1.0)*r00*x5577*x5582)));
evalcond[5]=((1.0)+(((-1.0)*x5576*x5582))+(((-1.0)*r12*sj5*x5581))+(((-1.0)*r11*x5573*x5581))+(((-1.0)*r10*x5577*x5581))+((x5571*x5574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5584=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5584;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5585=((1.0)*sj5);
IkReal x5586=(((cj5*r22))+(((-1.0)*r20*sj6*x5585))+(((-1.0)*cj6*r21*x5585)));
j4eval[0]=x5586;
j4eval[1]=IKsign(x5586);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5587=cj6*cj6;
IkReal x5588=cj5*cj5;
IkReal x5589=r00*r00;
IkReal x5590=r01*r01;
IkReal x5591=r02*r02;
IkReal x5592=(cj6*r00);
IkReal x5593=(cj5*cj6*r01);
IkReal x5594=((2.0)*r02*sj5);
IkReal x5595=((1.0)*x5587);
IkReal x5596=((2.0)*r01*sj6);
IkReal x5597=(cj5*r00*sj6);
IkReal x5598=(x5588*x5589);
IkReal x5599=((((-1.0)*x5588*x5590*x5595))+((x5592*x5596))+(((-1.0)*x5593*x5594))+(((-1.0)*x5598))+(((-1.0)*x5590))+(((-1.0)*x5591))+(((-1.0)*x5588*x5592*x5596))+(((-1.0)*x5594*x5597))+((x5587*x5598))+((x5587*x5590))+((x5588*x5591))+(((-1.0)*x5589*x5595)));
j4eval[0]=x5599;
j4eval[1]=((IKabs((x5592+(((-1.0)*r01*sj6)))))+(IKabs((x5593+x5597+((r02*sj5))))));
j4eval[2]=IKsign(x5599);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5600=cj6*cj6;
IkReal x5601=cj5*cj5;
IkReal x5602=r00*r00;
IkReal x5603=r01*r01;
IkReal x5604=r02*r02;
IkReal x5605=(cj6*r00);
IkReal x5606=(cj5*cj6*r01);
IkReal x5607=((2.0)*r02*sj5);
IkReal x5608=((1.0)*x5600);
IkReal x5609=((2.0)*r01*sj6);
IkReal x5610=(cj5*r00*sj6);
IkReal x5611=(x5601*x5602);
CheckValue<IkReal> x5612=IKPowWithIntegerCheck(IKsign((((x5600*x5603))+(((-1.0)*x5611))+((x5600*x5611))+(((-1.0)*x5601*x5605*x5609))+(((-1.0)*x5603))+(((-1.0)*x5604))+((x5605*x5609))+(((-1.0)*x5602*x5608))+(((-1.0)*x5601*x5603*x5608))+(((-1.0)*x5606*x5607))+((x5601*x5604))+(((-1.0)*x5607*x5610)))),-1);
if(!x5612.valid){
continue;
}
CheckValue<IkReal> x5613 = IKatan2WithCheck(IkReal((x5605+(((-1.0)*r01*sj6)))),IkReal((x5610+x5606+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5612.value)))+(x5613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5614=IKsin(j4);
IkReal x5615=IKcos(j4);
IkReal x5616=(cj5*cj6);
IkReal x5617=(r11*sj6);
IkReal x5618=(cj6*r20);
IkReal x5619=(cj6*r10);
IkReal x5620=(cj5*sj6);
IkReal x5621=(r21*sj6);
IkReal x5622=(cj6*r00);
IkReal x5623=(r01*sj6);
IkReal x5624=((1.0)*x5615);
IkReal x5625=((1.0)*x5614);
IkReal x5626=(sj5*x5625);
evalcond[0]=((((-1.0)*r22*x5626))+((x5615*x5618))+(((-1.0)*r20*x5620*x5625))+(((-1.0)*x5621*x5624))+(((-1.0)*r21*x5616*x5625)));
evalcond[1]=(((x5615*x5622))+(((-1.0)*r01*x5616*x5625))+(((-1.0)*r00*x5620*x5625))+(((-1.0)*x5623*x5624))+(((-1.0)*r02*x5626)));
evalcond[2]=((((-1.0)*r22*sj5*x5624))+(((-1.0)*x5618*x5625))+((x5614*x5621))+(((-1.0)*r20*x5620*x5624))+(((-1.0)*r21*x5616*x5624)));
evalcond[3]=((((-1.0)*r12*sj5*x5624))+(((-1.0)*x5619*x5625))+((x5614*x5617))+(((-1.0)*r11*x5616*x5624))+(((-1.0)*r10*x5620*x5624)));
evalcond[4]=((1.0)+((x5615*x5619))+(((-1.0)*r12*x5626))+(((-1.0)*r11*x5616*x5625))+(((-1.0)*r10*x5620*x5625))+(((-1.0)*x5617*x5624)));
evalcond[5]=((-1.0)+((x5614*x5623))+(((-1.0)*r01*x5616*x5624))+(((-1.0)*r00*x5620*x5624))+(((-1.0)*r02*sj5*x5624))+(((-1.0)*x5622*x5625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5627=((1.0)*sj5);
CheckValue<IkReal> x5628 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5628.valid){
continue;
}
CheckValue<IkReal> x5629=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x5627))+(((-1.0)*cj6*r21*x5627)))),-1);
if(!x5629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5628.value)+(((1.5707963267949)*(x5629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5630=IKsin(j4);
IkReal x5631=IKcos(j4);
IkReal x5632=(cj5*cj6);
IkReal x5633=(r11*sj6);
IkReal x5634=(cj6*r20);
IkReal x5635=(cj6*r10);
IkReal x5636=(cj5*sj6);
IkReal x5637=(r21*sj6);
IkReal x5638=(cj6*r00);
IkReal x5639=(r01*sj6);
IkReal x5640=((1.0)*x5631);
IkReal x5641=((1.0)*x5630);
IkReal x5642=(sj5*x5641);
evalcond[0]=((((-1.0)*r22*x5642))+(((-1.0)*r20*x5636*x5641))+(((-1.0)*r21*x5632*x5641))+((x5631*x5634))+(((-1.0)*x5637*x5640)));
evalcond[1]=((((-1.0)*r01*x5632*x5641))+(((-1.0)*r02*x5642))+((x5631*x5638))+(((-1.0)*x5639*x5640))+(((-1.0)*r00*x5636*x5641)));
evalcond[2]=((((-1.0)*x5634*x5641))+(((-1.0)*r20*x5636*x5640))+((x5630*x5637))+(((-1.0)*r21*x5632*x5640))+(((-1.0)*r22*sj5*x5640)));
evalcond[3]=((((-1.0)*r10*x5636*x5640))+((x5630*x5633))+(((-1.0)*r11*x5632*x5640))+(((-1.0)*r12*sj5*x5640))+(((-1.0)*x5635*x5641)));
evalcond[4]=((1.0)+(((-1.0)*r12*x5642))+(((-1.0)*r10*x5636*x5641))+((x5631*x5635))+(((-1.0)*r11*x5632*x5641))+(((-1.0)*x5633*x5640)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x5632*x5640))+(((-1.0)*x5638*x5641))+((x5630*x5639))+(((-1.0)*r02*sj5*x5640))+(((-1.0)*r00*x5636*x5640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5643 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5643.valid){
continue;
}
CheckValue<IkReal> x5644=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5643.value)+(((1.5707963267949)*(x5644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5645=IKsin(j4);
IkReal x5646=IKcos(j4);
IkReal x5647=(cj5*cj6);
IkReal x5648=(r11*sj6);
IkReal x5649=(cj6*r20);
IkReal x5650=(cj6*r10);
IkReal x5651=(cj5*sj6);
IkReal x5652=(r21*sj6);
IkReal x5653=(cj6*r00);
IkReal x5654=(r01*sj6);
IkReal x5655=((1.0)*x5646);
IkReal x5656=((1.0)*x5645);
IkReal x5657=(sj5*x5656);
evalcond[0]=((((-1.0)*x5652*x5655))+(((-1.0)*r22*x5657))+(((-1.0)*r21*x5647*x5656))+((x5646*x5649))+(((-1.0)*r20*x5651*x5656)));
evalcond[1]=((((-1.0)*x5654*x5655))+(((-1.0)*r02*x5657))+((x5646*x5653))+(((-1.0)*r01*x5647*x5656))+(((-1.0)*r00*x5651*x5656)));
evalcond[2]=(((x5645*x5652))+(((-1.0)*x5649*x5656))+(((-1.0)*r21*x5647*x5655))+(((-1.0)*r22*sj5*x5655))+(((-1.0)*r20*x5651*x5655)));
evalcond[3]=(((x5645*x5648))+(((-1.0)*r10*x5651*x5655))+(((-1.0)*x5650*x5656))+(((-1.0)*r11*x5647*x5655))+(((-1.0)*r12*sj5*x5655)));
evalcond[4]=((1.0)+(((-1.0)*r12*x5657))+(((-1.0)*r10*x5651*x5656))+((x5646*x5650))+(((-1.0)*x5648*x5655))+(((-1.0)*r11*x5647*x5656)));
evalcond[5]=((-1.0)+((x5645*x5654))+(((-1.0)*x5653*x5656))+(((-1.0)*r02*sj5*x5655))+(((-1.0)*r01*x5647*x5655))+(((-1.0)*r00*x5651*x5655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5658=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5658;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5658);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5659=((1.0)*sj6);
IkReal x5660=((((-1.0)*r00*sj5*x5659))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x5660;
j4eval[1]=IKsign(x5660);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5659))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5661=cj6*cj6;
IkReal x5662=r01*r01;
IkReal x5663=cj5*cj5;
IkReal x5664=r00*r00;
IkReal x5665=r02*r02;
IkReal x5666=(cj6*r00);
IkReal x5667=(r02*sj5);
IkReal x5668=(cj5*cj6*r01);
IkReal x5669=((2.0)*r01*sj6);
IkReal x5670=(cj5*r00*sj6);
IkReal x5671=((1.0)*x5663);
IkReal x5672=(x5661*x5664);
IkReal x5673=(x5661*x5662);
IkReal x5674=(x5662+x5665+x5672+(((-1.0)*x5673))+(((-1.0)*x5666*x5669))+(((2.0)*x5667*x5668))+((x5663*x5666*x5669))+(((-1.0)*x5671*x5672))+(((2.0)*x5667*x5670))+(((-1.0)*x5665*x5671))+((x5663*x5664))+((x5663*x5673)));
j4eval[0]=x5674;
j4eval[1]=((IKabs((x5667+x5668+x5670)))+(IKabs((x5666+(((-1.0)*r01*sj6))))));
j4eval[2]=IKsign(x5674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5675=cj6*cj6;
IkReal x5676=r01*r01;
IkReal x5677=cj5*cj5;
IkReal x5678=r00*r00;
IkReal x5679=r02*r02;
IkReal x5680=(cj6*r00);
IkReal x5681=((2.0)*r01);
IkReal x5682=(cj5*cj6);
IkReal x5683=(r02*sj5);
IkReal x5684=(cj5*r00*sj6);
IkReal x5685=(x5677*x5678);
IkReal x5686=(x5675*x5676);
CheckValue<IkReal> x5687 = IKatan2WithCheck(IkReal((x5680+(((-1.0)*r01*sj6)))),IkReal((x5684+x5683+((r01*x5682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5687.valid){
continue;
}
CheckValue<IkReal> x5688=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*x5680*x5681))+x5685+x5676+x5679+(((-1.0)*x5677*x5679))+(((-1.0)*x5675*x5685))+(((2.0)*x5683*x5684))+((sj6*x5677*x5680*x5681))+((x5675*x5678))+((x5681*x5682*x5683))+(((-1.0)*x5686))+((x5677*x5686)))),-1);
if(!x5688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5687.value)+(((1.5707963267949)*(x5688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5689=IKsin(j4);
IkReal x5690=IKcos(j4);
IkReal x5691=(cj5*cj6);
IkReal x5692=(r11*sj6);
IkReal x5693=(cj6*r20);
IkReal x5694=(cj6*r10);
IkReal x5695=(cj5*sj6);
IkReal x5696=(r21*sj6);
IkReal x5697=(cj6*r00);
IkReal x5698=(r01*sj6);
IkReal x5699=((1.0)*x5690);
IkReal x5700=((1.0)*x5689);
IkReal x5701=(sj5*x5700);
evalcond[0]=((((-1.0)*x5696*x5699))+((x5690*x5693))+(((-1.0)*r20*x5695*x5700))+(((-1.0)*r21*x5691*x5700))+(((-1.0)*r22*x5701)));
evalcond[1]=(((x5690*x5697))+(((-1.0)*x5698*x5699))+(((-1.0)*r00*x5695*x5700))+(((-1.0)*r02*x5701))+(((-1.0)*r01*x5691*x5700)));
evalcond[2]=((((-1.0)*r20*x5695*x5699))+(((-1.0)*x5693*x5700))+(((-1.0)*r21*x5691*x5699))+((x5689*x5696))+(((-1.0)*r22*sj5*x5699)));
evalcond[3]=((((-1.0)*x5694*x5700))+(((-1.0)*r10*x5695*x5699))+(((-1.0)*r12*sj5*x5699))+((x5689*x5692))+(((-1.0)*r11*x5691*x5699)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x5701))+((x5690*x5694))+(((-1.0)*r11*x5691*x5700))+(((-1.0)*x5692*x5699))+(((-1.0)*r10*x5695*x5700)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x5699))+(((-1.0)*x5697*x5700))+((x5689*x5698))+(((-1.0)*r00*x5695*x5699))+(((-1.0)*r01*x5691*x5699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5702=((1.0)*sj6);
CheckValue<IkReal> x5703 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5702))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5703.valid){
continue;
}
CheckValue<IkReal> x5704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x5702))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x5704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5703.value)+(((1.5707963267949)*(x5704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5705=IKsin(j4);
IkReal x5706=IKcos(j4);
IkReal x5707=(cj5*cj6);
IkReal x5708=(r11*sj6);
IkReal x5709=(cj6*r20);
IkReal x5710=(cj6*r10);
IkReal x5711=(cj5*sj6);
IkReal x5712=(r21*sj6);
IkReal x5713=(cj6*r00);
IkReal x5714=(r01*sj6);
IkReal x5715=((1.0)*x5706);
IkReal x5716=((1.0)*x5705);
IkReal x5717=(sj5*x5716);
evalcond[0]=(((x5706*x5709))+(((-1.0)*r22*x5717))+(((-1.0)*r21*x5707*x5716))+(((-1.0)*x5712*x5715))+(((-1.0)*r20*x5711*x5716)));
evalcond[1]=((((-1.0)*x5714*x5715))+(((-1.0)*r01*x5707*x5716))+(((-1.0)*r00*x5711*x5716))+((x5706*x5713))+(((-1.0)*r02*x5717)));
evalcond[2]=((((-1.0)*x5709*x5716))+(((-1.0)*r22*sj5*x5715))+(((-1.0)*r21*x5707*x5715))+(((-1.0)*r20*x5711*x5715))+((x5705*x5712)));
evalcond[3]=(((x5705*x5708))+(((-1.0)*r10*x5711*x5715))+(((-1.0)*x5710*x5716))+(((-1.0)*r11*x5707*x5715))+(((-1.0)*r12*sj5*x5715)));
evalcond[4]=((-1.0)+(((-1.0)*x5708*x5715))+(((-1.0)*r10*x5711*x5716))+(((-1.0)*r12*x5717))+(((-1.0)*r11*x5707*x5716))+((x5706*x5710)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x5715))+(((-1.0)*x5713*x5716))+(((-1.0)*r01*x5707*x5715))+(((-1.0)*r00*x5711*x5715))+((x5705*x5714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5718=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5718.valid){
continue;
}
CheckValue<IkReal> x5719 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5718.value)))+(x5719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5720=IKsin(j4);
IkReal x5721=IKcos(j4);
IkReal x5722=(cj5*cj6);
IkReal x5723=(r11*sj6);
IkReal x5724=(cj6*r20);
IkReal x5725=(cj6*r10);
IkReal x5726=(cj5*sj6);
IkReal x5727=(r21*sj6);
IkReal x5728=(cj6*r00);
IkReal x5729=(r01*sj6);
IkReal x5730=((1.0)*x5721);
IkReal x5731=((1.0)*x5720);
IkReal x5732=(sj5*x5731);
evalcond[0]=(((x5721*x5724))+(((-1.0)*x5727*x5730))+(((-1.0)*r21*x5722*x5731))+(((-1.0)*r22*x5732))+(((-1.0)*r20*x5726*x5731)));
evalcond[1]=(((x5721*x5728))+(((-1.0)*x5729*x5730))+(((-1.0)*r02*x5732))+(((-1.0)*r01*x5722*x5731))+(((-1.0)*r00*x5726*x5731)));
evalcond[2]=((((-1.0)*r22*sj5*x5730))+(((-1.0)*x5724*x5731))+(((-1.0)*r21*x5722*x5730))+(((-1.0)*r20*x5726*x5730))+((x5720*x5727)));
evalcond[3]=((((-1.0)*x5725*x5731))+(((-1.0)*r12*sj5*x5730))+(((-1.0)*r11*x5722*x5730))+((x5720*x5723))+(((-1.0)*r10*x5726*x5730)));
evalcond[4]=((-1.0)+((x5721*x5725))+(((-1.0)*r12*x5732))+(((-1.0)*r11*x5722*x5731))+(((-1.0)*x5723*x5730))+(((-1.0)*r10*x5726*x5731)));
evalcond[5]=((1.0)+(((-1.0)*x5728*x5731))+(((-1.0)*r01*x5722*x5730))+(((-1.0)*r02*sj5*x5730))+(((-1.0)*r00*x5726*x5730))+((x5720*x5729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5733=cj6*cj6;
IkReal x5734=cj5*cj5;
IkReal x5735=(r22*sj5);
IkReal x5736=(cj0*r20);
IkReal x5737=((1.0)*r21);
IkReal x5738=(cj5*sj6);
IkReal x5739=(r02*r22);
IkReal x5740=(cj5*cj6);
IkReal x5741=(r02*sj5);
IkReal x5742=(cj6*sj6);
IkReal x5743=((1.0)*r20);
IkReal x5744=(r01*x5737);
IkReal x5745=(r00*r20*x5734);
CheckValue<IkReal> x5746 = IKatan2WithCheck(IkReal((((cj6*x5736))+(((-1.0)*cj0*sj6*x5737)))),IkReal((((cj0*r21*x5740))+((cj0*x5735))+((x5736*x5738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5746.valid){
continue;
}
CheckValue<IkReal> x5747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5734*x5742*x5743))+((r01*r21*x5733))+((x5734*x5739))+(((-1.0)*r00*x5733*x5743))+(((-1.0)*x5733*x5734*x5744))+((x5733*x5745))+(((-1.0)*r00*x5734*x5737*x5742))+(((-1.0)*x5738*x5741*x5743))+(((-1.0)*x5737*x5740*x5741))+((r00*r21*x5742))+(((-1.0)*x5744))+(((-1.0)*r00*x5734*x5743))+(((-1.0)*r00*x5735*x5738))+(((-1.0)*r01*x5735*x5740))+(((-1.0)*x5739))+((r01*r20*x5742)))),-1);
if(!x5747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5746.value)+(((1.5707963267949)*(x5747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5748=IKsin(j4);
IkReal x5749=IKcos(j4);
IkReal x5750=((1.0)*sj0);
IkReal x5751=((1.0)*cj6);
IkReal x5752=((1.0)*sj6);
IkReal x5753=(cj5*x5749);
IkReal x5754=(r20*x5748);
IkReal x5755=(cj6*x5749);
IkReal x5756=(r11*x5748);
IkReal x5757=(r21*x5748);
IkReal x5758=(r01*x5748);
IkReal x5759=((1.0)*sj5*x5748);
IkReal x5760=((1.0)*sj5*x5749);
IkReal x5761=(cj5*x5748*x5752);
evalcond[0]=((((-1.0)*cj5*x5752*x5754))+(((-1.0)*cj5*x5751*x5757))+(((-1.0)*r21*x5749*x5752))+(((-1.0)*r22*x5759))+((r20*x5755)));
evalcond[1]=((((-1.0)*r20*x5752*x5753))+(((-1.0)*x5751*x5754))+(((-1.0)*r21*x5751*x5753))+(((-1.0)*r22*x5760))+((sj6*x5757)));
evalcond[2]=((((-1.0)*r11*x5749*x5752))+cj0+(((-1.0)*cj5*x5751*x5756))+(((-1.0)*r10*x5761))+(((-1.0)*r12*x5759))+((r10*x5755)));
evalcond[3]=((((-1.0)*cj5*x5751*x5758))+(((-1.0)*r01*x5749*x5752))+((r00*x5755))+(((-1.0)*x5750))+(((-1.0)*r02*x5759))+(((-1.0)*r00*x5761)));
evalcond[4]=((((-1.0)*r00*x5752*x5753))+(((-1.0)*r02*x5760))+(((-1.0)*r00*x5748*x5751))+(((-1.0)*cj0))+((sj6*x5758))+(((-1.0)*r01*x5751*x5753)));
evalcond[5]=((((-1.0)*r11*x5751*x5753))+(((-1.0)*r12*x5760))+(((-1.0)*r10*x5752*x5753))+(((-1.0)*x5750))+(((-1.0)*r10*x5748*x5751))+((sj6*x5756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5762=(cj5*sj0);
CheckValue<IkReal> x5763=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5763.valid){
continue;
}
CheckValue<IkReal> x5764 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r22*sj0*sj5))+((cj6*r21*x5762))+((r20*sj6*x5762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5763.value)))+(x5764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5765=IKsin(j4);
IkReal x5766=IKcos(j4);
IkReal x5767=((1.0)*sj0);
IkReal x5768=((1.0)*cj6);
IkReal x5769=((1.0)*sj6);
IkReal x5770=(cj5*x5766);
IkReal x5771=(r20*x5765);
IkReal x5772=(cj6*x5766);
IkReal x5773=(r11*x5765);
IkReal x5774=(r21*x5765);
IkReal x5775=(r01*x5765);
IkReal x5776=((1.0)*sj5*x5765);
IkReal x5777=((1.0)*sj5*x5766);
IkReal x5778=(cj5*x5765*x5769);
evalcond[0]=((((-1.0)*cj5*x5768*x5774))+(((-1.0)*r21*x5766*x5769))+(((-1.0)*cj5*x5769*x5771))+(((-1.0)*r22*x5776))+((r20*x5772)));
evalcond[1]=((((-1.0)*r21*x5768*x5770))+(((-1.0)*r20*x5769*x5770))+((sj6*x5774))+(((-1.0)*r22*x5777))+(((-1.0)*x5768*x5771)));
evalcond[2]=((((-1.0)*cj5*x5768*x5773))+cj0+(((-1.0)*r12*x5776))+(((-1.0)*r10*x5778))+(((-1.0)*r11*x5766*x5769))+((r10*x5772)));
evalcond[3]=((((-1.0)*r00*x5778))+(((-1.0)*cj5*x5768*x5775))+((r00*x5772))+(((-1.0)*r01*x5766*x5769))+(((-1.0)*r02*x5776))+(((-1.0)*x5767)));
evalcond[4]=((((-1.0)*r01*x5768*x5770))+((sj6*x5775))+(((-1.0)*r00*x5765*x5768))+(((-1.0)*r02*x5777))+(((-1.0)*cj0))+(((-1.0)*r00*x5769*x5770)));
evalcond[5]=((((-1.0)*r10*x5765*x5768))+(((-1.0)*r12*x5777))+(((-1.0)*r11*x5768*x5770))+((sj6*x5773))+(((-1.0)*r10*x5769*x5770))+(((-1.0)*x5767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5779=(cj0*sj6);
IkReal x5780=(cj0*cj6);
CheckValue<IkReal> x5781 = IKatan2WithCheck(IkReal((((r20*x5780))+(((-1.0)*r21*x5779)))),IkReal((((cj5*r21*x5780))+((cj5*r20*x5779))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5781.valid){
continue;
}
CheckValue<IkReal> x5782=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5781.value)+(((1.5707963267949)*(x5782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5783=IKsin(j4);
IkReal x5784=IKcos(j4);
IkReal x5785=((1.0)*sj0);
IkReal x5786=((1.0)*cj6);
IkReal x5787=((1.0)*sj6);
IkReal x5788=(cj5*x5784);
IkReal x5789=(r20*x5783);
IkReal x5790=(cj6*x5784);
IkReal x5791=(r11*x5783);
IkReal x5792=(r21*x5783);
IkReal x5793=(r01*x5783);
IkReal x5794=((1.0)*sj5*x5783);
IkReal x5795=((1.0)*sj5*x5784);
IkReal x5796=(cj5*x5783*x5787);
evalcond[0]=(((r20*x5790))+(((-1.0)*cj5*x5786*x5792))+(((-1.0)*cj5*x5787*x5789))+(((-1.0)*r22*x5794))+(((-1.0)*r21*x5784*x5787)));
evalcond[1]=(((sj6*x5792))+(((-1.0)*x5786*x5789))+(((-1.0)*r22*x5795))+(((-1.0)*r21*x5786*x5788))+(((-1.0)*r20*x5787*x5788)));
evalcond[2]=(((r10*x5790))+cj0+(((-1.0)*r10*x5796))+(((-1.0)*cj5*x5786*x5791))+(((-1.0)*r12*x5794))+(((-1.0)*r11*x5784*x5787)));
evalcond[3]=((((-1.0)*x5785))+(((-1.0)*r00*x5796))+(((-1.0)*cj5*x5786*x5793))+((r00*x5790))+(((-1.0)*r01*x5784*x5787))+(((-1.0)*r02*x5794)));
evalcond[4]=((((-1.0)*r00*x5787*x5788))+(((-1.0)*r01*x5786*x5788))+((sj6*x5793))+(((-1.0)*r02*x5795))+(((-1.0)*r00*x5783*x5786))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r10*x5783*x5786))+(((-1.0)*x5785))+((sj6*x5791))+(((-1.0)*r11*x5786*x5788))+(((-1.0)*r10*x5787*x5788))+(((-1.0)*r12*x5795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5797=(r20*sj0);
IkReal x5798=((1.0)*sj5);
IkReal x5799=(r21*sj0);
IkReal x5800=(((cj5*r12))+(((-1.0)*cj6*r11*x5798))+(((-1.0)*r10*sj6*x5798)));
j4eval[0]=x5800;
j4eval[1]=IKsign(x5800);
j4eval[2]=((IKabs((((cj6*x5797))+(((-1.0)*sj6*x5799)))))+(IKabs((((r22*sj0*sj5))+((cj5*cj6*x5799))+((cj5*sj6*x5797))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5801=(cj0*sj6);
IkReal x5802=((1.0)*sj5);
IkReal x5803=(cj0*cj6);
IkReal x5804=((((-1.0)*r00*sj6*x5802))+(((-1.0)*cj6*r01*x5802))+((cj5*r02)));
j4eval[0]=x5804;
j4eval[1]=IKsign(x5804);
j4eval[2]=((IKabs(((((-1.0)*r21*x5801))+((r20*x5803)))))+(IKabs((((cj5*r21*x5803))+((cj5*r20*x5801))+((cj0*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5805=cj6*cj6;
IkReal x5806=cj5*cj5;
IkReal x5807=(r02*r22);
IkReal x5808=(r22*sj5);
IkReal x5809=(r00*r20);
IkReal x5810=((1.0)*r21);
IkReal x5811=(r20*sj6);
IkReal x5812=(cj6*r01);
IkReal x5813=(cj0*cj5);
IkReal x5814=(r00*sj6);
IkReal x5815=((1.0)*cj5);
IkReal x5816=(cj6*r21);
IkReal x5817=(cj5*r02*sj5);
IkReal x5818=((1.0)*x5806);
IkReal x5819=(x5805*x5806);
IkReal x5820=((((-1.0)*r02*sj5*x5811*x5815))+((x5814*x5816))+(((-1.0)*x5808*x5812*x5815))+(((-1.0)*cj6*x5806*x5810*x5814))+(((-1.0)*x5811*x5812*x5818))+((x5806*x5807))+(((-1.0)*r01*x5810*x5819))+(((-1.0)*x5805*x5809))+((x5809*x5819))+(((-1.0)*cj6*x5810*x5817))+(((-1.0)*x5809*x5818))+((r01*r21*x5805))+(((-1.0)*x5808*x5814*x5815))+((x5811*x5812))+(((-1.0)*r01*x5810))+(((-1.0)*x5807)));
j4eval[0]=x5820;
j4eval[1]=((IKabs((((x5813*x5816))+((cj0*x5808))+((x5811*x5813)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x5810))))));
j4eval[2]=IKsign(x5820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5821=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5821;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5822=((1.0)*sj6);
IkReal x5823=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x5822)));
j4eval[0]=x5823;
j4eval[1]=IKsign(x5823);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5822))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5824=cj6*cj6;
IkReal x5825=cj5*cj5;
IkReal x5826=r10*r10;
IkReal x5827=r11*r11;
IkReal x5828=r12*r12;
IkReal x5829=(r10*sj6);
IkReal x5830=(r12*sj5);
IkReal x5831=((2.0)*cj6*r11);
IkReal x5832=((1.0)*x5826);
IkReal x5833=(x5824*x5827);
IkReal x5834=((((-1.0)*x5825*x5829*x5831))+((x5829*x5831))+((x5824*x5825*x5826))+((x5825*x5828))+(((-2.0)*cj5*x5829*x5830))+(((-1.0)*cj5*x5830*x5831))+(((-1.0)*x5825*x5833))+(((-1.0)*x5824*x5832))+(((-1.0)*x5825*x5832))+x5833+(((-1.0)*x5828))+(((-1.0)*x5827)));
j4eval[0]=x5834;
j4eval[1]=((IKabs((((cj5*cj6*r11))+((cj5*x5829))+x5830)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5834);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5835=cj6*cj6;
IkReal x5836=cj5*cj5;
IkReal x5837=r10*r10;
IkReal x5838=r11*r11;
IkReal x5839=r12*r12;
IkReal x5840=(r10*sj6);
IkReal x5841=(r12*sj5);
IkReal x5842=((2.0)*cj6*r11);
IkReal x5843=(x5835*x5838);
IkReal x5844=(x5836*x5837);
CheckValue<IkReal> x5845 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*cj6*r11))+((cj5*x5840))+x5841)),IKFAST_ATAN2_MAGTHRESH);
if(!x5845.valid){
continue;
}
CheckValue<IkReal> x5846=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5844))+((x5835*x5844))+(((-1.0)*x5836*x5840*x5842))+((x5840*x5842))+(((-1.0)*x5835*x5837))+((x5836*x5839))+(((-2.0)*cj5*x5840*x5841))+(((-1.0)*x5836*x5843))+(((-1.0)*cj5*x5841*x5842))+(((-1.0)*x5838))+(((-1.0)*x5839))+x5843)),-1);
if(!x5846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5845.value)+(((1.5707963267949)*(x5846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5847=IKsin(j4);
IkReal x5848=IKcos(j4);
IkReal x5849=(cj5*cj6);
IkReal x5850=(r11*sj6);
IkReal x5851=(cj6*r20);
IkReal x5852=(cj6*r10);
IkReal x5853=(cj5*sj6);
IkReal x5854=(r01*sj6);
IkReal x5855=(r21*sj6);
IkReal x5856=(cj6*r00);
IkReal x5857=((1.0)*x5848);
IkReal x5858=((1.0)*x5847);
IkReal x5859=(sj5*x5858);
evalcond[0]=((((-1.0)*r20*x5853*x5858))+((x5848*x5851))+(((-1.0)*x5855*x5857))+(((-1.0)*r22*x5859))+(((-1.0)*r21*x5849*x5858)));
evalcond[1]=((((-1.0)*r11*x5849*x5858))+(((-1.0)*r12*x5859))+((x5848*x5852))+(((-1.0)*r10*x5853*x5858))+(((-1.0)*x5850*x5857)));
evalcond[2]=((((-1.0)*r20*x5853*x5857))+((x5847*x5855))+(((-1.0)*x5851*x5858))+(((-1.0)*r22*sj5*x5857))+(((-1.0)*r21*x5849*x5857)));
evalcond[3]=((((-1.0)*r02*sj5*x5857))+(((-1.0)*r01*x5849*x5857))+(((-1.0)*x5856*x5858))+(((-1.0)*r00*x5853*x5857))+((x5847*x5854)));
evalcond[4]=((1.0)+((x5848*x5856))+(((-1.0)*r01*x5849*x5858))+(((-1.0)*r00*x5853*x5858))+(((-1.0)*x5854*x5857))+(((-1.0)*r02*x5859)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x5849*x5857))+(((-1.0)*r12*sj5*x5857))+(((-1.0)*r10*x5853*x5857))+((x5847*x5850))+(((-1.0)*x5852*x5858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5860=((1.0)*sj6);
CheckValue<IkReal> x5861=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x5860)))),-1);
if(!x5861.valid){
continue;
}
CheckValue<IkReal> x5862 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x5860)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5861.value)))+(x5862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5863=IKsin(j4);
IkReal x5864=IKcos(j4);
IkReal x5865=(cj5*cj6);
IkReal x5866=(r11*sj6);
IkReal x5867=(cj6*r20);
IkReal x5868=(cj6*r10);
IkReal x5869=(cj5*sj6);
IkReal x5870=(r01*sj6);
IkReal x5871=(r21*sj6);
IkReal x5872=(cj6*r00);
IkReal x5873=((1.0)*x5864);
IkReal x5874=((1.0)*x5863);
IkReal x5875=(sj5*x5874);
evalcond[0]=((((-1.0)*r22*x5875))+(((-1.0)*x5871*x5873))+(((-1.0)*r20*x5869*x5874))+((x5864*x5867))+(((-1.0)*r21*x5865*x5874)));
evalcond[1]=((((-1.0)*r12*x5875))+(((-1.0)*x5866*x5873))+(((-1.0)*r11*x5865*x5874))+(((-1.0)*r10*x5869*x5874))+((x5864*x5868)));
evalcond[2]=((((-1.0)*r22*sj5*x5873))+((x5863*x5871))+(((-1.0)*r20*x5869*x5873))+(((-1.0)*x5867*x5874))+(((-1.0)*r21*x5865*x5873)));
evalcond[3]=((((-1.0)*x5872*x5874))+(((-1.0)*r01*x5865*x5873))+(((-1.0)*r02*sj5*x5873))+(((-1.0)*r00*x5869*x5873))+((x5863*x5870)));
evalcond[4]=((1.0)+((x5864*x5872))+(((-1.0)*r02*x5875))+(((-1.0)*r01*x5865*x5874))+(((-1.0)*x5870*x5873))+(((-1.0)*r00*x5869*x5874)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x5865*x5873))+(((-1.0)*r10*x5869*x5873))+(((-1.0)*r12*sj5*x5873))+(((-1.0)*x5868*x5874))+((x5863*x5866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5876=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5876.valid){
continue;
}
CheckValue<IkReal> x5877 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5876.value)))+(x5877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5878=IKsin(j4);
IkReal x5879=IKcos(j4);
IkReal x5880=(cj5*cj6);
IkReal x5881=(r11*sj6);
IkReal x5882=(cj6*r20);
IkReal x5883=(cj6*r10);
IkReal x5884=(cj5*sj6);
IkReal x5885=(r01*sj6);
IkReal x5886=(r21*sj6);
IkReal x5887=(cj6*r00);
IkReal x5888=((1.0)*x5879);
IkReal x5889=((1.0)*x5878);
IkReal x5890=(sj5*x5889);
evalcond[0]=((((-1.0)*r22*x5890))+((x5879*x5882))+(((-1.0)*x5886*x5888))+(((-1.0)*r20*x5884*x5889))+(((-1.0)*r21*x5880*x5889)));
evalcond[1]=((((-1.0)*r12*x5890))+(((-1.0)*r11*x5880*x5889))+((x5879*x5883))+(((-1.0)*x5881*x5888))+(((-1.0)*r10*x5884*x5889)));
evalcond[2]=((((-1.0)*x5882*x5889))+(((-1.0)*r22*sj5*x5888))+((x5878*x5886))+(((-1.0)*r20*x5884*x5888))+(((-1.0)*r21*x5880*x5888)));
evalcond[3]=((((-1.0)*x5887*x5889))+(((-1.0)*r01*x5880*x5888))+(((-1.0)*r02*sj5*x5888))+(((-1.0)*r00*x5884*x5888))+((x5878*x5885)));
evalcond[4]=((1.0)+((x5879*x5887))+(((-1.0)*x5885*x5888))+(((-1.0)*r01*x5880*x5889))+(((-1.0)*r02*x5890))+(((-1.0)*r00*x5884*x5889)));
evalcond[5]=((-1.0)+(((-1.0)*x5883*x5889))+(((-1.0)*r12*sj5*x5888))+(((-1.0)*r11*x5880*x5888))+((x5878*x5881))+(((-1.0)*r10*x5884*x5888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5891=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5891;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5892=((1.0)*sj5);
IkReal x5893=(((cj5*r22))+(((-1.0)*r20*sj6*x5892))+(((-1.0)*cj6*r21*x5892)));
j4eval[0]=x5893;
j4eval[1]=IKsign(x5893);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5894=r11*r11;
IkReal x5895=cj5*cj5;
IkReal x5896=cj6*cj6;
IkReal x5897=r10*r10;
IkReal x5898=r12*r12;
IkReal x5899=(r12*sj5);
IkReal x5900=(cj6*r10);
IkReal x5901=((1.0)*x5896);
IkReal x5902=(cj5*cj6*r11);
IkReal x5903=(cj5*r10*sj6);
IkReal x5904=((2.0)*r11*sj6);
IkReal x5905=(x5895*x5897);
IkReal x5906=((((2.0)*x5899*x5903))+(((2.0)*x5899*x5902))+((x5895*x5900*x5904))+(((-1.0)*x5894*x5901))+(((-1.0)*x5895*x5898))+(((-1.0)*x5901*x5905))+(((-1.0)*x5900*x5904))+((x5894*x5895*x5896))+((x5896*x5897))+x5905+x5894+x5898);
j4eval[0]=x5906;
j4eval[1]=IKsign(x5906);
j4eval[2]=((IKabs(((((-1.0)*r11*sj6))+x5900)))+(IKabs((x5902+x5903+x5899))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5907=r11*r11;
IkReal x5908=cj5*cj5;
IkReal x5909=cj6*cj6;
IkReal x5910=r10*r10;
IkReal x5911=r12*r12;
IkReal x5912=(r10*sj6);
IkReal x5913=(r12*sj5);
IkReal x5914=((1.0)*x5909);
IkReal x5915=(cj5*cj6*r11);
IkReal x5916=((2.0)*cj6*r11);
IkReal x5917=(x5908*x5910);
CheckValue<IkReal> x5918=IKPowWithIntegerCheck(IKsign((((x5907*x5908*x5909))+(((-1.0)*x5907*x5914))+(((2.0)*cj5*x5912*x5913))+(((2.0)*x5913*x5915))+((x5909*x5910))+(((-1.0)*x5912*x5916))+((x5908*x5912*x5916))+x5907+x5917+x5911+(((-1.0)*x5908*x5911))+(((-1.0)*x5914*x5917)))),-1);
if(!x5918.valid){
continue;
}
CheckValue<IkReal> x5919 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x5912))+x5915+x5913)),IKFAST_ATAN2_MAGTHRESH);
if(!x5919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5918.value)))+(x5919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5920=IKsin(j4);
IkReal x5921=IKcos(j4);
IkReal x5922=(cj5*cj6);
IkReal x5923=(r11*sj6);
IkReal x5924=(cj6*r20);
IkReal x5925=(cj6*r10);
IkReal x5926=(cj5*sj6);
IkReal x5927=(r01*sj6);
IkReal x5928=(r21*sj6);
IkReal x5929=(cj6*r00);
IkReal x5930=((1.0)*x5921);
IkReal x5931=((1.0)*x5920);
IkReal x5932=(sj5*x5931);
evalcond[0]=((((-1.0)*r21*x5922*x5931))+((x5921*x5924))+(((-1.0)*x5928*x5930))+(((-1.0)*r20*x5926*x5931))+(((-1.0)*r22*x5932)));
evalcond[1]=((((-1.0)*r10*x5926*x5931))+((x5921*x5925))+(((-1.0)*r12*x5932))+(((-1.0)*x5923*x5930))+(((-1.0)*r11*x5922*x5931)));
evalcond[2]=((((-1.0)*r21*x5922*x5930))+((x5920*x5928))+(((-1.0)*r20*x5926*x5930))+(((-1.0)*x5924*x5931))+(((-1.0)*r22*sj5*x5930)));
evalcond[3]=((((-1.0)*x5929*x5931))+(((-1.0)*r00*x5926*x5930))+((x5920*x5927))+(((-1.0)*r02*sj5*x5930))+(((-1.0)*r01*x5922*x5930)));
evalcond[4]=((-1.0)+((x5921*x5929))+(((-1.0)*r02*x5932))+(((-1.0)*r00*x5926*x5931))+(((-1.0)*r01*x5922*x5931))+(((-1.0)*x5927*x5930)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5926*x5930))+(((-1.0)*x5925*x5931))+((x5920*x5923))+(((-1.0)*r12*sj5*x5930))+(((-1.0)*r11*x5922*x5930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5933=((1.0)*sj5);
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
CheckValue<IkReal> x5935=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x5933))+(((-1.0)*cj6*r21*x5933)))),-1);
if(!x5935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5934.value)+(((1.5707963267949)*(x5935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5936=IKsin(j4);
IkReal x5937=IKcos(j4);
IkReal x5938=(cj5*cj6);
IkReal x5939=(r11*sj6);
IkReal x5940=(cj6*r20);
IkReal x5941=(cj6*r10);
IkReal x5942=(cj5*sj6);
IkReal x5943=(r01*sj6);
IkReal x5944=(r21*sj6);
IkReal x5945=(cj6*r00);
IkReal x5946=((1.0)*x5937);
IkReal x5947=((1.0)*x5936);
IkReal x5948=(sj5*x5947);
evalcond[0]=((((-1.0)*r22*x5948))+(((-1.0)*x5944*x5946))+(((-1.0)*r21*x5938*x5947))+((x5937*x5940))+(((-1.0)*r20*x5942*x5947)));
evalcond[1]=((((-1.0)*r10*x5942*x5947))+(((-1.0)*r12*x5948))+(((-1.0)*r11*x5938*x5947))+((x5937*x5941))+(((-1.0)*x5939*x5946)));
evalcond[2]=((((-1.0)*r21*x5938*x5946))+(((-1.0)*r22*sj5*x5946))+((x5936*x5944))+(((-1.0)*x5940*x5947))+(((-1.0)*r20*x5942*x5946)));
evalcond[3]=((((-1.0)*r01*x5938*x5946))+(((-1.0)*x5945*x5947))+((x5936*x5943))+(((-1.0)*r00*x5942*x5946))+(((-1.0)*r02*sj5*x5946)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5938*x5947))+((x5937*x5945))+(((-1.0)*r00*x5942*x5947))+(((-1.0)*x5943*x5946))+(((-1.0)*r02*x5948)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5942*x5946))+(((-1.0)*r12*sj5*x5946))+(((-1.0)*r11*x5938*x5946))+(((-1.0)*x5941*x5947))+((x5936*x5939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
CheckValue<IkReal> x5950=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5949.value)+(((1.5707963267949)*(x5950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5951=IKsin(j4);
IkReal x5952=IKcos(j4);
IkReal x5953=(cj5*cj6);
IkReal x5954=(r11*sj6);
IkReal x5955=(cj6*r20);
IkReal x5956=(cj6*r10);
IkReal x5957=(cj5*sj6);
IkReal x5958=(r01*sj6);
IkReal x5959=(r21*sj6);
IkReal x5960=(cj6*r00);
IkReal x5961=((1.0)*x5952);
IkReal x5962=((1.0)*x5951);
IkReal x5963=(sj5*x5962);
evalcond[0]=(((x5952*x5955))+(((-1.0)*r22*x5963))+(((-1.0)*r20*x5957*x5962))+(((-1.0)*x5959*x5961))+(((-1.0)*r21*x5953*x5962)));
evalcond[1]=(((x5952*x5956))+(((-1.0)*x5954*x5961))+(((-1.0)*r10*x5957*x5962))+(((-1.0)*r12*x5963))+(((-1.0)*r11*x5953*x5962)));
evalcond[2]=((((-1.0)*r22*sj5*x5961))+((x5951*x5959))+(((-1.0)*r20*x5957*x5961))+(((-1.0)*x5955*x5962))+(((-1.0)*r21*x5953*x5961)));
evalcond[3]=((((-1.0)*r02*sj5*x5961))+((x5951*x5958))+(((-1.0)*x5960*x5962))+(((-1.0)*r00*x5957*x5961))+(((-1.0)*r01*x5953*x5961)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x5957*x5962))+(((-1.0)*r01*x5953*x5962))+(((-1.0)*x5958*x5961))+((x5952*x5960))+(((-1.0)*r02*x5963)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x5961))+(((-1.0)*x5956*x5962))+((x5951*x5954))+(((-1.0)*r10*x5957*x5961))+(((-1.0)*r11*x5953*x5961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5964=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5964;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5965=((1.0)*sj6);
IkReal x5966=((((-1.0)*r00*sj5*x5965))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x5966;
j4eval[1]=IKsign(x5966);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5965))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5967=cj6*cj6;
IkReal x5968=cj5*cj5;
IkReal x5969=r00*r00;
IkReal x5970=r01*r01;
IkReal x5971=r02*r02;
IkReal x5972=(cj6*r00);
IkReal x5973=(cj5*cj6*r01);
IkReal x5974=((2.0)*r02*sj5);
IkReal x5975=((1.0)*x5967);
IkReal x5976=((2.0)*r01*sj6);
IkReal x5977=(cj5*r00*sj6);
IkReal x5978=(x5968*x5969);
IkReal x5979=((((-1.0)*x5968*x5970*x5975))+(((-1.0)*x5971))+(((-1.0)*x5970))+(((-1.0)*x5978))+((x5968*x5971))+((x5967*x5978))+((x5967*x5970))+(((-1.0)*x5974*x5977))+(((-1.0)*x5969*x5975))+(((-1.0)*x5968*x5972*x5976))+(((-1.0)*x5973*x5974))+((x5972*x5976)));
j4eval[0]=x5979;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x5972)))+(IKabs((((r02*sj5))+x5973+x5977))));
j4eval[2]=IKsign(x5979);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5980=cj6*cj6;
IkReal x5981=cj5*cj5;
IkReal x5982=r00*r00;
IkReal x5983=r01*r01;
IkReal x5984=r02*r02;
IkReal x5985=(cj6*r00);
IkReal x5986=(cj5*cj6*r01);
IkReal x5987=((2.0)*r02*sj5);
IkReal x5988=((1.0)*x5980);
IkReal x5989=((2.0)*r01*sj6);
IkReal x5990=(cj5*r00*sj6);
IkReal x5991=(x5981*x5982);
CheckValue<IkReal> x5992 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x5985)),IkReal((((r02*sj5))+x5986+x5990)),IKFAST_ATAN2_MAGTHRESH);
if(!x5992.valid){
continue;
}
CheckValue<IkReal> x5993=IKPowWithIntegerCheck(IKsign((((x5985*x5989))+(((-1.0)*x5981*x5983*x5988))+(((-1.0)*x5986*x5987))+(((-1.0)*x5987*x5990))+(((-1.0)*x5984))+(((-1.0)*x5983))+(((-1.0)*x5991))+(((-1.0)*x5981*x5985*x5989))+((x5980*x5991))+((x5980*x5983))+((x5981*x5984))+(((-1.0)*x5982*x5988)))),-1);
if(!x5993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5992.value)+(((1.5707963267949)*(x5993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5994=IKsin(j4);
IkReal x5995=IKcos(j4);
IkReal x5996=(cj5*cj6);
IkReal x5997=(r11*sj6);
IkReal x5998=(cj6*r20);
IkReal x5999=(cj6*r10);
IkReal x6000=(cj5*sj6);
IkReal x6001=(r21*sj6);
IkReal x6002=(cj6*r00);
IkReal x6003=(r01*sj6);
IkReal x6004=((1.0)*x5995);
IkReal x6005=((1.0)*x5994);
IkReal x6006=(sj5*x6005);
evalcond[0]=((((-1.0)*r21*x5996*x6005))+(((-1.0)*r20*x6000*x6005))+((x5995*x5998))+(((-1.0)*r22*x6006))+(((-1.0)*x6001*x6004)));
evalcond[1]=((((-1.0)*r00*x6000*x6005))+((x5995*x6002))+(((-1.0)*r01*x5996*x6005))+(((-1.0)*x6003*x6004))+(((-1.0)*r02*x6006)));
evalcond[2]=((((-1.0)*r21*x5996*x6004))+(((-1.0)*x5998*x6005))+((x5994*x6001))+(((-1.0)*r20*x6000*x6004))+(((-1.0)*r22*sj5*x6004)));
evalcond[3]=((((-1.0)*r11*x5996*x6004))+((x5994*x5997))+(((-1.0)*r12*sj5*x6004))+(((-1.0)*x5999*x6005))+(((-1.0)*r10*x6000*x6004)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5996*x6005))+(((-1.0)*r12*x6006))+(((-1.0)*x5997*x6004))+((x5995*x5999))+(((-1.0)*r10*x6000*x6005)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x6000*x6004))+((x5994*x6003))+(((-1.0)*r01*x5996*x6004))+(((-1.0)*r02*sj5*x6004))+(((-1.0)*x6002*x6005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6007=((1.0)*sj6);
CheckValue<IkReal> x6008 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x6007)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6008.valid){
continue;
}
CheckValue<IkReal> x6009=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x6007))+((cj5*r02)))),-1);
if(!x6009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6008.value)+(((1.5707963267949)*(x6009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6010=IKsin(j4);
IkReal x6011=IKcos(j4);
IkReal x6012=(cj5*cj6);
IkReal x6013=(r11*sj6);
IkReal x6014=(cj6*r20);
IkReal x6015=(cj6*r10);
IkReal x6016=(cj5*sj6);
IkReal x6017=(r21*sj6);
IkReal x6018=(cj6*r00);
IkReal x6019=(r01*sj6);
IkReal x6020=((1.0)*x6011);
IkReal x6021=((1.0)*x6010);
IkReal x6022=(sj5*x6021);
evalcond[0]=((((-1.0)*r22*x6022))+(((-1.0)*r21*x6012*x6021))+((x6011*x6014))+(((-1.0)*x6017*x6020))+(((-1.0)*r20*x6016*x6021)));
evalcond[1]=((((-1.0)*r00*x6016*x6021))+(((-1.0)*r01*x6012*x6021))+((x6011*x6018))+(((-1.0)*r02*x6022))+(((-1.0)*x6019*x6020)));
evalcond[2]=((((-1.0)*x6014*x6021))+(((-1.0)*r21*x6012*x6020))+(((-1.0)*r22*sj5*x6020))+(((-1.0)*r20*x6016*x6020))+((x6010*x6017)));
evalcond[3]=((((-1.0)*x6015*x6021))+(((-1.0)*r12*sj5*x6020))+(((-1.0)*r11*x6012*x6020))+((x6010*x6013))+(((-1.0)*r10*x6016*x6020)));
evalcond[4]=((-1.0)+(((-1.0)*x6013*x6020))+((x6011*x6015))+(((-1.0)*r11*x6012*x6021))+(((-1.0)*r10*x6016*x6021))+(((-1.0)*r12*x6022)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x6016*x6020))+(((-1.0)*r01*x6012*x6020))+((x6010*x6019))+(((-1.0)*x6018*x6021))+(((-1.0)*r02*sj5*x6020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6023=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6023.valid){
continue;
}
CheckValue<IkReal> x6024 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6023.value)))+(x6024.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6025=IKsin(j4);
IkReal x6026=IKcos(j4);
IkReal x6027=(cj5*cj6);
IkReal x6028=(r11*sj6);
IkReal x6029=(cj6*r20);
IkReal x6030=(cj6*r10);
IkReal x6031=(cj5*sj6);
IkReal x6032=(r21*sj6);
IkReal x6033=(cj6*r00);
IkReal x6034=(r01*sj6);
IkReal x6035=((1.0)*x6026);
IkReal x6036=((1.0)*x6025);
IkReal x6037=(sj5*x6036);
evalcond[0]=((((-1.0)*r21*x6027*x6036))+(((-1.0)*x6032*x6035))+((x6026*x6029))+(((-1.0)*r20*x6031*x6036))+(((-1.0)*r22*x6037)));
evalcond[1]=((((-1.0)*r01*x6027*x6036))+((x6026*x6033))+(((-1.0)*x6034*x6035))+(((-1.0)*r00*x6031*x6036))+(((-1.0)*r02*x6037)));
evalcond[2]=((((-1.0)*x6029*x6036))+(((-1.0)*r21*x6027*x6035))+((x6025*x6032))+(((-1.0)*r20*x6031*x6035))+(((-1.0)*r22*sj5*x6035)));
evalcond[3]=(((x6025*x6028))+(((-1.0)*r12*sj5*x6035))+(((-1.0)*r11*x6027*x6035))+(((-1.0)*x6030*x6036))+(((-1.0)*r10*x6031*x6035)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x6037))+(((-1.0)*r11*x6027*x6036))+((x6026*x6030))+(((-1.0)*x6028*x6035))+(((-1.0)*r10*x6031*x6036)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x6035))+(((-1.0)*x6033*x6036))+(((-1.0)*r01*x6027*x6035))+((x6025*x6034))+(((-1.0)*r00*x6031*x6035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6038=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x6038;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6039=((1.0)*sj5);
IkReal x6040=(((cj5*r22))+(((-1.0)*cj6*r21*x6039))+(((-1.0)*r20*sj6*x6039)));
j4eval[0]=x6040;
j4eval[1]=IKsign(x6040);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6041=cj6*cj6;
IkReal x6042=r01*r01;
IkReal x6043=cj5*cj5;
IkReal x6044=r00*r00;
IkReal x6045=r02*r02;
IkReal x6046=(cj6*r00);
IkReal x6047=(r02*sj5);
IkReal x6048=(cj5*cj6*r01);
IkReal x6049=((2.0)*r01*sj6);
IkReal x6050=(cj5*r00*sj6);
IkReal x6051=((1.0)*x6043);
IkReal x6052=(x6041*x6044);
IkReal x6053=(x6041*x6042);
IkReal x6054=((((2.0)*x6047*x6048))+(((-1.0)*x6051*x6052))+x6042+x6045+x6052+(((-1.0)*x6046*x6049))+(((2.0)*x6047*x6050))+((x6043*x6053))+(((-1.0)*x6053))+((x6043*x6044))+(((-1.0)*x6045*x6051))+((x6043*x6046*x6049)));
j4eval[0]=x6054;
j4eval[1]=((IKabs((x6047+x6048+x6050)))+(IKabs(((((-1.0)*r01*sj6))+x6046))));
j4eval[2]=IKsign(x6054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6055=cj6*cj6;
IkReal x6056=r01*r01;
IkReal x6057=cj5*cj5;
IkReal x6058=r00*r00;
IkReal x6059=r02*r02;
IkReal x6060=(cj6*r00);
IkReal x6061=((2.0)*r01);
IkReal x6062=(cj5*cj6);
IkReal x6063=(r02*sj5);
IkReal x6064=(cj5*r00*sj6);
IkReal x6065=(x6057*x6058);
IkReal x6066=(x6055*x6056);
CheckValue<IkReal> x6067=IKPowWithIntegerCheck(IKsign((((x6061*x6062*x6063))+((x6055*x6058))+((x6057*x6066))+x6059+x6056+x6065+(((-1.0)*x6057*x6059))+(((-1.0)*x6055*x6065))+(((-1.0)*x6066))+((sj6*x6057*x6060*x6061))+(((-1.0)*sj6*x6060*x6061))+(((2.0)*x6063*x6064)))),-1);
if(!x6067.valid){
continue;
}
CheckValue<IkReal> x6068 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x6060)),IkReal((x6064+x6063+((r01*x6062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6067.value)))+(x6068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6069=IKsin(j4);
IkReal x6070=IKcos(j4);
IkReal x6071=(cj5*cj6);
IkReal x6072=(r11*sj6);
IkReal x6073=(cj6*r20);
IkReal x6074=(cj6*r10);
IkReal x6075=(cj5*sj6);
IkReal x6076=(r21*sj6);
IkReal x6077=(cj6*r00);
IkReal x6078=(r01*sj6);
IkReal x6079=((1.0)*x6070);
IkReal x6080=((1.0)*x6069);
IkReal x6081=(sj5*x6080);
evalcond[0]=((((-1.0)*r22*x6081))+((x6070*x6073))+(((-1.0)*r21*x6071*x6080))+(((-1.0)*x6076*x6079))+(((-1.0)*r20*x6075*x6080)));
evalcond[1]=(((x6070*x6077))+(((-1.0)*x6078*x6079))+(((-1.0)*r02*x6081))+(((-1.0)*r00*x6075*x6080))+(((-1.0)*r01*x6071*x6080)));
evalcond[2]=((((-1.0)*x6073*x6080))+(((-1.0)*r20*x6075*x6079))+((x6069*x6076))+(((-1.0)*r22*sj5*x6079))+(((-1.0)*r21*x6071*x6079)));
evalcond[3]=((((-1.0)*r10*x6075*x6079))+(((-1.0)*r11*x6071*x6079))+((x6069*x6072))+(((-1.0)*r12*sj5*x6079))+(((-1.0)*x6074*x6080)));
evalcond[4]=((1.0)+(((-1.0)*r12*x6081))+(((-1.0)*r10*x6075*x6080))+((x6070*x6074))+(((-1.0)*r11*x6071*x6080))+(((-1.0)*x6072*x6079)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x6079))+(((-1.0)*r01*x6071*x6079))+(((-1.0)*r00*x6075*x6079))+(((-1.0)*x6077*x6080))+((x6069*x6078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6082=((1.0)*sj5);
CheckValue<IkReal> x6083 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6083.valid){
continue;
}
CheckValue<IkReal> x6084=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x6082))+(((-1.0)*r20*sj6*x6082)))),-1);
if(!x6084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6083.value)+(((1.5707963267949)*(x6084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6085=IKsin(j4);
IkReal x6086=IKcos(j4);
IkReal x6087=(cj5*cj6);
IkReal x6088=(r11*sj6);
IkReal x6089=(cj6*r20);
IkReal x6090=(cj6*r10);
IkReal x6091=(cj5*sj6);
IkReal x6092=(r21*sj6);
IkReal x6093=(cj6*r00);
IkReal x6094=(r01*sj6);
IkReal x6095=((1.0)*x6086);
IkReal x6096=((1.0)*x6085);
IkReal x6097=(sj5*x6096);
evalcond[0]=((((-1.0)*r22*x6097))+(((-1.0)*x6092*x6095))+((x6086*x6089))+(((-1.0)*r21*x6087*x6096))+(((-1.0)*r20*x6091*x6096)));
evalcond[1]=((((-1.0)*r00*x6091*x6096))+((x6086*x6093))+(((-1.0)*r01*x6087*x6096))+(((-1.0)*r02*x6097))+(((-1.0)*x6094*x6095)));
evalcond[2]=((((-1.0)*x6089*x6096))+(((-1.0)*r21*x6087*x6095))+(((-1.0)*r22*sj5*x6095))+((x6085*x6092))+(((-1.0)*r20*x6091*x6095)));
evalcond[3]=((((-1.0)*r12*sj5*x6095))+(((-1.0)*r11*x6087*x6095))+(((-1.0)*x6090*x6096))+(((-1.0)*r10*x6091*x6095))+((x6085*x6088)));
evalcond[4]=((1.0)+((x6086*x6090))+(((-1.0)*r11*x6087*x6096))+(((-1.0)*r10*x6091*x6096))+(((-1.0)*r12*x6097))+(((-1.0)*x6088*x6095)));
evalcond[5]=((1.0)+(((-1.0)*r00*x6091*x6095))+(((-1.0)*r01*x6087*x6095))+(((-1.0)*x6093*x6096))+((x6085*x6094))+(((-1.0)*r02*sj5*x6095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6098 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6098.valid){
continue;
}
CheckValue<IkReal> x6099=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x6099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6098.value)+(((1.5707963267949)*(x6099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6100=IKsin(j4);
IkReal x6101=IKcos(j4);
IkReal x6102=(cj5*cj6);
IkReal x6103=(r11*sj6);
IkReal x6104=(cj6*r20);
IkReal x6105=(cj6*r10);
IkReal x6106=(cj5*sj6);
IkReal x6107=(r21*sj6);
IkReal x6108=(cj6*r00);
IkReal x6109=(r01*sj6);
IkReal x6110=((1.0)*x6101);
IkReal x6111=((1.0)*x6100);
IkReal x6112=(sj5*x6111);
evalcond[0]=((((-1.0)*r21*x6102*x6111))+(((-1.0)*r20*x6106*x6111))+(((-1.0)*r22*x6112))+((x6101*x6104))+(((-1.0)*x6107*x6110)));
evalcond[1]=(((x6101*x6108))+(((-1.0)*x6109*x6110))+(((-1.0)*r02*x6112))+(((-1.0)*r00*x6106*x6111))+(((-1.0)*r01*x6102*x6111)));
evalcond[2]=((((-1.0)*r21*x6102*x6110))+(((-1.0)*r20*x6106*x6110))+((x6100*x6107))+(((-1.0)*x6104*x6111))+(((-1.0)*r22*sj5*x6110)));
evalcond[3]=((((-1.0)*x6105*x6111))+((x6100*x6103))+(((-1.0)*r12*sj5*x6110))+(((-1.0)*r11*x6102*x6110))+(((-1.0)*r10*x6106*x6110)));
evalcond[4]=((1.0)+((x6101*x6105))+(((-1.0)*r12*x6112))+(((-1.0)*x6103*x6110))+(((-1.0)*r11*x6102*x6111))+(((-1.0)*r10*x6106*x6111)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x6110))+((x6100*x6109))+(((-1.0)*x6108*x6111))+(((-1.0)*r00*x6106*x6110))+(((-1.0)*r01*x6102*x6110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6113=cj6*cj6;
IkReal x6114=cj5*cj5;
IkReal x6115=(r22*sj5);
IkReal x6116=(cj0*r20);
IkReal x6117=((1.0)*r21);
IkReal x6118=(cj5*sj6);
IkReal x6119=(r02*r22);
IkReal x6120=(cj5*cj6);
IkReal x6121=(r02*sj5);
IkReal x6122=(cj6*sj6);
IkReal x6123=((1.0)*r20);
IkReal x6124=(r01*x6117);
IkReal x6125=(r00*r20*x6114);
CheckValue<IkReal> x6126 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj6*x6117))+((cj6*x6116)))),IkReal((((x6116*x6118))+((cj0*r21*x6120))+((cj0*x6115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6126.valid){
continue;
}
CheckValue<IkReal> x6127=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6119))+(((-1.0)*r00*x6115*x6118))+((r01*r21*x6113))+(((-1.0)*x6113*x6114*x6124))+(((-1.0)*r00*x6113*x6123))+(((-1.0)*x6118*x6121*x6123))+(((-1.0)*x6124))+((r01*r20*x6122))+((r00*r21*x6122))+(((-1.0)*r01*x6114*x6122*x6123))+(((-1.0)*r00*x6114*x6117*x6122))+((x6113*x6125))+(((-1.0)*r00*x6114*x6123))+(((-1.0)*r01*x6115*x6120))+((x6114*x6119))+(((-1.0)*x6117*x6120*x6121)))),-1);
if(!x6127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6126.value)+(((1.5707963267949)*(x6127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6128=IKsin(j4);
IkReal x6129=IKcos(j4);
IkReal x6130=((1.0)*cj0);
IkReal x6131=(cj6*r20);
IkReal x6132=(cj5*sj6);
IkReal x6133=((1.0)*sj6);
IkReal x6134=(r21*sj6);
IkReal x6135=(cj6*r00);
IkReal x6136=((1.0)*cj5*cj6);
IkReal x6137=(r01*x6129);
IkReal x6138=(r11*x6128);
IkReal x6139=((1.0)*x6128);
IkReal x6140=(r11*x6129);
IkReal x6141=(r10*x6129);
IkReal x6142=((1.0)*x6129);
IkReal x6143=(r01*x6128);
IkReal x6144=(sj5*x6139);
evalcond[0]=(((x6129*x6131))+(((-1.0)*r21*x6128*x6136))+(((-1.0)*r21*x6129*x6133))+(((-1.0)*r20*x6132*x6139))+(((-1.0)*r22*x6144)));
evalcond[1]=((((-1.0)*r20*x6132*x6142))+((x6128*x6134))+(((-1.0)*x6131*x6139))+(((-1.0)*r22*sj5*x6142))+(((-1.0)*r21*x6129*x6136)));
evalcond[2]=(sj0+((x6129*x6135))+(((-1.0)*r00*x6132*x6139))+(((-1.0)*x6136*x6143))+(((-1.0)*r02*x6144))+(((-1.0)*x6133*x6137)));
evalcond[3]=((((-1.0)*x6133*x6140))+(((-1.0)*x6136*x6138))+(((-1.0)*r10*x6132*x6139))+((cj6*x6141))+(((-1.0)*x6130))+(((-1.0)*r12*x6144)));
evalcond[4]=((((-1.0)*x6136*x6137))+(((-1.0)*r02*sj5*x6142))+(((-1.0)*r00*x6132*x6142))+(((-1.0)*x6130))+((sj6*x6143))+(((-1.0)*x6135*x6139)));
evalcond[5]=((((-1.0)*cj6*r10*x6139))+(((-1.0)*sj0))+(((-1.0)*r12*sj5*x6142))+(((-1.0)*x6132*x6141))+(((-1.0)*x6136*x6140))+((sj6*x6138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6145=(cj0*sj6);
IkReal x6146=((1.0)*sj5);
IkReal x6147=(cj0*cj6);
CheckValue<IkReal> x6148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x6146))+(((-1.0)*cj6*r01*x6146))+((cj5*r02)))),-1);
if(!x6148.valid){
continue;
}
CheckValue<IkReal> x6149 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6145))+((r20*x6147)))),IkReal((((cj0*r22*sj5))+((cj5*r20*x6145))+((cj5*r21*x6147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6148.value)))+(x6149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6150=IKsin(j4);
IkReal x6151=IKcos(j4);
IkReal x6152=((1.0)*cj0);
IkReal x6153=(cj6*r20);
IkReal x6154=(cj5*sj6);
IkReal x6155=((1.0)*sj6);
IkReal x6156=(r21*sj6);
IkReal x6157=(cj6*r00);
IkReal x6158=((1.0)*cj5*cj6);
IkReal x6159=(r01*x6151);
IkReal x6160=(r11*x6150);
IkReal x6161=((1.0)*x6150);
IkReal x6162=(r11*x6151);
IkReal x6163=(r10*x6151);
IkReal x6164=((1.0)*x6151);
IkReal x6165=(r01*x6150);
IkReal x6166=(sj5*x6161);
evalcond[0]=((((-1.0)*r21*x6151*x6155))+(((-1.0)*r20*x6154*x6161))+((x6151*x6153))+(((-1.0)*r22*x6166))+(((-1.0)*r21*x6150*x6158)));
evalcond[1]=((((-1.0)*r22*sj5*x6164))+(((-1.0)*x6153*x6161))+(((-1.0)*r21*x6151*x6158))+(((-1.0)*r20*x6154*x6164))+((x6150*x6156)));
evalcond[2]=(sj0+(((-1.0)*x6155*x6159))+(((-1.0)*r00*x6154*x6161))+(((-1.0)*r02*x6166))+(((-1.0)*x6158*x6165))+((x6151*x6157)));
evalcond[3]=(((cj6*x6163))+(((-1.0)*r10*x6154*x6161))+(((-1.0)*x6155*x6162))+(((-1.0)*r12*x6166))+(((-1.0)*x6152))+(((-1.0)*x6158*x6160)));
evalcond[4]=((((-1.0)*r02*sj5*x6164))+(((-1.0)*x6157*x6161))+(((-1.0)*r00*x6154*x6164))+(((-1.0)*x6152))+(((-1.0)*x6158*x6159))+((sj6*x6165)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x6161))+(((-1.0)*r12*sj5*x6164))+(((-1.0)*x6158*x6162))+((sj6*x6160))+(((-1.0)*x6154*x6163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6167=(cj5*sj0);
IkReal x6168=((1.0)*sj5);
CheckValue<IkReal> x6169 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((cj6*r21*x6167))+((r22*sj0*sj5))+((r20*sj6*x6167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6169.valid){
continue;
}
CheckValue<IkReal> x6170=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x6168))+(((-1.0)*r10*sj6*x6168)))),-1);
if(!x6170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6169.value)+(((1.5707963267949)*(x6170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6171=IKsin(j4);
IkReal x6172=IKcos(j4);
IkReal x6173=((1.0)*cj0);
IkReal x6174=(cj6*r20);
IkReal x6175=(cj5*sj6);
IkReal x6176=((1.0)*sj6);
IkReal x6177=(r21*sj6);
IkReal x6178=(cj6*r00);
IkReal x6179=((1.0)*cj5*cj6);
IkReal x6180=(r01*x6172);
IkReal x6181=(r11*x6171);
IkReal x6182=((1.0)*x6171);
IkReal x6183=(r11*x6172);
IkReal x6184=(r10*x6172);
IkReal x6185=((1.0)*x6172);
IkReal x6186=(r01*x6171);
IkReal x6187=(sj5*x6182);
evalcond[0]=((((-1.0)*r22*x6187))+((x6172*x6174))+(((-1.0)*r21*x6171*x6179))+(((-1.0)*r20*x6175*x6182))+(((-1.0)*r21*x6172*x6176)));
evalcond[1]=((((-1.0)*r20*x6175*x6185))+(((-1.0)*r21*x6172*x6179))+(((-1.0)*r22*sj5*x6185))+((x6171*x6177))+(((-1.0)*x6174*x6182)));
evalcond[2]=(sj0+((x6172*x6178))+(((-1.0)*r02*x6187))+(((-1.0)*x6179*x6186))+(((-1.0)*x6176*x6180))+(((-1.0)*r00*x6175*x6182)));
evalcond[3]=((((-1.0)*x6173))+(((-1.0)*r12*x6187))+(((-1.0)*x6179*x6181))+(((-1.0)*x6176*x6183))+((cj6*x6184))+(((-1.0)*r10*x6175*x6182)));
evalcond[4]=(((sj6*x6186))+(((-1.0)*x6178*x6182))+(((-1.0)*x6173))+(((-1.0)*r02*sj5*x6185))+(((-1.0)*x6179*x6180))+(((-1.0)*r00*x6175*x6185)));
evalcond[5]=((((-1.0)*sj0))+((sj6*x6181))+(((-1.0)*x6175*x6184))+(((-1.0)*x6179*x6183))+(((-1.0)*r12*sj5*x6185))+(((-1.0)*cj6*r10*x6182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6188=(cj0*sj6);
IkReal x6189=(cj0*cj6);
IkReal x6190=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x6190;
j4eval[1]=((IKabs((((cj5*r21*x6189))+((cj5*r20*x6188))+((cj0*r22*sj5)))))+(IKabs(((((-1.0)*r21*x6188))+((r20*x6189))))));
j4eval[2]=IKsign(x6190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6191=cj5*cj5;
IkReal x6192=cj6*cj6;
IkReal x6193=(r00*r20);
IkReal x6194=(r02*r22);
IkReal x6195=(r22*sj5);
IkReal x6196=(cj6*r21);
IkReal x6197=(r00*sj6);
IkReal x6198=(r20*sj6);
IkReal x6199=(cj6*r01);
IkReal x6200=(cj0*cj5);
IkReal x6201=((1.0)*x6191);
IkReal x6202=(cj5*r02*sj5);
IkReal x6203=(r01*r21*x6192);
IkReal x6204=(((x6191*x6193))+((x6198*x6202))+((x6191*x6198*x6199))+(((-1.0)*x6196*x6197))+x6194+((x6191*x6203))+((r01*r21))+(((-1.0)*x6203))+((cj5*x6195*x6199))+((cj5*x6195*x6197))+((x6196*x6202))+(((-1.0)*x6198*x6199))+((x6192*x6193))+(((-1.0)*x6192*x6193*x6201))+(((-1.0)*x6194*x6201))+((x6191*x6196*x6197)));
j4eval[0]=x6204;
j4eval[1]=IKsign(x6204);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x6198*x6200))+((x6196*x6200))+((cj0*x6195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6205=cj6*cj6;
IkReal x6206=cj5*cj5;
IkReal x6207=(r12*sj5);
IkReal x6208=(r22*sj5);
IkReal x6209=((1.0)*r11);
IkReal x6210=(r20*sj0);
IkReal x6211=(r10*r20);
IkReal x6212=(cj5*sj6);
IkReal x6213=(cj6*r10);
IkReal x6214=(r12*r22);
IkReal x6215=(cj5*cj6*r21);
IkReal x6216=(r21*x6205);
IkReal x6217=(cj6*r20*sj6);
IkReal x6218=(r11*x6206);
IkReal x6219=((1.0)*r21*sj6);
IkReal x6220=((1.0)*x6206);
IkReal x6221=(x6214+((cj5*cj6*r11*x6208))+((r21*sj6*x6206*x6213))+((r11*r21))+(((-1.0)*x6209*x6216))+(((-1.0)*x6209*x6217))+((x6207*x6215))+(((-1.0)*x6213*x6219))+((r10*x6208*x6212))+((x6217*x6218))+((x6216*x6218))+(((-1.0)*x6205*x6211*x6220))+((x6205*x6211))+((r20*x6207*x6212))+((x6206*x6211))+(((-1.0)*x6214*x6220)));
j4eval[0]=x6221;
j4eval[1]=IKsign(x6221);
j4eval[2]=((IKabs(((((-1.0)*sj0*x6219))+((cj6*x6210)))))+(IKabs((((sj0*x6215))+((x6210*x6212))+((sj0*x6208))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6222=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x6222;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6222);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6223=((1.0)*sj5);
IkReal x6224=(((cj5*r22))+(((-1.0)*r20*sj6*x6223))+(((-1.0)*cj6*r21*x6223)));
j4eval[0]=x6224;
j4eval[1]=IKsign(x6224);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6225=cj6*cj6;
IkReal x6226=r01*r01;
IkReal x6227=cj5*cj5;
IkReal x6228=r00*r00;
IkReal x6229=r02*r02;
IkReal x6230=(cj6*r00);
IkReal x6231=(r02*sj5);
IkReal x6232=(cj5*cj6*r01);
IkReal x6233=((2.0)*r01*sj6);
IkReal x6234=(cj5*r00*sj6);
IkReal x6235=((1.0)*x6227);
IkReal x6236=(x6225*x6228);
IkReal x6237=(x6225*x6226);
IkReal x6238=((((2.0)*x6231*x6232))+(((2.0)*x6231*x6234))+x6226+x6229+x6236+((x6227*x6230*x6233))+(((-1.0)*x6235*x6236))+(((-1.0)*x6237))+((x6227*x6228))+(((-1.0)*x6229*x6235))+(((-1.0)*x6230*x6233))+((x6227*x6237)));
j4eval[0]=x6238;
j4eval[1]=((IKabs((x6230+(((-1.0)*r01*sj6)))))+(IKabs((x6234+x6231+x6232))));
j4eval[2]=IKsign(x6238);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6239=cj6*cj6;
IkReal x6240=r01*r01;
IkReal x6241=cj5*cj5;
IkReal x6242=r00*r00;
IkReal x6243=r02*r02;
IkReal x6244=(cj6*r00);
IkReal x6245=((2.0)*r01);
IkReal x6246=(cj5*cj6);
IkReal x6247=(r02*sj5);
IkReal x6248=(cj5*r00*sj6);
IkReal x6249=(x6241*x6242);
IkReal x6250=(x6239*x6240);
CheckValue<IkReal> x6251=IKPowWithIntegerCheck(IKsign((x6249+x6240+x6243+(((-1.0)*sj6*x6244*x6245))+((sj6*x6241*x6244*x6245))+(((-1.0)*x6250))+(((-1.0)*x6239*x6249))+((x6245*x6246*x6247))+((x6241*x6250))+((x6239*x6242))+(((-1.0)*x6241*x6243))+(((2.0)*x6247*x6248)))),-1);
if(!x6251.valid){
continue;
}
CheckValue<IkReal> x6252 = IKatan2WithCheck(IkReal((x6244+(((-1.0)*r01*sj6)))),IkReal((x6248+x6247+((r01*x6246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6251.value)))+(x6252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6253=IKsin(j4);
IkReal x6254=IKcos(j4);
IkReal x6255=(cj5*cj6);
IkReal x6256=(r11*sj6);
IkReal x6257=(cj6*r20);
IkReal x6258=(cj6*r10);
IkReal x6259=(cj5*sj6);
IkReal x6260=(r21*sj6);
IkReal x6261=(cj6*r00);
IkReal x6262=(r01*sj6);
IkReal x6263=((1.0)*x6254);
IkReal x6264=((1.0)*x6253);
IkReal x6265=(sj5*x6264);
evalcond[0]=(((x6254*x6257))+(((-1.0)*x6260*x6263))+(((-1.0)*r22*x6265))+(((-1.0)*r21*x6255*x6264))+(((-1.0)*r20*x6259*x6264)));
evalcond[1]=(((x6254*x6261))+(((-1.0)*r01*x6255*x6264))+(((-1.0)*r02*x6265))+(((-1.0)*x6262*x6263))+(((-1.0)*r00*x6259*x6264)));
evalcond[2]=(((x6253*x6260))+(((-1.0)*x6257*x6264))+(((-1.0)*r21*x6255*x6263))+(((-1.0)*r20*x6259*x6263))+(((-1.0)*r22*sj5*x6263)));
evalcond[3]=((((-1.0)*r12*sj5*x6263))+((x6253*x6256))+(((-1.0)*r11*x6255*x6263))+(((-1.0)*x6258*x6264))+(((-1.0)*r10*x6259*x6263)));
evalcond[4]=((1.0)+((x6254*x6258))+(((-1.0)*r11*x6255*x6264))+(((-1.0)*r10*x6259*x6264))+(((-1.0)*x6256*x6263))+(((-1.0)*r12*x6265)));
evalcond[5]=((1.0)+(((-1.0)*r01*x6255*x6263))+((x6253*x6262))+(((-1.0)*x6261*x6264))+(((-1.0)*r02*sj5*x6263))+(((-1.0)*r00*x6259*x6263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6266=((1.0)*sj5);
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
CheckValue<IkReal> x6268=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x6266))+(((-1.0)*r20*sj6*x6266)))),-1);
if(!x6268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6267.value)+(((1.5707963267949)*(x6268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6269=IKsin(j4);
IkReal x6270=IKcos(j4);
IkReal x6271=(cj5*cj6);
IkReal x6272=(r11*sj6);
IkReal x6273=(cj6*r20);
IkReal x6274=(cj6*r10);
IkReal x6275=(cj5*sj6);
IkReal x6276=(r21*sj6);
IkReal x6277=(cj6*r00);
IkReal x6278=(r01*sj6);
IkReal x6279=((1.0)*x6270);
IkReal x6280=((1.0)*x6269);
IkReal x6281=(sj5*x6280);
evalcond[0]=((((-1.0)*r21*x6271*x6280))+(((-1.0)*x6276*x6279))+(((-1.0)*r22*x6281))+(((-1.0)*r20*x6275*x6280))+((x6270*x6273)));
evalcond[1]=((((-1.0)*r02*x6281))+(((-1.0)*r01*x6271*x6280))+(((-1.0)*x6278*x6279))+((x6270*x6277))+(((-1.0)*r00*x6275*x6280)));
evalcond[2]=((((-1.0)*r21*x6271*x6279))+(((-1.0)*r22*sj5*x6279))+((x6269*x6276))+(((-1.0)*x6273*x6280))+(((-1.0)*r20*x6275*x6279)));
evalcond[3]=((((-1.0)*r12*sj5*x6279))+((x6269*x6272))+(((-1.0)*r11*x6271*x6279))+(((-1.0)*x6274*x6280))+(((-1.0)*r10*x6275*x6279)));
evalcond[4]=((1.0)+(((-1.0)*r11*x6271*x6280))+(((-1.0)*x6272*x6279))+(((-1.0)*r10*x6275*x6280))+((x6270*x6274))+(((-1.0)*r12*x6281)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x6279))+((x6269*x6278))+(((-1.0)*r01*x6271*x6279))+(((-1.0)*x6277*x6280))+(((-1.0)*r00*x6275*x6279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6282 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6282.valid){
continue;
}
CheckValue<IkReal> x6283=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x6283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6282.value)+(((1.5707963267949)*(x6283.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6284=IKsin(j4);
IkReal x6285=IKcos(j4);
IkReal x6286=(cj5*cj6);
IkReal x6287=(r11*sj6);
IkReal x6288=(cj6*r20);
IkReal x6289=(cj6*r10);
IkReal x6290=(cj5*sj6);
IkReal x6291=(r21*sj6);
IkReal x6292=(cj6*r00);
IkReal x6293=(r01*sj6);
IkReal x6294=((1.0)*x6285);
IkReal x6295=((1.0)*x6284);
IkReal x6296=(sj5*x6295);
evalcond[0]=(((x6285*x6288))+(((-1.0)*r22*x6296))+(((-1.0)*x6291*x6294))+(((-1.0)*r20*x6290*x6295))+(((-1.0)*r21*x6286*x6295)));
evalcond[1]=((((-1.0)*r02*x6296))+(((-1.0)*x6293*x6294))+(((-1.0)*r01*x6286*x6295))+((x6285*x6292))+(((-1.0)*r00*x6290*x6295)));
evalcond[2]=(((x6284*x6291))+(((-1.0)*r22*sj5*x6294))+(((-1.0)*x6288*x6295))+(((-1.0)*r20*x6290*x6294))+(((-1.0)*r21*x6286*x6294)));
evalcond[3]=(((x6284*x6287))+(((-1.0)*r12*sj5*x6294))+(((-1.0)*r11*x6286*x6294))+(((-1.0)*x6289*x6295))+(((-1.0)*r10*x6290*x6294)));
evalcond[4]=((1.0)+((x6285*x6289))+(((-1.0)*r11*x6286*x6295))+(((-1.0)*r12*x6296))+(((-1.0)*r10*x6290*x6295))+(((-1.0)*x6287*x6294)));
evalcond[5]=((1.0)+((x6284*x6293))+(((-1.0)*r02*sj5*x6294))+(((-1.0)*r01*x6286*x6294))+(((-1.0)*x6292*x6295))+(((-1.0)*r00*x6290*x6294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6297=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x6297;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x6297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6298=((1.0)*sj6);
IkReal x6299=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x6298))+((cj5*r02)));
j4eval[0]=x6299;
j4eval[1]=IKsign(x6299);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x6298))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6300=cj6*cj6;
IkReal x6301=cj5*cj5;
IkReal x6302=r00*r00;
IkReal x6303=r01*r01;
IkReal x6304=r02*r02;
IkReal x6305=(cj6*r00);
IkReal x6306=(cj5*cj6*r01);
IkReal x6307=((2.0)*r02*sj5);
IkReal x6308=((1.0)*x6300);
IkReal x6309=((2.0)*r01*sj6);
IkReal x6310=(cj5*r00*sj6);
IkReal x6311=(x6301*x6302);
IkReal x6312=((((-1.0)*x6302*x6308))+(((-1.0)*x6301*x6305*x6309))+((x6300*x6311))+(((-1.0)*x6301*x6303*x6308))+((x6300*x6303))+(((-1.0)*x6311))+((x6301*x6304))+(((-1.0)*x6307*x6310))+(((-1.0)*x6303))+(((-1.0)*x6304))+((x6305*x6309))+(((-1.0)*x6306*x6307)));
j4eval[0]=x6312;
j4eval[1]=((IKabs((x6310+x6306+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x6305))));
j4eval[2]=IKsign(x6312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6313=cj6*cj6;
IkReal x6314=cj5*cj5;
IkReal x6315=r00*r00;
IkReal x6316=r01*r01;
IkReal x6317=r02*r02;
IkReal x6318=(cj6*r00);
IkReal x6319=(cj5*cj6*r01);
IkReal x6320=((2.0)*r02*sj5);
IkReal x6321=((1.0)*x6313);
IkReal x6322=((2.0)*r01*sj6);
IkReal x6323=(cj5*r00*sj6);
IkReal x6324=(x6314*x6315);
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x6318)),IkReal((x6319+x6323+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
CheckValue<IkReal> x6326=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6324))+(((-1.0)*x6314*x6316*x6321))+((x6313*x6316))+(((-1.0)*x6315*x6321))+((x6318*x6322))+(((-1.0)*x6320*x6323))+(((-1.0)*x6316))+(((-1.0)*x6317))+((x6313*x6324))+(((-1.0)*x6314*x6318*x6322))+((x6314*x6317))+(((-1.0)*x6319*x6320)))),-1);
if(!x6326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6325.value)+(((1.5707963267949)*(x6326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6327=IKsin(j4);
IkReal x6328=IKcos(j4);
IkReal x6329=(cj5*cj6);
IkReal x6330=(r11*sj6);
IkReal x6331=(cj6*r20);
IkReal x6332=(cj6*r10);
IkReal x6333=(cj5*sj6);
IkReal x6334=(r21*sj6);
IkReal x6335=(cj6*r00);
IkReal x6336=(r01*sj6);
IkReal x6337=((1.0)*x6328);
IkReal x6338=((1.0)*x6327);
IkReal x6339=(sj5*x6338);
evalcond[0]=((((-1.0)*x6334*x6337))+(((-1.0)*r21*x6329*x6338))+(((-1.0)*r22*x6339))+((x6328*x6331))+(((-1.0)*r20*x6333*x6338)));
evalcond[1]=((((-1.0)*r01*x6329*x6338))+(((-1.0)*r00*x6333*x6338))+(((-1.0)*x6336*x6337))+(((-1.0)*r02*x6339))+((x6328*x6335)));
evalcond[2]=((((-1.0)*r22*sj5*x6337))+((x6327*x6334))+(((-1.0)*x6331*x6338))+(((-1.0)*r21*x6329*x6337))+(((-1.0)*r20*x6333*x6337)));
evalcond[3]=((((-1.0)*r12*sj5*x6337))+((x6327*x6330))+(((-1.0)*r10*x6333*x6337))+(((-1.0)*r11*x6329*x6337))+(((-1.0)*x6332*x6338)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x6339))+(((-1.0)*x6330*x6337))+(((-1.0)*r10*x6333*x6338))+((x6328*x6332))+(((-1.0)*r11*x6329*x6338)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x6329*x6337))+(((-1.0)*r02*sj5*x6337))+(((-1.0)*r00*x6333*x6337))+((x6327*x6336))+(((-1.0)*x6335*x6338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6340=((1.0)*sj6);
CheckValue<IkReal> x6341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x6340))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x6341.valid){
continue;
}
CheckValue<IkReal> x6342 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6340))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6341.value)))+(x6342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6343=IKsin(j4);
IkReal x6344=IKcos(j4);
IkReal x6345=(cj5*cj6);
IkReal x6346=(r11*sj6);
IkReal x6347=(cj6*r20);
IkReal x6348=(cj6*r10);
IkReal x6349=(cj5*sj6);
IkReal x6350=(r21*sj6);
IkReal x6351=(cj6*r00);
IkReal x6352=(r01*sj6);
IkReal x6353=((1.0)*x6344);
IkReal x6354=((1.0)*x6343);
IkReal x6355=(sj5*x6354);
evalcond[0]=(((x6344*x6347))+(((-1.0)*r20*x6349*x6354))+(((-1.0)*x6350*x6353))+(((-1.0)*r22*x6355))+(((-1.0)*r21*x6345*x6354)));
evalcond[1]=((((-1.0)*r02*x6355))+((x6344*x6351))+(((-1.0)*r00*x6349*x6354))+(((-1.0)*r01*x6345*x6354))+(((-1.0)*x6352*x6353)));
evalcond[2]=((((-1.0)*x6347*x6354))+(((-1.0)*r20*x6349*x6353))+((x6343*x6350))+(((-1.0)*r22*sj5*x6353))+(((-1.0)*r21*x6345*x6353)));
evalcond[3]=((((-1.0)*r11*x6345*x6353))+(((-1.0)*r12*sj5*x6353))+(((-1.0)*r10*x6349*x6353))+(((-1.0)*x6348*x6354))+((x6343*x6346)));
evalcond[4]=((-1.0)+((x6344*x6348))+(((-1.0)*r11*x6345*x6354))+(((-1.0)*r12*x6355))+(((-1.0)*r10*x6349*x6354))+(((-1.0)*x6346*x6353)));
evalcond[5]=((-1.0)+(((-1.0)*x6351*x6354))+(((-1.0)*r02*sj5*x6353))+((x6343*x6352))+(((-1.0)*r00*x6349*x6353))+(((-1.0)*r01*x6345*x6353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6356=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6356.valid){
continue;
}
CheckValue<IkReal> x6357 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6356.value)))+(x6357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6358=IKsin(j4);
IkReal x6359=IKcos(j4);
IkReal x6360=(cj5*cj6);
IkReal x6361=(r11*sj6);
IkReal x6362=(cj6*r20);
IkReal x6363=(cj6*r10);
IkReal x6364=(cj5*sj6);
IkReal x6365=(r21*sj6);
IkReal x6366=(cj6*r00);
IkReal x6367=(r01*sj6);
IkReal x6368=((1.0)*x6359);
IkReal x6369=((1.0)*x6358);
IkReal x6370=(sj5*x6369);
evalcond[0]=((((-1.0)*r20*x6364*x6369))+((x6359*x6362))+(((-1.0)*x6365*x6368))+(((-1.0)*r21*x6360*x6369))+(((-1.0)*r22*x6370)));
evalcond[1]=(((x6359*x6366))+(((-1.0)*r02*x6370))+(((-1.0)*r01*x6360*x6369))+(((-1.0)*x6367*x6368))+(((-1.0)*r00*x6364*x6369)));
evalcond[2]=((((-1.0)*r20*x6364*x6368))+(((-1.0)*x6362*x6369))+((x6358*x6365))+(((-1.0)*r22*sj5*x6368))+(((-1.0)*r21*x6360*x6368)));
evalcond[3]=(((x6358*x6361))+(((-1.0)*x6363*x6369))+(((-1.0)*r12*sj5*x6368))+(((-1.0)*r11*x6360*x6368))+(((-1.0)*r10*x6364*x6368)));
evalcond[4]=((-1.0)+((x6359*x6363))+(((-1.0)*x6361*x6368))+(((-1.0)*r12*x6370))+(((-1.0)*r11*x6360*x6369))+(((-1.0)*r10*x6364*x6369)));
evalcond[5]=((-1.0)+((x6358*x6367))+(((-1.0)*x6366*x6369))+(((-1.0)*r02*sj5*x6368))+(((-1.0)*r01*x6360*x6368))+(((-1.0)*r00*x6364*x6368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6371=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x6371;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6371);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6372=((1.0)*sj5);
IkReal x6373=(((cj5*r22))+(((-1.0)*cj6*r21*x6372))+(((-1.0)*r20*sj6*x6372)));
j4eval[0]=x6373;
j4eval[1]=IKsign(x6373);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6374=r11*r11;
IkReal x6375=cj5*cj5;
IkReal x6376=cj6*cj6;
IkReal x6377=r10*r10;
IkReal x6378=r12*r12;
IkReal x6379=(r12*sj5);
IkReal x6380=(cj6*r10);
IkReal x6381=((1.0)*x6376);
IkReal x6382=(cj5*cj6*r11);
IkReal x6383=(cj5*r10*sj6);
IkReal x6384=((2.0)*r11*sj6);
IkReal x6385=(x6375*x6377);
IkReal x6386=((((-1.0)*x6375*x6378))+((x6374*x6375*x6376))+x6378+x6374+x6385+(((-1.0)*x6380*x6384))+(((-1.0)*x6381*x6385))+(((-1.0)*x6374*x6381))+((x6375*x6380*x6384))+(((2.0)*x6379*x6382))+(((2.0)*x6379*x6383))+((x6376*x6377)));
j4eval[0]=x6386;
j4eval[1]=IKsign(x6386);
j4eval[2]=((IKabs((x6379+x6383+x6382)))+(IKabs((x6380+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6387=r11*r11;
IkReal x6388=cj5*cj5;
IkReal x6389=cj6*cj6;
IkReal x6390=r10*r10;
IkReal x6391=r12*r12;
IkReal x6392=(r10*sj6);
IkReal x6393=(r12*sj5);
IkReal x6394=((1.0)*x6389);
IkReal x6395=(cj5*cj6*r11);
IkReal x6396=((2.0)*cj6*r11);
IkReal x6397=(x6388*x6390);
CheckValue<IkReal> x6398 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x6393+x6395+((cj5*x6392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6398.valid){
continue;
}
CheckValue<IkReal> x6399=IKPowWithIntegerCheck(IKsign((x6391+x6397+x6387+(((-1.0)*x6387*x6394))+(((-1.0)*x6388*x6391))+(((2.0)*cj5*x6392*x6393))+(((-1.0)*x6392*x6396))+(((-1.0)*x6394*x6397))+((x6387*x6388*x6389))+(((2.0)*x6393*x6395))+((x6389*x6390))+((x6388*x6392*x6396)))),-1);
if(!x6399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6398.value)+(((1.5707963267949)*(x6399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6400=IKsin(j4);
IkReal x6401=IKcos(j4);
IkReal x6402=(cj5*cj6);
IkReal x6403=(r11*sj6);
IkReal x6404=(cj6*r20);
IkReal x6405=(cj6*r10);
IkReal x6406=(cj5*sj6);
IkReal x6407=(r01*sj6);
IkReal x6408=(r21*sj6);
IkReal x6409=(cj6*r00);
IkReal x6410=((1.0)*x6401);
IkReal x6411=((1.0)*x6400);
IkReal x6412=(sj5*x6411);
evalcond[0]=((((-1.0)*r20*x6406*x6411))+(((-1.0)*x6408*x6410))+(((-1.0)*r22*x6412))+((x6401*x6404))+(((-1.0)*r21*x6402*x6411)));
evalcond[1]=((((-1.0)*x6403*x6410))+(((-1.0)*r11*x6402*x6411))+(((-1.0)*r10*x6406*x6411))+((x6401*x6405))+(((-1.0)*r12*x6412)));
evalcond[2]=((((-1.0)*r20*x6406*x6410))+(((-1.0)*r22*sj5*x6410))+(((-1.0)*r21*x6402*x6410))+(((-1.0)*x6404*x6411))+((x6400*x6408)));
evalcond[3]=((((-1.0)*r02*sj5*x6410))+(((-1.0)*r01*x6402*x6410))+(((-1.0)*r00*x6406*x6410))+(((-1.0)*x6409*x6411))+((x6400*x6407)));
evalcond[4]=((-1.0)+(((-1.0)*x6407*x6410))+(((-1.0)*r01*x6402*x6411))+(((-1.0)*r02*x6412))+(((-1.0)*r00*x6406*x6411))+((x6401*x6409)));
evalcond[5]=((1.0)+(((-1.0)*r11*x6402*x6410))+(((-1.0)*x6405*x6411))+(((-1.0)*r12*sj5*x6410))+(((-1.0)*r10*x6406*x6410))+((x6400*x6403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6413=((1.0)*sj5);
CheckValue<IkReal> x6414 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6414.valid){
continue;
}
CheckValue<IkReal> x6415=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r21*x6413))+((cj5*r22))+(((-1.0)*r20*sj6*x6413)))),-1);
if(!x6415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6414.value)+(((1.5707963267949)*(x6415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6416=IKsin(j4);
IkReal x6417=IKcos(j4);
IkReal x6418=(cj5*cj6);
IkReal x6419=(r11*sj6);
IkReal x6420=(cj6*r20);
IkReal x6421=(cj6*r10);
IkReal x6422=(cj5*sj6);
IkReal x6423=(r01*sj6);
IkReal x6424=(r21*sj6);
IkReal x6425=(cj6*r00);
IkReal x6426=((1.0)*x6417);
IkReal x6427=((1.0)*x6416);
IkReal x6428=(sj5*x6427);
evalcond[0]=((((-1.0)*r22*x6428))+(((-1.0)*x6424*x6426))+(((-1.0)*r20*x6422*x6427))+((x6417*x6420))+(((-1.0)*r21*x6418*x6427)));
evalcond[1]=((((-1.0)*r11*x6418*x6427))+(((-1.0)*x6419*x6426))+((x6417*x6421))+(((-1.0)*r10*x6422*x6427))+(((-1.0)*r12*x6428)));
evalcond[2]=((((-1.0)*r22*sj5*x6426))+((x6416*x6424))+(((-1.0)*r20*x6422*x6426))+(((-1.0)*r21*x6418*x6426))+(((-1.0)*x6420*x6427)));
evalcond[3]=(((x6416*x6423))+(((-1.0)*r00*x6422*x6426))+(((-1.0)*r02*sj5*x6426))+(((-1.0)*x6425*x6427))+(((-1.0)*r01*x6418*x6426)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x6422*x6427))+((x6417*x6425))+(((-1.0)*r01*x6418*x6427))+(((-1.0)*r02*x6428))+(((-1.0)*x6423*x6426)));
evalcond[5]=((1.0)+(((-1.0)*r11*x6418*x6426))+(((-1.0)*x6421*x6427))+((x6416*x6419))+(((-1.0)*r12*sj5*x6426))+(((-1.0)*r10*x6422*x6426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6429 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6429.valid){
continue;
}
CheckValue<IkReal> x6430=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x6430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6429.value)+(((1.5707963267949)*(x6430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6431=IKsin(j4);
IkReal x6432=IKcos(j4);
IkReal x6433=(cj5*cj6);
IkReal x6434=(r11*sj6);
IkReal x6435=(cj6*r20);
IkReal x6436=(cj6*r10);
IkReal x6437=(cj5*sj6);
IkReal x6438=(r01*sj6);
IkReal x6439=(r21*sj6);
IkReal x6440=(cj6*r00);
IkReal x6441=((1.0)*x6432);
IkReal x6442=((1.0)*x6431);
IkReal x6443=(sj5*x6442);
evalcond[0]=((((-1.0)*x6439*x6441))+((x6432*x6435))+(((-1.0)*r20*x6437*x6442))+(((-1.0)*r22*x6443))+(((-1.0)*r21*x6433*x6442)));
evalcond[1]=((((-1.0)*r11*x6433*x6442))+((x6432*x6436))+(((-1.0)*r12*x6443))+(((-1.0)*r10*x6437*x6442))+(((-1.0)*x6434*x6441)));
evalcond[2]=((((-1.0)*r22*sj5*x6441))+(((-1.0)*x6435*x6442))+((x6431*x6439))+(((-1.0)*r20*x6437*x6441))+(((-1.0)*r21*x6433*x6441)));
evalcond[3]=((((-1.0)*r00*x6437*x6441))+(((-1.0)*r02*sj5*x6441))+((x6431*x6438))+(((-1.0)*r01*x6433*x6441))+(((-1.0)*x6440*x6442)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x6437*x6442))+(((-1.0)*r02*x6443))+(((-1.0)*x6438*x6441))+((x6432*x6440))+(((-1.0)*r01*x6433*x6442)));
evalcond[5]=((1.0)+(((-1.0)*r11*x6433*x6441))+(((-1.0)*r12*sj5*x6441))+(((-1.0)*x6436*x6442))+(((-1.0)*r10*x6437*x6441))+((x6431*x6434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6444=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x6444;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6444);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6445=((1.0)*sj6);
IkReal x6446=(((cj5*r12))+(((-1.0)*r10*sj5*x6445))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x6446;
j4eval[1]=IKsign(x6446);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x6445))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6447=cj6*cj6;
IkReal x6448=cj5*cj5;
IkReal x6449=r10*r10;
IkReal x6450=r11*r11;
IkReal x6451=r12*r12;
IkReal x6452=(r10*sj6);
IkReal x6453=(r12*sj5);
IkReal x6454=((2.0)*cj6*r11);
IkReal x6455=((1.0)*x6449);
IkReal x6456=(x6447*x6450);
IkReal x6457=((((-2.0)*cj5*x6452*x6453))+((x6447*x6448*x6449))+(((-1.0)*x6447*x6455))+(((-1.0)*x6448*x6456))+(((-1.0)*x6450))+(((-1.0)*x6451))+x6456+(((-1.0)*x6448*x6455))+((x6452*x6454))+(((-1.0)*x6448*x6452*x6454))+(((-1.0)*cj5*x6453*x6454))+((x6448*x6451)));
j4eval[0]=x6457;
j4eval[1]=((IKabs((x6453+((cj5*cj6*r11))+((cj5*x6452)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6458=cj6*cj6;
IkReal x6459=cj5*cj5;
IkReal x6460=r10*r10;
IkReal x6461=r11*r11;
IkReal x6462=r12*r12;
IkReal x6463=(r10*sj6);
IkReal x6464=(r12*sj5);
IkReal x6465=((2.0)*cj6*r11);
IkReal x6466=(x6458*x6461);
IkReal x6467=(x6459*x6460);
CheckValue<IkReal> x6468 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x6464+((cj5*x6463))+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6468.valid){
continue;
}
CheckValue<IkReal> x6469=IKPowWithIntegerCheck(IKsign((((x6463*x6465))+(((-2.0)*cj5*x6463*x6464))+(((-1.0)*x6459*x6463*x6465))+x6466+(((-1.0)*cj5*x6464*x6465))+(((-1.0)*x6458*x6460))+(((-1.0)*x6459*x6466))+(((-1.0)*x6467))+(((-1.0)*x6462))+(((-1.0)*x6461))+((x6458*x6467))+((x6459*x6462)))),-1);
if(!x6469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6468.value)+(((1.5707963267949)*(x6469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6470=IKsin(j4);
IkReal x6471=IKcos(j4);
IkReal x6472=(cj5*cj6);
IkReal x6473=(r11*sj6);
IkReal x6474=(cj6*r20);
IkReal x6475=(cj6*r10);
IkReal x6476=(cj5*sj6);
IkReal x6477=(r01*sj6);
IkReal x6478=(r21*sj6);
IkReal x6479=(cj6*r00);
IkReal x6480=((1.0)*x6471);
IkReal x6481=((1.0)*x6470);
IkReal x6482=(sj5*x6481);
evalcond[0]=((((-1.0)*r20*x6476*x6481))+(((-1.0)*x6478*x6480))+(((-1.0)*r22*x6482))+((x6471*x6474))+(((-1.0)*r21*x6472*x6481)));
evalcond[1]=((((-1.0)*x6473*x6480))+(((-1.0)*r12*x6482))+(((-1.0)*r11*x6472*x6481))+((x6471*x6475))+(((-1.0)*r10*x6476*x6481)));
evalcond[2]=((((-1.0)*r20*x6476*x6480))+((x6470*x6478))+(((-1.0)*r22*sj5*x6480))+(((-1.0)*x6474*x6481))+(((-1.0)*r21*x6472*x6480)));
evalcond[3]=((((-1.0)*r01*x6472*x6480))+(((-1.0)*r02*sj5*x6480))+((x6470*x6477))+(((-1.0)*r00*x6476*x6480))+(((-1.0)*x6479*x6481)));
evalcond[4]=((1.0)+(((-1.0)*r01*x6472*x6481))+(((-1.0)*r02*x6482))+((x6471*x6479))+(((-1.0)*x6477*x6480))+(((-1.0)*r00*x6476*x6481)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x6480))+(((-1.0)*r11*x6472*x6480))+((x6470*x6473))+(((-1.0)*x6475*x6481))+(((-1.0)*r10*x6476*x6480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6483=((1.0)*sj6);
CheckValue<IkReal> x6484=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x6483)))),-1);
if(!x6484.valid){
continue;
}
CheckValue<IkReal> x6485 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6483))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6484.value)))+(x6485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6486=IKsin(j4);
IkReal x6487=IKcos(j4);
IkReal x6488=(cj5*cj6);
IkReal x6489=(r11*sj6);
IkReal x6490=(cj6*r20);
IkReal x6491=(cj6*r10);
IkReal x6492=(cj5*sj6);
IkReal x6493=(r01*sj6);
IkReal x6494=(r21*sj6);
IkReal x6495=(cj6*r00);
IkReal x6496=((1.0)*x6487);
IkReal x6497=((1.0)*x6486);
IkReal x6498=(sj5*x6497);
evalcond[0]=((((-1.0)*r22*x6498))+((x6487*x6490))+(((-1.0)*r21*x6488*x6497))+(((-1.0)*r20*x6492*x6497))+(((-1.0)*x6494*x6496)));
evalcond[1]=((((-1.0)*x6489*x6496))+((x6487*x6491))+(((-1.0)*r12*x6498))+(((-1.0)*r11*x6488*x6497))+(((-1.0)*r10*x6492*x6497)));
evalcond[2]=((((-1.0)*r21*x6488*x6496))+(((-1.0)*r20*x6492*x6496))+(((-1.0)*r22*sj5*x6496))+(((-1.0)*x6490*x6497))+((x6486*x6494)));
evalcond[3]=((((-1.0)*x6495*x6497))+(((-1.0)*r02*sj5*x6496))+(((-1.0)*r00*x6492*x6496))+(((-1.0)*r01*x6488*x6496))+((x6486*x6493)));
evalcond[4]=((1.0)+(((-1.0)*r02*x6498))+((x6487*x6495))+(((-1.0)*r00*x6492*x6497))+(((-1.0)*x6493*x6496))+(((-1.0)*r01*x6488*x6497)));
evalcond[5]=((-1.0)+((x6486*x6489))+(((-1.0)*r12*sj5*x6496))+(((-1.0)*r11*x6488*x6496))+(((-1.0)*r10*x6492*x6496))+(((-1.0)*x6491*x6497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6499=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6499.valid){
continue;
}
CheckValue<IkReal> x6500 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6499.value)))+(x6500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6501=IKsin(j4);
IkReal x6502=IKcos(j4);
IkReal x6503=(cj5*cj6);
IkReal x6504=(r11*sj6);
IkReal x6505=(cj6*r20);
IkReal x6506=(cj6*r10);
IkReal x6507=(cj5*sj6);
IkReal x6508=(r01*sj6);
IkReal x6509=(r21*sj6);
IkReal x6510=(cj6*r00);
IkReal x6511=((1.0)*x6502);
IkReal x6512=((1.0)*x6501);
IkReal x6513=(sj5*x6512);
evalcond[0]=((((-1.0)*r22*x6513))+((x6502*x6505))+(((-1.0)*r21*x6503*x6512))+(((-1.0)*x6509*x6511))+(((-1.0)*r20*x6507*x6512)));
evalcond[1]=(((x6502*x6506))+(((-1.0)*x6504*x6511))+(((-1.0)*r12*x6513))+(((-1.0)*r11*x6503*x6512))+(((-1.0)*r10*x6507*x6512)));
evalcond[2]=((((-1.0)*r21*x6503*x6511))+(((-1.0)*r22*sj5*x6511))+(((-1.0)*x6505*x6512))+(((-1.0)*r20*x6507*x6511))+((x6501*x6509)));
evalcond[3]=((((-1.0)*r02*sj5*x6511))+(((-1.0)*r01*x6503*x6511))+(((-1.0)*r00*x6507*x6511))+(((-1.0)*x6510*x6512))+((x6501*x6508)));
evalcond[4]=((1.0)+(((-1.0)*r02*x6513))+(((-1.0)*r01*x6503*x6512))+(((-1.0)*r00*x6507*x6512))+(((-1.0)*x6508*x6511))+((x6502*x6510)));
evalcond[5]=((-1.0)+(((-1.0)*x6506*x6512))+(((-1.0)*r12*sj5*x6511))+(((-1.0)*r11*x6503*x6511))+(((-1.0)*r10*x6507*x6511))+((x6501*x6504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6514=cj6*cj6;
IkReal x6515=cj5*cj5;
IkReal x6516=((1.0)*r11);
IkReal x6517=(cj5*sj0);
IkReal x6518=(cj6*r21);
IkReal x6519=(r22*sj5);
IkReal x6520=(r20*sj6);
IkReal x6521=(r12*r22);
IkReal x6522=((1.0)*sj6);
IkReal x6523=(r21*x6514);
IkReal x6524=(r10*x6515);
IkReal x6525=(r11*x6515);
IkReal x6526=(r20*x6514);
IkReal x6527=(cj5*r12*sj5);
CheckValue<IkReal> x6528=IKPowWithIntegerCheck(IKsign((((r20*x6524))+((r11*r21))+(((-1.0)*x6524*x6526))+(((-1.0)*r10*x6518*x6522))+((x6520*x6527))+x6521+(((-1.0)*cj6*x6516*x6520))+(((-1.0)*x6515*x6521))+((cj5*r10*sj6*x6519))+((r10*x6526))+((cj6*x6520*x6525))+(((-1.0)*x6516*x6523))+((x6518*x6527))+((x6523*x6525))+((sj6*x6518*x6524))+((cj5*cj6*r11*x6519)))),-1);
if(!x6528.valid){
continue;
}
CheckValue<IkReal> x6529 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x6522))+((cj6*r20*sj0)))),IkReal((((x6517*x6518))+((x6517*x6520))+((sj0*x6519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6528.value)))+(x6529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6530=IKsin(j4);
IkReal x6531=IKcos(j4);
IkReal x6532=(cj5*cj6);
IkReal x6533=(r11*sj6);
IkReal x6534=(cj6*r20);
IkReal x6535=(cj5*sj6);
IkReal x6536=(cj6*r10);
IkReal x6537=(r01*sj6);
IkReal x6538=(r21*sj6);
IkReal x6539=(cj6*r00);
IkReal x6540=((1.0)*x6531);
IkReal x6541=((1.0)*x6530);
IkReal x6542=(sj5*x6541);
evalcond[0]=((((-1.0)*r21*x6532*x6541))+(((-1.0)*r22*x6542))+(((-1.0)*r20*x6535*x6541))+(((-1.0)*x6538*x6540))+((x6531*x6534)));
evalcond[1]=((((-1.0)*r21*x6532*x6540))+(((-1.0)*r20*x6535*x6540))+(((-1.0)*r22*sj5*x6540))+((x6530*x6538))+(((-1.0)*x6534*x6541)));
evalcond[2]=((((-1.0)*r10*x6535*x6541))+cj0+(((-1.0)*r12*x6542))+((x6531*x6536))+(((-1.0)*x6533*x6540))+(((-1.0)*r11*x6532*x6541)));
evalcond[3]=(cj0+(((-1.0)*r01*x6532*x6540))+(((-1.0)*r02*sj5*x6540))+(((-1.0)*x6539*x6541))+((x6530*x6537))+(((-1.0)*r00*x6535*x6540)));
evalcond[4]=((((-1.0)*r10*x6535*x6540))+sj0+(((-1.0)*r12*sj5*x6540))+(((-1.0)*x6536*x6541))+((x6530*x6533))+(((-1.0)*r11*x6532*x6540)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x6532*x6541))+(((-1.0)*x6537*x6540))+((x6531*x6539))+(((-1.0)*r00*x6535*x6541))+(((-1.0)*r02*x6542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6543=cj5*cj5;
IkReal x6544=cj6*cj6;
IkReal x6545=(r22*sj5);
IkReal x6546=(cj6*r21);
IkReal x6547=(r20*sj6);
IkReal x6548=((1.0)*sj6);
IkReal x6549=(cj0*cj5);
IkReal x6550=(r02*r22);
IkReal x6551=(cj6*r01);
IkReal x6552=(r00*sj6);
IkReal x6553=(cj5*r02*sj5);
IkReal x6554=(r01*x6543);
IkReal x6555=(r21*x6544);
IkReal x6556=(r00*r20*x6543);
CheckValue<IkReal> x6557 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6548))+((cj0*cj6*r20)))),IkReal((((x6546*x6549))+((x6547*x6549))+((cj0*x6545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6557.valid){
continue;
}
CheckValue<IkReal> x6558=IKPowWithIntegerCheck(IKsign((((r00*r20*x6544))+((r01*r21))+(((-1.0)*x6543*x6550))+x6556+x6550+(((-1.0)*x6544*x6556))+((cj5*x6545*x6552))+((cj5*x6545*x6551))+((x6546*x6553))+((x6547*x6553))+(((-1.0)*r00*x6546*x6548))+((x6554*x6555))+((x6543*x6546*x6552))+((x6543*x6547*x6551))+(((-1.0)*x6547*x6551))+(((-1.0)*r01*x6555)))),-1);
if(!x6558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6557.value)+(((1.5707963267949)*(x6558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6559=IKsin(j4);
IkReal x6560=IKcos(j4);
IkReal x6561=(cj5*cj6);
IkReal x6562=(r11*sj6);
IkReal x6563=(cj6*r20);
IkReal x6564=(cj5*sj6);
IkReal x6565=(cj6*r10);
IkReal x6566=(r01*sj6);
IkReal x6567=(r21*sj6);
IkReal x6568=(cj6*r00);
IkReal x6569=((1.0)*x6560);
IkReal x6570=((1.0)*x6559);
IkReal x6571=(sj5*x6570);
evalcond[0]=((((-1.0)*x6567*x6569))+((x6560*x6563))+(((-1.0)*r22*x6571))+(((-1.0)*r21*x6561*x6570))+(((-1.0)*r20*x6564*x6570)));
evalcond[1]=((((-1.0)*r22*sj5*x6569))+(((-1.0)*r21*x6561*x6569))+(((-1.0)*r20*x6564*x6569))+(((-1.0)*x6563*x6570))+((x6559*x6567)));
evalcond[2]=(cj0+(((-1.0)*r10*x6564*x6570))+((x6560*x6565))+(((-1.0)*r11*x6561*x6570))+(((-1.0)*r12*x6571))+(((-1.0)*x6562*x6569)));
evalcond[3]=(cj0+(((-1.0)*r01*x6561*x6569))+(((-1.0)*r00*x6564*x6569))+(((-1.0)*r02*sj5*x6569))+(((-1.0)*x6568*x6570))+((x6559*x6566)));
evalcond[4]=((((-1.0)*x6565*x6570))+sj0+(((-1.0)*r10*x6564*x6569))+(((-1.0)*r12*sj5*x6569))+(((-1.0)*r11*x6561*x6569))+((x6559*x6562)));
evalcond[5]=((((-1.0)*x6566*x6569))+(((-1.0)*sj0))+(((-1.0)*r01*x6561*x6570))+((x6560*x6568))+(((-1.0)*r00*x6564*x6570))+(((-1.0)*r02*x6571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6572=(cj0*sj6);
IkReal x6573=(cj0*cj6);
CheckValue<IkReal> x6574 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6572))+((r20*x6573)))),IkReal((((cj5*r20*x6572))+((cj0*r22*sj5))+((cj5*r21*x6573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6574.valid){
continue;
}
CheckValue<IkReal> x6575=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x6575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6574.value)+(((1.5707963267949)*(x6575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6576=IKsin(j4);
IkReal x6577=IKcos(j4);
IkReal x6578=(cj5*cj6);
IkReal x6579=(r11*sj6);
IkReal x6580=(cj6*r20);
IkReal x6581=(cj5*sj6);
IkReal x6582=(cj6*r10);
IkReal x6583=(r01*sj6);
IkReal x6584=(r21*sj6);
IkReal x6585=(cj6*r00);
IkReal x6586=((1.0)*x6577);
IkReal x6587=((1.0)*x6576);
IkReal x6588=(sj5*x6587);
evalcond[0]=((((-1.0)*x6584*x6586))+(((-1.0)*r20*x6581*x6587))+(((-1.0)*r21*x6578*x6587))+(((-1.0)*r22*x6588))+((x6577*x6580)));
evalcond[1]=((((-1.0)*r20*x6581*x6586))+(((-1.0)*r22*sj5*x6586))+(((-1.0)*r21*x6578*x6586))+((x6576*x6584))+(((-1.0)*x6580*x6587)));
evalcond[2]=(cj0+(((-1.0)*r10*x6581*x6587))+(((-1.0)*r12*x6588))+(((-1.0)*r11*x6578*x6587))+(((-1.0)*x6579*x6586))+((x6577*x6582)));
evalcond[3]=((((-1.0)*r01*x6578*x6586))+cj0+(((-1.0)*r00*x6581*x6586))+((x6576*x6583))+(((-1.0)*r02*sj5*x6586))+(((-1.0)*x6585*x6587)));
evalcond[4]=((((-1.0)*r12*sj5*x6586))+sj0+(((-1.0)*r10*x6581*x6586))+(((-1.0)*r11*x6578*x6586))+(((-1.0)*x6582*x6587))+((x6576*x6579)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x6578*x6587))+(((-1.0)*r02*x6588))+(((-1.0)*r00*x6581*x6587))+((x6577*x6585))+(((-1.0)*x6583*x6586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6589=(r20*sj0);
IkReal x6590=((1.0)*sj5);
IkReal x6591=(r21*sj0);
IkReal x6592=(((cj5*r12))+(((-1.0)*cj6*r11*x6590))+(((-1.0)*r10*sj6*x6590)));
j4eval[0]=x6592;
j4eval[1]=IKsign(x6592);
j4eval[2]=((IKabs(((((-1.0)*sj6*x6591))+((cj6*x6589)))))+(IKabs((((cj5*cj6*x6591))+((r22*sj0*sj5))+((cj5*sj6*x6589))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6593=cj5*cj5;
IkReal x6594=cj6*cj6;
IkReal x6595=(r00*r20);
IkReal x6596=(r02*r22);
IkReal x6597=(r22*sj5);
IkReal x6598=(cj6*r21);
IkReal x6599=(r00*sj6);
IkReal x6600=(r20*sj6);
IkReal x6601=(cj6*r01);
IkReal x6602=(cj0*cj5);
IkReal x6603=((1.0)*x6593);
IkReal x6604=(cj5*r02*sj5);
IkReal x6605=(r01*r21*x6594);
IkReal x6606=((((-1.0)*x6596*x6603))+((x6593*x6595))+(((-1.0)*x6598*x6599))+((x6593*x6600*x6601))+((x6594*x6595))+((x6598*x6604))+((cj5*x6597*x6601))+((x6593*x6605))+(((-1.0)*x6600*x6601))+((r01*r21))+x6596+((x6600*x6604))+((x6593*x6598*x6599))+((cj5*x6597*x6599))+(((-1.0)*x6605))+(((-1.0)*x6594*x6595*x6603)));
j4eval[0]=x6606;
j4eval[1]=IKsign(x6606);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x6598*x6602))+((cj0*x6597))+((x6600*x6602))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6607=cj6*cj6;
IkReal x6608=cj5*cj5;
IkReal x6609=(r12*sj5);
IkReal x6610=(r22*sj5);
IkReal x6611=((1.0)*r11);
IkReal x6612=(r20*sj0);
IkReal x6613=(r10*r20);
IkReal x6614=(cj5*sj6);
IkReal x6615=(cj6*r10);
IkReal x6616=(r12*r22);
IkReal x6617=(cj5*cj6*r21);
IkReal x6618=(r21*x6607);
IkReal x6619=(cj6*r20*sj6);
IkReal x6620=(r11*x6608);
IkReal x6621=((1.0)*r21*sj6);
IkReal x6622=((1.0)*x6608);
IkReal x6623=((((-1.0)*x6607*x6613*x6622))+((x6609*x6617))+((r10*x6610*x6614))+(((-1.0)*x6611*x6618))+(((-1.0)*x6611*x6619))+((r11*r21))+x6616+((x6618*x6620))+((cj5*cj6*r11*x6610))+((x6607*x6613))+((x6619*x6620))+((x6608*x6613))+(((-1.0)*x6616*x6622))+((r21*sj6*x6608*x6615))+(((-1.0)*x6615*x6621))+((r20*x6609*x6614)));
j4eval[0]=x6623;
j4eval[1]=IKsign(x6623);
j4eval[2]=((IKabs(((((-1.0)*sj0*x6621))+((cj6*x6612)))))+(IKabs((((x6612*x6614))+((sj0*x6617))+((sj0*x6610))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6624=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x6624;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x6624);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6625=((1.0)*sj6);
IkReal x6626=((((-1.0)*r00*sj5*x6625))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x6626;
j4eval[1]=IKsign(x6626);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x6625))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6627=cj6*cj6;
IkReal x6628=r01*r01;
IkReal x6629=cj5*cj5;
IkReal x6630=r00*r00;
IkReal x6631=r02*r02;
IkReal x6632=(cj6*r00);
IkReal x6633=(r02*sj5);
IkReal x6634=(cj5*cj6*r01);
IkReal x6635=((2.0)*r01*sj6);
IkReal x6636=(cj5*r00*sj6);
IkReal x6637=((1.0)*x6629);
IkReal x6638=(x6627*x6630);
IkReal x6639=(x6627*x6628);
IkReal x6640=((((2.0)*x6633*x6636))+(((2.0)*x6633*x6634))+(((-1.0)*x6639))+x6628+x6638+x6631+(((-1.0)*x6637*x6638))+((x6629*x6632*x6635))+(((-1.0)*x6632*x6635))+((x6629*x6639))+((x6629*x6630))+(((-1.0)*x6631*x6637)));
j4eval[0]=x6640;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x6632)))+(IKabs((x6633+x6634+x6636))));
j4eval[2]=IKsign(x6640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6641=cj6*cj6;
IkReal x6642=r01*r01;
IkReal x6643=cj5*cj5;
IkReal x6644=r00*r00;
IkReal x6645=r02*r02;
IkReal x6646=(cj6*r00);
IkReal x6647=((2.0)*r01);
IkReal x6648=(cj5*cj6);
IkReal x6649=(r02*sj5);
IkReal x6650=(cj5*r00*sj6);
IkReal x6651=(x6643*x6644);
IkReal x6652=(x6641*x6642);
CheckValue<IkReal> x6653=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*x6646*x6647))+((x6647*x6648*x6649))+((sj6*x6643*x6646*x6647))+x6645+x6642+x6651+(((-1.0)*x6652))+((x6641*x6644))+((x6643*x6652))+(((2.0)*x6649*x6650))+(((-1.0)*x6643*x6645))+(((-1.0)*x6641*x6651)))),-1);
if(!x6653.valid){
continue;
}
CheckValue<IkReal> x6654 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x6646)),IkReal((x6649+x6650+((r01*x6648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6653.value)))+(x6654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6655=IKsin(j4);
IkReal x6656=IKcos(j4);
IkReal x6657=(cj5*cj6);
IkReal x6658=(r11*sj6);
IkReal x6659=(cj6*r20);
IkReal x6660=(cj6*r10);
IkReal x6661=(cj5*sj6);
IkReal x6662=(r21*sj6);
IkReal x6663=(cj6*r00);
IkReal x6664=(r01*sj6);
IkReal x6665=((1.0)*x6656);
IkReal x6666=((1.0)*x6655);
IkReal x6667=(sj5*x6666);
evalcond[0]=((((-1.0)*r20*x6661*x6666))+((x6656*x6659))+(((-1.0)*r21*x6657*x6666))+(((-1.0)*x6662*x6665))+(((-1.0)*r22*x6667)));
evalcond[1]=((((-1.0)*x6664*x6665))+((x6656*x6663))+(((-1.0)*r01*x6657*x6666))+(((-1.0)*r00*x6661*x6666))+(((-1.0)*r02*x6667)));
evalcond[2]=((((-1.0)*r20*x6661*x6665))+(((-1.0)*r21*x6657*x6665))+(((-1.0)*x6659*x6666))+((x6655*x6662))+(((-1.0)*r22*sj5*x6665)));
evalcond[3]=((((-1.0)*r10*x6661*x6665))+(((-1.0)*x6660*x6666))+(((-1.0)*r12*sj5*x6665))+((x6655*x6658))+(((-1.0)*r11*x6657*x6665)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x6661*x6666))+((x6656*x6660))+(((-1.0)*x6658*x6665))+(((-1.0)*r12*x6667))+(((-1.0)*r11*x6657*x6666)));
evalcond[5]=((1.0)+(((-1.0)*r01*x6657*x6665))+(((-1.0)*r00*x6661*x6665))+(((-1.0)*r02*sj5*x6665))+(((-1.0)*x6663*x6666))+((x6655*x6664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6668=((1.0)*sj6);
CheckValue<IkReal> x6669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x6668))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x6669.valid){
continue;
}
CheckValue<IkReal> x6670 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6668))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6669.value)))+(x6670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6671=IKsin(j4);
IkReal x6672=IKcos(j4);
IkReal x6673=(cj5*cj6);
IkReal x6674=(r11*sj6);
IkReal x6675=(cj6*r20);
IkReal x6676=(cj6*r10);
IkReal x6677=(cj5*sj6);
IkReal x6678=(r21*sj6);
IkReal x6679=(cj6*r00);
IkReal x6680=(r01*sj6);
IkReal x6681=((1.0)*x6672);
IkReal x6682=((1.0)*x6671);
IkReal x6683=(sj5*x6682);
evalcond[0]=(((x6672*x6675))+(((-1.0)*r20*x6677*x6682))+(((-1.0)*x6678*x6681))+(((-1.0)*r21*x6673*x6682))+(((-1.0)*r22*x6683)));
evalcond[1]=(((x6672*x6679))+(((-1.0)*r02*x6683))+(((-1.0)*x6680*x6681))+(((-1.0)*r01*x6673*x6682))+(((-1.0)*r00*x6677*x6682)));
evalcond[2]=((((-1.0)*r20*x6677*x6681))+(((-1.0)*r22*sj5*x6681))+(((-1.0)*x6675*x6682))+(((-1.0)*r21*x6673*x6681))+((x6671*x6678)));
evalcond[3]=((((-1.0)*r12*sj5*x6681))+(((-1.0)*x6676*x6682))+(((-1.0)*r11*x6673*x6681))+(((-1.0)*r10*x6677*x6681))+((x6671*x6674)));
evalcond[4]=((-1.0)+((x6672*x6676))+(((-1.0)*r11*x6673*x6682))+(((-1.0)*x6674*x6681))+(((-1.0)*r12*x6683))+(((-1.0)*r10*x6677*x6682)));
evalcond[5]=((1.0)+((x6671*x6680))+(((-1.0)*x6679*x6682))+(((-1.0)*r02*sj5*x6681))+(((-1.0)*r01*x6673*x6681))+(((-1.0)*r00*x6677*x6681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6684=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6684.valid){
continue;
}
CheckValue<IkReal> x6685 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6684.value)))+(x6685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6686=IKsin(j4);
IkReal x6687=IKcos(j4);
IkReal x6688=(cj5*cj6);
IkReal x6689=(r11*sj6);
IkReal x6690=(cj6*r20);
IkReal x6691=(cj6*r10);
IkReal x6692=(cj5*sj6);
IkReal x6693=(r21*sj6);
IkReal x6694=(cj6*r00);
IkReal x6695=(r01*sj6);
IkReal x6696=((1.0)*x6687);
IkReal x6697=((1.0)*x6686);
IkReal x6698=(sj5*x6697);
evalcond[0]=(((x6687*x6690))+(((-1.0)*r20*x6692*x6697))+(((-1.0)*x6693*x6696))+(((-1.0)*r22*x6698))+(((-1.0)*r21*x6688*x6697)));
evalcond[1]=((((-1.0)*r02*x6698))+((x6687*x6694))+(((-1.0)*r01*x6688*x6697))+(((-1.0)*r00*x6692*x6697))+(((-1.0)*x6695*x6696)));
evalcond[2]=((((-1.0)*r20*x6692*x6696))+(((-1.0)*x6690*x6697))+(((-1.0)*r22*sj5*x6696))+((x6686*x6693))+(((-1.0)*r21*x6688*x6696)));
evalcond[3]=((((-1.0)*r12*sj5*x6696))+(((-1.0)*r11*x6688*x6696))+(((-1.0)*r10*x6692*x6696))+((x6686*x6689))+(((-1.0)*x6691*x6697)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x6688*x6697))+((x6687*x6691))+(((-1.0)*x6689*x6696))+(((-1.0)*r12*x6698))+(((-1.0)*r10*x6692*x6697)));
evalcond[5]=((1.0)+(((-1.0)*x6694*x6697))+(((-1.0)*r02*sj5*x6696))+(((-1.0)*r01*x6688*x6696))+(((-1.0)*r00*x6692*x6696))+((x6686*x6695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6699=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x6699;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6700=((1.0)*sj5);
IkReal x6701=(((cj5*r22))+(((-1.0)*r20*sj6*x6700))+(((-1.0)*cj6*r21*x6700)));
j4eval[0]=x6701;
j4eval[1]=IKsign(x6701);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6702=cj6*cj6;
IkReal x6703=cj5*cj5;
IkReal x6704=r00*r00;
IkReal x6705=r01*r01;
IkReal x6706=r02*r02;
IkReal x6707=(cj6*r00);
IkReal x6708=(cj5*cj6*r01);
IkReal x6709=((2.0)*r02*sj5);
IkReal x6710=((1.0)*x6702);
IkReal x6711=((2.0)*r01*sj6);
IkReal x6712=(cj5*r00*sj6);
IkReal x6713=(x6703*x6704);
IkReal x6714=(((x6702*x6713))+(((-1.0)*x6708*x6709))+(((-1.0)*x6713))+((x6707*x6711))+(((-1.0)*x6703*x6707*x6711))+((x6703*x6706))+(((-1.0)*x6703*x6705*x6710))+((x6702*x6705))+(((-1.0)*x6704*x6710))+(((-1.0)*x6709*x6712))+(((-1.0)*x6706))+(((-1.0)*x6705)));
j4eval[0]=x6714;
j4eval[1]=((IKabs((x6708+x6712+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x6707))));
j4eval[2]=IKsign(x6714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6715=cj6*cj6;
IkReal x6716=cj5*cj5;
IkReal x6717=r00*r00;
IkReal x6718=r01*r01;
IkReal x6719=r02*r02;
IkReal x6720=(cj6*r00);
IkReal x6721=(cj5*cj6*r01);
IkReal x6722=((2.0)*r02*sj5);
IkReal x6723=((1.0)*x6715);
IkReal x6724=((2.0)*r01*sj6);
IkReal x6725=(cj5*r00*sj6);
IkReal x6726=(x6716*x6717);
CheckValue<IkReal> x6727=IKPowWithIntegerCheck(IKsign((((x6715*x6726))+(((-1.0)*x6726))+((x6715*x6718))+(((-1.0)*x6718))+(((-1.0)*x6719))+((x6716*x6719))+(((-1.0)*x6717*x6723))+(((-1.0)*x6722*x6725))+(((-1.0)*x6721*x6722))+((x6720*x6724))+(((-1.0)*x6716*x6718*x6723))+(((-1.0)*x6716*x6720*x6724)))),-1);
if(!x6727.valid){
continue;
}
CheckValue<IkReal> x6728 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x6720)),IkReal((x6721+x6725+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6727.value)))+(x6728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6729=IKsin(j4);
IkReal x6730=IKcos(j4);
IkReal x6731=(cj5*cj6);
IkReal x6732=(r11*sj6);
IkReal x6733=(cj6*r20);
IkReal x6734=(cj6*r10);
IkReal x6735=(cj5*sj6);
IkReal x6736=(r21*sj6);
IkReal x6737=(cj6*r00);
IkReal x6738=(r01*sj6);
IkReal x6739=((1.0)*x6730);
IkReal x6740=((1.0)*x6729);
IkReal x6741=(sj5*x6740);
evalcond[0]=((((-1.0)*r22*x6741))+(((-1.0)*r20*x6735*x6740))+((x6730*x6733))+(((-1.0)*r21*x6731*x6740))+(((-1.0)*x6736*x6739)));
evalcond[1]=(((x6730*x6737))+(((-1.0)*r01*x6731*x6740))+(((-1.0)*x6738*x6739))+(((-1.0)*r02*x6741))+(((-1.0)*r00*x6735*x6740)));
evalcond[2]=(((x6729*x6736))+(((-1.0)*r21*x6731*x6739))+(((-1.0)*x6733*x6740))+(((-1.0)*r20*x6735*x6739))+(((-1.0)*r22*sj5*x6739)));
evalcond[3]=((((-1.0)*r11*x6731*x6739))+((x6729*x6732))+(((-1.0)*r10*x6735*x6739))+(((-1.0)*r12*sj5*x6739))+(((-1.0)*x6734*x6740)));
evalcond[4]=((1.0)+(((-1.0)*r12*x6741))+((x6730*x6734))+(((-1.0)*r10*x6735*x6740))+(((-1.0)*x6732*x6739))+(((-1.0)*r11*x6731*x6740)));
evalcond[5]=((-1.0)+((x6729*x6738))+(((-1.0)*r01*x6731*x6739))+(((-1.0)*r00*x6735*x6739))+(((-1.0)*x6737*x6740))+(((-1.0)*r02*sj5*x6739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6742=((1.0)*sj5);
CheckValue<IkReal> x6743 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6743.valid){
continue;
}
CheckValue<IkReal> x6744=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x6742))+(((-1.0)*r20*sj6*x6742)))),-1);
if(!x6744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6743.value)+(((1.5707963267949)*(x6744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6745=IKsin(j4);
IkReal x6746=IKcos(j4);
IkReal x6747=(cj5*cj6);
IkReal x6748=(r11*sj6);
IkReal x6749=(cj6*r20);
IkReal x6750=(cj6*r10);
IkReal x6751=(cj5*sj6);
IkReal x6752=(r21*sj6);
IkReal x6753=(cj6*r00);
IkReal x6754=(r01*sj6);
IkReal x6755=((1.0)*x6746);
IkReal x6756=((1.0)*x6745);
IkReal x6757=(sj5*x6756);
evalcond[0]=(((x6746*x6749))+(((-1.0)*r22*x6757))+(((-1.0)*r20*x6751*x6756))+(((-1.0)*r21*x6747*x6756))+(((-1.0)*x6752*x6755)));
evalcond[1]=(((x6746*x6753))+(((-1.0)*r02*x6757))+(((-1.0)*r00*x6751*x6756))+(((-1.0)*r01*x6747*x6756))+(((-1.0)*x6754*x6755)));
evalcond[2]=((((-1.0)*r22*sj5*x6755))+(((-1.0)*x6749*x6756))+(((-1.0)*r20*x6751*x6755))+((x6745*x6752))+(((-1.0)*r21*x6747*x6755)));
evalcond[3]=((((-1.0)*x6750*x6756))+((x6745*x6748))+(((-1.0)*r10*x6751*x6755))+(((-1.0)*r12*sj5*x6755))+(((-1.0)*r11*x6747*x6755)));
evalcond[4]=((1.0)+(((-1.0)*x6748*x6755))+((x6746*x6750))+(((-1.0)*r10*x6751*x6756))+(((-1.0)*r12*x6757))+(((-1.0)*r11*x6747*x6756)));
evalcond[5]=((-1.0)+((x6745*x6754))+(((-1.0)*r00*x6751*x6755))+(((-1.0)*r01*x6747*x6755))+(((-1.0)*r02*sj5*x6755))+(((-1.0)*x6753*x6756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6758 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6758.valid){
continue;
}
CheckValue<IkReal> x6759=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x6759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6758.value)+(((1.5707963267949)*(x6759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6760=IKsin(j4);
IkReal x6761=IKcos(j4);
IkReal x6762=(cj5*cj6);
IkReal x6763=(r11*sj6);
IkReal x6764=(cj6*r20);
IkReal x6765=(cj6*r10);
IkReal x6766=(cj5*sj6);
IkReal x6767=(r21*sj6);
IkReal x6768=(cj6*r00);
IkReal x6769=(r01*sj6);
IkReal x6770=((1.0)*x6761);
IkReal x6771=((1.0)*x6760);
IkReal x6772=(sj5*x6771);
evalcond[0]=((((-1.0)*r22*x6772))+(((-1.0)*r20*x6766*x6771))+(((-1.0)*r21*x6762*x6771))+((x6761*x6764))+(((-1.0)*x6767*x6770)));
evalcond[1]=((((-1.0)*x6769*x6770))+(((-1.0)*r01*x6762*x6771))+(((-1.0)*r02*x6772))+(((-1.0)*r00*x6766*x6771))+((x6761*x6768)));
evalcond[2]=((((-1.0)*r20*x6766*x6770))+(((-1.0)*x6764*x6771))+(((-1.0)*r21*x6762*x6770))+((x6760*x6767))+(((-1.0)*r22*sj5*x6770)));
evalcond[3]=((((-1.0)*r10*x6766*x6770))+(((-1.0)*r11*x6762*x6770))+(((-1.0)*r12*sj5*x6770))+((x6760*x6763))+(((-1.0)*x6765*x6771)));
evalcond[4]=((1.0)+(((-1.0)*x6763*x6770))+(((-1.0)*r12*x6772))+(((-1.0)*r10*x6766*x6771))+(((-1.0)*r11*x6762*x6771))+((x6761*x6765)));
evalcond[5]=((-1.0)+(((-1.0)*x6768*x6771))+(((-1.0)*r01*x6762*x6770))+((x6760*x6769))+(((-1.0)*r00*x6766*x6770))+(((-1.0)*r02*sj5*x6770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6773=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x6773;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6774=((1.0)*sj6);
IkReal x6775=(((cj5*r12))+(((-1.0)*r10*sj5*x6774))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x6775;
j4eval[1]=IKsign(x6775);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x6774))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6776=r11*r11;
IkReal x6777=cj5*cj5;
IkReal x6778=cj6*cj6;
IkReal x6779=r10*r10;
IkReal x6780=r12*r12;
IkReal x6781=(r12*sj5);
IkReal x6782=(cj6*r10);
IkReal x6783=((1.0)*x6778);
IkReal x6784=(cj5*cj6*r11);
IkReal x6785=(cj5*r10*sj6);
IkReal x6786=((2.0)*r11*sj6);
IkReal x6787=(x6777*x6779);
IkReal x6788=((((-1.0)*x6782*x6786))+x6780+x6787+x6776+((x6777*x6782*x6786))+(((-1.0)*x6777*x6780))+((x6776*x6777*x6778))+((x6778*x6779))+(((-1.0)*x6776*x6783))+(((-1.0)*x6783*x6787))+(((2.0)*x6781*x6784))+(((2.0)*x6781*x6785)));
j4eval[0]=x6788;
j4eval[1]=IKsign(x6788);
j4eval[2]=((IKabs((x6782+(((-1.0)*r11*sj6)))))+(IKabs((x6781+x6785+x6784))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6789=r11*r11;
IkReal x6790=cj5*cj5;
IkReal x6791=cj6*cj6;
IkReal x6792=r10*r10;
IkReal x6793=r12*r12;
IkReal x6794=(r10*sj6);
IkReal x6795=(r12*sj5);
IkReal x6796=((1.0)*x6791);
IkReal x6797=(cj5*cj6*r11);
IkReal x6798=((2.0)*cj6*r11);
IkReal x6799=(x6790*x6792);
CheckValue<IkReal> x6800 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x6797+x6795+((cj5*x6794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6800.valid){
continue;
}
CheckValue<IkReal> x6801=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6790*x6793))+(((-1.0)*x6789*x6796))+x6789+x6793+x6799+(((2.0)*x6795*x6797))+((x6789*x6790*x6791))+(((2.0)*cj5*x6794*x6795))+((x6790*x6794*x6798))+(((-1.0)*x6794*x6798))+((x6791*x6792))+(((-1.0)*x6796*x6799)))),-1);
if(!x6801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6800.value)+(((1.5707963267949)*(x6801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6802=IKsin(j4);
IkReal x6803=IKcos(j4);
IkReal x6804=(cj5*cj6);
IkReal x6805=(r11*sj6);
IkReal x6806=(cj6*r20);
IkReal x6807=(cj6*r10);
IkReal x6808=(cj5*sj6);
IkReal x6809=(r01*sj6);
IkReal x6810=(r21*sj6);
IkReal x6811=(cj6*r00);
IkReal x6812=((1.0)*x6803);
IkReal x6813=((1.0)*x6802);
IkReal x6814=(sj5*x6813);
evalcond[0]=((((-1.0)*x6810*x6812))+(((-1.0)*r21*x6804*x6813))+((x6803*x6806))+(((-1.0)*r22*x6814))+(((-1.0)*r20*x6808*x6813)));
evalcond[1]=((((-1.0)*x6805*x6812))+(((-1.0)*r10*x6808*x6813))+((x6803*x6807))+(((-1.0)*r12*x6814))+(((-1.0)*r11*x6804*x6813)));
evalcond[2]=(((x6802*x6810))+(((-1.0)*r21*x6804*x6812))+(((-1.0)*r22*sj5*x6812))+(((-1.0)*x6806*x6813))+(((-1.0)*r20*x6808*x6812)));
evalcond[3]=((((-1.0)*x6811*x6813))+(((-1.0)*r00*x6808*x6812))+(((-1.0)*r01*x6804*x6812))+((x6802*x6809))+(((-1.0)*r02*sj5*x6812)));
evalcond[4]=((1.0)+((x6803*x6811))+(((-1.0)*x6809*x6812))+(((-1.0)*r00*x6808*x6813))+(((-1.0)*r01*x6804*x6813))+(((-1.0)*r02*x6814)));
evalcond[5]=((1.0)+(((-1.0)*r10*x6808*x6812))+(((-1.0)*x6807*x6813))+(((-1.0)*r12*sj5*x6812))+(((-1.0)*r11*x6804*x6812))+((x6802*x6805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6815=((1.0)*sj6);
CheckValue<IkReal> x6816=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x6815))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x6816.valid){
continue;
}
CheckValue<IkReal> x6817 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6815))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6816.value)))+(x6817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6818=IKsin(j4);
IkReal x6819=IKcos(j4);
IkReal x6820=(cj5*cj6);
IkReal x6821=(r11*sj6);
IkReal x6822=(cj6*r20);
IkReal x6823=(cj6*r10);
IkReal x6824=(cj5*sj6);
IkReal x6825=(r01*sj6);
IkReal x6826=(r21*sj6);
IkReal x6827=(cj6*r00);
IkReal x6828=((1.0)*x6819);
IkReal x6829=((1.0)*x6818);
IkReal x6830=(sj5*x6829);
evalcond[0]=((((-1.0)*r21*x6820*x6829))+(((-1.0)*r22*x6830))+((x6819*x6822))+(((-1.0)*r20*x6824*x6829))+(((-1.0)*x6826*x6828)));
evalcond[1]=((((-1.0)*r12*x6830))+(((-1.0)*r11*x6820*x6829))+((x6819*x6823))+(((-1.0)*r10*x6824*x6829))+(((-1.0)*x6821*x6828)));
evalcond[2]=((((-1.0)*r22*sj5*x6828))+(((-1.0)*r21*x6820*x6828))+((x6818*x6826))+(((-1.0)*r20*x6824*x6828))+(((-1.0)*x6822*x6829)));
evalcond[3]=((((-1.0)*r00*x6824*x6828))+(((-1.0)*r02*sj5*x6828))+(((-1.0)*x6827*x6829))+((x6818*x6825))+(((-1.0)*r01*x6820*x6828)));
evalcond[4]=((1.0)+(((-1.0)*r02*x6830))+(((-1.0)*r00*x6824*x6829))+((x6819*x6827))+(((-1.0)*r01*x6820*x6829))+(((-1.0)*x6825*x6828)));
evalcond[5]=((1.0)+(((-1.0)*x6823*x6829))+(((-1.0)*r11*x6820*x6828))+((x6818*x6821))+(((-1.0)*r10*x6824*x6828))+(((-1.0)*r12*sj5*x6828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6831=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6831.valid){
continue;
}
CheckValue<IkReal> x6832 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6831.value)))+(x6832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6833=IKsin(j4);
IkReal x6834=IKcos(j4);
IkReal x6835=(cj5*cj6);
IkReal x6836=(r11*sj6);
IkReal x6837=(cj6*r20);
IkReal x6838=(cj6*r10);
IkReal x6839=(cj5*sj6);
IkReal x6840=(r01*sj6);
IkReal x6841=(r21*sj6);
IkReal x6842=(cj6*r00);
IkReal x6843=((1.0)*x6834);
IkReal x6844=((1.0)*x6833);
IkReal x6845=(sj5*x6844);
evalcond[0]=((((-1.0)*r20*x6839*x6844))+(((-1.0)*r22*x6845))+(((-1.0)*x6841*x6843))+((x6834*x6837))+(((-1.0)*r21*x6835*x6844)));
evalcond[1]=((((-1.0)*r11*x6835*x6844))+(((-1.0)*x6836*x6843))+((x6834*x6838))+(((-1.0)*r12*x6845))+(((-1.0)*r10*x6839*x6844)));
evalcond[2]=((((-1.0)*r20*x6839*x6843))+(((-1.0)*r22*sj5*x6843))+(((-1.0)*x6837*x6844))+(((-1.0)*r21*x6835*x6843))+((x6833*x6841)));
evalcond[3]=((((-1.0)*r00*x6839*x6843))+(((-1.0)*r01*x6835*x6843))+((x6833*x6840))+(((-1.0)*x6842*x6844))+(((-1.0)*r02*sj5*x6843)));
evalcond[4]=((1.0)+(((-1.0)*r00*x6839*x6844))+(((-1.0)*r01*x6835*x6844))+((x6834*x6842))+(((-1.0)*r02*x6845))+(((-1.0)*x6840*x6843)));
evalcond[5]=((1.0)+((x6833*x6836))+(((-1.0)*r12*sj5*x6843))+(((-1.0)*r11*x6835*x6843))+(((-1.0)*x6838*x6844))+(((-1.0)*r10*x6839*x6843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6846=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x6846;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6846);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6847=((1.0)*sj5);
IkReal x6848=(((cj5*r22))+(((-1.0)*cj6*r21*x6847))+(((-1.0)*r20*sj6*x6847)));
j4eval[0]=x6848;
j4eval[1]=IKsign(x6848);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6849=cj6*cj6;
IkReal x6850=cj5*cj5;
IkReal x6851=r10*r10;
IkReal x6852=r11*r11;
IkReal x6853=r12*r12;
IkReal x6854=(r10*sj6);
IkReal x6855=(r12*sj5);
IkReal x6856=((2.0)*cj6*r11);
IkReal x6857=((1.0)*x6851);
IkReal x6858=(x6849*x6852);
IkReal x6859=((((-1.0)*x6852))+(((-1.0)*x6853))+x6858+((x6849*x6850*x6851))+((x6850*x6853))+(((-2.0)*cj5*x6854*x6855))+(((-1.0)*x6850*x6854*x6856))+(((-1.0)*x6849*x6857))+(((-1.0)*x6850*x6858))+(((-1.0)*x6850*x6857))+(((-1.0)*cj5*x6855*x6856))+((x6854*x6856)));
j4eval[0]=x6859;
j4eval[1]=((IKabs((((cj5*x6854))+((cj5*cj6*r11))+x6855)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6860=cj6*cj6;
IkReal x6861=cj5*cj5;
IkReal x6862=r10*r10;
IkReal x6863=r11*r11;
IkReal x6864=r12*r12;
IkReal x6865=(r10*sj6);
IkReal x6866=(r12*sj5);
IkReal x6867=((2.0)*cj6*r11);
IkReal x6868=(x6860*x6863);
IkReal x6869=(x6861*x6862);
CheckValue<IkReal> x6870=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*x6865*x6866))+(((-1.0)*x6860*x6862))+(((-1.0)*cj5*x6866*x6867))+((x6860*x6869))+((x6865*x6867))+(((-1.0)*x6861*x6868))+(((-1.0)*x6861*x6865*x6867))+(((-1.0)*x6863))+(((-1.0)*x6864))+(((-1.0)*x6869))+x6868+((x6861*x6864)))),-1);
if(!x6870.valid){
continue;
}
CheckValue<IkReal> x6871 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*cj6*r11))+x6866+((cj5*x6865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6870.value)))+(x6871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6872=IKsin(j4);
IkReal x6873=IKcos(j4);
IkReal x6874=(cj5*cj6);
IkReal x6875=(r11*sj6);
IkReal x6876=(cj6*r20);
IkReal x6877=(cj6*r10);
IkReal x6878=(cj5*sj6);
IkReal x6879=(r01*sj6);
IkReal x6880=(r21*sj6);
IkReal x6881=(cj6*r00);
IkReal x6882=((1.0)*x6873);
IkReal x6883=((1.0)*x6872);
IkReal x6884=(sj5*x6883);
evalcond[0]=(((x6873*x6876))+(((-1.0)*r21*x6874*x6883))+(((-1.0)*r20*x6878*x6883))+(((-1.0)*x6880*x6882))+(((-1.0)*r22*x6884)));
evalcond[1]=((((-1.0)*x6875*x6882))+(((-1.0)*r11*x6874*x6883))+((x6873*x6877))+(((-1.0)*r10*x6878*x6883))+(((-1.0)*r12*x6884)));
evalcond[2]=((((-1.0)*x6876*x6883))+(((-1.0)*r22*sj5*x6882))+(((-1.0)*r21*x6874*x6882))+((x6872*x6880))+(((-1.0)*r20*x6878*x6882)));
evalcond[3]=((((-1.0)*x6881*x6883))+(((-1.0)*r00*x6878*x6882))+((x6872*x6879))+(((-1.0)*r01*x6874*x6882))+(((-1.0)*r02*sj5*x6882)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x6878*x6883))+((x6873*x6881))+(((-1.0)*r02*x6884))+(((-1.0)*x6879*x6882))+(((-1.0)*r01*x6874*x6883)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x6874*x6882))+(((-1.0)*r12*sj5*x6882))+((x6872*x6875))+(((-1.0)*r10*x6878*x6882))+(((-1.0)*x6877*x6883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6885=((1.0)*sj5);
CheckValue<IkReal> x6886 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6886.valid){
continue;
}
CheckValue<IkReal> x6887=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x6885))+(((-1.0)*r20*sj6*x6885)))),-1);
if(!x6887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6886.value)+(((1.5707963267949)*(x6887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6888=IKsin(j4);
IkReal x6889=IKcos(j4);
IkReal x6890=(cj5*cj6);
IkReal x6891=(r11*sj6);
IkReal x6892=(cj6*r20);
IkReal x6893=(cj6*r10);
IkReal x6894=(cj5*sj6);
IkReal x6895=(r01*sj6);
IkReal x6896=(r21*sj6);
IkReal x6897=(cj6*r00);
IkReal x6898=((1.0)*x6889);
IkReal x6899=((1.0)*x6888);
IkReal x6900=(sj5*x6899);
evalcond[0]=((((-1.0)*x6896*x6898))+(((-1.0)*r22*x6900))+(((-1.0)*r21*x6890*x6899))+((x6889*x6892))+(((-1.0)*r20*x6894*x6899)));
evalcond[1]=((((-1.0)*r12*x6900))+(((-1.0)*r11*x6890*x6899))+((x6889*x6893))+(((-1.0)*x6891*x6898))+(((-1.0)*r10*x6894*x6899)));
evalcond[2]=((((-1.0)*r21*x6890*x6898))+(((-1.0)*x6892*x6899))+(((-1.0)*r20*x6894*x6898))+(((-1.0)*r22*sj5*x6898))+((x6888*x6896)));
evalcond[3]=((((-1.0)*x6897*x6899))+(((-1.0)*r01*x6890*x6898))+((x6888*x6895))+(((-1.0)*r00*x6894*x6898))+(((-1.0)*r02*sj5*x6898)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x6900))+(((-1.0)*x6895*x6898))+(((-1.0)*r01*x6890*x6899))+((x6889*x6897))+(((-1.0)*r00*x6894*x6899)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x6890*x6898))+(((-1.0)*r12*sj5*x6898))+(((-1.0)*x6893*x6899))+((x6888*x6891))+(((-1.0)*r10*x6894*x6898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6901 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6901.valid){
continue;
}
CheckValue<IkReal> x6902=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x6902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6901.value)+(((1.5707963267949)*(x6902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6903=IKsin(j4);
IkReal x6904=IKcos(j4);
IkReal x6905=(cj5*cj6);
IkReal x6906=(r11*sj6);
IkReal x6907=(cj6*r20);
IkReal x6908=(cj6*r10);
IkReal x6909=(cj5*sj6);
IkReal x6910=(r01*sj6);
IkReal x6911=(r21*sj6);
IkReal x6912=(cj6*r00);
IkReal x6913=((1.0)*x6904);
IkReal x6914=((1.0)*x6903);
IkReal x6915=(sj5*x6914);
evalcond[0]=((((-1.0)*x6911*x6913))+(((-1.0)*r22*x6915))+(((-1.0)*r21*x6905*x6914))+((x6904*x6907))+(((-1.0)*r20*x6909*x6914)));
evalcond[1]=((((-1.0)*r10*x6909*x6914))+(((-1.0)*r12*x6915))+(((-1.0)*x6906*x6913))+((x6904*x6908))+(((-1.0)*r11*x6905*x6914)));
evalcond[2]=((((-1.0)*r22*sj5*x6913))+(((-1.0)*x6907*x6914))+(((-1.0)*r21*x6905*x6913))+((x6903*x6911))+(((-1.0)*r20*x6909*x6913)));
evalcond[3]=((((-1.0)*x6912*x6914))+(((-1.0)*r01*x6905*x6913))+(((-1.0)*r02*sj5*x6913))+(((-1.0)*r00*x6909*x6913))+((x6903*x6910)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x6905*x6914))+(((-1.0)*x6910*x6913))+(((-1.0)*r00*x6909*x6914))+((x6904*x6912))+(((-1.0)*r02*x6915)));
evalcond[5]=((-1.0)+(((-1.0)*x6908*x6914))+(((-1.0)*r12*sj5*x6913))+(((-1.0)*r10*x6909*x6913))+((x6903*x6906))+(((-1.0)*r11*x6905*x6913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6916=cj6*cj6;
IkReal x6917=cj5*cj5;
IkReal x6918=((1.0)*r11);
IkReal x6919=(cj5*sj0);
IkReal x6920=(cj6*r21);
IkReal x6921=(r22*sj5);
IkReal x6922=(r20*sj6);
IkReal x6923=(r12*r22);
IkReal x6924=((1.0)*sj6);
IkReal x6925=(r21*x6916);
IkReal x6926=(r10*x6917);
IkReal x6927=(r11*x6917);
IkReal x6928=(r20*x6916);
IkReal x6929=(cj5*r12*sj5);
CheckValue<IkReal> x6930=IKPowWithIntegerCheck(IKsign((((r20*x6926))+((x6922*x6929))+((r11*r21))+(((-1.0)*cj6*x6918*x6922))+((sj6*x6920*x6926))+(((-1.0)*x6926*x6928))+((r10*x6928))+(((-1.0)*x6917*x6923))+((cj6*x6922*x6927))+((cj5*r10*sj6*x6921))+(((-1.0)*r10*x6920*x6924))+x6923+((x6925*x6927))+((cj5*cj6*r11*x6921))+(((-1.0)*x6918*x6925))+((x6920*x6929)))),-1);
if(!x6930.valid){
continue;
}
CheckValue<IkReal> x6931 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x6924))+((cj6*r20*sj0)))),IkReal((((sj0*x6921))+((x6919*x6922))+((x6919*x6920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6930.value)))+(x6931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6932=IKsin(j4);
IkReal x6933=IKcos(j4);
IkReal x6934=(cj5*cj6);
IkReal x6935=(r11*sj6);
IkReal x6936=(cj6*r20);
IkReal x6937=(cj6*r10);
IkReal x6938=(cj5*sj6);
IkReal x6939=(r01*sj6);
IkReal x6940=(r21*sj6);
IkReal x6941=(cj6*r00);
IkReal x6942=((1.0)*x6933);
IkReal x6943=((1.0)*x6932);
IkReal x6944=(sj5*x6943);
evalcond[0]=((((-1.0)*r21*x6934*x6943))+(((-1.0)*r20*x6938*x6943))+((x6933*x6936))+(((-1.0)*r22*x6944))+(((-1.0)*x6940*x6942)));
evalcond[1]=((((-1.0)*r21*x6934*x6942))+(((-1.0)*r20*x6938*x6942))+((x6932*x6940))+(((-1.0)*r22*sj5*x6942))+(((-1.0)*x6936*x6943)));
evalcond[2]=(sj0+((x6933*x6941))+(((-1.0)*r02*x6944))+(((-1.0)*x6939*x6942))+(((-1.0)*r00*x6938*x6943))+(((-1.0)*r01*x6934*x6943)));
evalcond[3]=(cj0+((x6932*x6939))+(((-1.0)*x6941*x6943))+(((-1.0)*r02*sj5*x6942))+(((-1.0)*r00*x6938*x6942))+(((-1.0)*r01*x6934*x6942)));
evalcond[4]=(sj0+((x6932*x6935))+(((-1.0)*r11*x6934*x6942))+(((-1.0)*r10*x6938*x6942))+(((-1.0)*r12*sj5*x6942))+(((-1.0)*x6937*x6943)));
evalcond[5]=((((-1.0)*r12*x6944))+(((-1.0)*r11*x6934*x6943))+((x6933*x6937))+(((-1.0)*r10*x6938*x6943))+(((-1.0)*x6935*x6942))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6945=cj5*cj5;
IkReal x6946=cj6*cj6;
IkReal x6947=(r22*sj5);
IkReal x6948=(cj6*r21);
IkReal x6949=(r20*sj6);
IkReal x6950=((1.0)*sj6);
IkReal x6951=(cj0*cj5);
IkReal x6952=(r02*r22);
IkReal x6953=(cj6*r01);
IkReal x6954=(r00*sj6);
IkReal x6955=(cj5*r02*sj5);
IkReal x6956=(r01*x6945);
IkReal x6957=(r21*x6946);
IkReal x6958=(r00*r20*x6945);
CheckValue<IkReal> x6959 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x6950)))),IkReal((((x6949*x6951))+((cj0*x6947))+((x6948*x6951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6959.valid){
continue;
}
CheckValue<IkReal> x6960=IKPowWithIntegerCheck(IKsign((((x6956*x6957))+(((-1.0)*x6949*x6953))+((x6949*x6955))+((x6945*x6949*x6953))+(((-1.0)*r01*x6957))+((r00*r20*x6946))+((r01*r21))+(((-1.0)*x6946*x6958))+((x6945*x6948*x6954))+((cj5*x6947*x6954))+((cj5*x6947*x6953))+x6958+x6952+((x6948*x6955))+(((-1.0)*r00*x6948*x6950))+(((-1.0)*x6945*x6952)))),-1);
if(!x6960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6959.value)+(((1.5707963267949)*(x6960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6961=IKsin(j4);
IkReal x6962=IKcos(j4);
IkReal x6963=(cj5*cj6);
IkReal x6964=(r11*sj6);
IkReal x6965=(cj6*r20);
IkReal x6966=(cj6*r10);
IkReal x6967=(cj5*sj6);
IkReal x6968=(r01*sj6);
IkReal x6969=(r21*sj6);
IkReal x6970=(cj6*r00);
IkReal x6971=((1.0)*x6962);
IkReal x6972=((1.0)*x6961);
IkReal x6973=(sj5*x6972);
evalcond[0]=(((x6962*x6965))+(((-1.0)*x6969*x6971))+(((-1.0)*r21*x6963*x6972))+(((-1.0)*r22*x6973))+(((-1.0)*r20*x6967*x6972)));
evalcond[1]=((((-1.0)*x6965*x6972))+((x6961*x6969))+(((-1.0)*r21*x6963*x6971))+(((-1.0)*r22*sj5*x6971))+(((-1.0)*r20*x6967*x6971)));
evalcond[2]=((((-1.0)*r01*x6963*x6972))+sj0+((x6962*x6970))+(((-1.0)*r02*x6973))+(((-1.0)*x6968*x6971))+(((-1.0)*r00*x6967*x6972)));
evalcond[3]=((((-1.0)*r01*x6963*x6971))+(((-1.0)*r02*sj5*x6971))+(((-1.0)*x6970*x6972))+cj0+((x6961*x6968))+(((-1.0)*r00*x6967*x6971)));
evalcond[4]=((((-1.0)*r10*x6967*x6971))+sj0+((x6961*x6964))+(((-1.0)*x6966*x6972))+(((-1.0)*r11*x6963*x6971))+(((-1.0)*r12*sj5*x6971)));
evalcond[5]=((((-1.0)*r10*x6967*x6972))+((x6962*x6966))+(((-1.0)*x6964*x6971))+(((-1.0)*r12*x6973))+(((-1.0)*r11*x6963*x6972))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6974=(cj5*sj0);
IkReal x6975=((1.0)*sj5);
CheckValue<IkReal> x6976 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r22*sj0*sj5))+((r20*sj6*x6974))+((cj6*r21*x6974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6976.valid){
continue;
}
CheckValue<IkReal> x6977=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x6975))+(((-1.0)*r10*sj6*x6975)))),-1);
if(!x6977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6976.value)+(((1.5707963267949)*(x6977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6978=IKsin(j4);
IkReal x6979=IKcos(j4);
IkReal x6980=(cj5*cj6);
IkReal x6981=(r11*sj6);
IkReal x6982=(cj6*r20);
IkReal x6983=(cj6*r10);
IkReal x6984=(cj5*sj6);
IkReal x6985=(r01*sj6);
IkReal x6986=(r21*sj6);
IkReal x6987=(cj6*r00);
IkReal x6988=((1.0)*x6979);
IkReal x6989=((1.0)*x6978);
IkReal x6990=(sj5*x6989);
evalcond[0]=((((-1.0)*r20*x6984*x6989))+(((-1.0)*r21*x6980*x6989))+(((-1.0)*x6986*x6988))+(((-1.0)*r22*x6990))+((x6979*x6982)));
evalcond[1]=((((-1.0)*r20*x6984*x6988))+(((-1.0)*r22*sj5*x6988))+(((-1.0)*r21*x6980*x6988))+((x6978*x6986))+(((-1.0)*x6982*x6989)));
evalcond[2]=(sj0+(((-1.0)*x6985*x6988))+(((-1.0)*r01*x6980*x6989))+(((-1.0)*r02*x6990))+((x6979*x6987))+(((-1.0)*r00*x6984*x6989)));
evalcond[3]=((((-1.0)*x6987*x6989))+cj0+(((-1.0)*r02*sj5*x6988))+(((-1.0)*r01*x6980*x6988))+((x6978*x6985))+(((-1.0)*r00*x6984*x6988)));
evalcond[4]=(sj0+(((-1.0)*r12*sj5*x6988))+((x6978*x6981))+(((-1.0)*r11*x6980*x6988))+(((-1.0)*r10*x6984*x6988))+(((-1.0)*x6983*x6989)));
evalcond[5]=((((-1.0)*r12*x6990))+(((-1.0)*r11*x6980*x6989))+(((-1.0)*r10*x6984*x6989))+((x6979*x6983))+(((-1.0)*x6981*x6988))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6991=cj5*cj5;
IkReal x6992=cj6*cj6;
IkReal x6993=r20*r20;
IkReal x6994=r21*r21;
IkReal x6995=r22*r22;
IkReal x6996=(r22*sj5);
IkReal x6997=(cj6*r20);
IkReal x6998=(cj1*sj2);
IkReal x6999=(r21*sj6);
IkReal x7000=(cj5*r20*sj6);
IkReal x7001=(cj5*cj6*r21);
IkReal x7002=((1.0)*x6991);
IkReal x7003=(x6992*x6993);
IkReal x7004=(x6992*x6994);
CheckValue<IkReal> x7005=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7004))+x7003+(((2.0)*x6996*x7000))+(((2.0)*x6996*x7001))+(((-1.0)*x7002*x7003))+(((2.0)*x6991*x6997*x6999))+((x6991*x6993))+((x6991*x7004))+(((-2.0)*x6997*x6999))+x6994+x6995+(((-1.0)*x6995*x7002)))),-1);
if(!x7005.valid){
continue;
}
CheckValue<IkReal> x7006 = IKatan2WithCheck(IkReal((((sj1*x6997))+((x6998*x7000))+((x6998*x7001))+(((-1.0)*sj1*x6999))+((x6996*x6998)))),IkReal((((sj1*x7000))+((sj1*x7001))+((sj1*x6996))+((x6998*x6999))+(((-1.0)*x6997*x6998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7005.value)))+(x7006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7007=IKsin(j4);
IkReal x7008=IKcos(j4);
IkReal x7009=(cj5*cj6);
IkReal x7010=((1.0)*cj1);
IkReal x7011=(sj1*sj2);
IkReal x7012=(r11*sj6);
IkReal x7013=(cj6*r20);
IkReal x7014=(cj6*r10);
IkReal x7015=(cj5*sj6);
IkReal x7016=(r01*sj6);
IkReal x7017=(r21*sj6);
IkReal x7018=(cj6*r00);
IkReal x7019=((1.0)*x7008);
IkReal x7020=((1.0)*x7007);
IkReal x7021=(sj5*x7020);
evalcond[0]=(sj1+(((-1.0)*r20*x7015*x7019))+((x7007*x7017))+(((-1.0)*r22*sj5*x7019))+(((-1.0)*r21*x7009*x7019))+(((-1.0)*x7013*x7020)));
evalcond[1]=((((-1.0)*r22*x7021))+((cj1*sj2))+((x7008*x7013))+(((-1.0)*r21*x7009*x7020))+(((-1.0)*x7017*x7019))+(((-1.0)*r20*x7015*x7020)));
evalcond[2]=((((-1.0)*x7018*x7020))+(((-1.0)*r01*x7009*x7019))+(((-1.0)*r00*x7015*x7019))+((x7007*x7016))+(((-1.0)*cj0*x7010))+(((-1.0)*r02*sj5*x7019)));
evalcond[3]=((((-1.0)*r11*x7009*x7019))+((x7007*x7012))+(((-1.0)*r12*sj5*x7019))+(((-1.0)*sj0*x7010))+(((-1.0)*r10*x7015*x7019))+(((-1.0)*x7014*x7020)));
evalcond[4]=((((-1.0)*r12*x7021))+(((-1.0)*r10*x7015*x7020))+(((-1.0)*x7012*x7019))+((cj0*cj2))+((x7008*x7014))+(((-1.0)*r11*x7009*x7020))+((sj0*x7011)));
evalcond[5]=(((cj0*x7011))+(((-1.0)*cj2*sj0))+(((-1.0)*r02*x7021))+((x7008*x7018))+(((-1.0)*x7016*x7019))+(((-1.0)*r01*x7009*x7020))+(((-1.0)*r00*x7015*x7020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7022=(cj6*sj1);
IkReal x7023=((1.0)*cj5);
IkReal x7024=((1.0)*sj5);
IkReal x7025=(cj1*sj0);
IkReal x7026=((1.0)*sj6);
CheckValue<IkReal> x7027 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7024*x7025))+(((-1.0)*r12*sj1*x7024))+(((-1.0)*r11*x7022*x7023))+(((-1.0)*r20*sj6*x7023*x7025))+(((-1.0)*cj6*r21*x7023*x7025))+(((-1.0)*r10*sj1*sj6*x7023)))),IkReal((((cj6*r20*x7025))+(((-1.0)*r21*x7025*x7026))+((r10*x7022))+(((-1.0)*r11*sj1*x7026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7027.valid){
continue;
}
CheckValue<IkReal> x7028=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x7024))+(((-1.0)*cj6*r01*x7024))+((cj5*r02)))),-1);
if(!x7028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7027.value)+(((1.5707963267949)*(x7028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7029=IKsin(j4);
IkReal x7030=IKcos(j4);
IkReal x7031=(cj5*cj6);
IkReal x7032=((1.0)*cj1);
IkReal x7033=(sj1*sj2);
IkReal x7034=(r11*sj6);
IkReal x7035=(cj6*r20);
IkReal x7036=(cj6*r10);
IkReal x7037=(cj5*sj6);
IkReal x7038=(r01*sj6);
IkReal x7039=(r21*sj6);
IkReal x7040=(cj6*r00);
IkReal x7041=((1.0)*x7030);
IkReal x7042=((1.0)*x7029);
IkReal x7043=(sj5*x7042);
evalcond[0]=((((-1.0)*r21*x7031*x7041))+sj1+(((-1.0)*r22*sj5*x7041))+(((-1.0)*x7035*x7042))+((x7029*x7039))+(((-1.0)*r20*x7037*x7041)));
evalcond[1]=(((x7030*x7035))+(((-1.0)*r21*x7031*x7042))+(((-1.0)*r22*x7043))+((cj1*sj2))+(((-1.0)*r20*x7037*x7042))+(((-1.0)*x7039*x7041)));
evalcond[2]=((((-1.0)*r02*sj5*x7041))+(((-1.0)*x7040*x7042))+((x7029*x7038))+(((-1.0)*r00*x7037*x7041))+(((-1.0)*r01*x7031*x7041))+(((-1.0)*cj0*x7032)));
evalcond[3]=((((-1.0)*x7036*x7042))+((x7029*x7034))+(((-1.0)*sj0*x7032))+(((-1.0)*r10*x7037*x7041))+(((-1.0)*r11*x7031*x7041))+(((-1.0)*r12*sj5*x7041)));
evalcond[4]=(((x7030*x7036))+((sj0*x7033))+(((-1.0)*r12*x7043))+(((-1.0)*x7034*x7041))+((cj0*cj2))+(((-1.0)*r10*x7037*x7042))+(((-1.0)*r11*x7031*x7042)));
evalcond[5]=(((x7030*x7040))+(((-1.0)*r02*x7043))+(((-1.0)*cj2*sj0))+(((-1.0)*r00*x7037*x7042))+((cj0*x7033))+(((-1.0)*r01*x7031*x7042))+(((-1.0)*x7038*x7041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7044=(cj0*cj1);
IkReal x7045=((1.0)*sj1);
IkReal x7046=((1.0)*cj5);
IkReal x7047=(cj5*x7045);
CheckValue<IkReal> x7048 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj5*x7045))+(((-1.0)*r00*sj6*x7047))+(((-1.0)*cj6*r21*x7044*x7046))+(((-1.0)*r22*sj5*x7044))+(((-1.0)*cj6*r01*x7047))+(((-1.0)*r20*sj6*x7044*x7046)))),IkReal((((cj6*r20*x7044))+(((-1.0)*r01*sj6*x7045))+((cj6*r00*sj1))+(((-1.0)*r21*sj6*x7044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7048.valid){
continue;
}
CheckValue<IkReal> x7049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x7046))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7048.value)+(((1.5707963267949)*(x7049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7050=IKsin(j4);
IkReal x7051=IKcos(j4);
IkReal x7052=(cj5*cj6);
IkReal x7053=((1.0)*cj1);
IkReal x7054=(sj1*sj2);
IkReal x7055=(r11*sj6);
IkReal x7056=(cj6*r20);
IkReal x7057=(cj6*r10);
IkReal x7058=(cj5*sj6);
IkReal x7059=(r01*sj6);
IkReal x7060=(r21*sj6);
IkReal x7061=(cj6*r00);
IkReal x7062=((1.0)*x7051);
IkReal x7063=((1.0)*x7050);
IkReal x7064=(sj5*x7063);
evalcond[0]=((((-1.0)*x7056*x7063))+sj1+(((-1.0)*r21*x7052*x7062))+(((-1.0)*r20*x7058*x7062))+((x7050*x7060))+(((-1.0)*r22*sj5*x7062)));
evalcond[1]=(((x7051*x7056))+((cj1*sj2))+(((-1.0)*r21*x7052*x7063))+(((-1.0)*x7060*x7062))+(((-1.0)*r20*x7058*x7063))+(((-1.0)*r22*x7064)));
evalcond[2]=(((x7050*x7059))+(((-1.0)*r00*x7058*x7062))+(((-1.0)*r02*sj5*x7062))+(((-1.0)*x7061*x7063))+(((-1.0)*cj0*x7053))+(((-1.0)*r01*x7052*x7062)));
evalcond[3]=((((-1.0)*r10*x7058*x7062))+(((-1.0)*r11*x7052*x7062))+((x7050*x7055))+(((-1.0)*r12*sj5*x7062))+(((-1.0)*sj0*x7053))+(((-1.0)*x7057*x7063)));
evalcond[4]=((((-1.0)*r10*x7058*x7063))+((x7051*x7057))+(((-1.0)*r11*x7052*x7063))+(((-1.0)*r12*x7064))+((cj0*cj2))+(((-1.0)*x7055*x7062))+((sj0*x7054)));
evalcond[5]=((((-1.0)*x7059*x7062))+(((-1.0)*cj2*sj0))+(((-1.0)*r00*x7058*x7063))+((x7051*x7061))+((cj0*x7054))+(((-1.0)*r02*x7064))+(((-1.0)*r01*x7052*x7063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7065=cj5*cj5;
IkReal x7066=cj6*cj6;
IkReal x7067=r20*r20;
IkReal x7068=r21*r21;
IkReal x7069=r22*r22;
IkReal x7070=(r22*sj5);
IkReal x7071=(cj6*r20);
IkReal x7072=(cj1*sj2);
IkReal x7073=(r21*sj6);
IkReal x7074=(cj5*r20*sj6);
IkReal x7075=(cj5*cj6*r21);
IkReal x7076=((1.0)*x7065);
IkReal x7077=(x7066*x7067);
IkReal x7078=(x7066*x7068);
CheckValue<IkReal> x7079 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x7073))+((x7070*x7072))+((x7072*x7075))+((x7072*x7074))+((sj1*x7071)))),IkReal((((x7072*x7073))+((sj1*x7070))+((sj1*x7075))+((sj1*x7074))+(((-1.0)*x7071*x7072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7079.valid){
continue;
}
CheckValue<IkReal> x7080=IKPowWithIntegerCheck(IKsign(((((2.0)*x7065*x7071*x7073))+(((-1.0)*x7069*x7076))+x7077+x7069+x7068+(((-1.0)*x7076*x7077))+(((-1.0)*x7078))+(((2.0)*x7070*x7074))+(((2.0)*x7070*x7075))+((x7065*x7078))+(((-2.0)*x7071*x7073))+((x7065*x7067)))),-1);
if(!x7080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7079.value)+(((1.5707963267949)*(x7080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7081=IKsin(j4);
IkReal x7082=IKcos(j4);
IkReal x7083=((1.0)*r21);
IkReal x7084=(r22*sj5);
IkReal x7085=(cj5*cj6);
IkReal x7086=(cj6*r20);
IkReal x7087=(cj5*r20);
IkReal x7088=(sj6*x7082);
IkReal x7089=((1.0)*x7081);
evalcond[0]=((((-1.0)*x7087*x7088))+sj1+(((-1.0)*x7082*x7083*x7085))+((r21*sj6*x7081))+(((-1.0)*x7086*x7089))+(((-1.0)*x7082*x7084)));
evalcond[1]=((((-1.0)*x7084*x7089))+((cj1*sj2))+(((-1.0)*x7083*x7088))+(((-1.0)*sj6*x7087*x7089))+((x7082*x7086))+(((-1.0)*x7081*x7083*x7085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7090=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x7090;
j0eval[1]=IKsign(x7090);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7091=(sj2*sj5);
IkReal x7092=(cj6*r01);
IkReal x7093=(r00*sj6);
IkReal x7094=(cj6*r11);
IkReal x7095=(cj2*sj5);
IkReal x7096=(r10*sj6);
IkReal x7097=(cj5*sj2);
IkReal x7098=((1.0)*cj2*cj5);
if( IKabs(((((-1.0)*r02*x7097))+((x7095*x7096))+(((-1.0)*r12*x7098))+((x7094*x7095))+((x7091*x7093))+((x7091*x7092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x7092*x7095))+((r12*x7097))+((x7093*x7095))+(((-1.0)*x7091*x7094))+(((-1.0)*x7091*x7096))+(((-1.0)*r02*x7098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x7097))+((x7095*x7096))+(((-1.0)*r12*x7098))+((x7094*x7095))+((x7091*x7093))+((x7091*x7092))))+IKsqr((((x7092*x7095))+((r12*x7097))+((x7093*x7095))+(((-1.0)*x7091*x7094))+(((-1.0)*x7091*x7096))+(((-1.0)*r02*x7098))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r02*x7097))+((x7095*x7096))+(((-1.0)*r12*x7098))+((x7094*x7095))+((x7091*x7093))+((x7091*x7092))), (((x7092*x7095))+((r12*x7097))+((x7093*x7095))+(((-1.0)*x7091*x7094))+(((-1.0)*x7091*x7096))+(((-1.0)*r02*x7098))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7099=IKcos(j0);
IkReal x7100=IKsin(j0);
IkReal x7101=((1.0)*sj4);
IkReal x7102=((0.37429)*sj5);
IkReal x7103=(r10*sj6);
IkReal x7104=(cj5*r12);
IkReal x7105=(cj6*r01);
IkReal x7106=(r00*sj6);
IkReal x7107=(r12*sj5);
IkReal x7108=(cj6*r11);
IkReal x7109=(r02*sj5);
IkReal x7110=((0.01)*cj5);
IkReal x7111=(cj4*cj6);
IkReal x7112=(cj5*r02);
IkReal x7113=(sj2*x7099);
IkReal x7114=(cj5*x7108);
IkReal x7115=((0.069)*x7100);
IkReal x7116=(cj2*x7099);
IkReal x7117=((0.069)*x7099);
IkReal x7118=(sj2*x7100);
IkReal x7119=((1.0)*cj4*sj6);
IkReal x7120=((1.0)*cj2*x7100);
evalcond[0]=(((sj5*x7103))+((sj5*x7108))+x7113+(((-1.0)*x7104))+(((-1.0)*x7120)));
evalcond[1]=(((sj5*x7106))+((sj5*x7105))+(((-1.0)*x7118))+(((-1.0)*x7116))+(((-1.0)*x7112)));
evalcond[2]=(x7116+x7118+(((-1.0)*r11*x7119))+(((-1.0)*x7101*x7114))+(((-1.0)*x7101*x7107))+((r10*x7111))+(((-1.0)*cj5*x7101*x7103)));
evalcond[3]=(x7113+(((-1.0)*x7101*x7109))+(((-1.0)*x7120))+(((-1.0)*r01*x7119))+((r00*x7111))+(((-1.0)*cj5*x7101*x7106))+(((-1.0)*cj5*x7101*x7105)));
evalcond[4]=(x7117+(((-1.0)*x7102*x7106))+(((-1.0)*x7102*x7105))+(((0.01)*x7109))+(((-1.0)*sj2*x7115))+(((-1.0)*px))+(((-0.069)*x7116))+(((0.37429)*x7112))+((x7106*x7110))+((x7105*x7110)));
evalcond[5]=(x7115+(((-1.0)*x7102*x7103))+(((-1.0)*x7102*x7108))+(((0.069)*x7113))+(((-1.0)*cj2*x7115))+(((0.01)*x7107))+(((-1.0)*py))+((x7108*x7110))+(((0.37429)*x7104))+((x7103*x7110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7121=(cj5*r02);
IkReal x7122=(sj2*sj5);
IkReal x7123=(cj6*r01);
IkReal x7124=(cj5*r12);
IkReal x7125=(cj2*sj5);
IkReal x7126=((1.0)*cj6*r11);
IkReal x7127=((1.0)*sj6*x7125);
if( IKabs((((cj2*x7124))+((r00*sj6*x7122))+(((-1.0)*sj2*x7121))+(((-1.0)*r10*x7127))+(((-1.0)*x7125*x7126))+((x7122*x7123)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x7121))+(((-1.0)*r00*x7127))+(((-1.0)*x7123*x7125))+((sj2*x7124))+(((-1.0)*x7122*x7126))+(((-1.0)*r10*sj6*x7122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*x7124))+((r00*sj6*x7122))+(((-1.0)*sj2*x7121))+(((-1.0)*r10*x7127))+(((-1.0)*x7125*x7126))+((x7122*x7123))))+IKsqr((((cj2*x7121))+(((-1.0)*r00*x7127))+(((-1.0)*x7123*x7125))+((sj2*x7124))+(((-1.0)*x7122*x7126))+(((-1.0)*r10*sj6*x7122))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj2*x7124))+((r00*sj6*x7122))+(((-1.0)*sj2*x7121))+(((-1.0)*r10*x7127))+(((-1.0)*x7125*x7126))+((x7122*x7123))), (((cj2*x7121))+(((-1.0)*r00*x7127))+(((-1.0)*x7123*x7125))+((sj2*x7124))+(((-1.0)*x7122*x7126))+(((-1.0)*r10*sj6*x7122))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7128=IKcos(j0);
IkReal x7129=IKsin(j0);
IkReal x7130=((1.0)*sj4);
IkReal x7131=((0.37429)*sj5);
IkReal x7132=(r10*sj6);
IkReal x7133=(cj5*r12);
IkReal x7134=(cj6*r01);
IkReal x7135=(r00*sj6);
IkReal x7136=(r12*sj5);
IkReal x7137=(cj6*r11);
IkReal x7138=(r02*sj5);
IkReal x7139=((0.01)*cj5);
IkReal x7140=(cj4*cj6);
IkReal x7141=(cj5*r02);
IkReal x7142=(cj2*x7128);
IkReal x7143=(cj5*x7137);
IkReal x7144=((0.069)*x7129);
IkReal x7145=(sj2*x7128);
IkReal x7146=(cj2*x7129);
IkReal x7147=((1.0)*cj4*sj6);
IkReal x7148=((1.0)*sj2*x7129);
evalcond[0]=(x7145+x7146+((sj5*x7132))+((sj5*x7137))+(((-1.0)*x7133)));
evalcond[1]=(x7142+(((-1.0)*x7148))+(((-1.0)*x7141))+((sj5*x7134))+((sj5*x7135)));
evalcond[2]=(x7142+(((-1.0)*x7130*x7136))+(((-1.0)*x7148))+(((-1.0)*cj5*x7130*x7132))+(((-1.0)*r11*x7147))+((r10*x7140))+(((-1.0)*x7130*x7143)));
evalcond[3]=((((-1.0)*x7130*x7138))+((r00*x7140))+(((-1.0)*cj5*x7130*x7134))+(((-1.0)*cj5*x7130*x7135))+(((-1.0)*r01*x7147))+(((-1.0)*x7146))+(((-1.0)*x7145)));
evalcond[4]=(((x7134*x7139))+((x7135*x7139))+(((-1.0)*px))+(((0.01)*x7138))+(((-1.0)*sj2*x7144))+(((0.37429)*x7141))+(((0.069)*x7142))+(((-1.0)*x7131*x7134))+(((-1.0)*x7131*x7135))+(((0.069)*x7128)));
evalcond[5]=(x7144+(((0.37429)*x7133))+(((-1.0)*py))+((x7132*x7139))+(((0.01)*x7136))+((x7137*x7139))+(((0.069)*x7145))+(((-1.0)*x7131*x7137))+(((-1.0)*x7131*x7132))+((cj2*x7144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7149=(cj6*sj5);
IkReal x7150=(sj5*sj6);
if( IKabs((((r01*x7149))+((r00*x7150))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x7149))+(((-1.0)*r10*x7150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x7149))+((r00*x7150))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x7149))+(((-1.0)*r10*x7150))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x7149))+((r00*x7150))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r11*x7149))+(((-1.0)*r10*x7150))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7151=IKsin(j0);
IkReal x7152=IKcos(j0);
IkReal x7153=((1.0)*cj5);
IkReal x7154=(r11*sj4);
IkReal x7155=(r00*sj6);
IkReal x7156=((0.37429)*sj5);
IkReal x7157=(r10*sj6);
IkReal x7158=(cj6*sj4);
IkReal x7159=((0.36442)*cj1);
IkReal x7160=(cj6*r01);
IkReal x7161=(cj6*r11);
IkReal x7162=((0.01)*cj5);
IkReal x7163=(cj4*cj6);
IkReal x7164=((0.37429)*cj5);
IkReal x7165=((1.0)*cj4);
IkReal x7166=(r12*sj5);
IkReal x7167=(r01*sj6);
IkReal x7168=(r02*sj5);
IkReal x7169=((0.069)*x7151);
IkReal x7170=((0.069)*x7152);
IkReal x7171=((1.0)*sj4*sj5);
IkReal x7172=((1.0)*x7151);
evalcond[0]=(x7152+(((-1.0)*r12*x7153))+((sj5*x7157))+((sj5*x7161)));
evalcond[1]=((((-1.0)*x7172))+((sj5*x7155))+((sj5*x7160))+(((-1.0)*r02*x7153)));
evalcond[2]=((((-1.0)*cj6*x7153*x7154))+(((-1.0)*sj4*x7166))+((sj1*x7151))+(((-1.0)*sj4*x7153*x7157))+((r10*x7163))+(((-1.0)*r11*sj6*x7165)));
evalcond[3]=(((r00*x7163))+(((-1.0)*r01*x7153*x7158))+(((-1.0)*x7165*x7167))+(((-1.0)*sj4*x7168))+((sj1*x7152))+(((-1.0)*sj4*x7153*x7155)));
evalcond[4]=((((-1.0)*x7165*x7168))+(((-1.0)*cj4*x7153*x7155))+(((-1.0)*r00*x7158))+((sj4*x7167))+(((-1.0)*cj4*x7153*x7160))+(((-1.0)*cj1*x7152)));
evalcond[5]=((((-1.0)*x7165*x7166))+(((-1.0)*cj1*x7172))+(((-1.0)*cj4*x7153*x7157))+(((-1.0)*r10*x7158))+((sj6*x7154))+(((-1.0)*cj4*x7153*x7161)));
evalcond[6]=(x7170+(((-1.0)*x7156*x7160))+(((-1.0)*x7155*x7156))+(((-1.0)*x7169))+((x7160*x7162))+(((-1.0)*px))+((x7155*x7162))+((x7152*x7159))+((r02*x7164))+(((0.01)*x7168)));
evalcond[7]=(x7170+x7169+(((-1.0)*x7156*x7161))+(((-1.0)*x7156*x7157))+((x7161*x7162))+(((-1.0)*py))+((r12*x7164))+((x7157*x7162))+((x7151*x7159))+(((0.01)*x7166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7173=(sj5*sj6);
IkReal x7174=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x7173))+(((-1.0)*r01*x7174))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x7174))+((r10*x7173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x7173))+(((-1.0)*r01*x7174))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x7174))+((r10*x7173))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x7173))+(((-1.0)*r01*x7174))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x7174))+((r10*x7173))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7175=IKsin(j0);
IkReal x7176=IKcos(j0);
IkReal x7177=((1.0)*cj5);
IkReal x7178=(r11*sj4);
IkReal x7179=(r00*sj6);
IkReal x7180=((0.37429)*sj5);
IkReal x7181=(r10*sj6);
IkReal x7182=(cj6*sj4);
IkReal x7183=((0.36442)*cj1);
IkReal x7184=(cj6*r01);
IkReal x7185=(cj6*r11);
IkReal x7186=((0.01)*cj5);
IkReal x7187=(cj4*cj6);
IkReal x7188=((0.37429)*cj5);
IkReal x7189=((1.0)*cj4);
IkReal x7190=(r12*sj5);
IkReal x7191=(r01*sj6);
IkReal x7192=(r02*sj5);
IkReal x7193=((0.069)*x7175);
IkReal x7194=((0.069)*x7176);
IkReal x7195=((1.0)*sj4*sj5);
IkReal x7196=((1.0)*x7176);
IkReal x7197=((1.0)*x7175);
evalcond[0]=(x7175+((sj5*x7184))+(((-1.0)*r02*x7177))+((sj5*x7179)));
evalcond[1]=(((sj5*x7181))+((sj5*x7185))+(((-1.0)*x7196))+(((-1.0)*r12*x7177)));
evalcond[2]=((((-1.0)*r11*sj6*x7189))+(((-1.0)*sj4*x7190))+((r10*x7187))+(((-1.0)*sj1*x7197))+(((-1.0)*sj4*x7177*x7181))+(((-1.0)*cj6*x7177*x7178)));
evalcond[3]=((((-1.0)*sj4*x7192))+((r00*x7187))+(((-1.0)*r01*x7177*x7182))+(((-1.0)*x7189*x7191))+(((-1.0)*sj1*x7196))+(((-1.0)*sj4*x7177*x7179)));
evalcond[4]=((((-1.0)*x7189*x7192))+(((-1.0)*cj4*x7177*x7179))+(((-1.0)*r00*x7182))+(((-1.0)*cj1*x7196))+(((-1.0)*cj4*x7177*x7184))+((sj4*x7191)));
evalcond[5]=((((-1.0)*r10*x7182))+(((-1.0)*x7189*x7190))+((sj6*x7178))+(((-1.0)*cj1*x7197))+(((-1.0)*cj4*x7177*x7185))+(((-1.0)*cj4*x7177*x7181)));
evalcond[6]=(x7193+x7194+((x7176*x7183))+((x7179*x7186))+(((0.01)*x7192))+(((-1.0)*x7179*x7180))+(((-1.0)*px))+((r02*x7188))+(((-1.0)*x7180*x7184))+((x7184*x7186)));
evalcond[7]=(x7193+((x7185*x7186))+((r12*x7188))+(((0.01)*x7190))+((x7181*x7186))+(((-1.0)*x7194))+(((-1.0)*py))+((x7175*x7183))+(((-1.0)*x7180*x7181))+(((-1.0)*x7180*x7185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x7198=(cj6*sj5);
IkReal x7199=(sj5*sj6);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs((((r01*x7198))+((r00*x7199))+(((-1.0)*cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r10*x7199))+(((-1.0)*r11*x7198))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
j0eval[1]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7200=(cj4*sj6);
IkReal x7201=((1.0)*r01);
IkReal x7202=(cj5*sj4);
IkReal x7203=(sj4*sj5);
IkReal x7204=(cj4*cj6);
if( IKabs((((r00*x7204))+(((-1.0)*r02*x7203))+(((-1.0)*r00*sj6*x7202))+(((-1.0)*cj6*x7201*x7202))+(((-1.0)*x7200*x7201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r11*x7202))+(((-1.0)*r10*x7204))+((r10*sj6*x7202))+((r12*x7203))+((r11*x7200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x7204))+(((-1.0)*r02*x7203))+(((-1.0)*r00*sj6*x7202))+(((-1.0)*cj6*x7201*x7202))+(((-1.0)*x7200*x7201))))+IKsqr((((cj6*r11*x7202))+(((-1.0)*r10*x7204))+((r10*sj6*x7202))+((r12*x7203))+((r11*x7200))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x7204))+(((-1.0)*r02*x7203))+(((-1.0)*r00*sj6*x7202))+(((-1.0)*cj6*x7201*x7202))+(((-1.0)*x7200*x7201))), (((cj6*r11*x7202))+(((-1.0)*r10*x7204))+((r10*sj6*x7202))+((r12*x7203))+((r11*x7200))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7205=IKcos(j0);
IkReal x7206=IKsin(j0);
IkReal x7207=((1.0)*sj4);
IkReal x7208=(r10*sj6);
IkReal x7209=((0.37429)*sj5);
IkReal x7210=(cj6*r00);
IkReal x7211=((0.37429)*cj5);
IkReal x7212=((0.01)*cj5);
IkReal x7213=((1.0)*cj4);
IkReal x7214=(r00*sj6);
IkReal x7215=(r02*sj5);
IkReal x7216=(r12*sj5);
IkReal x7217=(cj6*r10);
IkReal x7218=(r01*sj6);
IkReal x7219=(r11*sj6);
IkReal x7220=((1.0)*x7206);
IkReal x7221=(cj5*cj6*r11);
IkReal x7222=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*cj5*x7207*x7208))+(((-1.0)*x7213*x7219))+((cj4*x7217))+x7205+(((-1.0)*x7207*x7221))+(((-1.0)*x7207*x7216)));
evalcond[1]=((((-1.0)*x7213*x7218))+((cj4*x7210))+(((-1.0)*x7207*x7222))+(((-1.0)*cj5*x7207*x7214))+(((-1.0)*x7220))+(((-1.0)*x7207*x7215)));
evalcond[2]=((((-1.0)*x7213*x7215))+((sj4*x7218))+(((-1.0)*x7213*x7222))+(((-1.0)*x7205))+(((-1.0)*x7207*x7210))+(((-1.0)*cj5*x7213*x7214)));
evalcond[3]=((((-1.0)*x7213*x7216))+((sj4*x7219))+(((-1.0)*x7213*x7221))+(((-1.0)*x7220))+(((-1.0)*x7207*x7217))+(((-1.0)*cj5*x7208*x7213)));
evalcond[4]=((((0.43342)*x7205))+((r02*x7211))+(((0.01)*x7215))+(((-1.0)*px))+((cj6*r01*x7212))+(((-1.0)*x7209*x7214))+((x7212*x7214))+(((-1.0)*cj6*r01*x7209)));
evalcond[5]=(((r12*x7211))+(((-1.0)*x7208*x7209))+((x7208*x7212))+(((0.43342)*x7206))+(((0.01)*x7216))+(((-1.0)*py))+((cj6*r11*x7212))+(((-1.0)*cj6*r11*x7209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7223=((1.0)*cj4);
IkReal x7224=(sj4*sj5);
IkReal x7225=(cj5*sj4*sj6);
IkReal x7226=(cj5*cj6*sj4);
if( IKabs((((r00*x7225))+((r01*x7226))+((r02*x7224))+(((-1.0)*cj6*r00*x7223))+((cj4*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x7224))+(((-1.0)*r10*x7225))+((cj4*cj6*r10))+(((-1.0)*r11*x7226))+(((-1.0)*r11*sj6*x7223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x7225))+((r01*x7226))+((r02*x7224))+(((-1.0)*cj6*r00*x7223))+((cj4*r01*sj6))))+IKsqr(((((-1.0)*r12*x7224))+(((-1.0)*r10*x7225))+((cj4*cj6*r10))+(((-1.0)*r11*x7226))+(((-1.0)*r11*sj6*x7223))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x7225))+((r01*x7226))+((r02*x7224))+(((-1.0)*cj6*r00*x7223))+((cj4*r01*sj6))), ((((-1.0)*r12*x7224))+(((-1.0)*r10*x7225))+((cj4*cj6*r10))+(((-1.0)*r11*x7226))+(((-1.0)*r11*sj6*x7223))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7227=IKsin(j0);
IkReal x7228=IKcos(j0);
IkReal x7229=((1.0)*sj4);
IkReal x7230=(r10*sj6);
IkReal x7231=((0.37429)*sj5);
IkReal x7232=(cj6*r00);
IkReal x7233=((0.37429)*cj5);
IkReal x7234=((0.01)*cj5);
IkReal x7235=((1.0)*cj4);
IkReal x7236=(r00*sj6);
IkReal x7237=(r02*sj5);
IkReal x7238=(r12*sj5);
IkReal x7239=(cj6*r10);
IkReal x7240=(r01*sj6);
IkReal x7241=(r11*sj6);
IkReal x7242=((1.0)*x7228);
IkReal x7243=(cj5*cj6*r11);
IkReal x7244=(cj5*cj6*r01);
evalcond[0]=(((cj4*x7232))+x7227+(((-1.0)*x7229*x7237))+(((-1.0)*cj5*x7229*x7236))+(((-1.0)*x7235*x7240))+(((-1.0)*x7229*x7244)));
evalcond[1]=(((cj4*x7239))+(((-1.0)*x7229*x7238))+(((-1.0)*cj5*x7229*x7230))+(((-1.0)*x7235*x7241))+(((-1.0)*x7229*x7243))+(((-1.0)*x7242)));
evalcond[2]=((((-1.0)*cj5*x7235*x7236))+(((-1.0)*x7229*x7232))+(((-1.0)*x7235*x7244))+((sj4*x7240))+(((-1.0)*x7242))+(((-1.0)*x7235*x7237)));
evalcond[3]=((((-1.0)*cj5*x7230*x7235))+(((-1.0)*x7229*x7239))+(((-1.0)*x7235*x7243))+((sj4*x7241))+(((-1.0)*x7227))+(((-1.0)*x7235*x7238)));
evalcond[4]=(((cj6*r01*x7234))+(((-1.0)*x7231*x7236))+(((0.43342)*x7228))+(((-1.0)*px))+((x7234*x7236))+((r02*x7233))+(((0.01)*x7237))+(((-1.0)*cj6*r01*x7231)));
evalcond[5]=((((0.43342)*x7227))+((x7230*x7234))+((cj6*r11*x7234))+(((-1.0)*py))+((r12*x7233))+(((-1.0)*x7230*x7231))+(((0.01)*x7238))+(((-1.0)*cj6*r11*x7231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7245=(cj6*sj5);
IkReal x7246=(sj5*sj6);
if( IKabs((((r00*x7246))+((r01*x7245))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x7246))+(((-1.0)*r11*x7245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x7246))+((r01*x7245))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x7246))+(((-1.0)*r11*x7245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x7246))+((r01*x7245))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x7246))+(((-1.0)*r11*x7245))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7247=IKcos(j0);
IkReal x7248=IKsin(j0);
IkReal x7249=((1.0)*cj5);
IkReal x7250=(sj5*sj6);
IkReal x7251=(r10*sj6);
IkReal x7252=(cj6*r11);
IkReal x7253=((0.01)*cj5);
IkReal x7254=(cj6*r01);
IkReal x7255=((0.37429)*cj5);
IkReal x7256=(r12*sj5);
IkReal x7257=((1.0)*cj4);
IkReal x7258=(r00*sj6);
IkReal x7259=((0.37429)*sj5);
IkReal x7260=(r02*sj5);
IkReal x7261=(sj4*sj6);
IkReal x7262=((1.0)*x7248);
IkReal x7263=((1.0)*cj6*sj4);
evalcond[0]=(x7247+(((-1.0)*r12*x7249))+((r10*x7250))+((sj5*x7252)));
evalcond[1]=(((sj5*x7254))+(((-1.0)*x7262))+((r00*x7250))+(((-1.0)*r02*x7249)));
evalcond[2]=((((-1.0)*x7247))+(((-1.0)*r00*x7263))+(((-1.0)*x7257*x7260))+(((-1.0)*cj4*x7249*x7254))+(((-1.0)*cj4*x7249*x7258))+((r01*x7261)));
evalcond[3]=(((r11*x7261))+(((-1.0)*x7262))+(((-1.0)*cj4*x7249*x7251))+(((-1.0)*cj4*x7249*x7252))+(((-1.0)*x7256*x7257))+(((-1.0)*r10*x7263)));
evalcond[4]=(((r02*x7255))+(((0.01)*x7260))+(((0.43342)*x7247))+(((-1.0)*px))+(((-1.0)*x7254*x7259))+(((-0.069)*x7248))+((x7253*x7254))+((x7253*x7258))+(((-0.37429)*r00*x7250)));
evalcond[5]=((((0.01)*x7256))+(((-1.0)*x7252*x7259))+((x7251*x7253))+((x7252*x7253))+(((0.43342)*x7248))+((r12*x7255))+(((-0.37429)*r10*x7250))+(((-1.0)*py))+(((0.069)*x7247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7264=(sj5*sj6);
IkReal x7265=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x7264))+(((-1.0)*r01*x7265))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x7265))+((r10*x7264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x7264))+(((-1.0)*r01*x7265))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x7265))+((r10*x7264))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x7264))+(((-1.0)*r01*x7265))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x7265))+((r10*x7264))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7266=IKsin(j0);
IkReal x7267=IKcos(j0);
IkReal x7268=((1.0)*cj5);
IkReal x7269=(sj5*sj6);
IkReal x7270=(r10*sj6);
IkReal x7271=(cj6*r11);
IkReal x7272=((0.01)*cj5);
IkReal x7273=(cj6*r01);
IkReal x7274=((0.37429)*cj5);
IkReal x7275=(r12*sj5);
IkReal x7276=((1.0)*cj4);
IkReal x7277=(r00*sj6);
IkReal x7278=((0.37429)*sj5);
IkReal x7279=(r02*sj5);
IkReal x7280=(sj4*sj6);
IkReal x7281=((1.0)*x7267);
IkReal x7282=((1.0)*cj6*sj4);
evalcond[0]=(x7266+((sj5*x7273))+((r00*x7269))+(((-1.0)*r02*x7268)));
evalcond[1]=((((-1.0)*x7281))+((sj5*x7271))+((r10*x7269))+(((-1.0)*r12*x7268)));
evalcond[2]=((((-1.0)*x7281))+(((-1.0)*r00*x7282))+(((-1.0)*x7276*x7279))+(((-1.0)*cj4*x7268*x7277))+(((-1.0)*cj4*x7268*x7273))+((r01*x7280)));
evalcond[3]=(((r11*x7280))+(((-1.0)*x7266))+(((-1.0)*cj4*x7268*x7270))+(((-1.0)*cj4*x7268*x7271))+(((-1.0)*x7275*x7276))+(((-1.0)*r10*x7282)));
evalcond[4]=((((-0.37429)*r00*x7269))+(((-1.0)*x7273*x7278))+(((-1.0)*px))+(((0.069)*x7266))+(((0.43342)*x7267))+((x7272*x7277))+((x7272*x7273))+((r02*x7274))+(((0.01)*x7279)));
evalcond[5]=(((x7271*x7272))+(((-0.069)*x7267))+(((-1.0)*py))+((x7270*x7272))+((r12*x7274))+(((0.43342)*x7266))+(((-1.0)*x7271*x7278))+(((-0.37429)*r10*x7269))+(((0.01)*x7275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7283=(cj5*sj4);
CheckValue<IkReal> x7284=IKPowWithIntegerCheck(sj2,-1);
if(!x7284.valid){
continue;
}
CheckValue<IkReal> x7285=IKPowWithIntegerCheck(cj2,-1);
if(!x7285.valid){
continue;
}
if( IKabs(((x7284.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7285.value)*((((r10*sj6*x7283))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((cj6*r11*x7283)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7284.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))+IKsqr(((x7285.value)*((((r10*sj6*x7283))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((cj6*r11*x7283))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7284.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))), ((x7285.value)*((((r10*sj6*x7283))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((cj6*r11*x7283))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7286=IKcos(j0);
IkReal x7287=IKsin(j0);
IkReal x7288=((1.0)*cj5);
IkReal x7289=(cj6*sj4);
IkReal x7290=((0.37429)*sj5);
IkReal x7291=(r10*sj6);
IkReal x7292=((0.069)*sj2);
IkReal x7293=(cj6*r01);
IkReal x7294=(r00*sj6);
IkReal x7295=(cj6*r11);
IkReal x7296=((0.01)*cj5);
IkReal x7297=(sj4*sj6);
IkReal x7298=(cj4*cj6);
IkReal x7299=((0.37429)*cj5);
IkReal x7300=(r12*sj5);
IkReal x7301=((1.0)*cj4);
IkReal x7302=(r02*sj5);
IkReal x7303=((1.0)*sj4*sj5);
IkReal x7304=((1.0)*x7287);
evalcond[0]=((((-1.0)*r12*x7288))+((sj5*x7291))+((sj5*x7295))+((sj2*x7286)));
evalcond[1]=((((-1.0)*sj2*x7304))+((sj5*x7293))+((sj5*x7294))+(((-1.0)*r02*x7288)));
evalcond[2]=(((r10*x7298))+(((-1.0)*r11*sj6*x7301))+(((-1.0)*r11*x7288*x7289))+(((-1.0)*sj4*x7288*x7291))+((cj2*x7286))+(((-1.0)*sj4*x7300)));
evalcond[3]=((((-1.0)*x7301*x7302))+(((-1.0)*x7286))+(((-1.0)*cj4*x7288*x7293))+(((-1.0)*cj4*x7288*x7294))+((r01*x7297))+(((-1.0)*r00*x7289)));
evalcond[4]=((((-1.0)*r10*x7289))+((r11*x7297))+(((-1.0)*cj4*x7288*x7291))+(((-1.0)*cj4*x7288*x7295))+(((-1.0)*x7300*x7301))+(((-1.0)*x7304)));
evalcond[5]=((((-1.0)*cj2*x7304))+(((-1.0)*r01*x7288*x7289))+(((-1.0)*r01*sj6*x7301))+((r00*x7298))+(((-1.0)*sj4*x7288*x7294))+(((-1.0)*sj4*x7302)));
evalcond[6]=((((-1.0)*x7290*x7293))+(((-1.0)*x7290*x7294))+((x7293*x7296))+(((0.01)*x7302))+((r02*x7299))+(((-1.0)*px))+(((0.43342)*x7286))+(((-1.0)*x7287*x7292))+((x7294*x7296)));
evalcond[7]=((((-1.0)*x7290*x7291))+(((-1.0)*x7290*x7295))+((r12*x7299))+(((0.01)*x7300))+((x7286*x7292))+(((-1.0)*py))+((x7295*x7296))+(((0.43342)*x7287))+((x7291*x7296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7305=((1.0)*cj6);
IkReal x7306=((1.0)*sj5);
IkReal x7307=(r10*sj6);
IkReal x7308=(cj4*cj5);
CheckValue<IkReal> x7309=IKPowWithIntegerCheck(sj2,-1);
if(!x7309.valid){
continue;
}
if( IKabs(((((-1.0)*x7307*x7308))+(((-1.0)*r11*x7305*x7308))+(((-1.0)*r10*sj4*x7305))+((r11*sj4*sj6))+(((-1.0)*cj4*r12*x7306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7309.value)*((((cj5*r12))+(((-1.0)*r11*sj5*x7305))+(((-1.0)*x7306*x7307)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x7307*x7308))+(((-1.0)*r11*x7305*x7308))+(((-1.0)*r10*sj4*x7305))+((r11*sj4*sj6))+(((-1.0)*cj4*r12*x7306))))+IKsqr(((x7309.value)*((((cj5*r12))+(((-1.0)*r11*sj5*x7305))+(((-1.0)*x7306*x7307))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x7307*x7308))+(((-1.0)*r11*x7305*x7308))+(((-1.0)*r10*sj4*x7305))+((r11*sj4*sj6))+(((-1.0)*cj4*r12*x7306))), ((x7309.value)*((((cj5*r12))+(((-1.0)*r11*sj5*x7305))+(((-1.0)*x7306*x7307))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7310=IKcos(j0);
IkReal x7311=IKsin(j0);
IkReal x7312=((1.0)*cj5);
IkReal x7313=(cj6*sj4);
IkReal x7314=((0.37429)*sj5);
IkReal x7315=(r10*sj6);
IkReal x7316=((0.069)*sj2);
IkReal x7317=(cj6*r01);
IkReal x7318=(r00*sj6);
IkReal x7319=(cj6*r11);
IkReal x7320=((0.01)*cj5);
IkReal x7321=(sj4*sj6);
IkReal x7322=(cj4*cj6);
IkReal x7323=((0.37429)*cj5);
IkReal x7324=(r12*sj5);
IkReal x7325=((1.0)*cj4);
IkReal x7326=(r02*sj5);
IkReal x7327=((1.0)*sj4*sj5);
IkReal x7328=((1.0)*x7311);
evalcond[0]=(((sj2*x7310))+(((-1.0)*r12*x7312))+((sj5*x7319))+((sj5*x7315)));
evalcond[1]=((((-1.0)*sj2*x7328))+((sj5*x7317))+((sj5*x7318))+(((-1.0)*r02*x7312)));
evalcond[2]=((((-1.0)*r11*x7312*x7313))+(((-1.0)*sj4*x7312*x7315))+((r10*x7322))+((cj2*x7310))+(((-1.0)*r11*sj6*x7325))+(((-1.0)*sj4*x7324)));
evalcond[3]=((((-1.0)*x7310))+((r01*x7321))+(((-1.0)*cj4*x7312*x7317))+(((-1.0)*cj4*x7312*x7318))+(((-1.0)*x7325*x7326))+(((-1.0)*r00*x7313)));
evalcond[4]=((((-1.0)*x7324*x7325))+(((-1.0)*r10*x7313))+(((-1.0)*cj4*x7312*x7315))+(((-1.0)*cj4*x7312*x7319))+(((-1.0)*x7328))+((r11*x7321)));
evalcond[5]=((((-1.0)*cj2*x7328))+(((-1.0)*sj4*x7312*x7318))+((r00*x7322))+(((-1.0)*r01*x7312*x7313))+(((-1.0)*r01*sj6*x7325))+(((-1.0)*sj4*x7326)));
evalcond[6]=((((0.43342)*x7310))+(((-1.0)*x7311*x7316))+(((-1.0)*px))+(((-1.0)*x7314*x7317))+(((-1.0)*x7314*x7318))+((x7317*x7320))+((x7318*x7320))+(((0.01)*x7326))+((r02*x7323)));
evalcond[7]=((((0.43342)*x7311))+((x7310*x7316))+(((-1.0)*py))+((x7319*x7320))+((r12*x7323))+(((-1.0)*x7314*x7315))+(((-1.0)*x7314*x7319))+(((0.01)*x7324))+((x7315*x7320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7329=(cj6*sj5);
IkReal x7330=(sj5*sj6);
CheckValue<IkReal> x7331=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x7331.valid){
continue;
}
CheckValue<IkReal> x7332 = IKatan2WithCheck(IkReal((((r01*x7329))+((r00*x7330))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r12))+(((-1.0)*r11*x7329))+(((-1.0)*r10*x7330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7332.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7331.value)))+(x7332.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7333=IKcos(j0);
IkReal x7334=IKsin(j0);
IkReal x7335=((1.0)*cj5);
IkReal x7336=(cj6*sj4);
IkReal x7337=((0.37429)*sj5);
IkReal x7338=(r10*sj6);
IkReal x7339=((0.069)*sj2);
IkReal x7340=(cj6*r01);
IkReal x7341=(r00*sj6);
IkReal x7342=(cj6*r11);
IkReal x7343=((0.01)*cj5);
IkReal x7344=(sj4*sj6);
IkReal x7345=(cj4*cj6);
IkReal x7346=((0.37429)*cj5);
IkReal x7347=(r12*sj5);
IkReal x7348=((1.0)*cj4);
IkReal x7349=(r02*sj5);
IkReal x7350=((1.0)*sj4*sj5);
IkReal x7351=((1.0)*x7334);
evalcond[0]=(((sj5*x7342))+(((-1.0)*r12*x7335))+((sj2*x7333))+((sj5*x7338)));
evalcond[1]=((((-1.0)*r02*x7335))+((sj5*x7341))+((sj5*x7340))+(((-1.0)*sj2*x7351)));
evalcond[2]=((((-1.0)*r11*x7335*x7336))+(((-1.0)*r11*sj6*x7348))+(((-1.0)*sj4*x7347))+(((-1.0)*sj4*x7335*x7338))+((cj2*x7333))+((r10*x7345)));
evalcond[3]=((((-1.0)*x7333))+(((-1.0)*x7348*x7349))+(((-1.0)*cj4*x7335*x7341))+(((-1.0)*cj4*x7335*x7340))+((r01*x7344))+(((-1.0)*r00*x7336)));
evalcond[4]=((((-1.0)*r10*x7336))+((r11*x7344))+(((-1.0)*x7351))+(((-1.0)*cj4*x7335*x7342))+(((-1.0)*x7347*x7348))+(((-1.0)*cj4*x7335*x7338)));
evalcond[5]=((((-1.0)*sj4*x7349))+(((-1.0)*cj2*x7351))+((r00*x7345))+(((-1.0)*r01*sj6*x7348))+(((-1.0)*r01*x7335*x7336))+(((-1.0)*sj4*x7335*x7341)));
evalcond[6]=((((0.43342)*x7333))+(((0.01)*x7349))+(((-1.0)*x7337*x7341))+(((-1.0)*x7337*x7340))+(((-1.0)*px))+((x7340*x7343))+(((-1.0)*x7334*x7339))+((x7341*x7343))+((r02*x7346)));
evalcond[7]=((((0.43342)*x7334))+(((0.01)*x7347))+(((-1.0)*x7337*x7342))+((x7342*x7343))+(((-1.0)*x7337*x7338))+((r12*x7346))+(((-1.0)*py))+((x7333*x7339))+((x7338*x7343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x7352=(cj6*sj5);
IkReal x7353=(sj5*sj6);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs((((r01*x7352))+((r00*x7353))+(((-1.0)*cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r10*x7353))+(((-1.0)*r11*x7352))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7354=(cj6*sj5);
IkReal x7355=(sj5*sj6);
if( IKabs((((r01*x7354))+((r00*x7355))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x7355))+(((-1.0)*r11*x7354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x7354))+((r00*x7355))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x7355))+(((-1.0)*r11*x7354))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x7354))+((r00*x7355))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x7355))+(((-1.0)*r11*x7354))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7356=IKcos(j0);
IkReal x7357=IKsin(j0);
IkReal x7358=((1.0)*cj5);
IkReal x7359=(sj5*sj6);
IkReal x7360=((0.37429)*cj5);
IkReal x7361=(r10*sj6);
IkReal x7362=(cj6*r11);
IkReal x7363=((0.01)*cj5);
IkReal x7364=(cj6*r01);
IkReal x7365=(r12*sj5);
IkReal x7366=((1.0)*cj4);
IkReal x7367=(r00*sj6);
IkReal x7368=((0.37429)*sj5);
IkReal x7369=(r02*sj5);
IkReal x7370=(sj4*sj6);
IkReal x7371=((1.0)*cj6*sj4);
evalcond[0]=(((r10*x7359))+x7356+(((-1.0)*r12*x7358))+((sj5*x7362)));
evalcond[1]=(((r00*x7359))+(((-1.0)*r02*x7358))+(((-1.0)*x7357))+((sj5*x7364)));
evalcond[2]=(x7356+((r01*x7370))+(((-1.0)*x7366*x7369))+(((-1.0)*cj4*x7358*x7364))+(((-1.0)*cj4*x7358*x7367))+(((-1.0)*r00*x7371)));
evalcond[3]=(x7357+((r11*x7370))+(((-1.0)*x7365*x7366))+(((-1.0)*cj4*x7358*x7362))+(((-1.0)*cj4*x7358*x7361))+(((-1.0)*r10*x7371)));
evalcond[4]=((((-0.069)*x7357))+(((-0.29542)*x7356))+((x7363*x7367))+((x7363*x7364))+(((-1.0)*x7364*x7368))+(((-1.0)*px))+(((0.01)*x7369))+(((-0.37429)*r00*x7359))+((r02*x7360)));
evalcond[5]=(((r12*x7360))+(((0.069)*x7356))+(((-0.29542)*x7357))+(((-0.37429)*r10*x7359))+(((-1.0)*py))+(((0.01)*x7365))+((x7361*x7363))+((x7362*x7363))+(((-1.0)*x7362*x7368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7372=(sj5*sj6);
IkReal x7373=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x7372))+(((-1.0)*r01*x7373))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x7373))+((r10*x7372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x7372))+(((-1.0)*r01*x7373))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x7373))+((r10*x7372))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x7372))+(((-1.0)*r01*x7373))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x7373))+((r10*x7372))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7374=IKcos(j0);
IkReal x7375=IKsin(j0);
IkReal x7376=((1.0)*cj5);
IkReal x7377=(sj5*sj6);
IkReal x7378=((0.37429)*cj5);
IkReal x7379=(r10*sj6);
IkReal x7380=(cj6*r11);
IkReal x7381=((0.01)*cj5);
IkReal x7382=(cj6*r01);
IkReal x7383=(r12*sj5);
IkReal x7384=((1.0)*cj4);
IkReal x7385=(r00*sj6);
IkReal x7386=((0.37429)*sj5);
IkReal x7387=(r02*sj5);
IkReal x7388=(sj4*sj6);
IkReal x7389=((1.0)*cj6*sj4);
evalcond[0]=(x7375+((sj5*x7382))+((r00*x7377))+(((-1.0)*r02*x7376)));
evalcond[1]=(((sj5*x7380))+(((-1.0)*r12*x7376))+(((-1.0)*x7374))+((r10*x7377)));
evalcond[2]=(x7374+((r01*x7388))+(((-1.0)*x7384*x7387))+(((-1.0)*cj4*x7376*x7382))+(((-1.0)*cj4*x7376*x7385))+(((-1.0)*r00*x7389)));
evalcond[3]=(x7375+(((-1.0)*cj4*x7376*x7379))+(((-1.0)*cj4*x7376*x7380))+(((-1.0)*x7383*x7384))+((r11*x7388))+(((-1.0)*r10*x7389)));
evalcond[4]=(((r02*x7378))+(((-0.29542)*x7374))+(((0.069)*x7375))+((x7381*x7385))+((x7381*x7382))+(((-1.0)*px))+(((-0.37429)*r00*x7377))+(((-1.0)*x7382*x7386))+(((0.01)*x7387)));
evalcond[5]=((((-0.37429)*r10*x7377))+(((-0.29542)*x7375))+(((-0.069)*x7374))+((r12*x7378))+(((-1.0)*x7380*x7386))+((x7380*x7381))+((x7379*x7381))+(((-1.0)*py))+(((0.01)*x7383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7390=(r11*sj6);
IkReal x7391=(cj6*r10);
IkReal x7392=(r12*sj5);
IkReal x7393=(cj5*cj6*r11);
IkReal x7394=(cj5*r10*sj6);
if( IKabs((((sj4*x7391))+((cj4*x7394))+((cj4*x7392))+((cj4*x7393))+(((-1.0)*sj4*x7390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x7394))+((sj4*x7392))+((sj4*x7393))+((cj4*x7390))+(((-1.0)*cj4*x7391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x7391))+((cj4*x7394))+((cj4*x7392))+((cj4*x7393))+(((-1.0)*sj4*x7390))))+IKsqr((((sj4*x7394))+((sj4*x7392))+((sj4*x7393))+((cj4*x7390))+(((-1.0)*cj4*x7391))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x7391))+((cj4*x7394))+((cj4*x7392))+((cj4*x7393))+(((-1.0)*sj4*x7390))), (((sj4*x7394))+((sj4*x7392))+((sj4*x7393))+((cj4*x7390))+(((-1.0)*cj4*x7391))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7395=IKcos(j0);
IkReal x7396=IKsin(j0);
IkReal x7397=((1.0)*sj4);
IkReal x7398=(r10*sj6);
IkReal x7399=((0.37429)*sj5);
IkReal x7400=(cj6*r00);
IkReal x7401=((0.01)*cj5);
IkReal x7402=((1.0)*cj4);
IkReal x7403=(r00*sj6);
IkReal x7404=(r02*sj5);
IkReal x7405=(r12*sj5);
IkReal x7406=((0.37429)*cj5);
IkReal x7407=(cj6*r10);
IkReal x7408=(r01*sj6);
IkReal x7409=(r11*sj6);
IkReal x7410=(cj5*cj6*r11);
IkReal x7411=(cj5*cj6*r01);
evalcond[0]=(x7395+(((-1.0)*x7397*x7405))+(((-1.0)*x7397*x7410))+(((-1.0)*cj5*x7397*x7398))+((cj4*x7407))+(((-1.0)*x7402*x7409)));
evalcond[1]=(x7395+(((-1.0)*x7397*x7400))+((sj4*x7408))+(((-1.0)*cj5*x7402*x7403))+(((-1.0)*x7402*x7411))+(((-1.0)*x7402*x7404)));
evalcond[2]=(x7396+(((-1.0)*x7397*x7407))+((sj4*x7409))+(((-1.0)*cj5*x7398*x7402))+(((-1.0)*x7402*x7410))+(((-1.0)*x7402*x7405)));
evalcond[3]=((((-1.0)*x7397*x7404))+(((-1.0)*x7397*x7411))+(((-1.0)*x7396))+(((-1.0)*cj5*x7397*x7403))+((cj4*x7400))+(((-1.0)*x7402*x7408)));
evalcond[4]=(((r02*x7406))+(((-1.0)*cj6*r01*x7399))+(((-0.29542)*x7395))+((x7401*x7403))+(((-1.0)*x7399*x7403))+(((-1.0)*px))+((cj6*r01*x7401))+(((0.01)*x7404)));
evalcond[5]=((((-0.29542)*x7396))+(((-1.0)*x7398*x7399))+(((-1.0)*cj6*r11*x7399))+(((-1.0)*py))+((x7398*x7401))+((cj6*r11*x7401))+((r12*x7406))+(((0.01)*x7405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7412=(cj6*r00);
IkReal x7413=(r02*sj5);
IkReal x7414=(r01*sj6);
IkReal x7415=(cj5*r00*sj6);
IkReal x7416=(cj5*cj6*r01);
if( IKabs((((sj4*x7413))+((sj4*x7416))+((sj4*x7415))+(((-1.0)*cj4*x7412))+((cj4*x7414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x7412))+(((-1.0)*sj4*x7414))+((cj4*x7415))+((cj4*x7413))+((cj4*x7416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x7413))+((sj4*x7416))+((sj4*x7415))+(((-1.0)*cj4*x7412))+((cj4*x7414))))+IKsqr((((sj4*x7412))+(((-1.0)*sj4*x7414))+((cj4*x7415))+((cj4*x7413))+((cj4*x7416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x7413))+((sj4*x7416))+((sj4*x7415))+(((-1.0)*cj4*x7412))+((cj4*x7414))), (((sj4*x7412))+(((-1.0)*sj4*x7414))+((cj4*x7415))+((cj4*x7413))+((cj4*x7416))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7417=IKsin(j0);
IkReal x7418=IKcos(j0);
IkReal x7419=((1.0)*sj4);
IkReal x7420=(r10*sj6);
IkReal x7421=((0.37429)*sj5);
IkReal x7422=(cj6*r00);
IkReal x7423=((0.01)*cj5);
IkReal x7424=(r12*sj5);
IkReal x7425=(r00*sj6);
IkReal x7426=(r02*sj5);
IkReal x7427=(sj4*sj6);
IkReal x7428=((1.0)*cj4);
IkReal x7429=((0.37429)*cj5);
IkReal x7430=(cj6*r10);
IkReal x7431=(cj5*cj6*r11);
IkReal x7432=(cj5*cj6*r01);
evalcond[0]=(((cj4*x7422))+(((-1.0)*x7419*x7426))+(((-1.0)*cj5*x7419*x7425))+(((-1.0)*x7419*x7432))+(((-1.0)*r01*sj6*x7428))+x7417);
evalcond[1]=(((r01*x7427))+(((-1.0)*x7419*x7422))+(((-1.0)*cj5*x7425*x7428))+(((-1.0)*x7428*x7432))+x7418+(((-1.0)*x7426*x7428)));
evalcond[2]=((((-1.0)*cj5*x7420*x7428))+(((-1.0)*x7419*x7430))+((r11*x7427))+(((-1.0)*x7424*x7428))+(((-1.0)*x7428*x7431))+x7417);
evalcond[3]=((((-1.0)*r11*sj6*x7428))+((cj4*x7430))+(((-1.0)*x7419*x7424))+(((-1.0)*cj5*x7419*x7420))+(((-1.0)*x7418))+(((-1.0)*x7419*x7431)));
evalcond[4]=((((0.01)*x7426))+(((-1.0)*x7421*x7425))+((r02*x7429))+(((-0.29542)*x7418))+(((-1.0)*cj6*r01*x7421))+(((-1.0)*px))+((cj6*r01*x7423))+((x7423*x7425)));
evalcond[5]=((((0.01)*x7424))+((cj6*r11*x7423))+(((-0.29542)*x7417))+(((-1.0)*py))+((x7420*x7423))+((r12*x7429))+(((-1.0)*cj6*r11*x7421))+(((-1.0)*x7420*x7421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7433=((1.0)*sj6);
IkReal x7434=(cj5*sj4);
IkReal x7435=((1.0)*sj5);
CheckValue<IkReal> x7436=IKPowWithIntegerCheck(cj2,-1);
if(!x7436.valid){
continue;
}
CheckValue<IkReal> x7437=IKPowWithIntegerCheck(sj2,-1);
if(!x7437.valid){
continue;
}
if( IKabs(((x7436.value)*(((((-1.0)*cj4*r01*x7433))+(((-1.0)*cj6*r01*x7434))+((cj4*cj6*r00))+(((-1.0)*r00*x7433*x7434))+(((-1.0)*r02*sj4*x7435)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7437.value)*((((cj5*r12))+(((-1.0)*r10*sj5*x7433))+(((-1.0)*cj6*r11*x7435)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7436.value)*(((((-1.0)*cj4*r01*x7433))+(((-1.0)*cj6*r01*x7434))+((cj4*cj6*r00))+(((-1.0)*r00*x7433*x7434))+(((-1.0)*r02*sj4*x7435))))))+IKsqr(((x7437.value)*((((cj5*r12))+(((-1.0)*r10*sj5*x7433))+(((-1.0)*cj6*r11*x7435))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7436.value)*(((((-1.0)*cj4*r01*x7433))+(((-1.0)*cj6*r01*x7434))+((cj4*cj6*r00))+(((-1.0)*r00*x7433*x7434))+(((-1.0)*r02*sj4*x7435))))), ((x7437.value)*((((cj5*r12))+(((-1.0)*r10*sj5*x7433))+(((-1.0)*cj6*r11*x7435))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7438=IKcos(j0);
IkReal x7439=IKsin(j0);
IkReal x7440=((1.0)*cj5);
IkReal x7441=(cj6*sj4);
IkReal x7442=((0.37429)*sj5);
IkReal x7443=(r10*sj6);
IkReal x7444=((0.37429)*cj5);
IkReal x7445=((0.069)*sj2);
IkReal x7446=(cj6*r01);
IkReal x7447=(r00*sj6);
IkReal x7448=(cj6*r11);
IkReal x7449=((0.01)*cj5);
IkReal x7450=(r12*sj5);
IkReal x7451=(cj4*cj6);
IkReal x7452=((1.0)*cj4);
IkReal x7453=(r01*sj6);
IkReal x7454=(r02*sj5);
IkReal x7455=(r11*sj6);
IkReal x7456=((1.0)*sj4*sj5);
IkReal x7457=((1.0)*x7439);
evalcond[0]=(((sj5*x7443))+((sj5*x7448))+(((-1.0)*r12*x7440))+((sj2*x7438)));
evalcond[1]=((((-1.0)*sj2*x7457))+((sj5*x7446))+((sj5*x7447))+(((-1.0)*r02*x7440)));
evalcond[2]=((((-1.0)*r00*x7441))+((sj4*x7453))+(((-1.0)*x7452*x7454))+(((-1.0)*cj4*x7440*x7447))+(((-1.0)*cj4*x7440*x7446))+x7438);
evalcond[3]=((((-1.0)*r10*x7441))+((sj4*x7455))+(((-1.0)*x7450*x7452))+(((-1.0)*cj4*x7440*x7448))+(((-1.0)*cj4*x7440*x7443))+x7439);
evalcond[4]=((((-1.0)*sj4*x7440*x7443))+(((-1.0)*r11*x7440*x7441))+(((-1.0)*x7452*x7455))+((r10*x7451))+((cj2*x7438))+(((-1.0)*sj4*x7450)));
evalcond[5]=((((-1.0)*sj4*x7440*x7447))+(((-1.0)*x7452*x7453))+(((-1.0)*cj2*x7457))+((r00*x7451))+(((-1.0)*r01*x7440*x7441))+(((-1.0)*sj4*x7454)));
evalcond[6]=((((-1.0)*x7442*x7446))+(((-1.0)*x7442*x7447))+(((-0.29542)*x7438))+((x7446*x7449))+(((-1.0)*px))+(((0.01)*x7454))+(((-1.0)*x7439*x7445))+((x7447*x7449))+((r02*x7444)));
evalcond[7]=(((r12*x7444))+(((-1.0)*x7442*x7443))+(((-1.0)*x7442*x7448))+(((-0.29542)*x7439))+((x7438*x7445))+((x7443*x7449))+(((-1.0)*py))+((x7448*x7449))+(((0.01)*x7450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7458=(cj6*r01);
IkReal x7459=(r00*sj6);
IkReal x7460=(cj4*cj5);
CheckValue<IkReal> x7461=IKPowWithIntegerCheck(sj2,-1);
if(!x7461.valid){
continue;
}
if( IKabs(((x7461.value)*((((sj5*x7458))+((sj5*x7459))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x7458*x7460))+((cj6*r00*sj4))+((x7459*x7460))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7461.value)*((((sj5*x7458))+((sj5*x7459))+(((-1.0)*cj5*r02))))))+IKsqr((((x7458*x7460))+((cj6*r00*sj4))+((x7459*x7460))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7461.value)*((((sj5*x7458))+((sj5*x7459))+(((-1.0)*cj5*r02))))), (((x7458*x7460))+((cj6*r00*sj4))+((x7459*x7460))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7462=IKcos(j0);
IkReal x7463=IKsin(j0);
IkReal x7464=((1.0)*cj5);
IkReal x7465=(cj6*sj4);
IkReal x7466=((0.37429)*sj5);
IkReal x7467=(r10*sj6);
IkReal x7468=((0.37429)*cj5);
IkReal x7469=((0.069)*sj2);
IkReal x7470=(cj6*r01);
IkReal x7471=(r00*sj6);
IkReal x7472=(cj6*r11);
IkReal x7473=((0.01)*cj5);
IkReal x7474=(r12*sj5);
IkReal x7475=(cj4*cj6);
IkReal x7476=((1.0)*cj4);
IkReal x7477=(r01*sj6);
IkReal x7478=(r02*sj5);
IkReal x7479=(r11*sj6);
IkReal x7480=((1.0)*sj4*sj5);
IkReal x7481=((1.0)*x7463);
evalcond[0]=(((sj5*x7467))+((sj2*x7462))+(((-1.0)*r12*x7464))+((sj5*x7472)));
evalcond[1]=((((-1.0)*sj2*x7481))+(((-1.0)*r02*x7464))+((sj5*x7470))+((sj5*x7471)));
evalcond[2]=(((sj4*x7477))+(((-1.0)*x7476*x7478))+(((-1.0)*r00*x7465))+x7462+(((-1.0)*cj4*x7464*x7471))+(((-1.0)*cj4*x7464*x7470)));
evalcond[3]=(((sj4*x7479))+(((-1.0)*x7474*x7476))+(((-1.0)*cj4*x7464*x7467))+(((-1.0)*r10*x7465))+x7463+(((-1.0)*cj4*x7464*x7472)));
evalcond[4]=(((r10*x7475))+((cj2*x7462))+(((-1.0)*x7476*x7479))+(((-1.0)*sj4*x7474))+(((-1.0)*r11*x7464*x7465))+(((-1.0)*sj4*x7464*x7467)));
evalcond[5]=((((-1.0)*x7476*x7477))+(((-1.0)*sj4*x7478))+(((-1.0)*sj4*x7464*x7471))+((r00*x7475))+(((-1.0)*r01*x7464*x7465))+(((-1.0)*cj2*x7481)));
evalcond[6]=((((-1.0)*x7466*x7471))+(((-1.0)*x7466*x7470))+(((-0.29542)*x7462))+((x7470*x7473))+((x7471*x7473))+(((-1.0)*px))+((r02*x7468))+(((0.01)*x7478))+(((-1.0)*x7463*x7469)));
evalcond[7]=(((x7467*x7473))+(((-1.0)*x7466*x7472))+((x7472*x7473))+(((-0.29542)*x7463))+(((-1.0)*py))+((r12*x7468))+(((-1.0)*x7466*x7467))+(((0.01)*x7474))+((x7462*x7469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7482=(cj6*sj5);
IkReal x7483=(sj5*sj6);
CheckValue<IkReal> x7484 = IKatan2WithCheck(IkReal((((r01*x7482))+((r00*x7483))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r12))+(((-1.0)*r11*x7482))+(((-1.0)*r10*x7483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7484.valid){
continue;
}
CheckValue<IkReal> x7485=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x7485.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7484.value)+(((1.5707963267949)*(x7485.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7486=IKcos(j0);
IkReal x7487=IKsin(j0);
IkReal x7488=((1.0)*cj5);
IkReal x7489=(cj6*sj4);
IkReal x7490=((0.37429)*sj5);
IkReal x7491=(r10*sj6);
IkReal x7492=((0.37429)*cj5);
IkReal x7493=((0.069)*sj2);
IkReal x7494=(cj6*r01);
IkReal x7495=(r00*sj6);
IkReal x7496=(cj6*r11);
IkReal x7497=((0.01)*cj5);
IkReal x7498=(r12*sj5);
IkReal x7499=(cj4*cj6);
IkReal x7500=((1.0)*cj4);
IkReal x7501=(r01*sj6);
IkReal x7502=(r02*sj5);
IkReal x7503=(r11*sj6);
IkReal x7504=((1.0)*sj4*sj5);
IkReal x7505=((1.0)*x7487);
evalcond[0]=(((sj2*x7486))+((sj5*x7496))+((sj5*x7491))+(((-1.0)*r12*x7488)));
evalcond[1]=(((sj5*x7494))+((sj5*x7495))+(((-1.0)*sj2*x7505))+(((-1.0)*r02*x7488)));
evalcond[2]=((((-1.0)*x7500*x7502))+(((-1.0)*cj4*x7488*x7495))+(((-1.0)*cj4*x7488*x7494))+(((-1.0)*r00*x7489))+x7486+((sj4*x7501)));
evalcond[3]=((((-1.0)*x7498*x7500))+(((-1.0)*cj4*x7488*x7496))+(((-1.0)*cj4*x7488*x7491))+x7487+(((-1.0)*r10*x7489))+((sj4*x7503)));
evalcond[4]=((((-1.0)*x7500*x7503))+(((-1.0)*sj4*x7488*x7491))+(((-1.0)*sj4*x7498))+((r10*x7499))+((cj2*x7486))+(((-1.0)*r11*x7488*x7489)));
evalcond[5]=((((-1.0)*x7500*x7501))+(((-1.0)*sj4*x7488*x7495))+((r00*x7499))+(((-1.0)*sj4*x7502))+(((-1.0)*cj2*x7505))+(((-1.0)*r01*x7488*x7489)));
evalcond[6]=((((-0.29542)*x7486))+(((-1.0)*x7487*x7493))+(((-1.0)*px))+((r02*x7492))+(((-1.0)*x7490*x7495))+(((-1.0)*x7490*x7494))+((x7494*x7497))+(((0.01)*x7502))+((x7495*x7497)));
evalcond[7]=((((-0.29542)*x7487))+((x7496*x7497))+((x7491*x7497))+(((0.01)*x7498))+((r12*x7492))+(((-1.0)*py))+(((-1.0)*x7490*x7491))+(((-1.0)*x7490*x7496))+((x7486*x7493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x7506=(cj6*sj5);
IkReal x7507=(sj5*sj6);
IkReal x7508=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs((((r00*x7507))+(((-1.0)*r02*x7508))+((r01*x7506)))))+(IKabs((((r11*x7506))+((r10*x7507))+(((-1.0)*r12*x7508))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7509=(cj6*sj5);
IkReal x7510=(sj5*sj6);
IkReal x7511=((1.0)*cj5);
if( IKabs((((r11*x7509))+((r10*x7510))+(((-1.0)*r12*x7511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x7510))+(((-1.0)*r02*x7511))+((r01*x7509)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x7509))+((r10*x7510))+(((-1.0)*r12*x7511))))+IKsqr((((r00*x7510))+(((-1.0)*r02*x7511))+((r01*x7509))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x7509))+((r10*x7510))+(((-1.0)*r12*x7511))), (((r00*x7510))+(((-1.0)*r02*x7511))+((r01*x7509))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7512=IKcos(j0);
IkReal x7513=(cj6*sj5);
IkReal x7514=((1.0)*sj6);
IkReal x7515=(sj5*sj6);
IkReal x7516=(cj4*cj6);
IkReal x7517=(cj5*sj4);
IkReal x7518=((1.0)*r02);
IkReal x7519=(sj4*sj5);
IkReal x7520=((1.0)*r12);
IkReal x7521=((1.0)*cj6);
IkReal x7522=((1.0)*(IKsin(j0)));
evalcond[0]=(((r11*x7513))+((r10*x7515))+(((-1.0)*x7522))+(((-1.0)*cj5*x7520)));
evalcond[1]=(((r00*x7515))+((r01*x7513))+(((-1.0)*cj5*x7518))+(((-1.0)*x7512)));
evalcond[2]=((((-1.0)*r11*x7517*x7521))+(((-1.0)*cj4*r11*x7514))+((r10*x7516))+(((-1.0)*r10*x7514*x7517))+(((-1.0)*x7519*x7520))+x7512);
evalcond[3]=((((-1.0)*r00*x7514*x7517))+((r00*x7516))+(((-1.0)*r01*x7517*x7521))+(((-1.0)*cj4*r01*x7514))+(((-1.0)*x7518*x7519))+(((-1.0)*x7522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7523=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x7523))+(((-1.0)*cj6*r11*x7523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x7523))+(((-1.0)*cj6*r01*x7523))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x7523))+(((-1.0)*cj6*r11*x7523))))+IKsqr(((((-1.0)*r00*sj6*x7523))+(((-1.0)*cj6*r01*x7523))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x7523))+(((-1.0)*cj6*r11*x7523))), ((((-1.0)*r00*sj6*x7523))+(((-1.0)*cj6*r01*x7523))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7524=IKcos(j0);
IkReal x7525=IKsin(j0);
IkReal x7526=((1.0)*sj4);
IkReal x7527=(sj5*sj6);
IkReal x7528=(cj5*r12);
IkReal x7529=(r12*sj5);
IkReal x7530=(cj6*sj5);
IkReal x7531=(r02*sj5);
IkReal x7532=(cj4*cj6);
IkReal x7533=(cj5*r02);
IkReal x7534=(cj5*sj6);
IkReal x7535=(cj5*cj6*r11);
IkReal x7536=(cj5*cj6*r01);
IkReal x7537=((0.01)*x7534);
IkReal x7538=((1.0)*cj4*sj6);
evalcond[0]=(((r10*x7527))+x7525+((r11*x7530))+(((-1.0)*x7528)));
evalcond[1]=(((r00*x7527))+(((-1.0)*x7533))+((r01*x7530))+x7524);
evalcond[2]=((((-1.0)*x7526*x7535))+((r10*x7532))+(((-1.0)*r11*x7538))+(((-1.0)*x7526*x7529))+x7524+(((-1.0)*r10*x7526*x7534)));
evalcond[3]=((((-1.0)*x7526*x7536))+(((-1.0)*x7526*x7531))+(((-1.0)*r00*x7526*x7534))+(((-1.0)*r01*x7538))+((r00*x7532))+(((-1.0)*x7525)));
evalcond[4]=((((0.138)*x7524))+(((0.01)*x7536))+(((0.01)*x7531))+(((-0.37429)*r00*x7527))+(((-1.0)*px))+((r00*x7537))+(((-0.37429)*r01*x7530))+(((0.37429)*x7533)));
evalcond[5]=((((0.138)*x7525))+((r10*x7537))+(((0.01)*x7535))+(((-0.37429)*r11*x7530))+(((-0.37429)*r10*x7527))+(((-1.0)*py))+(((0.37429)*x7528))+(((0.01)*x7529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7539=((1.0)*cj6);
IkReal x7540=(cj4*cj5);
CheckValue<IkReal> x7541=IKPowWithIntegerCheck(sj1,-1);
if(!x7541.valid){
continue;
}
CheckValue<IkReal> x7542=IKPowWithIntegerCheck(cj1,-1);
if(!x7542.valid){
continue;
}
if( IKabs(((x7541.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7542.value)*(((((-1.0)*r00*sj4*x7539))+(((-1.0)*cj4*r02*sj5))+(((-1.0)*r01*x7539*x7540))+((r01*sj4*sj6))+(((-1.0)*r00*sj6*x7540)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7541.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))+IKsqr(((x7542.value)*(((((-1.0)*r00*sj4*x7539))+(((-1.0)*cj4*r02*sj5))+(((-1.0)*r01*x7539*x7540))+((r01*sj4*sj6))+(((-1.0)*r00*sj6*x7540))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7541.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))), ((x7542.value)*(((((-1.0)*r00*sj4*x7539))+(((-1.0)*cj4*r02*sj5))+(((-1.0)*r01*x7539*x7540))+((r01*sj4*sj6))+(((-1.0)*r00*sj6*x7540))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7543=IKcos(j0);
IkReal x7544=IKsin(j0);
IkReal x7545=((1.0)*cj5);
IkReal x7546=(r11*sj4);
IkReal x7547=(r00*sj6);
IkReal x7548=((0.37429)*sj5);
IkReal x7549=(r10*sj6);
IkReal x7550=(cj6*sj4);
IkReal x7551=((0.36442)*cj1);
IkReal x7552=(cj6*r01);
IkReal x7553=(cj6*r11);
IkReal x7554=((0.01)*cj5);
IkReal x7555=(cj4*cj6);
IkReal x7556=((0.37429)*cj5);
IkReal x7557=((1.0)*cj4);
IkReal x7558=(r12*sj5);
IkReal x7559=(r01*sj6);
IkReal x7560=(r02*sj5);
IkReal x7561=((1.0)*sj4*sj5);
IkReal x7562=((0.069)*x7544);
IkReal x7563=((1.0)*x7544);
IkReal x7564=((1.0)*x7543);
IkReal x7565=((0.069)*x7543);
evalcond[0]=(((sj5*x7553))+(((-1.0)*sj1*x7563))+(((-1.0)*r12*x7545))+((sj5*x7549)));
evalcond[1]=(((sj5*x7552))+(((-1.0)*sj1*x7564))+(((-1.0)*r02*x7545))+((sj5*x7547)));
evalcond[2]=(((r10*x7555))+(((-1.0)*sj4*x7545*x7549))+x7543+(((-1.0)*sj4*x7558))+(((-1.0)*cj6*x7545*x7546))+(((-1.0)*r11*sj6*x7557)));
evalcond[3]=((((-1.0)*r01*x7545*x7550))+(((-1.0)*sj4*x7545*x7547))+(((-1.0)*x7557*x7559))+(((-1.0)*x7563))+(((-1.0)*sj4*x7560))+((r00*x7555)));
evalcond[4]=((((-1.0)*cj4*x7545*x7552))+(((-1.0)*cj4*x7545*x7547))+(((-1.0)*x7557*x7560))+((sj4*x7559))+(((-1.0)*r00*x7550))+(((-1.0)*cj1*x7564)));
evalcond[5]=((((-1.0)*cj4*x7545*x7553))+(((-1.0)*cj4*x7545*x7549))+(((-1.0)*x7557*x7558))+(((-1.0)*cj1*x7563))+((sj6*x7546))+(((-1.0)*r10*x7550)));
evalcond[6]=(((r02*x7556))+(((-1.0)*sj1*x7565))+((x7547*x7554))+(((0.01)*x7560))+((x7552*x7554))+(((-1.0)*px))+((x7543*x7551))+x7565+(((-1.0)*x7547*x7548))+(((-1.0)*x7548*x7552)));
evalcond[7]=((((-1.0)*sj1*x7562))+((x7549*x7554))+((r12*x7556))+((x7544*x7551))+(((-1.0)*py))+((x7553*x7554))+(((0.01)*x7558))+x7562+(((-1.0)*x7548*x7549))+(((-1.0)*x7548*x7553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7566=(cj6*r11);
IkReal x7567=(cj5*sj4);
IkReal x7568=(r10*sj6);
CheckValue<IkReal> x7569=IKPowWithIntegerCheck(sj1,-1);
if(!x7569.valid){
continue;
}
if( IKabs(((x7569.value)*(((((-1.0)*cj5*r12))+((sj5*x7568))+((sj5*x7566)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x7566*x7567))+((x7567*x7568))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7569.value)*(((((-1.0)*cj5*r12))+((sj5*x7568))+((sj5*x7566))))))+IKsqr((((x7566*x7567))+((x7567*x7568))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7569.value)*(((((-1.0)*cj5*r12))+((sj5*x7568))+((sj5*x7566))))), (((x7566*x7567))+((x7567*x7568))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7570=IKcos(j0);
IkReal x7571=IKsin(j0);
IkReal x7572=((1.0)*cj5);
IkReal x7573=(r11*sj4);
IkReal x7574=(r00*sj6);
IkReal x7575=((0.37429)*sj5);
IkReal x7576=(r10*sj6);
IkReal x7577=(cj6*sj4);
IkReal x7578=((0.36442)*cj1);
IkReal x7579=(cj6*r01);
IkReal x7580=(cj6*r11);
IkReal x7581=((0.01)*cj5);
IkReal x7582=(cj4*cj6);
IkReal x7583=((0.37429)*cj5);
IkReal x7584=((1.0)*cj4);
IkReal x7585=(r12*sj5);
IkReal x7586=(r01*sj6);
IkReal x7587=(r02*sj5);
IkReal x7588=((1.0)*sj4*sj5);
IkReal x7589=((0.069)*x7571);
IkReal x7590=((1.0)*x7571);
IkReal x7591=((1.0)*x7570);
IkReal x7592=((0.069)*x7570);
evalcond[0]=(((sj5*x7580))+(((-1.0)*sj1*x7590))+((sj5*x7576))+(((-1.0)*r12*x7572)));
evalcond[1]=((((-1.0)*sj1*x7591))+(((-1.0)*r02*x7572))+((sj5*x7574))+((sj5*x7579)));
evalcond[2]=((((-1.0)*sj4*x7572*x7576))+((r10*x7582))+(((-1.0)*cj6*x7572*x7573))+(((-1.0)*r11*sj6*x7584))+x7570+(((-1.0)*sj4*x7585)));
evalcond[3]=((((-1.0)*sj4*x7572*x7574))+(((-1.0)*x7584*x7586))+(((-1.0)*r01*x7572*x7577))+((r00*x7582))+(((-1.0)*x7590))+(((-1.0)*sj4*x7587)));
evalcond[4]=((((-1.0)*x7584*x7587))+(((-1.0)*cj1*x7591))+(((-1.0)*cj4*x7572*x7574))+(((-1.0)*cj4*x7572*x7579))+((sj4*x7586))+(((-1.0)*r00*x7577)));
evalcond[5]=((((-1.0)*x7584*x7585))+(((-1.0)*cj1*x7590))+(((-1.0)*cj4*x7572*x7576))+((sj6*x7573))+(((-1.0)*r10*x7577))+(((-1.0)*cj4*x7572*x7580)));
evalcond[6]=((((0.01)*x7587))+((r02*x7583))+((x7579*x7581))+(((-1.0)*x7574*x7575))+(((-1.0)*px))+(((-1.0)*sj1*x7592))+(((-1.0)*x7575*x7579))+((x7570*x7578))+x7592+((x7574*x7581)));
evalcond[7]=((((0.01)*x7585))+((r12*x7583))+((x7576*x7581))+(((-1.0)*sj1*x7589))+(((-1.0)*py))+((x7571*x7578))+(((-1.0)*x7575*x7576))+x7589+(((-1.0)*x7575*x7580))+((x7580*x7581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7593=(cj6*sj5);
IkReal x7594=(sj5*sj6);
IkReal x7595=((1.0)*cj5);
CheckValue<IkReal> x7596 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7595))+((r10*x7594))+((r11*x7593)))),IkReal(((((-1.0)*r02*x7595))+((r00*x7594))+((r01*x7593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7596.valid){
continue;
}
CheckValue<IkReal> x7597=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7597.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7596.value)+(((1.5707963267949)*(x7597.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7598=IKcos(j0);
IkReal x7599=IKsin(j0);
IkReal x7600=((1.0)*cj5);
IkReal x7601=(r11*sj4);
IkReal x7602=(r00*sj6);
IkReal x7603=((0.37429)*sj5);
IkReal x7604=(r10*sj6);
IkReal x7605=(cj6*sj4);
IkReal x7606=((0.36442)*cj1);
IkReal x7607=(cj6*r01);
IkReal x7608=(cj6*r11);
IkReal x7609=((0.01)*cj5);
IkReal x7610=(cj4*cj6);
IkReal x7611=((0.37429)*cj5);
IkReal x7612=((1.0)*cj4);
IkReal x7613=(r12*sj5);
IkReal x7614=(r01*sj6);
IkReal x7615=(r02*sj5);
IkReal x7616=((1.0)*sj4*sj5);
IkReal x7617=((0.069)*x7599);
IkReal x7618=((1.0)*x7599);
IkReal x7619=((1.0)*x7598);
IkReal x7620=((0.069)*x7598);
evalcond[0]=((((-1.0)*sj1*x7618))+((sj5*x7608))+((sj5*x7604))+(((-1.0)*r12*x7600)));
evalcond[1]=((((-1.0)*sj1*x7619))+((sj5*x7607))+((sj5*x7602))+(((-1.0)*r02*x7600)));
evalcond[2]=((((-1.0)*r11*sj6*x7612))+((r10*x7610))+x7598+(((-1.0)*cj6*x7600*x7601))+(((-1.0)*sj4*x7600*x7604))+(((-1.0)*sj4*x7613)));
evalcond[3]=((((-1.0)*r01*x7600*x7605))+((r00*x7610))+(((-1.0)*x7618))+(((-1.0)*x7612*x7614))+(((-1.0)*sj4*x7600*x7602))+(((-1.0)*sj4*x7615)));
evalcond[4]=(((sj4*x7614))+(((-1.0)*x7612*x7615))+(((-1.0)*r00*x7605))+(((-1.0)*cj1*x7619))+(((-1.0)*cj4*x7600*x7602))+(((-1.0)*cj4*x7600*x7607)));
evalcond[5]=((((-1.0)*r10*x7605))+(((-1.0)*x7612*x7613))+(((-1.0)*cj1*x7618))+((sj6*x7601))+(((-1.0)*cj4*x7600*x7608))+(((-1.0)*cj4*x7600*x7604)));
evalcond[6]=((((-1.0)*sj1*x7620))+((x7598*x7606))+(((0.01)*x7615))+((x7602*x7609))+(((-1.0)*px))+(((-1.0)*x7603*x7607))+((r02*x7611))+((x7607*x7609))+(((-1.0)*x7602*x7603))+x7620);
evalcond[7]=(((x7599*x7606))+((r12*x7611))+(((0.01)*x7613))+((x7604*x7609))+(((-1.0)*py))+(((-1.0)*sj1*x7617))+(((-1.0)*x7603*x7604))+(((-1.0)*x7603*x7608))+((x7608*x7609))+x7617);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x7621=((1.0)*cj6*sj5);
IkReal x7622=((1.0)*sj5*sj6);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x7621))+(((-1.0)*r10*x7622)))))+(IKabs(((((-1.0)*r00*x7622))+(((-1.0)*r01*x7621))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7623=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x7623))+(((-1.0)*cj6*r11*x7623)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x7623))+(((-1.0)*r00*sj6*x7623))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x7623))+(((-1.0)*cj6*r11*x7623))))+IKsqr(((((-1.0)*cj6*r01*x7623))+(((-1.0)*r00*sj6*x7623))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x7623))+(((-1.0)*cj6*r11*x7623))), ((((-1.0)*cj6*r01*x7623))+(((-1.0)*r00*sj6*x7623))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7624=IKsin(j0);
IkReal x7625=IKcos(j0);
IkReal x7626=((1.0)*sj4);
IkReal x7627=(sj5*sj6);
IkReal x7628=(cj5*r12);
IkReal x7629=(r12*sj5);
IkReal x7630=(cj6*sj5);
IkReal x7631=(r02*sj5);
IkReal x7632=(cj4*cj6);
IkReal x7633=(cj5*r02);
IkReal x7634=(cj5*sj6);
IkReal x7635=(cj5*cj6*r11);
IkReal x7636=(cj5*cj6*r01);
IkReal x7637=((0.01)*x7634);
IkReal x7638=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x7628))+((r11*x7630))+((r10*x7627))+x7624);
evalcond[1]=(((r01*x7630))+((r00*x7627))+(((-1.0)*x7633))+x7625);
evalcond[2]=(((r00*x7632))+(((-1.0)*x7626*x7636))+(((-1.0)*x7626*x7631))+(((-1.0)*r01*x7638))+x7624+(((-1.0)*r00*x7626*x7634)));
evalcond[3]=((((-1.0)*x7625))+(((-1.0)*x7626*x7629))+(((-1.0)*x7626*x7635))+((r10*x7632))+(((-1.0)*r10*x7626*x7634))+(((-1.0)*r11*x7638)));
evalcond[4]=((((0.138)*x7625))+(((0.01)*x7631))+(((0.01)*x7636))+((r00*x7637))+(((0.37429)*x7633))+(((-0.37429)*r01*x7630))+(((-1.0)*px))+(((-0.37429)*r00*x7627)));
evalcond[5]=((((0.138)*x7624))+(((0.01)*x7635))+(((0.01)*x7629))+(((-1.0)*py))+(((-0.37429)*r10*x7627))+(((-0.37429)*r11*x7630))+((r10*x7637))+(((0.37429)*x7628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7639=(cj6*sj5);
IkReal x7640=(sj5*sj6);
IkReal x7641=((1.0)*cj5);
if( IKabs((((r11*x7639))+(((-1.0)*r12*x7641))+((r10*x7640)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x7639))+(((-1.0)*r02*x7641))+((r00*x7640)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x7639))+(((-1.0)*r12*x7641))+((r10*x7640))))+IKsqr((((r01*x7639))+(((-1.0)*r02*x7641))+((r00*x7640))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x7639))+(((-1.0)*r12*x7641))+((r10*x7640))), (((r01*x7639))+(((-1.0)*r02*x7641))+((r00*x7640))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7642=IKsin(j0);
IkReal x7643=(cj6*sj5);
IkReal x7644=((1.0)*sj6);
IkReal x7645=(sj5*sj6);
IkReal x7646=(cj5*sj4);
IkReal x7647=((1.0)*r02);
IkReal x7648=(sj4*sj5);
IkReal x7649=(cj4*cj6);
IkReal x7650=((1.0)*r12);
IkReal x7651=((1.0)*cj6);
IkReal x7652=((1.0)*(IKcos(j0)));
evalcond[0]=(((r10*x7645))+(((-1.0)*cj5*x7650))+(((-1.0)*x7642))+((r11*x7643)));
evalcond[1]=((((-1.0)*cj5*x7647))+((r00*x7645))+(((-1.0)*x7652))+((r01*x7643)));
evalcond[2]=((((-1.0)*r01*x7646*x7651))+(((-1.0)*r00*x7644*x7646))+((r00*x7649))+(((-1.0)*cj4*r01*x7644))+(((-1.0)*x7647*x7648))+x7642);
evalcond[3]=((((-1.0)*r10*x7644*x7646))+(((-1.0)*x7648*x7650))+(((-1.0)*cj4*r11*x7644))+((r10*x7649))+(((-1.0)*x7652))+(((-1.0)*r11*x7646*x7651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7653=((1.0)*cj6);
IkReal x7654=(cj4*cj5);
IkReal x7655=((1.0)*sj6);
CheckValue<IkReal> x7656=IKPowWithIntegerCheck(sj1,-1);
if(!x7656.valid){
continue;
}
CheckValue<IkReal> x7657=IKPowWithIntegerCheck(cj1,-1);
if(!x7657.valid){
continue;
}
if( IKabs(((x7656.value)*(((((-1.0)*r10*sj5*x7655))+((cj5*r12))+(((-1.0)*r11*sj5*x7653)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7657.value)*(((((-1.0)*r01*x7653*x7654))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r00*sj4*x7653))+(((-1.0)*r00*x7654*x7655)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7656.value)*(((((-1.0)*r10*sj5*x7655))+((cj5*r12))+(((-1.0)*r11*sj5*x7653))))))+IKsqr(((x7657.value)*(((((-1.0)*r01*x7653*x7654))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r00*sj4*x7653))+(((-1.0)*r00*x7654*x7655))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7656.value)*(((((-1.0)*r10*sj5*x7655))+((cj5*r12))+(((-1.0)*r11*sj5*x7653))))), ((x7657.value)*(((((-1.0)*r01*x7653*x7654))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r00*sj4*x7653))+(((-1.0)*r00*x7654*x7655))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7658=IKsin(j0);
IkReal x7659=IKcos(j0);
IkReal x7660=((1.0)*cj5);
IkReal x7661=(r11*sj4);
IkReal x7662=(r00*sj6);
IkReal x7663=((0.37429)*sj5);
IkReal x7664=(r10*sj6);
IkReal x7665=(cj6*sj4);
IkReal x7666=((0.36442)*cj1);
IkReal x7667=(cj6*r01);
IkReal x7668=(cj6*r11);
IkReal x7669=((0.01)*cj5);
IkReal x7670=(cj4*cj6);
IkReal x7671=((0.37429)*cj5);
IkReal x7672=((1.0)*cj4);
IkReal x7673=(r12*sj5);
IkReal x7674=(r01*sj6);
IkReal x7675=(r02*sj5);
IkReal x7676=((1.0)*sj4*sj5);
IkReal x7677=((0.069)*x7658);
IkReal x7678=((1.0)*x7659);
IkReal x7679=((0.069)*x7659);
evalcond[0]=(((sj1*x7658))+(((-1.0)*r12*x7660))+((sj5*x7668))+((sj5*x7664)));
evalcond[1]=(((sj1*x7659))+((sj5*x7662))+((sj5*x7667))+(((-1.0)*r02*x7660)));
evalcond[2]=((((-1.0)*r01*x7660*x7665))+(((-1.0)*sj4*x7675))+(((-1.0)*sj4*x7660*x7662))+(((-1.0)*x7672*x7674))+((r00*x7670))+x7658);
evalcond[3]=((((-1.0)*sj4*x7673))+(((-1.0)*sj4*x7660*x7664))+(((-1.0)*x7678))+((r10*x7670))+(((-1.0)*r11*sj6*x7672))+(((-1.0)*cj6*x7660*x7661)));
evalcond[4]=((((-1.0)*cj1*x7678))+(((-1.0)*cj4*x7660*x7662))+(((-1.0)*cj4*x7660*x7667))+(((-1.0)*r00*x7665))+((sj4*x7674))+(((-1.0)*x7672*x7675)));
evalcond[5]=((((-1.0)*r10*x7665))+(((-1.0)*cj4*x7660*x7668))+(((-1.0)*cj4*x7660*x7664))+(((-1.0)*cj1*x7658))+(((-1.0)*x7672*x7673))+((sj6*x7661)));
evalcond[6]=((((0.01)*x7675))+((r02*x7671))+((sj1*x7679))+((x7662*x7669))+((x7667*x7669))+(((-1.0)*px))+((x7659*x7666))+(((-1.0)*x7662*x7663))+(((-1.0)*x7663*x7667))+x7679);
evalcond[7]=((((0.01)*x7673))+((x7668*x7669))+((r12*x7671))+((sj1*x7677))+((x7658*x7666))+((x7664*x7669))+(((-1.0)*py))+(((-1.0)*x7663*x7668))+(((-1.0)*x7663*x7664))+x7677);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7680=((1.0)*r00);
IkReal x7681=(cj6*r01);
IkReal x7682=(cj5*sj4);
CheckValue<IkReal> x7683=IKPowWithIntegerCheck(sj1,-1);
if(!x7683.valid){
continue;
}
if( IKabs((((x7681*x7682))+((r00*sj6*x7682))+(((-1.0)*cj4*cj6*x7680))+((cj4*r01*sj6))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7683.value)*(((((-1.0)*sj5*x7681))+(((-1.0)*sj5*sj6*x7680))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x7681*x7682))+((r00*sj6*x7682))+(((-1.0)*cj4*cj6*x7680))+((cj4*r01*sj6))+((r02*sj4*sj5))))+IKsqr(((x7683.value)*(((((-1.0)*sj5*x7681))+(((-1.0)*sj5*sj6*x7680))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x7681*x7682))+((r00*sj6*x7682))+(((-1.0)*cj4*cj6*x7680))+((cj4*r01*sj6))+((r02*sj4*sj5))), ((x7683.value)*(((((-1.0)*sj5*x7681))+(((-1.0)*sj5*sj6*x7680))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7684=IKsin(j0);
IkReal x7685=IKcos(j0);
IkReal x7686=((1.0)*cj5);
IkReal x7687=(r11*sj4);
IkReal x7688=(r00*sj6);
IkReal x7689=((0.37429)*sj5);
IkReal x7690=(r10*sj6);
IkReal x7691=(cj6*sj4);
IkReal x7692=((0.36442)*cj1);
IkReal x7693=(cj6*r01);
IkReal x7694=(cj6*r11);
IkReal x7695=((0.01)*cj5);
IkReal x7696=(cj4*cj6);
IkReal x7697=((0.37429)*cj5);
IkReal x7698=((1.0)*cj4);
IkReal x7699=(r12*sj5);
IkReal x7700=(r01*sj6);
IkReal x7701=(r02*sj5);
IkReal x7702=((1.0)*sj4*sj5);
IkReal x7703=((0.069)*x7684);
IkReal x7704=((1.0)*x7685);
IkReal x7705=((0.069)*x7685);
evalcond[0]=(((sj5*x7694))+((sj5*x7690))+((sj1*x7684))+(((-1.0)*r12*x7686)));
evalcond[1]=(((sj5*x7693))+((sj1*x7685))+((sj5*x7688))+(((-1.0)*r02*x7686)));
evalcond[2]=((((-1.0)*x7698*x7700))+((r00*x7696))+(((-1.0)*sj4*x7686*x7688))+(((-1.0)*sj4*x7701))+(((-1.0)*r01*x7686*x7691))+x7684);
evalcond[3]=(((r10*x7696))+(((-1.0)*cj6*x7686*x7687))+(((-1.0)*r11*sj6*x7698))+(((-1.0)*x7704))+(((-1.0)*sj4*x7686*x7690))+(((-1.0)*sj4*x7699)));
evalcond[4]=((((-1.0)*x7698*x7701))+((sj4*x7700))+(((-1.0)*cj4*x7686*x7688))+(((-1.0)*cj1*x7704))+(((-1.0)*cj4*x7686*x7693))+(((-1.0)*r00*x7691)));
evalcond[5]=((((-1.0)*r10*x7691))+(((-1.0)*cj1*x7684))+((sj6*x7687))+(((-1.0)*cj4*x7686*x7690))+(((-1.0)*cj4*x7686*x7694))+(((-1.0)*x7698*x7699)));
evalcond[6]=(((r02*x7697))+(((0.01)*x7701))+((x7693*x7695))+((x7685*x7692))+((sj1*x7705))+(((-1.0)*px))+(((-1.0)*x7689*x7693))+(((-1.0)*x7688*x7689))+x7705+((x7688*x7695)));
evalcond[7]=(((x7690*x7695))+((r12*x7697))+((x7684*x7692))+((sj1*x7703))+(((-1.0)*py))+((x7694*x7695))+(((-1.0)*x7689*x7690))+(((-1.0)*x7689*x7694))+(((0.01)*x7699))+x7703);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7706=((1.0)*sj5);
CheckValue<IkReal> x7707=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7707.valid){
continue;
}
CheckValue<IkReal> x7708 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*sj6*x7706))+(((-1.0)*cj6*r11*x7706)))),IkReal(((((-1.0)*r00*sj6*x7706))+(((-1.0)*cj6*r01*x7706))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7708.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7707.value)))+(x7708.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7709=IKsin(j0);
IkReal x7710=IKcos(j0);
IkReal x7711=((1.0)*cj5);
IkReal x7712=(r11*sj4);
IkReal x7713=(r00*sj6);
IkReal x7714=((0.37429)*sj5);
IkReal x7715=(r10*sj6);
IkReal x7716=(cj6*sj4);
IkReal x7717=((0.36442)*cj1);
IkReal x7718=(cj6*r01);
IkReal x7719=(cj6*r11);
IkReal x7720=((0.01)*cj5);
IkReal x7721=(cj4*cj6);
IkReal x7722=((0.37429)*cj5);
IkReal x7723=((1.0)*cj4);
IkReal x7724=(r12*sj5);
IkReal x7725=(r01*sj6);
IkReal x7726=(r02*sj5);
IkReal x7727=((1.0)*sj4*sj5);
IkReal x7728=((0.069)*x7709);
IkReal x7729=((1.0)*x7710);
IkReal x7730=((0.069)*x7710);
evalcond[0]=((((-1.0)*r12*x7711))+((sj1*x7709))+((sj5*x7715))+((sj5*x7719)));
evalcond[1]=(((sj1*x7710))+((sj5*x7713))+((sj5*x7718))+(((-1.0)*r02*x7711)));
evalcond[2]=((((-1.0)*sj4*x7726))+(((-1.0)*r01*x7711*x7716))+((r00*x7721))+(((-1.0)*sj4*x7711*x7713))+(((-1.0)*x7723*x7725))+x7709);
evalcond[3]=((((-1.0)*sj4*x7724))+((r10*x7721))+(((-1.0)*sj4*x7711*x7715))+(((-1.0)*cj6*x7711*x7712))+(((-1.0)*r11*sj6*x7723))+(((-1.0)*x7729)));
evalcond[4]=((((-1.0)*r00*x7716))+(((-1.0)*cj4*x7711*x7713))+(((-1.0)*cj4*x7711*x7718))+(((-1.0)*x7723*x7726))+((sj4*x7725))+(((-1.0)*cj1*x7729)));
evalcond[5]=((((-1.0)*cj4*x7711*x7715))+(((-1.0)*cj4*x7711*x7719))+(((-1.0)*cj1*x7709))+((sj6*x7712))+(((-1.0)*x7723*x7724))+(((-1.0)*r10*x7716)));
evalcond[6]=(((x7713*x7720))+((sj1*x7730))+(((-1.0)*px))+((x7718*x7720))+((x7710*x7717))+(((-1.0)*x7714*x7718))+(((0.01)*x7726))+((r02*x7722))+x7730+(((-1.0)*x7713*x7714)));
evalcond[7]=(((x7715*x7720))+(((-1.0)*py))+((x7719*x7720))+((r12*x7722))+(((-1.0)*x7714*x7715))+(((-1.0)*x7714*x7719))+(((0.01)*x7724))+((x7709*x7717))+x7728+((sj1*x7728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7739=IKPowWithIntegerCheck(cj1,-1);
if(!x7739.valid){
continue;
}
IkReal x7731=x7739.value;
IkReal x7732=(cj1*sj5);
IkReal x7733=((1.0)*cj6);
IkReal x7734=(r00*sj2);
IkReal x7735=(cj4*cj5);
IkReal x7736=((1.0)*sj6);
IkReal x7737=(r01*sj4*sj6);
IkReal x7738=((1.0)*cj4*r02*sj5);
CheckValue<IkReal> x7740=IKPowWithIntegerCheck(cj2,-1);
if(!x7740.valid){
continue;
}
CheckValue<IkReal> x7741=IKPowWithIntegerCheck(sj1,-1);
if(!x7741.valid){
continue;
}
if( IKabs((x7731*(x7740.value)*(x7741.value)*(((((-1.0)*r01*sj2*x7733*x7735))+(((-1.0)*sj2*x7738))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*sj4*x7733*x7734))+((r10*sj6*x7732))+(((-1.0)*x7734*x7735*x7736))+((sj2*x7737))+((cj6*r11*x7732)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7731*(((((-1.0)*r00*sj4*x7733))+(((-1.0)*r00*x7735*x7736))+(((-1.0)*r01*x7733*x7735))+(((-1.0)*x7738))+x7737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7731*(x7740.value)*(x7741.value)*(((((-1.0)*r01*sj2*x7733*x7735))+(((-1.0)*sj2*x7738))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*sj4*x7733*x7734))+((r10*sj6*x7732))+(((-1.0)*x7734*x7735*x7736))+((sj2*x7737))+((cj6*r11*x7732))))))+IKsqr((x7731*(((((-1.0)*r00*sj4*x7733))+(((-1.0)*r00*x7735*x7736))+(((-1.0)*r01*x7733*x7735))+(((-1.0)*x7738))+x7737))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x7731*(x7740.value)*(x7741.value)*(((((-1.0)*r01*sj2*x7733*x7735))+(((-1.0)*sj2*x7738))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*sj4*x7733*x7734))+((r10*sj6*x7732))+(((-1.0)*x7734*x7735*x7736))+((sj2*x7737))+((cj6*r11*x7732))))), (x7731*(((((-1.0)*r00*sj4*x7733))+(((-1.0)*r00*x7735*x7736))+(((-1.0)*r01*x7733*x7735))+(((-1.0)*x7738))+x7737))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7742=IKsin(j0);
IkReal x7743=IKcos(j0);
IkReal x7744=((1.0)*cj5);
IkReal x7745=(cj6*sj4);
IkReal x7746=((0.37429)*sj5);
IkReal x7747=(r10*sj6);
IkReal x7748=((0.36442)*cj1);
IkReal x7749=((0.069)*sj2);
IkReal x7750=(cj6*r01);
IkReal x7751=(r00*sj6);
IkReal x7752=(cj6*r11);
IkReal x7753=((1.0)*sj1);
IkReal x7754=((0.01)*cj5);
IkReal x7755=((1.0)*cj1);
IkReal x7756=(r12*sj5);
IkReal x7757=(cj4*cj6);
IkReal x7758=((0.37429)*cj5);
IkReal x7759=((1.0)*cj4);
IkReal x7760=(r02*sj5);
IkReal x7761=(r01*sj6);
IkReal x7762=(r11*sj6);
IkReal x7763=(cj2*x7743);
IkReal x7764=((0.069)*x7742);
IkReal x7765=((1.0)*sj4*sj5);
IkReal x7766=(sj2*x7743);
IkReal x7767=((1.0)*x7742);
evalcond[0]=(((sj5*x7752))+((sj5*x7747))+(((-1.0)*r12*x7744))+(((-1.0)*cj2*x7742*x7753))+x7766);
evalcond[1]=(((sj5*x7751))+((sj5*x7750))+(((-1.0)*r02*x7744))+(((-1.0)*sj2*x7767))+(((-1.0)*x7753*x7763)));
evalcond[2]=((((-1.0)*r00*x7745))+(((-1.0)*x7759*x7760))+((sj4*x7761))+(((-1.0)*cj4*x7744*x7750))+(((-1.0)*cj4*x7744*x7751))+(((-1.0)*x7743*x7755)));
evalcond[3]=((((-1.0)*x7756*x7759))+((sj4*x7762))+(((-1.0)*cj4*x7744*x7752))+(((-1.0)*cj4*x7744*x7747))+(((-1.0)*r10*x7745))+(((-1.0)*x7742*x7755)));
evalcond[4]=(((r10*x7757))+(((-1.0)*sj4*x7744*x7747))+(((-1.0)*sj4*x7756))+(((-1.0)*x7759*x7762))+((sj1*sj2*x7742))+(((-1.0)*r11*x7744*x7745))+x7763);
evalcond[5]=(((r00*x7757))+((sj1*x7766))+(((-1.0)*sj4*x7744*x7751))+(((-1.0)*sj4*x7760))+(((-1.0)*x7759*x7761))+(((-1.0)*r01*x7744*x7745))+(((-1.0)*cj2*x7767)));
evalcond[6]=((((-1.0)*x7742*x7749))+((x7743*x7748))+(((0.01)*x7760))+((r02*x7758))+(((0.069)*x7743))+(((-1.0)*px))+((x7750*x7754))+(((-0.069)*sj1*x7763))+(((-1.0)*x7746*x7750))+(((-1.0)*x7746*x7751))+((x7751*x7754)));
evalcond[7]=(((x7752*x7754))+(((-1.0)*cj2*sj1*x7764))+((x7743*x7749))+(((0.01)*x7756))+(((-1.0)*py))+((x7747*x7754))+(((-1.0)*x7746*x7747))+(((-1.0)*x7746*x7752))+((x7742*x7748))+x7764+((r12*x7758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7779=IKPowWithIntegerCheck(cj1,-1);
if(!x7779.valid){
continue;
}
IkReal x7768=x7779.value;
IkReal x7769=(r02*sj5);
IkReal x7770=((1.0)*sj4);
IkReal x7771=(cj2*sj1);
IkReal x7772=(r01*sj6);
IkReal x7773=((1.0)*cj4);
IkReal x7774=(r00*sj6);
IkReal x7775=(cj1*sj5);
IkReal x7776=(cj6*r00);
IkReal x7777=(cj4*x7771);
IkReal x7778=(cj5*cj6*r01);
CheckValue<IkReal> x7780=IKPowWithIntegerCheck(sj2,-1);
if(!x7780.valid){
continue;
}
if( IKabs((x7768*(x7780.value)*((((cj6*r01*x7775))+(((-1.0)*cj1*cj5*r02))+((sj4*x7771*x7776))+((x7769*x7777))+((x7777*x7778))+(((-1.0)*x7770*x7771*x7772))+((x7774*x7775))+((cj5*x7774*x7777)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7768*(((((-1.0)*x7769*x7773))+(((-1.0)*x7770*x7776))+((sj4*x7772))+(((-1.0)*cj5*x7773*x7774))+(((-1.0)*x7773*x7778)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7768*(x7780.value)*((((cj6*r01*x7775))+(((-1.0)*cj1*cj5*r02))+((sj4*x7771*x7776))+((x7769*x7777))+((x7777*x7778))+(((-1.0)*x7770*x7771*x7772))+((x7774*x7775))+((cj5*x7774*x7777))))))+IKsqr((x7768*(((((-1.0)*x7769*x7773))+(((-1.0)*x7770*x7776))+((sj4*x7772))+(((-1.0)*cj5*x7773*x7774))+(((-1.0)*x7773*x7778))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x7768*(x7780.value)*((((cj6*r01*x7775))+(((-1.0)*cj1*cj5*r02))+((sj4*x7771*x7776))+((x7769*x7777))+((x7777*x7778))+(((-1.0)*x7770*x7771*x7772))+((x7774*x7775))+((cj5*x7774*x7777))))), (x7768*(((((-1.0)*x7769*x7773))+(((-1.0)*x7770*x7776))+((sj4*x7772))+(((-1.0)*cj5*x7773*x7774))+(((-1.0)*x7773*x7778))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7781=IKsin(j0);
IkReal x7782=IKcos(j0);
IkReal x7783=((1.0)*cj5);
IkReal x7784=(cj6*sj4);
IkReal x7785=((0.37429)*sj5);
IkReal x7786=(r10*sj6);
IkReal x7787=((0.36442)*cj1);
IkReal x7788=((0.069)*sj2);
IkReal x7789=(cj6*r01);
IkReal x7790=(r00*sj6);
IkReal x7791=(cj6*r11);
IkReal x7792=((1.0)*sj1);
IkReal x7793=((0.01)*cj5);
IkReal x7794=((1.0)*cj1);
IkReal x7795=(r12*sj5);
IkReal x7796=(cj4*cj6);
IkReal x7797=((0.37429)*cj5);
IkReal x7798=((1.0)*cj4);
IkReal x7799=(r02*sj5);
IkReal x7800=(r01*sj6);
IkReal x7801=(r11*sj6);
IkReal x7802=(cj2*x7782);
IkReal x7803=((0.069)*x7781);
IkReal x7804=((1.0)*sj4*sj5);
IkReal x7805=(sj2*x7782);
IkReal x7806=((1.0)*x7781);
evalcond[0]=((((-1.0)*cj2*x7781*x7792))+((sj5*x7786))+x7805+((sj5*x7791))+(((-1.0)*r12*x7783)));
evalcond[1]=(((sj5*x7789))+(((-1.0)*r02*x7783))+((sj5*x7790))+(((-1.0)*sj2*x7806))+(((-1.0)*x7792*x7802)));
evalcond[2]=((((-1.0)*cj4*x7783*x7789))+((sj4*x7800))+(((-1.0)*cj4*x7783*x7790))+(((-1.0)*r00*x7784))+(((-1.0)*x7798*x7799))+(((-1.0)*x7782*x7794)));
evalcond[3]=((((-1.0)*cj4*x7783*x7786))+((sj4*x7801))+(((-1.0)*cj4*x7783*x7791))+(((-1.0)*x7795*x7798))+(((-1.0)*r10*x7784))+(((-1.0)*x7781*x7794)));
evalcond[4]=(((r10*x7796))+((sj1*sj2*x7781))+(((-1.0)*sj4*x7783*x7786))+(((-1.0)*r11*x7783*x7784))+x7802+(((-1.0)*sj4*x7795))+(((-1.0)*x7798*x7801)));
evalcond[5]=((((-1.0)*cj2*x7806))+((sj1*x7805))+(((-1.0)*r01*x7783*x7784))+(((-1.0)*sj4*x7799))+(((-1.0)*x7798*x7800))+((r00*x7796))+(((-1.0)*sj4*x7783*x7790)));
evalcond[6]=(((x7782*x7787))+((x7789*x7793))+(((-1.0)*x7785*x7789))+(((0.069)*x7782))+((r02*x7797))+(((-1.0)*px))+(((-1.0)*x7785*x7790))+(((0.01)*x7799))+((x7790*x7793))+(((-0.069)*sj1*x7802))+(((-1.0)*x7781*x7788)));
evalcond[7]=(((x7782*x7788))+(((-1.0)*x7785*x7786))+((x7781*x7787))+((x7786*x7793))+x7803+(((-1.0)*py))+(((-1.0)*x7785*x7791))+(((-1.0)*cj2*sj1*x7803))+(((0.01)*x7795))+((r12*x7797))+((x7791*x7793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7807=(r10*sj6);
IkReal x7808=(cj6*r11);
IkReal x7809=(sj2*sj5);
IkReal x7810=(cj6*r01);
IkReal x7811=(r00*sj6);
IkReal x7812=(cj5*sj2);
IkReal x7813=(cj2*sj1*sj5);
IkReal x7814=((1.0)*cj2*cj5*sj1);
CheckValue<IkReal> x7815 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7814))+(((-1.0)*r02*x7812))+((x7809*x7811))+((x7809*x7810))+((x7808*x7813))+((x7807*x7813)))),IkReal((((r12*x7812))+((x7810*x7813))+(((-1.0)*x7807*x7809))+(((-1.0)*r02*x7814))+(((-1.0)*x7808*x7809))+((x7811*x7813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7815.valid){
continue;
}
CheckValue<IkReal> x7816=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x7816.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7815.value)+(((1.5707963267949)*(x7816.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7817=IKsin(j0);
IkReal x7818=IKcos(j0);
IkReal x7819=((1.0)*cj5);
IkReal x7820=(cj6*sj4);
IkReal x7821=((0.37429)*sj5);
IkReal x7822=(r10*sj6);
IkReal x7823=((0.36442)*cj1);
IkReal x7824=((0.069)*sj2);
IkReal x7825=(cj6*r01);
IkReal x7826=(r00*sj6);
IkReal x7827=(cj6*r11);
IkReal x7828=((1.0)*sj1);
IkReal x7829=((0.01)*cj5);
IkReal x7830=((1.0)*cj1);
IkReal x7831=(r12*sj5);
IkReal x7832=(cj4*cj6);
IkReal x7833=((0.37429)*cj5);
IkReal x7834=((1.0)*cj4);
IkReal x7835=(r02*sj5);
IkReal x7836=(r01*sj6);
IkReal x7837=(r11*sj6);
IkReal x7838=(cj2*x7818);
IkReal x7839=((0.069)*x7817);
IkReal x7840=((1.0)*sj4*sj5);
IkReal x7841=(sj2*x7818);
IkReal x7842=((1.0)*x7817);
evalcond[0]=(((sj5*x7822))+((sj5*x7827))+(((-1.0)*cj2*x7817*x7828))+x7841+(((-1.0)*r12*x7819)));
evalcond[1]=(((sj5*x7825))+((sj5*x7826))+(((-1.0)*x7828*x7838))+(((-1.0)*r02*x7819))+(((-1.0)*sj2*x7842)));
evalcond[2]=((((-1.0)*r00*x7820))+(((-1.0)*cj4*x7819*x7825))+(((-1.0)*cj4*x7819*x7826))+(((-1.0)*x7818*x7830))+((sj4*x7836))+(((-1.0)*x7834*x7835)));
evalcond[3]=((((-1.0)*cj4*x7819*x7827))+(((-1.0)*cj4*x7819*x7822))+(((-1.0)*x7831*x7834))+(((-1.0)*x7817*x7830))+((sj4*x7837))+(((-1.0)*r10*x7820)));
evalcond[4]=((((-1.0)*sj4*x7819*x7822))+((r10*x7832))+(((-1.0)*sj4*x7831))+x7838+((sj1*sj2*x7817))+(((-1.0)*x7834*x7837))+(((-1.0)*r11*x7819*x7820)));
evalcond[5]=((((-1.0)*sj4*x7819*x7826))+(((-1.0)*r01*x7819*x7820))+(((-1.0)*sj4*x7835))+((r00*x7832))+(((-1.0)*cj2*x7842))+(((-1.0)*x7834*x7836))+((sj1*x7841)));
evalcond[6]=((((0.01)*x7835))+(((-0.069)*sj1*x7838))+((x7826*x7829))+((x7825*x7829))+(((-1.0)*px))+(((-1.0)*x7817*x7824))+(((0.069)*x7818))+(((-1.0)*x7821*x7825))+(((-1.0)*x7821*x7826))+((r02*x7833))+((x7818*x7823)));
evalcond[7]=(((r12*x7833))+(((0.01)*x7831))+((x7817*x7823))+((x7827*x7829))+(((-1.0)*cj2*sj1*x7839))+x7839+(((-1.0)*py))+((x7822*x7829))+(((-1.0)*x7821*x7827))+(((-1.0)*x7821*x7822))+((x7818*x7824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7843=(r10*sj6);
IkReal x7844=(cj6*r11);
IkReal x7845=(sj2*sj5);
IkReal x7846=(cj6*r01);
IkReal x7847=(r00*sj6);
IkReal x7848=(cj5*sj2);
IkReal x7849=(cj2*sj1*sj5);
IkReal x7850=((1.0)*cj2*cj5*sj1);
CheckValue<IkReal> x7851 = IKatan2WithCheck(IkReal((((x7843*x7849))+(((-1.0)*r02*x7848))+((x7844*x7849))+((x7845*x7847))+((x7845*x7846))+(((-1.0)*r12*x7850)))),IkReal((((x7847*x7849))+((r12*x7848))+(((-1.0)*x7844*x7845))+(((-1.0)*x7843*x7845))+(((-1.0)*r02*x7850))+((x7846*x7849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7851.valid){
continue;
}
CheckValue<IkReal> x7852=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x7852.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7851.value)+(((1.5707963267949)*(x7852.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7853=IKsin(j0);
IkReal x7854=IKcos(j0);
IkReal x7855=(cj6*r11);
IkReal x7856=((0.01)*cj5);
IkReal x7857=(sj5*sj6);
IkReal x7858=((0.36442)*cj1);
IkReal x7859=(cj2*sj1);
IkReal x7860=(cj6*r01);
IkReal x7861=((0.37429)*sj5);
IkReal x7862=(cj5*r02);
IkReal x7863=((0.01)*sj5);
IkReal x7864=(cj5*r12);
IkReal x7865=((0.069)*x7853);
IkReal x7866=((0.069)*x7854);
IkReal x7867=((1.0)*x7853);
evalcond[0]=((((-1.0)*x7859*x7867))+((sj5*x7855))+(((-1.0)*x7864))+((sj2*x7854))+((r10*x7857)));
evalcond[1]=((((-1.0)*sj2*x7867))+(((-1.0)*x7854*x7859))+((sj5*x7860))+(((-1.0)*x7862))+((r00*x7857)));
evalcond[2]=((((-1.0)*x7859*x7866))+(((-1.0)*sj2*x7865))+((x7856*x7860))+(((0.37429)*x7862))+x7866+(((-1.0)*px))+((r02*x7863))+(((-0.37429)*r00*x7857))+((r00*sj6*x7856))+((x7854*x7858))+(((-1.0)*x7860*x7861)));
evalcond[3]=((((-1.0)*x7859*x7865))+((sj2*x7866))+(((-1.0)*x7855*x7861))+((r12*x7863))+(((0.37429)*x7864))+(((-0.37429)*r10*x7857))+x7865+(((-1.0)*py))+((x7853*x7858))+((r10*sj6*x7856))+((x7855*x7856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7868=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7868;
j4eval[1]=IKsign(x7868);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7869=((1.0)*sj5);
IkReal x7870=((((-1.0)*r00*sj6*x7869))+((cj5*r02))+(((-1.0)*cj6*r01*x7869)));
j4eval[0]=x7870;
j4eval[1]=IKsign(x7870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7871=cj5*cj5;
IkReal x7872=cj6*cj6;
IkReal x7873=r20*r20;
IkReal x7874=r21*r21;
IkReal x7875=r22*r22;
IkReal x7876=(r22*sj5);
IkReal x7877=(cj6*r20);
IkReal x7878=(cj1*sj2);
IkReal x7879=(cj6*r21);
IkReal x7880=(cj5*sj1);
IkReal x7881=(r20*sj6);
IkReal x7882=(r21*sj6);
IkReal x7883=((2.0)*x7881);
IkReal x7884=((1.0)*x7871);
IkReal x7885=(x7872*x7873);
IkReal x7886=(x7872*x7874);
IkReal x7887=(((cj5*x7876*x7883))+(((-1.0)*x7886))+(((-2.0)*x7877*x7882))+(((2.0)*cj5*x7876*x7879))+x7885+x7874+x7875+(((-1.0)*x7884*x7885))+((x7871*x7873))+(((2.0)*x7871*x7877*x7882))+(((-1.0)*x7875*x7884))+((x7871*x7886)));
j4eval[0]=x7887;
j4eval[1]=((IKabs(((((-1.0)*sj1*x7882))+((sj1*x7877))+((x7876*x7878))+((cj5*x7878*x7879))+((cj5*x7878*x7881)))))+(IKabs((((sj1*x7876))+((x7880*x7881))+((x7879*x7880))+((x7878*x7882))+(((-1.0)*x7877*x7878))))));
j4eval[2]=IKsign(x7887);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7888=(cj0*sj6);
IkReal x7889=(cj0*cj6);
IkReal x7890=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x7890;
j4eval[1]=((IKabs((((r20*x7889))+(((-1.0)*r21*x7888)))))+(IKabs((((cj5*r21*x7889))+((cj0*r22*sj5))+((cj5*r20*x7888))))));
j4eval[2]=IKsign(x7890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7891=(r21*sj0);
IkReal x7892=(r20*sj0);
IkReal x7893=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7893;
j4eval[1]=((IKabs(((((-1.0)*sj6*x7891))+((cj6*x7892)))))+(IKabs((((cj5*sj6*x7892))+((cj5*cj6*x7891))+((r22*sj0*sj5))))));
j4eval[2]=IKsign(x7893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7894=cj6*cj6;
IkReal x7895=cj5*cj5;
IkReal x7896=(r02*r22);
IkReal x7897=(r22*sj5);
IkReal x7898=(r00*r20);
IkReal x7899=((1.0)*r21);
IkReal x7900=(r20*sj6);
IkReal x7901=(cj6*r01);
IkReal x7902=(cj0*cj5);
IkReal x7903=(r00*sj6);
IkReal x7904=((1.0)*cj5);
IkReal x7905=(cj6*r21);
IkReal x7906=(cj5*r02*sj5);
IkReal x7907=((1.0)*x7895);
IkReal x7908=(x7894*x7895);
IkReal x7909=((((-1.0)*x7898*x7907))+((x7903*x7905))+(((-1.0)*x7894*x7898))+(((-1.0)*cj6*x7899*x7906))+(((-1.0)*r01*x7899*x7908))+(((-1.0)*x7897*x7903*x7904))+((x7898*x7908))+(((-1.0)*cj6*x7895*x7899*x7903))+((x7895*x7896))+(((-1.0)*x7897*x7901*x7904))+(((-1.0)*r01*x7899))+(((-1.0)*x7900*x7901*x7907))+(((-1.0)*r02*sj5*x7900*x7904))+((x7900*x7901))+((r01*r21*x7894))+(((-1.0)*x7896)));
j4eval[0]=x7909;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x7899)))))+(IKabs((((cj0*x7897))+((x7902*x7905))+((x7900*x7902))))));
j4eval[2]=IKsign(x7909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7910=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7910;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x7910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7911=((1.0)*sj5);
IkReal x7912=(((cj5*r22))+(((-1.0)*cj6*r21*x7911))+(((-1.0)*r20*sj6*x7911)));
j4eval[0]=x7912;
j4eval[1]=IKsign(x7912);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7913=cj6*cj6;
IkReal x7914=cj5*cj5;
IkReal x7915=r10*r10;
IkReal x7916=r11*r11;
IkReal x7917=r12*r12;
IkReal x7918=(r10*sj6);
IkReal x7919=(r12*sj5);
IkReal x7920=((2.0)*cj6*r11);
IkReal x7921=((1.0)*x7915);
IkReal x7922=(x7913*x7916);
IkReal x7923=((((-1.0)*cj5*x7919*x7920))+(((-1.0)*x7917))+(((-1.0)*x7916))+(((-1.0)*x7913*x7921))+x7922+(((-1.0)*x7914*x7921))+((x7913*x7914*x7915))+(((-1.0)*x7914*x7918*x7920))+((x7918*x7920))+(((-1.0)*x7914*x7922))+(((-2.0)*cj5*x7918*x7919))+((x7914*x7917)));
j4eval[0]=x7923;
j4eval[1]=((IKabs((x7919+((cj5*x7918))+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x7923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7924=cj6*cj6;
IkReal x7925=cj5*cj5;
IkReal x7926=r10*r10;
IkReal x7927=r11*r11;
IkReal x7928=r12*r12;
IkReal x7929=(r10*sj6);
IkReal x7930=(r12*sj5);
IkReal x7931=((2.0)*cj6*r11);
IkReal x7932=(x7924*x7927);
IkReal x7933=(x7925*x7926);
CheckValue<IkReal> x7934 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x7930+((cj5*x7929))+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7934.valid){
continue;
}
CheckValue<IkReal> x7935=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7925*x7932))+(((-1.0)*x7927))+(((-1.0)*x7928))+(((-1.0)*x7933))+(((-1.0)*cj5*x7930*x7931))+x7932+((x7924*x7933))+((x7929*x7931))+((x7925*x7928))+(((-1.0)*x7924*x7926))+(((-1.0)*x7925*x7929*x7931))+(((-2.0)*cj5*x7929*x7930)))),-1);
if(!x7935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7934.value)+(((1.5707963267949)*(x7935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7936=IKsin(j4);
IkReal x7937=IKcos(j4);
IkReal x7938=(cj5*cj6);
IkReal x7939=(r11*sj6);
IkReal x7940=(cj6*r20);
IkReal x7941=(cj6*r10);
IkReal x7942=(cj5*sj6);
IkReal x7943=(r01*sj6);
IkReal x7944=(r21*sj6);
IkReal x7945=(cj6*r00);
IkReal x7946=((1.0)*x7937);
IkReal x7947=((1.0)*x7936);
IkReal x7948=(sj5*x7947);
evalcond[0]=((((-1.0)*r21*x7938*x7947))+(((-1.0)*r22*x7948))+(((-1.0)*x7944*x7946))+(((-1.0)*r20*x7942*x7947))+((x7937*x7940)));
evalcond[1]=((((-1.0)*x7939*x7946))+(((-1.0)*r12*x7948))+((x7937*x7941))+(((-1.0)*r10*x7942*x7947))+(((-1.0)*r11*x7938*x7947)));
evalcond[2]=((((-1.0)*r21*x7938*x7946))+(((-1.0)*x7940*x7947))+(((-1.0)*r22*sj5*x7946))+(((-1.0)*r20*x7942*x7946))+((x7936*x7944)));
evalcond[3]=((((-1.0)*r00*x7942*x7946))+(((-1.0)*r02*sj5*x7946))+(((-1.0)*r01*x7938*x7946))+((x7936*x7943))+(((-1.0)*x7945*x7947)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x7942*x7947))+(((-1.0)*r02*x7948))+(((-1.0)*r01*x7938*x7947))+((x7937*x7945))+(((-1.0)*x7943*x7946)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x7946))+(((-1.0)*x7941*x7947))+((x7936*x7939))+(((-1.0)*r10*x7942*x7946))+(((-1.0)*r11*x7938*x7946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7949=((1.0)*sj5);
CheckValue<IkReal> x7950 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7950.valid){
continue;
}
CheckValue<IkReal> x7951=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x7949))+(((-1.0)*r20*sj6*x7949)))),-1);
if(!x7951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7950.value)+(((1.5707963267949)*(x7951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7952=IKsin(j4);
IkReal x7953=IKcos(j4);
IkReal x7954=(cj5*cj6);
IkReal x7955=(r11*sj6);
IkReal x7956=(cj6*r20);
IkReal x7957=(cj6*r10);
IkReal x7958=(cj5*sj6);
IkReal x7959=(r01*sj6);
IkReal x7960=(r21*sj6);
IkReal x7961=(cj6*r00);
IkReal x7962=((1.0)*x7953);
IkReal x7963=((1.0)*x7952);
IkReal x7964=(sj5*x7963);
evalcond[0]=((((-1.0)*r21*x7954*x7963))+(((-1.0)*x7960*x7962))+(((-1.0)*r22*x7964))+(((-1.0)*r20*x7958*x7963))+((x7953*x7956)));
evalcond[1]=((((-1.0)*r10*x7958*x7963))+(((-1.0)*r11*x7954*x7963))+(((-1.0)*x7955*x7962))+(((-1.0)*r12*x7964))+((x7953*x7957)));
evalcond[2]=((((-1.0)*r22*sj5*x7962))+(((-1.0)*x7956*x7963))+(((-1.0)*r21*x7954*x7962))+(((-1.0)*r20*x7958*x7962))+((x7952*x7960)));
evalcond[3]=((((-1.0)*r00*x7958*x7962))+(((-1.0)*r02*sj5*x7962))+(((-1.0)*r01*x7954*x7962))+((x7952*x7959))+(((-1.0)*x7961*x7963)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x7958*x7963))+(((-1.0)*r01*x7954*x7963))+(((-1.0)*r02*x7964))+(((-1.0)*x7959*x7962))+((x7953*x7961)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x7958*x7962))+(((-1.0)*x7957*x7963))+(((-1.0)*r11*x7954*x7962))+(((-1.0)*r12*sj5*x7962))+((x7952*x7955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7965 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7965.valid){
continue;
}
CheckValue<IkReal> x7966=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7965.value)+(((1.5707963267949)*(x7966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7967=IKsin(j4);
IkReal x7968=IKcos(j4);
IkReal x7969=(cj5*cj6);
IkReal x7970=(r11*sj6);
IkReal x7971=(cj6*r20);
IkReal x7972=(cj6*r10);
IkReal x7973=(cj5*sj6);
IkReal x7974=(r01*sj6);
IkReal x7975=(r21*sj6);
IkReal x7976=(cj6*r00);
IkReal x7977=((1.0)*x7968);
IkReal x7978=((1.0)*x7967);
IkReal x7979=(sj5*x7978);
evalcond[0]=((((-1.0)*r22*x7979))+(((-1.0)*x7975*x7977))+(((-1.0)*r20*x7973*x7978))+(((-1.0)*r21*x7969*x7978))+((x7968*x7971)));
evalcond[1]=((((-1.0)*r11*x7969*x7978))+(((-1.0)*x7970*x7977))+(((-1.0)*r10*x7973*x7978))+(((-1.0)*r12*x7979))+((x7968*x7972)));
evalcond[2]=(((x7967*x7975))+(((-1.0)*r20*x7973*x7977))+(((-1.0)*r21*x7969*x7977))+(((-1.0)*r22*sj5*x7977))+(((-1.0)*x7971*x7978)));
evalcond[3]=((((-1.0)*r01*x7969*x7977))+(((-1.0)*r00*x7973*x7977))+(((-1.0)*r02*sj5*x7977))+((x7967*x7974))+(((-1.0)*x7976*x7978)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x7969*x7978))+(((-1.0)*r00*x7973*x7978))+(((-1.0)*r02*x7979))+((x7968*x7976))+(((-1.0)*x7974*x7977)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x7969*x7977))+(((-1.0)*r12*sj5*x7977))+(((-1.0)*r10*x7973*x7977))+((x7967*x7970))+(((-1.0)*x7972*x7978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7980=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7980;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x7980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7981=((1.0)*sj6);
IkReal x7982=(((cj5*r12))+(((-1.0)*r10*sj5*x7981))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x7982;
j4eval[1]=IKsign(x7982);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x7981))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7983=r11*r11;
IkReal x7984=cj5*cj5;
IkReal x7985=cj6*cj6;
IkReal x7986=r10*r10;
IkReal x7987=r12*r12;
IkReal x7988=(r12*sj5);
IkReal x7989=(cj6*r10);
IkReal x7990=((1.0)*x7985);
IkReal x7991=(cj5*cj6*r11);
IkReal x7992=(cj5*r10*sj6);
IkReal x7993=((2.0)*r11*sj6);
IkReal x7994=(x7984*x7986);
IkReal x7995=(((x7984*x7989*x7993))+(((-1.0)*x7984*x7987))+(((-1.0)*x7990*x7994))+(((-1.0)*x7983*x7990))+x7983+x7987+x7994+(((-1.0)*x7989*x7993))+((x7983*x7984*x7985))+(((2.0)*x7988*x7991))+(((2.0)*x7988*x7992))+((x7985*x7986)));
j4eval[0]=x7995;
j4eval[1]=IKsign(x7995);
j4eval[2]=((IKabs((x7988+x7992+x7991)))+(IKabs((x7989+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7996=r11*r11;
IkReal x7997=cj5*cj5;
IkReal x7998=cj6*cj6;
IkReal x7999=r10*r10;
IkReal x8000=r12*r12;
IkReal x8001=(r10*sj6);
IkReal x8002=(r12*sj5);
IkReal x8003=((1.0)*x7998);
IkReal x8004=(cj5*cj6*r11);
IkReal x8005=((2.0)*cj6*r11);
IkReal x8006=(x7997*x7999);
CheckValue<IkReal> x8007=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*x8001*x8002))+(((-1.0)*x7996*x8003))+((x7998*x7999))+x7996+(((-1.0)*x8003*x8006))+(((2.0)*x8002*x8004))+((x7996*x7997*x7998))+(((-1.0)*x7997*x8000))+(((-1.0)*x8001*x8005))+((x7997*x8001*x8005))+x8006+x8000)),-1);
if(!x8007.valid){
continue;
}
CheckValue<IkReal> x8008 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x8001))+x8004+x8002)),IKFAST_ATAN2_MAGTHRESH);
if(!x8008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8007.value)))+(x8008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8009=IKsin(j4);
IkReal x8010=IKcos(j4);
IkReal x8011=(cj5*cj6);
IkReal x8012=(r11*sj6);
IkReal x8013=(cj6*r20);
IkReal x8014=(cj6*r10);
IkReal x8015=(cj5*sj6);
IkReal x8016=(r01*sj6);
IkReal x8017=(r21*sj6);
IkReal x8018=(cj6*r00);
IkReal x8019=((1.0)*x8010);
IkReal x8020=((1.0)*x8009);
IkReal x8021=(sj5*x8020);
evalcond[0]=((((-1.0)*x8017*x8019))+(((-1.0)*r21*x8011*x8020))+((x8010*x8013))+(((-1.0)*r20*x8015*x8020))+(((-1.0)*r22*x8021)));
evalcond[1]=((((-1.0)*r10*x8015*x8020))+(((-1.0)*r12*x8021))+(((-1.0)*x8012*x8019))+(((-1.0)*r11*x8011*x8020))+((x8010*x8014)));
evalcond[2]=((((-1.0)*x8013*x8020))+(((-1.0)*r22*sj5*x8019))+(((-1.0)*r21*x8011*x8019))+((x8009*x8017))+(((-1.0)*r20*x8015*x8019)));
evalcond[3]=((((-1.0)*r01*x8011*x8019))+(((-1.0)*x8018*x8020))+(((-1.0)*r00*x8015*x8019))+((x8009*x8016))+(((-1.0)*r02*sj5*x8019)));
evalcond[4]=((1.0)+(((-1.0)*r01*x8011*x8020))+(((-1.0)*x8016*x8019))+(((-1.0)*r02*x8021))+(((-1.0)*r00*x8015*x8020))+((x8010*x8018)));
evalcond[5]=((1.0)+(((-1.0)*r10*x8015*x8019))+(((-1.0)*r11*x8011*x8019))+(((-1.0)*r12*sj5*x8019))+((x8009*x8012))+(((-1.0)*x8014*x8020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8022=((1.0)*sj6);
CheckValue<IkReal> x8023 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8022))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8023.valid){
continue;
}
CheckValue<IkReal> x8024=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8022)))),-1);
if(!x8024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8023.value)+(((1.5707963267949)*(x8024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8025=IKsin(j4);
IkReal x8026=IKcos(j4);
IkReal x8027=(cj5*cj6);
IkReal x8028=(r11*sj6);
IkReal x8029=(cj6*r20);
IkReal x8030=(cj6*r10);
IkReal x8031=(cj5*sj6);
IkReal x8032=(r01*sj6);
IkReal x8033=(r21*sj6);
IkReal x8034=(cj6*r00);
IkReal x8035=((1.0)*x8026);
IkReal x8036=((1.0)*x8025);
IkReal x8037=(sj5*x8036);
evalcond[0]=(((x8026*x8029))+(((-1.0)*x8033*x8035))+(((-1.0)*r21*x8027*x8036))+(((-1.0)*r22*x8037))+(((-1.0)*r20*x8031*x8036)));
evalcond[1]=((((-1.0)*x8028*x8035))+(((-1.0)*r11*x8027*x8036))+((x8026*x8030))+(((-1.0)*r12*x8037))+(((-1.0)*r10*x8031*x8036)));
evalcond[2]=(((x8025*x8033))+(((-1.0)*r21*x8027*x8035))+(((-1.0)*r22*sj5*x8035))+(((-1.0)*r20*x8031*x8035))+(((-1.0)*x8029*x8036)));
evalcond[3]=((((-1.0)*r01*x8027*x8035))+(((-1.0)*r00*x8031*x8035))+((x8025*x8032))+(((-1.0)*x8034*x8036))+(((-1.0)*r02*sj5*x8035)));
evalcond[4]=((1.0)+(((-1.0)*r01*x8027*x8036))+(((-1.0)*r00*x8031*x8036))+((x8026*x8034))+(((-1.0)*r02*x8037))+(((-1.0)*x8032*x8035)));
evalcond[5]=((1.0)+(((-1.0)*r11*x8027*x8035))+((x8025*x8028))+(((-1.0)*r12*sj5*x8035))+(((-1.0)*r10*x8031*x8035))+(((-1.0)*x8030*x8036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8038=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8038.valid){
continue;
}
CheckValue<IkReal> x8039 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8038.value)))+(x8039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8040=IKsin(j4);
IkReal x8041=IKcos(j4);
IkReal x8042=(cj5*cj6);
IkReal x8043=(r11*sj6);
IkReal x8044=(cj6*r20);
IkReal x8045=(cj6*r10);
IkReal x8046=(cj5*sj6);
IkReal x8047=(r01*sj6);
IkReal x8048=(r21*sj6);
IkReal x8049=(cj6*r00);
IkReal x8050=((1.0)*x8041);
IkReal x8051=((1.0)*x8040);
IkReal x8052=(sj5*x8051);
evalcond[0]=((((-1.0)*r21*x8042*x8051))+(((-1.0)*r20*x8046*x8051))+(((-1.0)*r22*x8052))+((x8041*x8044))+(((-1.0)*x8048*x8050)));
evalcond[1]=((((-1.0)*r12*x8052))+(((-1.0)*r11*x8042*x8051))+(((-1.0)*x8043*x8050))+((x8041*x8045))+(((-1.0)*r10*x8046*x8051)));
evalcond[2]=((((-1.0)*r21*x8042*x8050))+(((-1.0)*r20*x8046*x8050))+((x8040*x8048))+(((-1.0)*r22*sj5*x8050))+(((-1.0)*x8044*x8051)));
evalcond[3]=((((-1.0)*r02*sj5*x8050))+((x8040*x8047))+(((-1.0)*r01*x8042*x8050))+(((-1.0)*x8049*x8051))+(((-1.0)*r00*x8046*x8050)));
evalcond[4]=((1.0)+(((-1.0)*x8047*x8050))+(((-1.0)*r02*x8052))+(((-1.0)*r01*x8042*x8051))+((x8041*x8049))+(((-1.0)*r00*x8046*x8051)));
evalcond[5]=((1.0)+(((-1.0)*x8045*x8051))+(((-1.0)*r11*x8042*x8050))+((x8040*x8043))+(((-1.0)*r12*sj5*x8050))+(((-1.0)*r10*x8046*x8050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8053=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8053;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8054=((1.0)*sj5);
IkReal x8055=((((-1.0)*r20*sj6*x8054))+((cj5*r22))+(((-1.0)*cj6*r21*x8054)));
j4eval[0]=x8055;
j4eval[1]=IKsign(x8055);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8056=cj6*cj6;
IkReal x8057=cj5*cj5;
IkReal x8058=r00*r00;
IkReal x8059=r01*r01;
IkReal x8060=r02*r02;
IkReal x8061=(cj6*r00);
IkReal x8062=(cj5*cj6*r01);
IkReal x8063=((2.0)*r02*sj5);
IkReal x8064=((1.0)*x8056);
IkReal x8065=((2.0)*r01*sj6);
IkReal x8066=(cj5*r00*sj6);
IkReal x8067=(x8057*x8058);
IkReal x8068=((((-1.0)*x8067))+(((-1.0)*x8060))+((x8057*x8060))+((x8061*x8065))+(((-1.0)*x8057*x8059*x8064))+(((-1.0)*x8057*x8061*x8065))+(((-1.0)*x8059))+(((-1.0)*x8058*x8064))+(((-1.0)*x8063*x8066))+(((-1.0)*x8062*x8063))+((x8056*x8067))+((x8056*x8059)));
j4eval[0]=x8068;
j4eval[1]=((IKabs((((r02*sj5))+x8066+x8062)))+(IKabs(((((-1.0)*r01*sj6))+x8061))));
j4eval[2]=IKsign(x8068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8069=cj6*cj6;
IkReal x8070=cj5*cj5;
IkReal x8071=r00*r00;
IkReal x8072=r01*r01;
IkReal x8073=r02*r02;
IkReal x8074=(cj6*r00);
IkReal x8075=(cj5*cj6*r01);
IkReal x8076=((2.0)*r02*sj5);
IkReal x8077=((1.0)*x8069);
IkReal x8078=((2.0)*r01*sj6);
IkReal x8079=(cj5*r00*sj6);
IkReal x8080=(x8070*x8071);
CheckValue<IkReal> x8081=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8072))+(((-1.0)*x8073))+(((-1.0)*x8080))+((x8069*x8072))+(((-1.0)*x8070*x8074*x8078))+((x8069*x8080))+(((-1.0)*x8071*x8077))+(((-1.0)*x8070*x8072*x8077))+(((-1.0)*x8075*x8076))+((x8074*x8078))+((x8070*x8073))+(((-1.0)*x8076*x8079)))),-1);
if(!x8081.valid){
continue;
}
CheckValue<IkReal> x8082 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8074)),IkReal((((r02*sj5))+x8079+x8075)),IKFAST_ATAN2_MAGTHRESH);
if(!x8082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8081.value)))+(x8082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8083=IKsin(j4);
IkReal x8084=IKcos(j4);
IkReal x8085=(cj5*cj6);
IkReal x8086=(r11*sj6);
IkReal x8087=(cj6*r20);
IkReal x8088=(cj6*r10);
IkReal x8089=(cj5*sj6);
IkReal x8090=(r21*sj6);
IkReal x8091=(cj6*r00);
IkReal x8092=(r01*sj6);
IkReal x8093=((1.0)*x8084);
IkReal x8094=((1.0)*x8083);
IkReal x8095=(sj5*x8094);
evalcond[0]=((((-1.0)*r21*x8085*x8094))+(((-1.0)*r20*x8089*x8094))+((x8084*x8087))+(((-1.0)*x8090*x8093))+(((-1.0)*r22*x8095)));
evalcond[1]=((((-1.0)*x8092*x8093))+(((-1.0)*r01*x8085*x8094))+(((-1.0)*r00*x8089*x8094))+(((-1.0)*r02*x8095))+((x8084*x8091)));
evalcond[2]=((((-1.0)*r21*x8085*x8093))+(((-1.0)*r22*sj5*x8093))+(((-1.0)*r20*x8089*x8093))+(((-1.0)*x8087*x8094))+((x8083*x8090)));
evalcond[3]=((((-1.0)*x8088*x8094))+(((-1.0)*r11*x8085*x8093))+(((-1.0)*r12*sj5*x8093))+((x8083*x8086))+(((-1.0)*r10*x8089*x8093)));
evalcond[4]=((1.0)+((x8084*x8088))+(((-1.0)*r11*x8085*x8094))+(((-1.0)*r12*x8095))+(((-1.0)*x8086*x8093))+(((-1.0)*r10*x8089*x8094)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x8085*x8093))+(((-1.0)*r00*x8089*x8093))+(((-1.0)*x8091*x8094))+((x8083*x8092))+(((-1.0)*r02*sj5*x8093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8096=((1.0)*sj5);
CheckValue<IkReal> x8097=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x8096))+(((-1.0)*cj6*r21*x8096)))),-1);
if(!x8097.valid){
continue;
}
CheckValue<IkReal> x8098 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8097.value)))+(x8098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8099=IKsin(j4);
IkReal x8100=IKcos(j4);
IkReal x8101=(cj5*cj6);
IkReal x8102=(r11*sj6);
IkReal x8103=(cj6*r20);
IkReal x8104=(cj6*r10);
IkReal x8105=(cj5*sj6);
IkReal x8106=(r21*sj6);
IkReal x8107=(cj6*r00);
IkReal x8108=(r01*sj6);
IkReal x8109=((1.0)*x8100);
IkReal x8110=((1.0)*x8099);
IkReal x8111=(sj5*x8110);
evalcond[0]=(((x8100*x8103))+(((-1.0)*r21*x8101*x8110))+(((-1.0)*r20*x8105*x8110))+(((-1.0)*x8106*x8109))+(((-1.0)*r22*x8111)));
evalcond[1]=((((-1.0)*x8108*x8109))+(((-1.0)*r01*x8101*x8110))+((x8100*x8107))+(((-1.0)*r02*x8111))+(((-1.0)*r00*x8105*x8110)));
evalcond[2]=((((-1.0)*r21*x8101*x8109))+(((-1.0)*x8103*x8110))+(((-1.0)*r22*sj5*x8109))+(((-1.0)*r20*x8105*x8109))+((x8099*x8106)));
evalcond[3]=((((-1.0)*x8104*x8110))+(((-1.0)*r11*x8101*x8109))+(((-1.0)*r10*x8105*x8109))+(((-1.0)*r12*sj5*x8109))+((x8099*x8102)));
evalcond[4]=((1.0)+(((-1.0)*r11*x8101*x8110))+((x8100*x8104))+(((-1.0)*r12*x8111))+(((-1.0)*r10*x8105*x8110))+(((-1.0)*x8102*x8109)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x8105*x8109))+(((-1.0)*r01*x8101*x8109))+(((-1.0)*r02*sj5*x8109))+((x8099*x8108))+(((-1.0)*x8107*x8110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8112 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8112.valid){
continue;
}
CheckValue<IkReal> x8113=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8112.value)+(((1.5707963267949)*(x8113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8114=IKsin(j4);
IkReal x8115=IKcos(j4);
IkReal x8116=(cj5*cj6);
IkReal x8117=(r11*sj6);
IkReal x8118=(cj6*r20);
IkReal x8119=(cj6*r10);
IkReal x8120=(cj5*sj6);
IkReal x8121=(r21*sj6);
IkReal x8122=(cj6*r00);
IkReal x8123=(r01*sj6);
IkReal x8124=((1.0)*x8115);
IkReal x8125=((1.0)*x8114);
IkReal x8126=(sj5*x8125);
evalcond[0]=(((x8115*x8118))+(((-1.0)*x8121*x8124))+(((-1.0)*r22*x8126))+(((-1.0)*r21*x8116*x8125))+(((-1.0)*r20*x8120*x8125)));
evalcond[1]=(((x8115*x8122))+(((-1.0)*x8123*x8124))+(((-1.0)*r01*x8116*x8125))+(((-1.0)*r02*x8126))+(((-1.0)*r00*x8120*x8125)));
evalcond[2]=(((x8114*x8121))+(((-1.0)*r22*sj5*x8124))+(((-1.0)*x8118*x8125))+(((-1.0)*r21*x8116*x8124))+(((-1.0)*r20*x8120*x8124)));
evalcond[3]=(((x8114*x8117))+(((-1.0)*r12*sj5*x8124))+(((-1.0)*r11*x8116*x8124))+(((-1.0)*x8119*x8125))+(((-1.0)*r10*x8120*x8124)));
evalcond[4]=((1.0)+((x8115*x8119))+(((-1.0)*r12*x8126))+(((-1.0)*x8117*x8124))+(((-1.0)*r11*x8116*x8125))+(((-1.0)*r10*x8120*x8125)));
evalcond[5]=((-1.0)+((x8114*x8123))+(((-1.0)*x8122*x8125))+(((-1.0)*r01*x8116*x8124))+(((-1.0)*r00*x8120*x8124))+(((-1.0)*r02*sj5*x8124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8127=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8127;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x8127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8128=((1.0)*sj6);
IkReal x8129=((((-1.0)*r00*sj5*x8128))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x8129;
j4eval[1]=IKsign(x8129);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8128))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8130=cj6*cj6;
IkReal x8131=r01*r01;
IkReal x8132=cj5*cj5;
IkReal x8133=r00*r00;
IkReal x8134=r02*r02;
IkReal x8135=(cj6*r00);
IkReal x8136=(r02*sj5);
IkReal x8137=(cj5*cj6*r01);
IkReal x8138=((2.0)*r01*sj6);
IkReal x8139=(cj5*r00*sj6);
IkReal x8140=((1.0)*x8132);
IkReal x8141=(x8130*x8133);
IkReal x8142=(x8130*x8131);
IkReal x8143=(((x8132*x8135*x8138))+((x8132*x8133))+(((-1.0)*x8140*x8141))+(((2.0)*x8136*x8139))+(((2.0)*x8136*x8137))+(((-1.0)*x8134*x8140))+((x8132*x8142))+(((-1.0)*x8142))+x8141+x8134+x8131+(((-1.0)*x8135*x8138)));
j4eval[0]=x8143;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x8135)))+(IKabs((x8139+x8136+x8137))));
j4eval[2]=IKsign(x8143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8144=cj6*cj6;
IkReal x8145=r01*r01;
IkReal x8146=cj5*cj5;
IkReal x8147=r00*r00;
IkReal x8148=r02*r02;
IkReal x8149=(cj6*r00);
IkReal x8150=((2.0)*r01);
IkReal x8151=(cj5*cj6);
IkReal x8152=(r02*sj5);
IkReal x8153=(cj5*r00*sj6);
IkReal x8154=(x8146*x8147);
IkReal x8155=(x8144*x8145);
CheckValue<IkReal> x8156=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8144*x8154))+((sj6*x8146*x8149*x8150))+((x8150*x8151*x8152))+(((-1.0)*sj6*x8149*x8150))+(((-1.0)*x8146*x8148))+((x8144*x8147))+(((-1.0)*x8155))+(((2.0)*x8152*x8153))+x8154+x8148+x8145+((x8146*x8155)))),-1);
if(!x8156.valid){
continue;
}
CheckValue<IkReal> x8157 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8149)),IkReal((((r01*x8151))+x8152+x8153)),IKFAST_ATAN2_MAGTHRESH);
if(!x8157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8156.value)))+(x8157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8158=IKsin(j4);
IkReal x8159=IKcos(j4);
IkReal x8160=(cj5*cj6);
IkReal x8161=(r11*sj6);
IkReal x8162=(cj6*r20);
IkReal x8163=(cj6*r10);
IkReal x8164=(cj5*sj6);
IkReal x8165=(r21*sj6);
IkReal x8166=(cj6*r00);
IkReal x8167=(r01*sj6);
IkReal x8168=((1.0)*x8159);
IkReal x8169=((1.0)*x8158);
IkReal x8170=(sj5*x8169);
evalcond[0]=((((-1.0)*x8165*x8168))+(((-1.0)*r21*x8160*x8169))+((x8159*x8162))+(((-1.0)*r22*x8170))+(((-1.0)*r20*x8164*x8169)));
evalcond[1]=((((-1.0)*x8167*x8168))+(((-1.0)*r00*x8164*x8169))+(((-1.0)*r01*x8160*x8169))+((x8159*x8166))+(((-1.0)*r02*x8170)));
evalcond[2]=(((x8158*x8165))+(((-1.0)*r21*x8160*x8168))+(((-1.0)*x8162*x8169))+(((-1.0)*r20*x8164*x8168))+(((-1.0)*r22*sj5*x8168)));
evalcond[3]=(((x8158*x8161))+(((-1.0)*r11*x8160*x8168))+(((-1.0)*x8163*x8169))+(((-1.0)*r12*sj5*x8168))+(((-1.0)*r10*x8164*x8168)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x8170))+(((-1.0)*r11*x8160*x8169))+(((-1.0)*x8161*x8168))+((x8159*x8163))+(((-1.0)*r10*x8164*x8169)));
evalcond[5]=((1.0)+((x8158*x8167))+(((-1.0)*x8166*x8169))+(((-1.0)*r02*sj5*x8168))+(((-1.0)*r00*x8164*x8168))+(((-1.0)*r01*x8160*x8168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8171=((1.0)*sj6);
CheckValue<IkReal> x8172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x8171))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x8172.valid){
continue;
}
CheckValue<IkReal> x8173 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8171))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8172.value)))+(x8173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8174=IKsin(j4);
IkReal x8175=IKcos(j4);
IkReal x8176=(cj5*cj6);
IkReal x8177=(r11*sj6);
IkReal x8178=(cj6*r20);
IkReal x8179=(cj6*r10);
IkReal x8180=(cj5*sj6);
IkReal x8181=(r21*sj6);
IkReal x8182=(cj6*r00);
IkReal x8183=(r01*sj6);
IkReal x8184=((1.0)*x8175);
IkReal x8185=((1.0)*x8174);
IkReal x8186=(sj5*x8185);
evalcond[0]=((((-1.0)*r20*x8180*x8185))+(((-1.0)*r22*x8186))+(((-1.0)*r21*x8176*x8185))+(((-1.0)*x8181*x8184))+((x8175*x8178)));
evalcond[1]=((((-1.0)*r02*x8186))+(((-1.0)*r01*x8176*x8185))+(((-1.0)*r00*x8180*x8185))+(((-1.0)*x8183*x8184))+((x8175*x8182)));
evalcond[2]=((((-1.0)*r20*x8180*x8184))+(((-1.0)*r21*x8176*x8184))+((x8174*x8181))+(((-1.0)*r22*sj5*x8184))+(((-1.0)*x8178*x8185)));
evalcond[3]=(((x8174*x8177))+(((-1.0)*x8179*x8185))+(((-1.0)*r12*sj5*x8184))+(((-1.0)*r11*x8176*x8184))+(((-1.0)*r10*x8180*x8184)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x8176*x8185))+(((-1.0)*r12*x8186))+(((-1.0)*r10*x8180*x8185))+(((-1.0)*x8177*x8184))+((x8175*x8179)));
evalcond[5]=((1.0)+(((-1.0)*r01*x8176*x8184))+(((-1.0)*r00*x8180*x8184))+(((-1.0)*x8182*x8185))+(((-1.0)*r02*sj5*x8184))+((x8174*x8183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8187=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8187.valid){
continue;
}
CheckValue<IkReal> x8188 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8187.value)))+(x8188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8189=IKsin(j4);
IkReal x8190=IKcos(j4);
IkReal x8191=(cj5*cj6);
IkReal x8192=(r11*sj6);
IkReal x8193=(cj6*r20);
IkReal x8194=(cj6*r10);
IkReal x8195=(cj5*sj6);
IkReal x8196=(r21*sj6);
IkReal x8197=(cj6*r00);
IkReal x8198=(r01*sj6);
IkReal x8199=((1.0)*x8190);
IkReal x8200=((1.0)*x8189);
IkReal x8201=(sj5*x8200);
evalcond[0]=((((-1.0)*x8196*x8199))+(((-1.0)*r20*x8195*x8200))+((x8190*x8193))+(((-1.0)*r22*x8201))+(((-1.0)*r21*x8191*x8200)));
evalcond[1]=((((-1.0)*r00*x8195*x8200))+(((-1.0)*r02*x8201))+((x8190*x8197))+(((-1.0)*r01*x8191*x8200))+(((-1.0)*x8198*x8199)));
evalcond[2]=((((-1.0)*r21*x8191*x8199))+(((-1.0)*r20*x8195*x8199))+(((-1.0)*x8193*x8200))+(((-1.0)*r22*sj5*x8199))+((x8189*x8196)));
evalcond[3]=((((-1.0)*x8194*x8200))+(((-1.0)*r10*x8195*x8199))+(((-1.0)*r12*sj5*x8199))+(((-1.0)*r11*x8191*x8199))+((x8189*x8192)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x8195*x8200))+(((-1.0)*r12*x8201))+((x8190*x8194))+(((-1.0)*x8192*x8199))+(((-1.0)*r11*x8191*x8200)));
evalcond[5]=((1.0)+(((-1.0)*r01*x8191*x8199))+(((-1.0)*r00*x8195*x8199))+(((-1.0)*r02*sj5*x8199))+((x8189*x8198))+(((-1.0)*x8197*x8200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8202=cj6*cj6;
IkReal x8203=cj5*cj5;
IkReal x8204=(r22*sj5);
IkReal x8205=(cj0*r20);
IkReal x8206=((1.0)*r21);
IkReal x8207=(cj5*sj6);
IkReal x8208=(r02*r22);
IkReal x8209=(cj5*cj6);
IkReal x8210=(r02*sj5);
IkReal x8211=(cj6*sj6);
IkReal x8212=((1.0)*r20);
IkReal x8213=(r01*x8206);
IkReal x8214=(r00*r20*x8203);
CheckValue<IkReal> x8215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8203*x8211*x8212))+(((-1.0)*r00*x8203*x8212))+(((-1.0)*r01*x8204*x8209))+(((-1.0)*r00*x8204*x8207))+(((-1.0)*r00*x8202*x8212))+((r01*r20*x8211))+(((-1.0)*x8213))+((x8203*x8208))+((x8202*x8214))+((r01*r21*x8202))+(((-1.0)*x8202*x8203*x8213))+(((-1.0)*x8208))+((r00*r21*x8211))+(((-1.0)*r00*x8203*x8206*x8211))+(((-1.0)*x8206*x8209*x8210))+(((-1.0)*x8207*x8210*x8212)))),-1);
if(!x8215.valid){
continue;
}
CheckValue<IkReal> x8216 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj6*x8206))+((cj6*x8205)))),IkReal((((cj0*r21*x8209))+((x8205*x8207))+((cj0*x8204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8215.value)))+(x8216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8217=IKsin(j4);
IkReal x8218=IKcos(j4);
IkReal x8219=((1.0)*sj0);
IkReal x8220=((1.0)*cj6);
IkReal x8221=((1.0)*sj6);
IkReal x8222=(cj5*x8218);
IkReal x8223=(r20*x8217);
IkReal x8224=(cj6*x8218);
IkReal x8225=(r11*x8217);
IkReal x8226=(r21*x8217);
IkReal x8227=(r01*x8217);
IkReal x8228=((1.0)*sj5*x8217);
IkReal x8229=((1.0)*sj5*x8218);
IkReal x8230=(cj5*x8217*x8221);
evalcond[0]=(((r20*x8224))+(((-1.0)*cj5*x8220*x8226))+(((-1.0)*r21*x8218*x8221))+(((-1.0)*r22*x8228))+(((-1.0)*cj5*x8221*x8223)));
evalcond[1]=((((-1.0)*x8220*x8223))+((sj6*x8226))+(((-1.0)*r20*x8221*x8222))+(((-1.0)*r21*x8220*x8222))+(((-1.0)*r22*x8229)));
evalcond[2]=((((-1.0)*r11*x8218*x8221))+cj0+(((-1.0)*cj5*x8220*x8225))+(((-1.0)*r12*x8228))+((r10*x8224))+(((-1.0)*r10*x8230)));
evalcond[3]=((((-1.0)*r01*x8218*x8221))+(((-1.0)*r02*x8228))+(((-1.0)*cj5*x8220*x8227))+(((-1.0)*x8219))+((r00*x8224))+(((-1.0)*r00*x8230)));
evalcond[4]=(((sj6*x8227))+(((-1.0)*r01*x8220*x8222))+(((-1.0)*r02*x8229))+(((-1.0)*r00*x8221*x8222))+(((-1.0)*r00*x8217*x8220))+(((-1.0)*cj0)));
evalcond[5]=(((sj6*x8225))+(((-1.0)*r10*x8221*x8222))+(((-1.0)*x8219))+(((-1.0)*r12*x8229))+(((-1.0)*r10*x8217*x8220))+(((-1.0)*r11*x8220*x8222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8231=(cj5*sj0);
CheckValue<IkReal> x8232=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8232.valid){
continue;
}
CheckValue<IkReal> x8233 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r22*sj0*sj5))+((cj6*r21*x8231))+((r20*sj6*x8231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8232.value)))+(x8233.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8234=IKsin(j4);
IkReal x8235=IKcos(j4);
IkReal x8236=((1.0)*sj0);
IkReal x8237=((1.0)*cj6);
IkReal x8238=((1.0)*sj6);
IkReal x8239=(cj5*x8235);
IkReal x8240=(r20*x8234);
IkReal x8241=(cj6*x8235);
IkReal x8242=(r11*x8234);
IkReal x8243=(r21*x8234);
IkReal x8244=(r01*x8234);
IkReal x8245=((1.0)*sj5*x8234);
IkReal x8246=((1.0)*sj5*x8235);
IkReal x8247=(cj5*x8234*x8238);
evalcond[0]=(((r20*x8241))+(((-1.0)*r21*x8235*x8238))+(((-1.0)*r22*x8245))+(((-1.0)*cj5*x8238*x8240))+(((-1.0)*cj5*x8237*x8243)));
evalcond[1]=((((-1.0)*r22*x8246))+(((-1.0)*x8237*x8240))+((sj6*x8243))+(((-1.0)*r20*x8238*x8239))+(((-1.0)*r21*x8237*x8239)));
evalcond[2]=(((r10*x8241))+cj0+(((-1.0)*r10*x8247))+(((-1.0)*r11*x8235*x8238))+(((-1.0)*r12*x8245))+(((-1.0)*cj5*x8237*x8242)));
evalcond[3]=((((-1.0)*r00*x8247))+(((-1.0)*r01*x8235*x8238))+(((-1.0)*x8236))+(((-1.0)*r02*x8245))+((r00*x8241))+(((-1.0)*cj5*x8237*x8244)));
evalcond[4]=((((-1.0)*r00*x8238*x8239))+(((-1.0)*r01*x8237*x8239))+(((-1.0)*r00*x8234*x8237))+((sj6*x8244))+(((-1.0)*r02*x8246))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r10*x8234*x8237))+(((-1.0)*x8236))+((sj6*x8242))+(((-1.0)*r11*x8237*x8239))+(((-1.0)*r10*x8238*x8239))+(((-1.0)*r12*x8246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8248=(cj0*sj6);
IkReal x8249=(cj0*cj6);
CheckValue<IkReal> x8250 = IKatan2WithCheck(IkReal((((r20*x8249))+(((-1.0)*r21*x8248)))),IkReal((((cj5*r21*x8249))+((cj5*r20*x8248))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8250.valid){
continue;
}
CheckValue<IkReal> x8251=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8250.value)+(((1.5707963267949)*(x8251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8252=IKsin(j4);
IkReal x8253=IKcos(j4);
IkReal x8254=((1.0)*sj0);
IkReal x8255=((1.0)*cj6);
IkReal x8256=((1.0)*sj6);
IkReal x8257=(cj5*x8253);
IkReal x8258=(r20*x8252);
IkReal x8259=(cj6*x8253);
IkReal x8260=(r11*x8252);
IkReal x8261=(r21*x8252);
IkReal x8262=(r01*x8252);
IkReal x8263=((1.0)*sj5*x8252);
IkReal x8264=((1.0)*sj5*x8253);
IkReal x8265=(cj5*x8252*x8256);
evalcond[0]=((((-1.0)*r21*x8253*x8256))+((r20*x8259))+(((-1.0)*r22*x8263))+(((-1.0)*cj5*x8255*x8261))+(((-1.0)*cj5*x8256*x8258)));
evalcond[1]=((((-1.0)*x8255*x8258))+(((-1.0)*r22*x8264))+(((-1.0)*r21*x8255*x8257))+(((-1.0)*r20*x8256*x8257))+((sj6*x8261)));
evalcond[2]=((((-1.0)*r12*x8263))+((r10*x8259))+cj0+(((-1.0)*r10*x8265))+(((-1.0)*r11*x8253*x8256))+(((-1.0)*cj5*x8255*x8260)));
evalcond[3]=(((r00*x8259))+(((-1.0)*x8254))+(((-1.0)*r01*x8253*x8256))+(((-1.0)*r02*x8263))+(((-1.0)*cj5*x8255*x8262))+(((-1.0)*r00*x8265)));
evalcond[4]=((((-1.0)*r00*x8256*x8257))+(((-1.0)*r00*x8252*x8255))+(((-1.0)*r02*x8264))+(((-1.0)*r01*x8255*x8257))+((sj6*x8262))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x8264))+(((-1.0)*x8254))+(((-1.0)*r10*x8252*x8255))+(((-1.0)*r11*x8255*x8257))+(((-1.0)*r10*x8256*x8257))+((sj6*x8260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8266=(r20*sj0);
IkReal x8267=((1.0)*sj5);
IkReal x8268=(r21*sj0);
IkReal x8269=(((cj5*r12))+(((-1.0)*cj6*r11*x8267))+(((-1.0)*r10*sj6*x8267)));
j4eval[0]=x8269;
j4eval[1]=IKsign(x8269);
j4eval[2]=((IKabs((((cj5*cj6*x8268))+((r22*sj0*sj5))+((cj5*sj6*x8266)))))+(IKabs(((((-1.0)*sj6*x8268))+((cj6*x8266))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8270=(cj0*sj6);
IkReal x8271=((1.0)*sj5);
IkReal x8272=(cj0*cj6);
IkReal x8273=((((-1.0)*cj6*r01*x8271))+(((-1.0)*r00*sj6*x8271))+((cj5*r02)));
j4eval[0]=x8273;
j4eval[1]=IKsign(x8273);
j4eval[2]=((IKabs((((r20*x8272))+(((-1.0)*r21*x8270)))))+(IKabs((((cj5*r21*x8272))+((cj5*r20*x8270))+((cj0*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8274=cj6*cj6;
IkReal x8275=cj5*cj5;
IkReal x8276=(r02*r22);
IkReal x8277=(r22*sj5);
IkReal x8278=(r00*r20);
IkReal x8279=((1.0)*r21);
IkReal x8280=(r20*sj6);
IkReal x8281=(cj6*r01);
IkReal x8282=(cj0*cj5);
IkReal x8283=(r00*sj6);
IkReal x8284=((1.0)*cj5);
IkReal x8285=(cj6*r21);
IkReal x8286=(cj5*r02*sj5);
IkReal x8287=((1.0)*x8275);
IkReal x8288=(x8274*x8275);
IkReal x8289=(((x8275*x8276))+(((-1.0)*x8277*x8281*x8284))+((r01*r21*x8274))+(((-1.0)*x8277*x8283*x8284))+(((-1.0)*cj6*x8275*x8279*x8283))+(((-1.0)*r02*sj5*x8280*x8284))+(((-1.0)*x8274*x8278))+((x8278*x8288))+(((-1.0)*x8280*x8281*x8287))+(((-1.0)*x8278*x8287))+(((-1.0)*r01*x8279*x8288))+(((-1.0)*cj6*x8279*x8286))+((x8283*x8285))+(((-1.0)*x8276))+(((-1.0)*r01*x8279))+((x8280*x8281)));
j4eval[0]=x8289;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x8279)))))+(IKabs((((cj0*x8277))+((x8282*x8285))+((x8280*x8282))))));
j4eval[2]=IKsign(x8289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8290=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8290;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x8290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8291=((1.0)*sj6);
IkReal x8292=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8291)));
j4eval[0]=x8292;
j4eval[1]=IKsign(x8292);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8291))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8293=cj6*cj6;
IkReal x8294=cj5*cj5;
IkReal x8295=r10*r10;
IkReal x8296=r11*r11;
IkReal x8297=r12*r12;
IkReal x8298=(r10*sj6);
IkReal x8299=(r12*sj5);
IkReal x8300=((2.0)*cj6*r11);
IkReal x8301=((1.0)*x8295);
IkReal x8302=(x8293*x8296);
IkReal x8303=(x8302+(((-1.0)*x8294*x8298*x8300))+(((-2.0)*cj5*x8298*x8299))+(((-1.0)*x8297))+(((-1.0)*x8296))+(((-1.0)*cj5*x8299*x8300))+(((-1.0)*x8294*x8302))+((x8294*x8297))+(((-1.0)*x8293*x8301))+((x8298*x8300))+((x8293*x8294*x8295))+(((-1.0)*x8294*x8301)));
j4eval[0]=x8303;
j4eval[1]=((IKabs(((((-1.0)*r11*sj6))+((cj6*r10)))))+(IKabs((((cj5*cj6*r11))+((cj5*x8298))+x8299))));
j4eval[2]=IKsign(x8303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8304=cj6*cj6;
IkReal x8305=cj5*cj5;
IkReal x8306=r10*r10;
IkReal x8307=r11*r11;
IkReal x8308=r12*r12;
IkReal x8309=(r10*sj6);
IkReal x8310=(r12*sj5);
IkReal x8311=((2.0)*cj6*r11);
IkReal x8312=(x8304*x8307);
IkReal x8313=(x8305*x8306);
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x8310+((cj5*cj6*r11))+((cj5*x8309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
CheckValue<IkReal> x8315=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8305*x8312))+x8312+((x8305*x8308))+(((-1.0)*x8304*x8306))+(((-2.0)*cj5*x8309*x8310))+(((-1.0)*cj5*x8310*x8311))+(((-1.0)*x8305*x8309*x8311))+((x8304*x8313))+(((-1.0)*x8313))+((x8309*x8311))+(((-1.0)*x8307))+(((-1.0)*x8308)))),-1);
if(!x8315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8314.value)+(((1.5707963267949)*(x8315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8316=IKsin(j4);
IkReal x8317=IKcos(j4);
IkReal x8318=(cj5*cj6);
IkReal x8319=(r11*sj6);
IkReal x8320=(cj6*r20);
IkReal x8321=(cj6*r10);
IkReal x8322=(cj5*sj6);
IkReal x8323=(r01*sj6);
IkReal x8324=(r21*sj6);
IkReal x8325=(cj6*r00);
IkReal x8326=((1.0)*x8317);
IkReal x8327=((1.0)*x8316);
IkReal x8328=(sj5*x8327);
evalcond[0]=(((x8317*x8320))+(((-1.0)*r22*x8328))+(((-1.0)*r20*x8322*x8327))+(((-1.0)*r21*x8318*x8327))+(((-1.0)*x8324*x8326)));
evalcond[1]=((((-1.0)*r10*x8322*x8327))+((x8317*x8321))+(((-1.0)*r11*x8318*x8327))+(((-1.0)*r12*x8328))+(((-1.0)*x8319*x8326)));
evalcond[2]=(((x8316*x8324))+(((-1.0)*r20*x8322*x8326))+(((-1.0)*r22*sj5*x8326))+(((-1.0)*r21*x8318*x8326))+(((-1.0)*x8320*x8327)));
evalcond[3]=((((-1.0)*r01*x8318*x8326))+((x8316*x8323))+(((-1.0)*x8325*x8327))+(((-1.0)*r02*sj5*x8326))+(((-1.0)*r00*x8322*x8326)));
evalcond[4]=((1.0)+(((-1.0)*r01*x8318*x8327))+((x8317*x8325))+(((-1.0)*r00*x8322*x8327))+(((-1.0)*x8323*x8326))+(((-1.0)*r02*x8328)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x8322*x8326))+(((-1.0)*r11*x8318*x8326))+(((-1.0)*r12*sj5*x8326))+((x8316*x8319))+(((-1.0)*x8321*x8327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8329=((1.0)*sj6);
CheckValue<IkReal> x8330 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8329))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8330.valid){
continue;
}
CheckValue<IkReal> x8331=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8329)))),-1);
if(!x8331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8330.value)+(((1.5707963267949)*(x8331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8332=IKsin(j4);
IkReal x8333=IKcos(j4);
IkReal x8334=(cj5*cj6);
IkReal x8335=(r11*sj6);
IkReal x8336=(cj6*r20);
IkReal x8337=(cj6*r10);
IkReal x8338=(cj5*sj6);
IkReal x8339=(r01*sj6);
IkReal x8340=(r21*sj6);
IkReal x8341=(cj6*r00);
IkReal x8342=((1.0)*x8333);
IkReal x8343=((1.0)*x8332);
IkReal x8344=(sj5*x8343);
evalcond[0]=(((x8333*x8336))+(((-1.0)*r21*x8334*x8343))+(((-1.0)*x8340*x8342))+(((-1.0)*r22*x8344))+(((-1.0)*r20*x8338*x8343)));
evalcond[1]=(((x8333*x8337))+(((-1.0)*x8335*x8342))+(((-1.0)*r11*x8334*x8343))+(((-1.0)*r10*x8338*x8343))+(((-1.0)*r12*x8344)));
evalcond[2]=((((-1.0)*r22*sj5*x8342))+(((-1.0)*r21*x8334*x8342))+(((-1.0)*x8336*x8343))+((x8332*x8340))+(((-1.0)*r20*x8338*x8342)));
evalcond[3]=((((-1.0)*r00*x8338*x8342))+(((-1.0)*r02*sj5*x8342))+(((-1.0)*r01*x8334*x8342))+((x8332*x8339))+(((-1.0)*x8341*x8343)));
evalcond[4]=((1.0)+(((-1.0)*x8339*x8342))+(((-1.0)*r00*x8338*x8343))+(((-1.0)*r01*x8334*x8343))+(((-1.0)*r02*x8344))+((x8333*x8341)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x8342))+((x8332*x8335))+(((-1.0)*r11*x8334*x8342))+(((-1.0)*r10*x8338*x8342))+(((-1.0)*x8337*x8343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8345=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8345.valid){
continue;
}
CheckValue<IkReal> x8346 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8345.value)))+(x8346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8347=IKsin(j4);
IkReal x8348=IKcos(j4);
IkReal x8349=(cj5*cj6);
IkReal x8350=(r11*sj6);
IkReal x8351=(cj6*r20);
IkReal x8352=(cj6*r10);
IkReal x8353=(cj5*sj6);
IkReal x8354=(r01*sj6);
IkReal x8355=(r21*sj6);
IkReal x8356=(cj6*r00);
IkReal x8357=((1.0)*x8348);
IkReal x8358=((1.0)*x8347);
IkReal x8359=(sj5*x8358);
evalcond[0]=(((x8348*x8351))+(((-1.0)*r22*x8359))+(((-1.0)*r20*x8353*x8358))+(((-1.0)*x8355*x8357))+(((-1.0)*r21*x8349*x8358)));
evalcond[1]=((((-1.0)*r11*x8349*x8358))+((x8348*x8352))+(((-1.0)*r12*x8359))+(((-1.0)*x8350*x8357))+(((-1.0)*r10*x8353*x8358)));
evalcond[2]=((((-1.0)*r22*sj5*x8357))+(((-1.0)*r20*x8353*x8357))+(((-1.0)*x8351*x8358))+((x8347*x8355))+(((-1.0)*r21*x8349*x8357)));
evalcond[3]=((((-1.0)*r02*sj5*x8357))+(((-1.0)*r01*x8349*x8357))+(((-1.0)*r00*x8353*x8357))+((x8347*x8354))+(((-1.0)*x8356*x8358)));
evalcond[4]=((1.0)+(((-1.0)*x8354*x8357))+((x8348*x8356))+(((-1.0)*r02*x8359))+(((-1.0)*r01*x8349*x8358))+(((-1.0)*r00*x8353*x8358)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x8349*x8357))+(((-1.0)*x8352*x8358))+(((-1.0)*r10*x8353*x8357))+((x8347*x8350))+(((-1.0)*r12*sj5*x8357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8360=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x8360;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8361=((1.0)*sj5);
IkReal x8362=((((-1.0)*r20*sj6*x8361))+((cj5*r22))+(((-1.0)*cj6*r21*x8361)));
j4eval[0]=x8362;
j4eval[1]=IKsign(x8362);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8363=r11*r11;
IkReal x8364=cj5*cj5;
IkReal x8365=cj6*cj6;
IkReal x8366=r10*r10;
IkReal x8367=r12*r12;
IkReal x8368=(r12*sj5);
IkReal x8369=(cj6*r10);
IkReal x8370=((1.0)*x8365);
IkReal x8371=(cj5*cj6*r11);
IkReal x8372=(cj5*r10*sj6);
IkReal x8373=((2.0)*r11*sj6);
IkReal x8374=(x8364*x8366);
IkReal x8375=(x8363+x8367+x8374+((x8364*x8369*x8373))+(((2.0)*x8368*x8372))+(((2.0)*x8368*x8371))+(((-1.0)*x8369*x8373))+(((-1.0)*x8370*x8374))+(((-1.0)*x8364*x8367))+(((-1.0)*x8363*x8370))+((x8365*x8366))+((x8363*x8364*x8365)));
j4eval[0]=x8375;
j4eval[1]=IKsign(x8375);
j4eval[2]=((IKabs((x8368+x8372+x8371)))+(IKabs((x8369+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8376=r11*r11;
IkReal x8377=cj5*cj5;
IkReal x8378=cj6*cj6;
IkReal x8379=r10*r10;
IkReal x8380=r12*r12;
IkReal x8381=(r10*sj6);
IkReal x8382=(r12*sj5);
IkReal x8383=((1.0)*x8378);
IkReal x8384=(cj5*cj6*r11);
IkReal x8385=((2.0)*cj6*r11);
IkReal x8386=(x8377*x8379);
CheckValue<IkReal> x8387=IKPowWithIntegerCheck(IKsign((x8376+x8386+x8380+(((-1.0)*x8381*x8385))+(((2.0)*x8382*x8384))+(((-1.0)*x8376*x8383))+((x8377*x8381*x8385))+(((-1.0)*x8383*x8386))+((x8376*x8377*x8378))+(((2.0)*cj5*x8381*x8382))+(((-1.0)*x8377*x8380))+((x8378*x8379)))),-1);
if(!x8387.valid){
continue;
}
CheckValue<IkReal> x8388 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x8384+x8382+((cj5*x8381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8387.value)))+(x8388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8389=IKsin(j4);
IkReal x8390=IKcos(j4);
IkReal x8391=(cj5*cj6);
IkReal x8392=(r11*sj6);
IkReal x8393=(cj6*r20);
IkReal x8394=(cj6*r10);
IkReal x8395=(cj5*sj6);
IkReal x8396=(r01*sj6);
IkReal x8397=(r21*sj6);
IkReal x8398=(cj6*r00);
IkReal x8399=((1.0)*x8390);
IkReal x8400=((1.0)*x8389);
IkReal x8401=(sj5*x8400);
evalcond[0]=((((-1.0)*r20*x8395*x8400))+((x8390*x8393))+(((-1.0)*r21*x8391*x8400))+(((-1.0)*r22*x8401))+(((-1.0)*x8397*x8399)));
evalcond[1]=((((-1.0)*r10*x8395*x8400))+(((-1.0)*r11*x8391*x8400))+((x8390*x8394))+(((-1.0)*r12*x8401))+(((-1.0)*x8392*x8399)));
evalcond[2]=((((-1.0)*x8393*x8400))+((x8389*x8397))+(((-1.0)*r22*sj5*x8399))+(((-1.0)*r21*x8391*x8399))+(((-1.0)*r20*x8395*x8399)));
evalcond[3]=((((-1.0)*r00*x8395*x8399))+(((-1.0)*r01*x8391*x8399))+(((-1.0)*r02*sj5*x8399))+((x8389*x8396))+(((-1.0)*x8398*x8400)));
evalcond[4]=((-1.0)+((x8390*x8398))+(((-1.0)*r02*x8401))+(((-1.0)*r01*x8391*x8400))+(((-1.0)*r00*x8395*x8400))+(((-1.0)*x8396*x8399)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x8399))+(((-1.0)*r10*x8395*x8399))+((x8389*x8392))+(((-1.0)*r11*x8391*x8399))+(((-1.0)*x8394*x8400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8402=((1.0)*sj5);
CheckValue<IkReal> x8403=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x8402))+(((-1.0)*cj6*r21*x8402)))),-1);
if(!x8403.valid){
continue;
}
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8403.value)))+(x8404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8405=IKsin(j4);
IkReal x8406=IKcos(j4);
IkReal x8407=(cj5*cj6);
IkReal x8408=(r11*sj6);
IkReal x8409=(cj6*r20);
IkReal x8410=(cj6*r10);
IkReal x8411=(cj5*sj6);
IkReal x8412=(r01*sj6);
IkReal x8413=(r21*sj6);
IkReal x8414=(cj6*r00);
IkReal x8415=((1.0)*x8406);
IkReal x8416=((1.0)*x8405);
IkReal x8417=(sj5*x8416);
evalcond[0]=(((x8406*x8409))+(((-1.0)*r20*x8411*x8416))+(((-1.0)*x8413*x8415))+(((-1.0)*r22*x8417))+(((-1.0)*r21*x8407*x8416)));
evalcond[1]=((((-1.0)*r10*x8411*x8416))+(((-1.0)*r12*x8417))+(((-1.0)*x8408*x8415))+((x8406*x8410))+(((-1.0)*r11*x8407*x8416)));
evalcond[2]=((((-1.0)*x8409*x8416))+((x8405*x8413))+(((-1.0)*r20*x8411*x8415))+(((-1.0)*r22*sj5*x8415))+(((-1.0)*r21*x8407*x8415)));
evalcond[3]=((((-1.0)*r02*sj5*x8415))+((x8405*x8412))+(((-1.0)*x8414*x8416))+(((-1.0)*r00*x8411*x8415))+(((-1.0)*r01*x8407*x8415)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x8411*x8416))+((x8406*x8414))+(((-1.0)*r01*x8407*x8416))+(((-1.0)*r02*x8417))+(((-1.0)*x8412*x8415)));
evalcond[5]=((1.0)+(((-1.0)*r10*x8411*x8415))+((x8405*x8408))+(((-1.0)*x8410*x8416))+(((-1.0)*r11*x8407*x8415))+(((-1.0)*r12*sj5*x8415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8418 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8418.valid){
continue;
}
CheckValue<IkReal> x8419=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8418.value)+(((1.5707963267949)*(x8419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8420=IKsin(j4);
IkReal x8421=IKcos(j4);
IkReal x8422=(cj5*cj6);
IkReal x8423=(r11*sj6);
IkReal x8424=(cj6*r20);
IkReal x8425=(cj6*r10);
IkReal x8426=(cj5*sj6);
IkReal x8427=(r01*sj6);
IkReal x8428=(r21*sj6);
IkReal x8429=(cj6*r00);
IkReal x8430=((1.0)*x8421);
IkReal x8431=((1.0)*x8420);
IkReal x8432=(sj5*x8431);
evalcond[0]=((((-1.0)*r21*x8422*x8431))+((x8421*x8424))+(((-1.0)*r20*x8426*x8431))+(((-1.0)*r22*x8432))+(((-1.0)*x8428*x8430)));
evalcond[1]=((((-1.0)*r11*x8422*x8431))+(((-1.0)*r12*x8432))+((x8421*x8425))+(((-1.0)*r10*x8426*x8431))+(((-1.0)*x8423*x8430)));
evalcond[2]=((((-1.0)*r21*x8422*x8430))+(((-1.0)*r22*sj5*x8430))+(((-1.0)*x8424*x8431))+((x8420*x8428))+(((-1.0)*r20*x8426*x8430)));
evalcond[3]=((((-1.0)*x8429*x8431))+((x8420*x8427))+(((-1.0)*r01*x8422*x8430))+(((-1.0)*r02*sj5*x8430))+(((-1.0)*r00*x8426*x8430)));
evalcond[4]=((-1.0)+(((-1.0)*x8427*x8430))+((x8421*x8429))+(((-1.0)*r01*x8422*x8431))+(((-1.0)*r02*x8432))+(((-1.0)*r00*x8426*x8431)));
evalcond[5]=((1.0)+(((-1.0)*r11*x8422*x8430))+(((-1.0)*x8425*x8431))+(((-1.0)*r12*sj5*x8430))+((x8420*x8423))+(((-1.0)*r10*x8426*x8430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8433=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8433;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x8433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8434=((1.0)*sj6);
IkReal x8435=((((-1.0)*r00*sj5*x8434))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x8435;
j4eval[1]=IKsign(x8435);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8434))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8436=cj6*cj6;
IkReal x8437=cj5*cj5;
IkReal x8438=r00*r00;
IkReal x8439=r01*r01;
IkReal x8440=r02*r02;
IkReal x8441=(cj6*r00);
IkReal x8442=(cj5*cj6*r01);
IkReal x8443=((2.0)*r02*sj5);
IkReal x8444=((1.0)*x8436);
IkReal x8445=((2.0)*r01*sj6);
IkReal x8446=(cj5*r00*sj6);
IkReal x8447=(x8437*x8438);
IkReal x8448=((((-1.0)*x8438*x8444))+((x8441*x8445))+(((-1.0)*x8447))+(((-1.0)*x8440))+(((-1.0)*x8442*x8443))+(((-1.0)*x8437*x8441*x8445))+(((-1.0)*x8443*x8446))+((x8436*x8439))+((x8437*x8440))+(((-1.0)*x8439))+((x8436*x8447))+(((-1.0)*x8437*x8439*x8444)));
j4eval[0]=x8448;
j4eval[1]=((IKabs((x8441+(((-1.0)*r01*sj6)))))+(IKabs((x8446+x8442+((r02*sj5))))));
j4eval[2]=IKsign(x8448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8449=cj6*cj6;
IkReal x8450=cj5*cj5;
IkReal x8451=r00*r00;
IkReal x8452=r01*r01;
IkReal x8453=r02*r02;
IkReal x8454=(cj6*r00);
IkReal x8455=(cj5*cj6*r01);
IkReal x8456=((2.0)*r02*sj5);
IkReal x8457=((1.0)*x8449);
IkReal x8458=((2.0)*r01*sj6);
IkReal x8459=(cj5*r00*sj6);
IkReal x8460=(x8450*x8451);
CheckValue<IkReal> x8461 = IKatan2WithCheck(IkReal((x8454+(((-1.0)*r01*sj6)))),IkReal((x8455+x8459+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8461.valid){
continue;
}
CheckValue<IkReal> x8462=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8460))+((x8449*x8460))+((x8449*x8452))+((x8450*x8453))+(((-1.0)*x8453))+(((-1.0)*x8452))+(((-1.0)*x8451*x8457))+(((-1.0)*x8450*x8454*x8458))+(((-1.0)*x8456*x8459))+(((-1.0)*x8450*x8452*x8457))+(((-1.0)*x8455*x8456))+((x8454*x8458)))),-1);
if(!x8462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8461.value)+(((1.5707963267949)*(x8462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8463=IKsin(j4);
IkReal x8464=IKcos(j4);
IkReal x8465=(cj5*cj6);
IkReal x8466=(r11*sj6);
IkReal x8467=(cj6*r20);
IkReal x8468=(cj6*r10);
IkReal x8469=(cj5*sj6);
IkReal x8470=(r21*sj6);
IkReal x8471=(cj6*r00);
IkReal x8472=(r01*sj6);
IkReal x8473=((1.0)*x8464);
IkReal x8474=((1.0)*x8463);
IkReal x8475=(sj5*x8474);
evalcond[0]=(((x8464*x8467))+(((-1.0)*x8470*x8473))+(((-1.0)*r22*x8475))+(((-1.0)*r21*x8465*x8474))+(((-1.0)*r20*x8469*x8474)));
evalcond[1]=(((x8464*x8471))+(((-1.0)*r02*x8475))+(((-1.0)*r01*x8465*x8474))+(((-1.0)*r00*x8469*x8474))+(((-1.0)*x8472*x8473)));
evalcond[2]=((((-1.0)*x8467*x8474))+(((-1.0)*r22*sj5*x8473))+(((-1.0)*r21*x8465*x8473))+((x8463*x8470))+(((-1.0)*r20*x8469*x8473)));
evalcond[3]=((((-1.0)*r12*sj5*x8473))+((x8463*x8466))+(((-1.0)*x8468*x8474))+(((-1.0)*r11*x8465*x8473))+(((-1.0)*r10*x8469*x8473)));
evalcond[4]=((-1.0)+((x8464*x8468))+(((-1.0)*x8466*x8473))+(((-1.0)*r12*x8475))+(((-1.0)*r11*x8465*x8474))+(((-1.0)*r10*x8469*x8474)));
evalcond[5]=((-1.0)+(((-1.0)*x8471*x8474))+(((-1.0)*r01*x8465*x8473))+(((-1.0)*r02*sj5*x8473))+(((-1.0)*r00*x8469*x8473))+((x8463*x8472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8476=((1.0)*sj6);
CheckValue<IkReal> x8477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x8476))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x8477.valid){
continue;
}
CheckValue<IkReal> x8478 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x8476)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8477.value)))+(x8478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8479=IKsin(j4);
IkReal x8480=IKcos(j4);
IkReal x8481=(cj5*cj6);
IkReal x8482=(r11*sj6);
IkReal x8483=(cj6*r20);
IkReal x8484=(cj6*r10);
IkReal x8485=(cj5*sj6);
IkReal x8486=(r21*sj6);
IkReal x8487=(cj6*r00);
IkReal x8488=(r01*sj6);
IkReal x8489=((1.0)*x8480);
IkReal x8490=((1.0)*x8479);
IkReal x8491=(sj5*x8490);
evalcond[0]=((((-1.0)*r20*x8485*x8490))+((x8480*x8483))+(((-1.0)*r22*x8491))+(((-1.0)*x8486*x8489))+(((-1.0)*r21*x8481*x8490)));
evalcond[1]=((((-1.0)*r02*x8491))+(((-1.0)*r01*x8481*x8490))+((x8480*x8487))+(((-1.0)*r00*x8485*x8490))+(((-1.0)*x8488*x8489)));
evalcond[2]=((((-1.0)*r20*x8485*x8489))+((x8479*x8486))+(((-1.0)*r22*sj5*x8489))+(((-1.0)*x8483*x8490))+(((-1.0)*r21*x8481*x8489)));
evalcond[3]=((((-1.0)*r12*sj5*x8489))+(((-1.0)*r10*x8485*x8489))+((x8479*x8482))+(((-1.0)*r11*x8481*x8489))+(((-1.0)*x8484*x8490)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x8485*x8490))+(((-1.0)*x8482*x8489))+(((-1.0)*r11*x8481*x8490))+((x8480*x8484))+(((-1.0)*r12*x8491)));
evalcond[5]=((-1.0)+(((-1.0)*x8487*x8490))+(((-1.0)*r01*x8481*x8489))+((x8479*x8488))+(((-1.0)*r02*sj5*x8489))+(((-1.0)*r00*x8485*x8489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8492=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8492.valid){
continue;
}
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8492.value)))+(x8493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8494=IKsin(j4);
IkReal x8495=IKcos(j4);
IkReal x8496=(cj5*cj6);
IkReal x8497=(r11*sj6);
IkReal x8498=(cj6*r20);
IkReal x8499=(cj6*r10);
IkReal x8500=(cj5*sj6);
IkReal x8501=(r21*sj6);
IkReal x8502=(cj6*r00);
IkReal x8503=(r01*sj6);
IkReal x8504=((1.0)*x8495);
IkReal x8505=((1.0)*x8494);
IkReal x8506=(sj5*x8505);
evalcond[0]=((((-1.0)*r21*x8496*x8505))+(((-1.0)*x8501*x8504))+(((-1.0)*r22*x8506))+((x8495*x8498))+(((-1.0)*r20*x8500*x8505)));
evalcond[1]=((((-1.0)*x8503*x8504))+(((-1.0)*r00*x8500*x8505))+(((-1.0)*r02*x8506))+(((-1.0)*r01*x8496*x8505))+((x8495*x8502)));
evalcond[2]=((((-1.0)*x8498*x8505))+(((-1.0)*r21*x8496*x8504))+(((-1.0)*r22*sj5*x8504))+(((-1.0)*r20*x8500*x8504))+((x8494*x8501)));
evalcond[3]=((((-1.0)*r10*x8500*x8504))+((x8494*x8497))+(((-1.0)*x8499*x8505))+(((-1.0)*r12*sj5*x8504))+(((-1.0)*r11*x8496*x8504)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x8500*x8505))+(((-1.0)*x8497*x8504))+((x8495*x8499))+(((-1.0)*r12*x8506))+(((-1.0)*r11*x8496*x8505)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x8500*x8504))+(((-1.0)*r02*sj5*x8504))+(((-1.0)*r01*x8496*x8504))+((x8494*x8503))+(((-1.0)*x8502*x8505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8507=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8507;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8508=((1.0)*sj5);
IkReal x8509=(((cj5*r22))+(((-1.0)*cj6*r21*x8508))+(((-1.0)*r20*sj6*x8508)));
j4eval[0]=x8509;
j4eval[1]=IKsign(x8509);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8510=cj6*cj6;
IkReal x8511=r01*r01;
IkReal x8512=cj5*cj5;
IkReal x8513=r00*r00;
IkReal x8514=r02*r02;
IkReal x8515=(cj6*r00);
IkReal x8516=(r02*sj5);
IkReal x8517=(cj5*cj6*r01);
IkReal x8518=((2.0)*r01*sj6);
IkReal x8519=(cj5*r00*sj6);
IkReal x8520=((1.0)*x8512);
IkReal x8521=(x8510*x8513);
IkReal x8522=(x8510*x8511);
IkReal x8523=(((x8512*x8515*x8518))+x8521+x8514+x8511+(((-1.0)*x8515*x8518))+((x8512*x8513))+(((-1.0)*x8514*x8520))+((x8512*x8522))+(((-1.0)*x8522))+(((2.0)*x8516*x8519))+(((2.0)*x8516*x8517))+(((-1.0)*x8520*x8521)));
j4eval[0]=x8523;
j4eval[1]=((IKabs((x8516+x8517+x8519)))+(IKabs(((((-1.0)*r01*sj6))+x8515))));
j4eval[2]=IKsign(x8523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8524=cj6*cj6;
IkReal x8525=r01*r01;
IkReal x8526=cj5*cj5;
IkReal x8527=r00*r00;
IkReal x8528=r02*r02;
IkReal x8529=(cj6*r00);
IkReal x8530=((2.0)*r01);
IkReal x8531=(cj5*cj6);
IkReal x8532=(r02*sj5);
IkReal x8533=(cj5*r00*sj6);
IkReal x8534=(x8526*x8527);
IkReal x8535=(x8524*x8525);
CheckValue<IkReal> x8536 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8529)),IkReal((((r01*x8531))+x8532+x8533)),IKFAST_ATAN2_MAGTHRESH);
if(!x8536.valid){
continue;
}
CheckValue<IkReal> x8537=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8535))+(((-1.0)*sj6*x8529*x8530))+x8528+x8525+x8534+((x8530*x8531*x8532))+(((-1.0)*x8524*x8534))+((sj6*x8526*x8529*x8530))+((x8524*x8527))+(((2.0)*x8532*x8533))+(((-1.0)*x8526*x8528))+((x8526*x8535)))),-1);
if(!x8537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8536.value)+(((1.5707963267949)*(x8537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8538=IKsin(j4);
IkReal x8539=IKcos(j4);
IkReal x8540=(cj5*cj6);
IkReal x8541=(r11*sj6);
IkReal x8542=(cj6*r20);
IkReal x8543=(cj6*r10);
IkReal x8544=(cj5*sj6);
IkReal x8545=(r21*sj6);
IkReal x8546=(cj6*r00);
IkReal x8547=(r01*sj6);
IkReal x8548=((1.0)*x8539);
IkReal x8549=((1.0)*x8538);
IkReal x8550=(sj5*x8549);
evalcond[0]=(((x8539*x8542))+(((-1.0)*r22*x8550))+(((-1.0)*r20*x8544*x8549))+(((-1.0)*r21*x8540*x8549))+(((-1.0)*x8545*x8548)));
evalcond[1]=(((x8539*x8546))+(((-1.0)*r00*x8544*x8549))+(((-1.0)*x8547*x8548))+(((-1.0)*r01*x8540*x8549))+(((-1.0)*r02*x8550)));
evalcond[2]=(((x8538*x8545))+(((-1.0)*x8542*x8549))+(((-1.0)*r20*x8544*x8548))+(((-1.0)*r21*x8540*x8548))+(((-1.0)*r22*sj5*x8548)));
evalcond[3]=((((-1.0)*r12*sj5*x8548))+((x8538*x8541))+(((-1.0)*x8543*x8549))+(((-1.0)*r10*x8544*x8548))+(((-1.0)*r11*x8540*x8548)));
evalcond[4]=((1.0)+(((-1.0)*r12*x8550))+((x8539*x8543))+(((-1.0)*r10*x8544*x8549))+(((-1.0)*r11*x8540*x8549))+(((-1.0)*x8541*x8548)));
evalcond[5]=((1.0)+((x8538*x8547))+(((-1.0)*r02*sj5*x8548))+(((-1.0)*r00*x8544*x8548))+(((-1.0)*x8546*x8549))+(((-1.0)*r01*x8540*x8548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8551=((1.0)*sj5);
CheckValue<IkReal> x8552 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8552.valid){
continue;
}
CheckValue<IkReal> x8553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj6*x8551))+((cj5*r22))+(((-1.0)*cj6*r21*x8551)))),-1);
if(!x8553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8552.value)+(((1.5707963267949)*(x8553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8554=IKsin(j4);
IkReal x8555=IKcos(j4);
IkReal x8556=(cj5*cj6);
IkReal x8557=(r11*sj6);
IkReal x8558=(cj6*r20);
IkReal x8559=(cj6*r10);
IkReal x8560=(cj5*sj6);
IkReal x8561=(r21*sj6);
IkReal x8562=(cj6*r00);
IkReal x8563=(r01*sj6);
IkReal x8564=((1.0)*x8555);
IkReal x8565=((1.0)*x8554);
IkReal x8566=(sj5*x8565);
evalcond[0]=((((-1.0)*r20*x8560*x8565))+(((-1.0)*r21*x8556*x8565))+((x8555*x8558))+(((-1.0)*r22*x8566))+(((-1.0)*x8561*x8564)));
evalcond[1]=((((-1.0)*r00*x8560*x8565))+((x8555*x8562))+(((-1.0)*x8563*x8564))+(((-1.0)*r01*x8556*x8565))+(((-1.0)*r02*x8566)));
evalcond[2]=((((-1.0)*r20*x8560*x8564))+(((-1.0)*x8558*x8565))+(((-1.0)*r21*x8556*x8564))+((x8554*x8561))+(((-1.0)*r22*sj5*x8564)));
evalcond[3]=((((-1.0)*r11*x8556*x8564))+((x8554*x8557))+(((-1.0)*x8559*x8565))+(((-1.0)*r10*x8560*x8564))+(((-1.0)*r12*sj5*x8564)));
evalcond[4]=((1.0)+(((-1.0)*r12*x8566))+((x8555*x8559))+(((-1.0)*r11*x8556*x8565))+(((-1.0)*r10*x8560*x8565))+(((-1.0)*x8557*x8564)));
evalcond[5]=((1.0)+(((-1.0)*r00*x8560*x8564))+((x8554*x8563))+(((-1.0)*r02*sj5*x8564))+(((-1.0)*r01*x8556*x8564))+(((-1.0)*x8562*x8565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8567 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8567.valid){
continue;
}
CheckValue<IkReal> x8568=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8567.value)+(((1.5707963267949)*(x8568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8569=IKsin(j4);
IkReal x8570=IKcos(j4);
IkReal x8571=(cj5*cj6);
IkReal x8572=(r11*sj6);
IkReal x8573=(cj6*r20);
IkReal x8574=(cj6*r10);
IkReal x8575=(cj5*sj6);
IkReal x8576=(r21*sj6);
IkReal x8577=(cj6*r00);
IkReal x8578=(r01*sj6);
IkReal x8579=((1.0)*x8570);
IkReal x8580=((1.0)*x8569);
IkReal x8581=(sj5*x8580);
evalcond[0]=((((-1.0)*r22*x8581))+((x8570*x8573))+(((-1.0)*r20*x8575*x8580))+(((-1.0)*r21*x8571*x8580))+(((-1.0)*x8576*x8579)));
evalcond[1]=(((x8570*x8577))+(((-1.0)*r02*x8581))+(((-1.0)*r00*x8575*x8580))+(((-1.0)*r01*x8571*x8580))+(((-1.0)*x8578*x8579)));
evalcond[2]=((((-1.0)*x8573*x8580))+(((-1.0)*r20*x8575*x8579))+(((-1.0)*r21*x8571*x8579))+(((-1.0)*r22*sj5*x8579))+((x8569*x8576)));
evalcond[3]=((((-1.0)*r12*sj5*x8579))+(((-1.0)*r10*x8575*x8579))+((x8569*x8572))+(((-1.0)*x8574*x8580))+(((-1.0)*r11*x8571*x8579)));
evalcond[4]=((1.0)+(((-1.0)*r11*x8571*x8580))+((x8570*x8574))+(((-1.0)*x8572*x8579))+(((-1.0)*r10*x8575*x8580))+(((-1.0)*r12*x8581)));
evalcond[5]=((1.0)+(((-1.0)*x8577*x8580))+(((-1.0)*r00*x8575*x8579))+(((-1.0)*r01*x8571*x8579))+((x8569*x8578))+(((-1.0)*r02*sj5*x8579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8582=cj6*cj6;
IkReal x8583=cj5*cj5;
IkReal x8584=(r22*sj5);
IkReal x8585=(cj0*r20);
IkReal x8586=((1.0)*r21);
IkReal x8587=(cj5*sj6);
IkReal x8588=(r02*r22);
IkReal x8589=(cj5*cj6);
IkReal x8590=(r02*sj5);
IkReal x8591=(cj6*sj6);
IkReal x8592=((1.0)*r20);
IkReal x8593=(r01*x8586);
IkReal x8594=(r00*r20*x8583);
CheckValue<IkReal> x8595 = IKatan2WithCheck(IkReal((((cj6*x8585))+(((-1.0)*cj0*sj6*x8586)))),IkReal((((cj0*r21*x8589))+((cj0*x8584))+((x8585*x8587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8595.valid){
continue;
}
CheckValue<IkReal> x8596=IKPowWithIntegerCheck(IKsign((((r01*r20*x8591))+(((-1.0)*x8588))+(((-1.0)*r01*x8583*x8591*x8592))+((x8582*x8594))+(((-1.0)*x8582*x8583*x8593))+((r00*r21*x8591))+(((-1.0)*r00*x8583*x8586*x8591))+(((-1.0)*r00*x8583*x8592))+(((-1.0)*r01*x8584*x8589))+((x8583*x8588))+(((-1.0)*x8587*x8590*x8592))+(((-1.0)*r00*x8584*x8587))+((r01*r21*x8582))+(((-1.0)*x8593))+(((-1.0)*r00*x8582*x8592))+(((-1.0)*x8586*x8589*x8590)))),-1);
if(!x8596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8595.value)+(((1.5707963267949)*(x8596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8597=IKsin(j4);
IkReal x8598=IKcos(j4);
IkReal x8599=((1.0)*cj0);
IkReal x8600=(cj6*r20);
IkReal x8601=(cj5*sj6);
IkReal x8602=((1.0)*sj6);
IkReal x8603=(r21*sj6);
IkReal x8604=(cj6*r00);
IkReal x8605=((1.0)*cj5*cj6);
IkReal x8606=(r01*x8598);
IkReal x8607=(r11*x8597);
IkReal x8608=((1.0)*x8597);
IkReal x8609=(r11*x8598);
IkReal x8610=(r10*x8598);
IkReal x8611=((1.0)*x8598);
IkReal x8612=(r01*x8597);
IkReal x8613=(sj5*x8608);
evalcond[0]=((((-1.0)*r20*x8601*x8608))+((x8598*x8600))+(((-1.0)*r21*x8598*x8602))+(((-1.0)*r22*x8613))+(((-1.0)*r21*x8597*x8605)));
evalcond[1]=(((x8597*x8603))+(((-1.0)*r21*x8598*x8605))+(((-1.0)*x8600*x8608))+(((-1.0)*r22*sj5*x8611))+(((-1.0)*r20*x8601*x8611)));
evalcond[2]=(((x8598*x8604))+sj0+(((-1.0)*r02*x8613))+(((-1.0)*x8602*x8606))+(((-1.0)*r00*x8601*x8608))+(((-1.0)*x8605*x8612)));
evalcond[3]=((((-1.0)*x8602*x8609))+(((-1.0)*r12*x8613))+(((-1.0)*r10*x8601*x8608))+((cj6*x8610))+(((-1.0)*x8605*x8607))+(((-1.0)*x8599)));
evalcond[4]=((((-1.0)*r00*x8601*x8611))+((sj6*x8612))+(((-1.0)*x8604*x8608))+(((-1.0)*x8605*x8606))+(((-1.0)*r02*sj5*x8611))+(((-1.0)*x8599)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x8608))+(((-1.0)*x8601*x8610))+(((-1.0)*r12*sj5*x8611))+((sj6*x8607))+(((-1.0)*x8605*x8609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8614=(cj0*sj6);
IkReal x8615=((1.0)*sj5);
IkReal x8616=(cj0*cj6);
CheckValue<IkReal> x8617 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8614))+((r20*x8616)))),IkReal((((cj5*r21*x8616))+((cj0*r22*sj5))+((cj5*r20*x8614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8617.valid){
continue;
}
CheckValue<IkReal> x8618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x8615))+(((-1.0)*cj6*r01*x8615))+((cj5*r02)))),-1);
if(!x8618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8617.value)+(((1.5707963267949)*(x8618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8619=IKsin(j4);
IkReal x8620=IKcos(j4);
IkReal x8621=((1.0)*cj0);
IkReal x8622=(cj6*r20);
IkReal x8623=(cj5*sj6);
IkReal x8624=((1.0)*sj6);
IkReal x8625=(r21*sj6);
IkReal x8626=(cj6*r00);
IkReal x8627=((1.0)*cj5*cj6);
IkReal x8628=(r01*x8620);
IkReal x8629=(r11*x8619);
IkReal x8630=((1.0)*x8619);
IkReal x8631=(r11*x8620);
IkReal x8632=(r10*x8620);
IkReal x8633=((1.0)*x8620);
IkReal x8634=(r01*x8619);
IkReal x8635=(sj5*x8630);
evalcond[0]=(((x8620*x8622))+(((-1.0)*r21*x8619*x8627))+(((-1.0)*r22*x8635))+(((-1.0)*r21*x8620*x8624))+(((-1.0)*r20*x8623*x8630)));
evalcond[1]=((((-1.0)*r22*sj5*x8633))+(((-1.0)*r21*x8620*x8627))+((x8619*x8625))+(((-1.0)*x8622*x8630))+(((-1.0)*r20*x8623*x8633)));
evalcond[2]=(((x8620*x8626))+sj0+(((-1.0)*x8624*x8628))+(((-1.0)*r00*x8623*x8630))+(((-1.0)*x8627*x8634))+(((-1.0)*r02*x8635)));
evalcond[3]=((((-1.0)*x8621))+((cj6*x8632))+(((-1.0)*r12*x8635))+(((-1.0)*x8624*x8631))+(((-1.0)*x8627*x8629))+(((-1.0)*r10*x8623*x8630)));
evalcond[4]=((((-1.0)*x8621))+((sj6*x8634))+(((-1.0)*x8626*x8630))+(((-1.0)*r00*x8623*x8633))+(((-1.0)*x8627*x8628))+(((-1.0)*r02*sj5*x8633)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*sj5*x8633))+(((-1.0)*cj6*r10*x8630))+((sj6*x8629))+(((-1.0)*x8623*x8632))+(((-1.0)*x8627*x8631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8636=(cj5*sj0);
IkReal x8637=((1.0)*sj5);
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r22*sj0*sj5))+((cj6*r21*x8636))+((r20*sj6*x8636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
CheckValue<IkReal> x8639=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x8637))+(((-1.0)*cj6*r11*x8637)))),-1);
if(!x8639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8638.value)+(((1.5707963267949)*(x8639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8640=IKsin(j4);
IkReal x8641=IKcos(j4);
IkReal x8642=((1.0)*cj0);
IkReal x8643=(cj6*r20);
IkReal x8644=(cj5*sj6);
IkReal x8645=((1.0)*sj6);
IkReal x8646=(r21*sj6);
IkReal x8647=(cj6*r00);
IkReal x8648=((1.0)*cj5*cj6);
IkReal x8649=(r01*x8641);
IkReal x8650=(r11*x8640);
IkReal x8651=((1.0)*x8640);
IkReal x8652=(r11*x8641);
IkReal x8653=(r10*x8641);
IkReal x8654=((1.0)*x8641);
IkReal x8655=(r01*x8640);
IkReal x8656=(sj5*x8651);
evalcond[0]=((((-1.0)*r21*x8640*x8648))+(((-1.0)*r21*x8641*x8645))+((x8641*x8643))+(((-1.0)*r20*x8644*x8651))+(((-1.0)*r22*x8656)));
evalcond[1]=((((-1.0)*r21*x8641*x8648))+((x8640*x8646))+(((-1.0)*r22*sj5*x8654))+(((-1.0)*r20*x8644*x8654))+(((-1.0)*x8643*x8651)));
evalcond[2]=((((-1.0)*x8645*x8649))+sj0+((x8641*x8647))+(((-1.0)*r00*x8644*x8651))+(((-1.0)*x8648*x8655))+(((-1.0)*r02*x8656)));
evalcond[3]=((((-1.0)*r12*x8656))+(((-1.0)*x8645*x8652))+(((-1.0)*r10*x8644*x8651))+(((-1.0)*x8648*x8650))+(((-1.0)*x8642))+((cj6*x8653)));
evalcond[4]=(((sj6*x8655))+(((-1.0)*x8647*x8651))+(((-1.0)*r02*sj5*x8654))+(((-1.0)*x8648*x8649))+(((-1.0)*r00*x8644*x8654))+(((-1.0)*x8642)));
evalcond[5]=((((-1.0)*r12*sj5*x8654))+((sj6*x8650))+(((-1.0)*sj0))+(((-1.0)*cj6*r10*x8651))+(((-1.0)*x8648*x8652))+(((-1.0)*x8644*x8653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8657=(cj0*sj6);
IkReal x8658=(cj0*cj6);
IkReal x8659=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8659;
j4eval[1]=((IKabs(((((-1.0)*r21*x8657))+((r20*x8658)))))+(IKabs((((cj5*r21*x8658))+((cj5*r20*x8657))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x8659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8660=cj5*cj5;
IkReal x8661=cj6*cj6;
IkReal x8662=(r00*r20);
IkReal x8663=(r02*r22);
IkReal x8664=(r22*sj5);
IkReal x8665=(cj6*r21);
IkReal x8666=(r00*sj6);
IkReal x8667=(r20*sj6);
IkReal x8668=(cj6*r01);
IkReal x8669=(cj0*cj5);
IkReal x8670=((1.0)*x8660);
IkReal x8671=(cj5*r02*sj5);
IkReal x8672=(r01*r21*x8661);
IkReal x8673=((((-1.0)*x8663*x8670))+((x8660*x8667*x8668))+x8663+((r01*r21))+((cj5*x8664*x8668))+((cj5*x8664*x8666))+(((-1.0)*x8661*x8662*x8670))+(((-1.0)*x8665*x8666))+(((-1.0)*x8667*x8668))+((x8667*x8671))+((x8660*x8662))+((x8661*x8662))+(((-1.0)*x8672))+((x8660*x8665*x8666))+((x8660*x8672))+((x8665*x8671)));
j4eval[0]=x8673;
j4eval[1]=IKsign(x8673);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((cj0*x8664))+((x8667*x8669))+((x8665*x8669))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8674=cj6*cj6;
IkReal x8675=cj5*cj5;
IkReal x8676=(r12*sj5);
IkReal x8677=(r22*sj5);
IkReal x8678=((1.0)*r11);
IkReal x8679=(r20*sj0);
IkReal x8680=(r10*r20);
IkReal x8681=(cj5*sj6);
IkReal x8682=(cj6*r10);
IkReal x8683=(r12*r22);
IkReal x8684=(cj5*cj6*r21);
IkReal x8685=(r21*x8674);
IkReal x8686=(cj6*r20*sj6);
IkReal x8687=(r11*x8675);
IkReal x8688=((1.0)*r21*sj6);
IkReal x8689=((1.0)*x8675);
IkReal x8690=((((-1.0)*x8683*x8689))+(((-1.0)*x8678*x8686))+(((-1.0)*x8678*x8685))+(((-1.0)*x8682*x8688))+x8683+((r11*r21))+((r10*x8677*x8681))+((r21*sj6*x8675*x8682))+((r20*x8676*x8681))+((x8686*x8687))+(((-1.0)*x8674*x8680*x8689))+((x8676*x8684))+((x8675*x8680))+((x8674*x8680))+((x8685*x8687))+((cj5*cj6*r11*x8677)));
j4eval[0]=x8690;
j4eval[1]=IKsign(x8690);
j4eval[2]=((IKabs((((cj6*x8679))+(((-1.0)*sj0*x8688)))))+(IKabs((((x8679*x8681))+((sj0*x8684))+((sj0*x8677))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8691=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8691;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8691);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8692=((1.0)*sj5);
IkReal x8693=(((cj5*r22))+(((-1.0)*cj6*r21*x8692))+(((-1.0)*r20*sj6*x8692)));
j4eval[0]=x8693;
j4eval[1]=IKsign(x8693);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8694=cj6*cj6;
IkReal x8695=r01*r01;
IkReal x8696=cj5*cj5;
IkReal x8697=r00*r00;
IkReal x8698=r02*r02;
IkReal x8699=(cj6*r00);
IkReal x8700=(r02*sj5);
IkReal x8701=(cj5*cj6*r01);
IkReal x8702=((2.0)*r01*sj6);
IkReal x8703=(cj5*r00*sj6);
IkReal x8704=((1.0)*x8696);
IkReal x8705=(x8694*x8697);
IkReal x8706=(x8694*x8695);
IkReal x8707=((((2.0)*x8700*x8701))+(((2.0)*x8700*x8703))+x8698+x8695+(((-1.0)*x8698*x8704))+x8705+(((-1.0)*x8699*x8702))+(((-1.0)*x8704*x8705))+((x8696*x8706))+(((-1.0)*x8706))+((x8696*x8699*x8702))+((x8696*x8697)));
j4eval[0]=x8707;
j4eval[1]=((IKabs((x8703+x8701+x8700)))+(IKabs(((((-1.0)*r01*sj6))+x8699))));
j4eval[2]=IKsign(x8707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8708=cj6*cj6;
IkReal x8709=r01*r01;
IkReal x8710=cj5*cj5;
IkReal x8711=r00*r00;
IkReal x8712=r02*r02;
IkReal x8713=(cj6*r00);
IkReal x8714=((2.0)*r01);
IkReal x8715=(cj5*cj6);
IkReal x8716=(r02*sj5);
IkReal x8717=(cj5*r00*sj6);
IkReal x8718=(x8710*x8711);
IkReal x8719=(x8708*x8709);
CheckValue<IkReal> x8720 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8713)),IkReal((x8716+x8717+((r01*x8715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8720.valid){
continue;
}
CheckValue<IkReal> x8721=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*x8713*x8714))+x8709+x8712+x8718+(((-1.0)*x8710*x8712))+(((2.0)*x8716*x8717))+(((-1.0)*x8708*x8718))+((x8708*x8711))+(((-1.0)*x8719))+((x8710*x8719))+((x8714*x8715*x8716))+((sj6*x8710*x8713*x8714)))),-1);
if(!x8721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8720.value)+(((1.5707963267949)*(x8721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8722=IKsin(j4);
IkReal x8723=IKcos(j4);
IkReal x8724=(cj5*cj6);
IkReal x8725=(r11*sj6);
IkReal x8726=(cj6*r20);
IkReal x8727=(cj6*r10);
IkReal x8728=(cj5*sj6);
IkReal x8729=(r21*sj6);
IkReal x8730=(cj6*r00);
IkReal x8731=(r01*sj6);
IkReal x8732=((1.0)*x8723);
IkReal x8733=((1.0)*x8722);
IkReal x8734=(sj5*x8733);
evalcond[0]=((((-1.0)*x8729*x8732))+(((-1.0)*r20*x8728*x8733))+((x8723*x8726))+(((-1.0)*r22*x8734))+(((-1.0)*r21*x8724*x8733)));
evalcond[1]=((((-1.0)*r01*x8724*x8733))+((x8723*x8730))+(((-1.0)*r00*x8728*x8733))+(((-1.0)*x8731*x8732))+(((-1.0)*r02*x8734)));
evalcond[2]=((((-1.0)*r22*sj5*x8732))+(((-1.0)*r20*x8728*x8732))+(((-1.0)*x8726*x8733))+((x8722*x8729))+(((-1.0)*r21*x8724*x8732)));
evalcond[3]=((((-1.0)*r12*sj5*x8732))+(((-1.0)*r11*x8724*x8732))+(((-1.0)*r10*x8728*x8732))+((x8722*x8725))+(((-1.0)*x8727*x8733)));
evalcond[4]=((1.0)+(((-1.0)*r11*x8724*x8733))+(((-1.0)*r10*x8728*x8733))+((x8723*x8727))+(((-1.0)*x8725*x8732))+(((-1.0)*r12*x8734)));
evalcond[5]=((1.0)+(((-1.0)*r01*x8724*x8732))+((x8722*x8731))+(((-1.0)*r00*x8728*x8732))+(((-1.0)*r02*sj5*x8732))+(((-1.0)*x8730*x8733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8735=((1.0)*sj5);
CheckValue<IkReal> x8736 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8736.valid){
continue;
}
CheckValue<IkReal> x8737=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x8735))+(((-1.0)*r20*sj6*x8735)))),-1);
if(!x8737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8736.value)+(((1.5707963267949)*(x8737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8738=IKsin(j4);
IkReal x8739=IKcos(j4);
IkReal x8740=(cj5*cj6);
IkReal x8741=(r11*sj6);
IkReal x8742=(cj6*r20);
IkReal x8743=(cj6*r10);
IkReal x8744=(cj5*sj6);
IkReal x8745=(r21*sj6);
IkReal x8746=(cj6*r00);
IkReal x8747=(r01*sj6);
IkReal x8748=((1.0)*x8739);
IkReal x8749=((1.0)*x8738);
IkReal x8750=(sj5*x8749);
evalcond[0]=((((-1.0)*r22*x8750))+(((-1.0)*r20*x8744*x8749))+(((-1.0)*r21*x8740*x8749))+((x8739*x8742))+(((-1.0)*x8745*x8748)));
evalcond[1]=((((-1.0)*r00*x8744*x8749))+(((-1.0)*r02*x8750))+((x8739*x8746))+(((-1.0)*r01*x8740*x8749))+(((-1.0)*x8747*x8748)));
evalcond[2]=((((-1.0)*x8742*x8749))+(((-1.0)*r20*x8744*x8748))+(((-1.0)*r21*x8740*x8748))+(((-1.0)*r22*sj5*x8748))+((x8738*x8745)));
evalcond[3]=((((-1.0)*r11*x8740*x8748))+(((-1.0)*r12*sj5*x8748))+(((-1.0)*x8743*x8749))+(((-1.0)*r10*x8744*x8748))+((x8738*x8741)));
evalcond[4]=((1.0)+(((-1.0)*r11*x8740*x8749))+(((-1.0)*x8741*x8748))+((x8739*x8743))+(((-1.0)*r12*x8750))+(((-1.0)*r10*x8744*x8749)));
evalcond[5]=((1.0)+(((-1.0)*r00*x8744*x8748))+(((-1.0)*r02*sj5*x8748))+(((-1.0)*r01*x8740*x8748))+((x8738*x8747))+(((-1.0)*x8746*x8749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8751 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8751.valid){
continue;
}
CheckValue<IkReal> x8752=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8751.value)+(((1.5707963267949)*(x8752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8753=IKsin(j4);
IkReal x8754=IKcos(j4);
IkReal x8755=(cj5*cj6);
IkReal x8756=(r11*sj6);
IkReal x8757=(cj6*r20);
IkReal x8758=(cj6*r10);
IkReal x8759=(cj5*sj6);
IkReal x8760=(r21*sj6);
IkReal x8761=(cj6*r00);
IkReal x8762=(r01*sj6);
IkReal x8763=((1.0)*x8754);
IkReal x8764=((1.0)*x8753);
IkReal x8765=(sj5*x8764);
evalcond[0]=((((-1.0)*r21*x8755*x8764))+(((-1.0)*r22*x8765))+(((-1.0)*x8760*x8763))+(((-1.0)*r20*x8759*x8764))+((x8754*x8757)));
evalcond[1]=((((-1.0)*r02*x8765))+(((-1.0)*r00*x8759*x8764))+((x8754*x8761))+(((-1.0)*r01*x8755*x8764))+(((-1.0)*x8762*x8763)));
evalcond[2]=((((-1.0)*x8757*x8764))+(((-1.0)*r21*x8755*x8763))+((x8753*x8760))+(((-1.0)*r20*x8759*x8763))+(((-1.0)*r22*sj5*x8763)));
evalcond[3]=((((-1.0)*r10*x8759*x8763))+((x8753*x8756))+(((-1.0)*r12*sj5*x8763))+(((-1.0)*r11*x8755*x8763))+(((-1.0)*x8758*x8764)));
evalcond[4]=((1.0)+(((-1.0)*x8756*x8763))+(((-1.0)*r10*x8759*x8764))+(((-1.0)*r12*x8765))+(((-1.0)*r11*x8755*x8764))+((x8754*x8758)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x8763))+(((-1.0)*r00*x8759*x8763))+(((-1.0)*x8761*x8764))+((x8753*x8762))+(((-1.0)*r01*x8755*x8763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8766=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8766;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x8766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8767=((1.0)*sj6);
IkReal x8768=((((-1.0)*cj6*r01*sj5))+((cj5*r02))+(((-1.0)*r00*sj5*x8767)));
j4eval[0]=x8768;
j4eval[1]=IKsign(x8768);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8767))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8769=cj6*cj6;
IkReal x8770=cj5*cj5;
IkReal x8771=r00*r00;
IkReal x8772=r01*r01;
IkReal x8773=r02*r02;
IkReal x8774=(cj6*r00);
IkReal x8775=(cj5*cj6*r01);
IkReal x8776=((2.0)*r02*sj5);
IkReal x8777=((1.0)*x8769);
IkReal x8778=((2.0)*r01*sj6);
IkReal x8779=(cj5*r00*sj6);
IkReal x8780=(x8770*x8771);
IkReal x8781=((((-1.0)*x8776*x8779))+(((-1.0)*x8770*x8772*x8777))+(((-1.0)*x8780))+(((-1.0)*x8772))+(((-1.0)*x8773))+(((-1.0)*x8770*x8774*x8778))+((x8770*x8773))+(((-1.0)*x8775*x8776))+((x8774*x8778))+((x8769*x8780))+(((-1.0)*x8771*x8777))+((x8769*x8772)));
j4eval[0]=x8781;
j4eval[1]=((IKabs((x8779+x8775+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x8774))));
j4eval[2]=IKsign(x8781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8782=cj6*cj6;
IkReal x8783=cj5*cj5;
IkReal x8784=r00*r00;
IkReal x8785=r01*r01;
IkReal x8786=r02*r02;
IkReal x8787=(cj6*r00);
IkReal x8788=(cj5*cj6*r01);
IkReal x8789=((2.0)*r02*sj5);
IkReal x8790=((1.0)*x8782);
IkReal x8791=((2.0)*r01*sj6);
IkReal x8792=(cj5*r00*sj6);
IkReal x8793=(x8783*x8784);
CheckValue<IkReal> x8794 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8787)),IkReal((x8792+x8788+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8794.valid){
continue;
}
CheckValue<IkReal> x8795=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8788*x8789))+(((-1.0)*x8789*x8792))+((x8787*x8791))+(((-1.0)*x8793))+(((-1.0)*x8783*x8785*x8790))+(((-1.0)*x8786))+(((-1.0)*x8785))+((x8783*x8786))+(((-1.0)*x8784*x8790))+(((-1.0)*x8783*x8787*x8791))+((x8782*x8793))+((x8782*x8785)))),-1);
if(!x8795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8794.value)+(((1.5707963267949)*(x8795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8796=IKsin(j4);
IkReal x8797=IKcos(j4);
IkReal x8798=(cj5*cj6);
IkReal x8799=(r11*sj6);
IkReal x8800=(cj6*r20);
IkReal x8801=(cj6*r10);
IkReal x8802=(cj5*sj6);
IkReal x8803=(r21*sj6);
IkReal x8804=(cj6*r00);
IkReal x8805=(r01*sj6);
IkReal x8806=((1.0)*x8797);
IkReal x8807=((1.0)*x8796);
IkReal x8808=(sj5*x8807);
evalcond[0]=((((-1.0)*r22*x8808))+((x8797*x8800))+(((-1.0)*x8803*x8806))+(((-1.0)*r20*x8802*x8807))+(((-1.0)*r21*x8798*x8807)));
evalcond[1]=(((x8797*x8804))+(((-1.0)*r01*x8798*x8807))+(((-1.0)*r02*x8808))+(((-1.0)*r00*x8802*x8807))+(((-1.0)*x8805*x8806)));
evalcond[2]=(((x8796*x8803))+(((-1.0)*x8800*x8807))+(((-1.0)*r20*x8802*x8806))+(((-1.0)*r21*x8798*x8806))+(((-1.0)*r22*sj5*x8806)));
evalcond[3]=((((-1.0)*r11*x8798*x8806))+((x8796*x8799))+(((-1.0)*r12*sj5*x8806))+(((-1.0)*r10*x8802*x8806))+(((-1.0)*x8801*x8807)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x8808))+(((-1.0)*r11*x8798*x8807))+((x8797*x8801))+(((-1.0)*r10*x8802*x8807))+(((-1.0)*x8799*x8806)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x8806))+((x8796*x8805))+(((-1.0)*r01*x8798*x8806))+(((-1.0)*r00*x8802*x8806))+(((-1.0)*x8804*x8807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8809=((1.0)*sj6);
CheckValue<IkReal> x8810 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8809))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8810.valid){
continue;
}
CheckValue<IkReal> x8811=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x8809))+((cj5*r02)))),-1);
if(!x8811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8810.value)+(((1.5707963267949)*(x8811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8812=IKsin(j4);
IkReal x8813=IKcos(j4);
IkReal x8814=(cj5*cj6);
IkReal x8815=(r11*sj6);
IkReal x8816=(cj6*r20);
IkReal x8817=(cj6*r10);
IkReal x8818=(cj5*sj6);
IkReal x8819=(r21*sj6);
IkReal x8820=(cj6*r00);
IkReal x8821=(r01*sj6);
IkReal x8822=((1.0)*x8813);
IkReal x8823=((1.0)*x8812);
IkReal x8824=(sj5*x8823);
evalcond[0]=(((x8813*x8816))+(((-1.0)*r21*x8814*x8823))+(((-1.0)*r20*x8818*x8823))+(((-1.0)*x8819*x8822))+(((-1.0)*r22*x8824)));
evalcond[1]=((((-1.0)*x8821*x8822))+((x8813*x8820))+(((-1.0)*r02*x8824))+(((-1.0)*r00*x8818*x8823))+(((-1.0)*r01*x8814*x8823)));
evalcond[2]=((((-1.0)*r21*x8814*x8822))+(((-1.0)*x8816*x8823))+((x8812*x8819))+(((-1.0)*r20*x8818*x8822))+(((-1.0)*r22*sj5*x8822)));
evalcond[3]=((((-1.0)*r10*x8818*x8822))+(((-1.0)*r12*sj5*x8822))+((x8812*x8815))+(((-1.0)*r11*x8814*x8822))+(((-1.0)*x8817*x8823)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x8818*x8823))+(((-1.0)*r12*x8824))+((x8813*x8817))+(((-1.0)*r11*x8814*x8823))+(((-1.0)*x8815*x8822)));
evalcond[5]=((-1.0)+((x8812*x8821))+(((-1.0)*r00*x8818*x8822))+(((-1.0)*r01*x8814*x8822))+(((-1.0)*x8820*x8823))+(((-1.0)*r02*sj5*x8822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8825=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8825.valid){
continue;
}
CheckValue<IkReal> x8826 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8825.value)))+(x8826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8827=IKsin(j4);
IkReal x8828=IKcos(j4);
IkReal x8829=(cj5*cj6);
IkReal x8830=(r11*sj6);
IkReal x8831=(cj6*r20);
IkReal x8832=(cj6*r10);
IkReal x8833=(cj5*sj6);
IkReal x8834=(r21*sj6);
IkReal x8835=(cj6*r00);
IkReal x8836=(r01*sj6);
IkReal x8837=((1.0)*x8828);
IkReal x8838=((1.0)*x8827);
IkReal x8839=(sj5*x8838);
evalcond[0]=((((-1.0)*r20*x8833*x8838))+((x8828*x8831))+(((-1.0)*x8834*x8837))+(((-1.0)*r21*x8829*x8838))+(((-1.0)*r22*x8839)));
evalcond[1]=(((x8828*x8835))+(((-1.0)*r00*x8833*x8838))+(((-1.0)*r01*x8829*x8838))+(((-1.0)*r02*x8839))+(((-1.0)*x8836*x8837)));
evalcond[2]=((((-1.0)*r20*x8833*x8837))+((x8827*x8834))+(((-1.0)*r21*x8829*x8837))+(((-1.0)*x8831*x8838))+(((-1.0)*r22*sj5*x8837)));
evalcond[3]=(((x8827*x8830))+(((-1.0)*x8832*x8838))+(((-1.0)*r12*sj5*x8837))+(((-1.0)*r10*x8833*x8837))+(((-1.0)*r11*x8829*x8837)));
evalcond[4]=((-1.0)+((x8828*x8832))+(((-1.0)*x8830*x8837))+(((-1.0)*r10*x8833*x8838))+(((-1.0)*r11*x8829*x8838))+(((-1.0)*r12*x8839)));
evalcond[5]=((-1.0)+((x8827*x8836))+(((-1.0)*r00*x8833*x8837))+(((-1.0)*x8835*x8838))+(((-1.0)*r01*x8829*x8837))+(((-1.0)*r02*sj5*x8837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8840=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x8840;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8841=((1.0)*sj5);
IkReal x8842=(((cj5*r22))+(((-1.0)*cj6*r21*x8841))+(((-1.0)*r20*sj6*x8841)));
j4eval[0]=x8842;
j4eval[1]=IKsign(x8842);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8843=r11*r11;
IkReal x8844=cj5*cj5;
IkReal x8845=cj6*cj6;
IkReal x8846=r10*r10;
IkReal x8847=r12*r12;
IkReal x8848=(r12*sj5);
IkReal x8849=(cj6*r10);
IkReal x8850=((1.0)*x8845);
IkReal x8851=(cj5*cj6*r11);
IkReal x8852=(cj5*r10*sj6);
IkReal x8853=((2.0)*r11*sj6);
IkReal x8854=(x8844*x8846);
IkReal x8855=((((2.0)*x8848*x8852))+(((2.0)*x8848*x8851))+(((-1.0)*x8849*x8853))+(((-1.0)*x8850*x8854))+x8854+x8843+x8847+((x8845*x8846))+(((-1.0)*x8844*x8847))+((x8843*x8844*x8845))+((x8844*x8849*x8853))+(((-1.0)*x8843*x8850)));
j4eval[0]=x8855;
j4eval[1]=IKsign(x8855);
j4eval[2]=((IKabs((x8849+(((-1.0)*r11*sj6)))))+(IKabs((x8852+x8851+x8848))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8856=r11*r11;
IkReal x8857=cj5*cj5;
IkReal x8858=cj6*cj6;
IkReal x8859=r10*r10;
IkReal x8860=r12*r12;
IkReal x8861=(r10*sj6);
IkReal x8862=(r12*sj5);
IkReal x8863=((1.0)*x8858);
IkReal x8864=(cj5*cj6*r11);
IkReal x8865=((2.0)*cj6*r11);
IkReal x8866=(x8857*x8859);
CheckValue<IkReal> x8867=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8863*x8866))+(((2.0)*cj5*x8861*x8862))+x8856+x8866+x8860+(((2.0)*x8862*x8864))+((x8856*x8857*x8858))+((x8857*x8861*x8865))+(((-1.0)*x8861*x8865))+(((-1.0)*x8856*x8863))+((x8858*x8859))+(((-1.0)*x8857*x8860)))),-1);
if(!x8867.valid){
continue;
}
CheckValue<IkReal> x8868 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x8864+x8862+((cj5*x8861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8867.value)))+(x8868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8869=IKsin(j4);
IkReal x8870=IKcos(j4);
IkReal x8871=(cj5*cj6);
IkReal x8872=(r11*sj6);
IkReal x8873=(cj6*r20);
IkReal x8874=(cj6*r10);
IkReal x8875=(cj5*sj6);
IkReal x8876=(r01*sj6);
IkReal x8877=(r21*sj6);
IkReal x8878=(cj6*r00);
IkReal x8879=((1.0)*x8870);
IkReal x8880=((1.0)*x8869);
IkReal x8881=(sj5*x8880);
evalcond[0]=((((-1.0)*r22*x8881))+(((-1.0)*x8877*x8879))+(((-1.0)*r21*x8871*x8880))+(((-1.0)*r20*x8875*x8880))+((x8870*x8873)));
evalcond[1]=((((-1.0)*r10*x8875*x8880))+(((-1.0)*r12*x8881))+(((-1.0)*x8872*x8879))+(((-1.0)*r11*x8871*x8880))+((x8870*x8874)));
evalcond[2]=((((-1.0)*x8873*x8880))+(((-1.0)*r22*sj5*x8879))+(((-1.0)*r20*x8875*x8879))+((x8869*x8877))+(((-1.0)*r21*x8871*x8879)));
evalcond[3]=((((-1.0)*r02*sj5*x8879))+(((-1.0)*x8878*x8880))+(((-1.0)*r00*x8875*x8879))+(((-1.0)*r01*x8871*x8879))+((x8869*x8876)));
evalcond[4]=((-1.0)+(((-1.0)*x8876*x8879))+(((-1.0)*r00*x8875*x8880))+(((-1.0)*r02*x8881))+(((-1.0)*r01*x8871*x8880))+((x8870*x8878)));
evalcond[5]=((1.0)+(((-1.0)*r10*x8875*x8879))+(((-1.0)*r12*sj5*x8879))+((x8869*x8872))+(((-1.0)*r11*x8871*x8879))+(((-1.0)*x8874*x8880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8882=((1.0)*sj5);
CheckValue<IkReal> x8883 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8883.valid){
continue;
}
CheckValue<IkReal> x8884=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x8882))+(((-1.0)*r20*sj6*x8882)))),-1);
if(!x8884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8883.value)+(((1.5707963267949)*(x8884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8885=IKsin(j4);
IkReal x8886=IKcos(j4);
IkReal x8887=(cj5*cj6);
IkReal x8888=(r11*sj6);
IkReal x8889=(cj6*r20);
IkReal x8890=(cj6*r10);
IkReal x8891=(cj5*sj6);
IkReal x8892=(r01*sj6);
IkReal x8893=(r21*sj6);
IkReal x8894=(cj6*r00);
IkReal x8895=((1.0)*x8886);
IkReal x8896=((1.0)*x8885);
IkReal x8897=(sj5*x8896);
evalcond[0]=((((-1.0)*r21*x8887*x8896))+(((-1.0)*r20*x8891*x8896))+(((-1.0)*x8893*x8895))+((x8886*x8889))+(((-1.0)*r22*x8897)));
evalcond[1]=(((x8886*x8890))+(((-1.0)*r11*x8887*x8896))+(((-1.0)*r12*x8897))+(((-1.0)*r10*x8891*x8896))+(((-1.0)*x8888*x8895)));
evalcond[2]=((((-1.0)*x8889*x8896))+(((-1.0)*r21*x8887*x8895))+((x8885*x8893))+(((-1.0)*r20*x8891*x8895))+(((-1.0)*r22*sj5*x8895)));
evalcond[3]=((((-1.0)*r02*sj5*x8895))+((x8885*x8892))+(((-1.0)*x8894*x8896))+(((-1.0)*r01*x8887*x8895))+(((-1.0)*r00*x8891*x8895)));
evalcond[4]=((-1.0)+((x8886*x8894))+(((-1.0)*x8892*x8895))+(((-1.0)*r02*x8897))+(((-1.0)*r01*x8887*x8896))+(((-1.0)*r00*x8891*x8896)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x8895))+(((-1.0)*r11*x8887*x8895))+(((-1.0)*x8890*x8896))+(((-1.0)*r10*x8891*x8895))+((x8885*x8888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8898 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8898.valid){
continue;
}
CheckValue<IkReal> x8899=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8898.value)+(((1.5707963267949)*(x8899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8900=IKsin(j4);
IkReal x8901=IKcos(j4);
IkReal x8902=(cj5*cj6);
IkReal x8903=(r11*sj6);
IkReal x8904=(cj6*r20);
IkReal x8905=(cj6*r10);
IkReal x8906=(cj5*sj6);
IkReal x8907=(r01*sj6);
IkReal x8908=(r21*sj6);
IkReal x8909=(cj6*r00);
IkReal x8910=((1.0)*x8901);
IkReal x8911=((1.0)*x8900);
IkReal x8912=(sj5*x8911);
evalcond[0]=((((-1.0)*x8908*x8910))+((x8901*x8904))+(((-1.0)*r20*x8906*x8911))+(((-1.0)*r22*x8912))+(((-1.0)*r21*x8902*x8911)));
evalcond[1]=((((-1.0)*r10*x8906*x8911))+(((-1.0)*r11*x8902*x8911))+((x8901*x8905))+(((-1.0)*r12*x8912))+(((-1.0)*x8903*x8910)));
evalcond[2]=((((-1.0)*x8904*x8911))+((x8900*x8908))+(((-1.0)*r22*sj5*x8910))+(((-1.0)*r20*x8906*x8910))+(((-1.0)*r21*x8902*x8910)));
evalcond[3]=((((-1.0)*x8909*x8911))+(((-1.0)*r02*sj5*x8910))+(((-1.0)*r01*x8902*x8910))+((x8900*x8907))+(((-1.0)*r00*x8906*x8910)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x8912))+(((-1.0)*x8907*x8910))+((x8901*x8909))+(((-1.0)*r01*x8902*x8911))+(((-1.0)*r00*x8906*x8911)));
evalcond[5]=((1.0)+(((-1.0)*r10*x8906*x8910))+(((-1.0)*r11*x8902*x8910))+((x8900*x8903))+(((-1.0)*r12*sj5*x8910))+(((-1.0)*x8905*x8911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8913=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8913;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x8913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8914=((1.0)*sj6);
IkReal x8915=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8914)));
j4eval[0]=x8915;
j4eval[1]=IKsign(x8915);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8914))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8916=cj6*cj6;
IkReal x8917=cj5*cj5;
IkReal x8918=r10*r10;
IkReal x8919=r11*r11;
IkReal x8920=r12*r12;
IkReal x8921=(r10*sj6);
IkReal x8922=(r12*sj5);
IkReal x8923=((2.0)*cj6*r11);
IkReal x8924=((1.0)*x8918);
IkReal x8925=(x8916*x8919);
IkReal x8926=((((-1.0)*x8919))+((x8921*x8923))+(((-1.0)*x8916*x8924))+(((-1.0)*x8917*x8921*x8923))+((x8917*x8920))+x8925+(((-1.0)*x8917*x8925))+(((-2.0)*cj5*x8921*x8922))+(((-1.0)*x8917*x8924))+((x8916*x8917*x8918))+(((-1.0)*cj5*x8922*x8923))+(((-1.0)*x8920)));
j4eval[0]=x8926;
j4eval[1]=((IKabs((((cj5*x8921))+x8922+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x8926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8927=cj6*cj6;
IkReal x8928=cj5*cj5;
IkReal x8929=r10*r10;
IkReal x8930=r11*r11;
IkReal x8931=r12*r12;
IkReal x8932=(r10*sj6);
IkReal x8933=(r12*sj5);
IkReal x8934=((2.0)*cj6*r11);
IkReal x8935=(x8927*x8930);
IkReal x8936=(x8928*x8929);
CheckValue<IkReal> x8937=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x8933*x8934))+(((-1.0)*x8928*x8932*x8934))+((x8928*x8931))+((x8927*x8936))+x8935+(((-2.0)*cj5*x8932*x8933))+(((-1.0)*x8928*x8935))+((x8932*x8934))+(((-1.0)*x8930))+(((-1.0)*x8931))+(((-1.0)*x8936))+(((-1.0)*x8927*x8929)))),-1);
if(!x8937.valid){
continue;
}
CheckValue<IkReal> x8938 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x8933+((cj5*x8932))+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8937.value)))+(x8938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8939=IKsin(j4);
IkReal x8940=IKcos(j4);
IkReal x8941=(cj5*cj6);
IkReal x8942=(r11*sj6);
IkReal x8943=(cj6*r20);
IkReal x8944=(cj6*r10);
IkReal x8945=(cj5*sj6);
IkReal x8946=(r01*sj6);
IkReal x8947=(r21*sj6);
IkReal x8948=(cj6*r00);
IkReal x8949=((1.0)*x8940);
IkReal x8950=((1.0)*x8939);
IkReal x8951=(sj5*x8950);
evalcond[0]=((((-1.0)*x8947*x8949))+(((-1.0)*r22*x8951))+(((-1.0)*r20*x8945*x8950))+((x8940*x8943))+(((-1.0)*r21*x8941*x8950)));
evalcond[1]=((((-1.0)*r11*x8941*x8950))+(((-1.0)*r12*x8951))+(((-1.0)*r10*x8945*x8950))+((x8940*x8944))+(((-1.0)*x8942*x8949)));
evalcond[2]=(((x8939*x8947))+(((-1.0)*r20*x8945*x8949))+(((-1.0)*x8943*x8950))+(((-1.0)*r22*sj5*x8949))+(((-1.0)*r21*x8941*x8949)));
evalcond[3]=(((x8939*x8946))+(((-1.0)*r01*x8941*x8949))+(((-1.0)*r02*sj5*x8949))+(((-1.0)*x8948*x8950))+(((-1.0)*r00*x8945*x8949)));
evalcond[4]=((1.0)+(((-1.0)*x8946*x8949))+(((-1.0)*r01*x8941*x8950))+((x8940*x8948))+(((-1.0)*r02*x8951))+(((-1.0)*r00*x8945*x8950)));
evalcond[5]=((-1.0)+(((-1.0)*x8944*x8950))+((x8939*x8942))+(((-1.0)*r11*x8941*x8949))+(((-1.0)*r10*x8945*x8949))+(((-1.0)*r12*sj5*x8949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8952=((1.0)*sj6);
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x8952)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
CheckValue<IkReal> x8954=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8952)))),-1);
if(!x8954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8953.value)+(((1.5707963267949)*(x8954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8955=IKsin(j4);
IkReal x8956=IKcos(j4);
IkReal x8957=(cj5*cj6);
IkReal x8958=(r11*sj6);
IkReal x8959=(cj6*r20);
IkReal x8960=(cj6*r10);
IkReal x8961=(cj5*sj6);
IkReal x8962=(r01*sj6);
IkReal x8963=(r21*sj6);
IkReal x8964=(cj6*r00);
IkReal x8965=((1.0)*x8956);
IkReal x8966=((1.0)*x8955);
IkReal x8967=(sj5*x8966);
evalcond[0]=((((-1.0)*r21*x8957*x8966))+(((-1.0)*r20*x8961*x8966))+((x8956*x8959))+(((-1.0)*r22*x8967))+(((-1.0)*x8963*x8965)));
evalcond[1]=((((-1.0)*r12*x8967))+((x8956*x8960))+(((-1.0)*r11*x8957*x8966))+(((-1.0)*x8958*x8965))+(((-1.0)*r10*x8961*x8966)));
evalcond[2]=((((-1.0)*r21*x8957*x8965))+(((-1.0)*r20*x8961*x8965))+(((-1.0)*x8959*x8966))+(((-1.0)*r22*sj5*x8965))+((x8955*x8963)));
evalcond[3]=((((-1.0)*x8964*x8966))+(((-1.0)*r02*sj5*x8965))+(((-1.0)*r01*x8957*x8965))+(((-1.0)*r00*x8961*x8965))+((x8955*x8962)));
evalcond[4]=((1.0)+((x8956*x8964))+(((-1.0)*x8962*x8965))+(((-1.0)*r02*x8967))+(((-1.0)*r01*x8957*x8966))+(((-1.0)*r00*x8961*x8966)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x8965))+(((-1.0)*r11*x8957*x8965))+(((-1.0)*r10*x8961*x8965))+(((-1.0)*x8960*x8966))+((x8955*x8958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8968=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8968.valid){
continue;
}
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8968.value)))+(x8969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8970=IKsin(j4);
IkReal x8971=IKcos(j4);
IkReal x8972=(cj5*cj6);
IkReal x8973=(r11*sj6);
IkReal x8974=(cj6*r20);
IkReal x8975=(cj6*r10);
IkReal x8976=(cj5*sj6);
IkReal x8977=(r01*sj6);
IkReal x8978=(r21*sj6);
IkReal x8979=(cj6*r00);
IkReal x8980=((1.0)*x8971);
IkReal x8981=((1.0)*x8970);
IkReal x8982=(sj5*x8981);
evalcond[0]=(((x8971*x8974))+(((-1.0)*r20*x8976*x8981))+(((-1.0)*r21*x8972*x8981))+(((-1.0)*x8978*x8980))+(((-1.0)*r22*x8982)));
evalcond[1]=((((-1.0)*r11*x8972*x8981))+(((-1.0)*x8973*x8980))+((x8971*x8975))+(((-1.0)*r12*x8982))+(((-1.0)*r10*x8976*x8981)));
evalcond[2]=((((-1.0)*x8974*x8981))+((x8970*x8978))+(((-1.0)*r20*x8976*x8980))+(((-1.0)*r21*x8972*x8980))+(((-1.0)*r22*sj5*x8980)));
evalcond[3]=((((-1.0)*r00*x8976*x8980))+((x8970*x8977))+(((-1.0)*r02*sj5*x8980))+(((-1.0)*x8979*x8981))+(((-1.0)*r01*x8972*x8980)));
evalcond[4]=((1.0)+(((-1.0)*r00*x8976*x8981))+((x8971*x8979))+(((-1.0)*r02*x8982))+(((-1.0)*x8977*x8980))+(((-1.0)*r01*x8972*x8981)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x8972*x8980))+((x8970*x8973))+(((-1.0)*r12*sj5*x8980))+(((-1.0)*r10*x8976*x8980))+(((-1.0)*x8975*x8981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8983=cj6*cj6;
IkReal x8984=cj5*cj5;
IkReal x8985=((1.0)*r11);
IkReal x8986=(cj5*sj0);
IkReal x8987=(cj6*r21);
IkReal x8988=(r22*sj5);
IkReal x8989=(r20*sj6);
IkReal x8990=(r12*r22);
IkReal x8991=((1.0)*sj6);
IkReal x8992=(r21*x8983);
IkReal x8993=(r10*x8984);
IkReal x8994=(r11*x8984);
IkReal x8995=(r20*x8983);
IkReal x8996=(cj5*r12*sj5);
CheckValue<IkReal> x8997 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*x8991)))),IkReal((((x8986*x8989))+((x8986*x8987))+((sj0*x8988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8997.valid){
continue;
}
CheckValue<IkReal> x8998=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8984*x8990))+((cj6*x8989*x8994))+(((-1.0)*x8985*x8992))+((r11*r21))+(((-1.0)*x8993*x8995))+(((-1.0)*cj6*x8985*x8989))+((x8987*x8996))+((r20*x8993))+x8990+((r10*x8995))+(((-1.0)*r10*x8987*x8991))+((x8992*x8994))+((sj6*x8987*x8993))+((cj5*r10*sj6*x8988))+((x8989*x8996))+((cj5*cj6*r11*x8988)))),-1);
if(!x8998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8997.value)+(((1.5707963267949)*(x8998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8999=IKsin(j4);
IkReal x9000=IKcos(j4);
IkReal x9001=(cj5*cj6);
IkReal x9002=(r11*sj6);
IkReal x9003=(cj6*r20);
IkReal x9004=(cj5*sj6);
IkReal x9005=(cj6*r10);
IkReal x9006=(r01*sj6);
IkReal x9007=(r21*sj6);
IkReal x9008=(cj6*r00);
IkReal x9009=((1.0)*x9000);
IkReal x9010=((1.0)*x8999);
IkReal x9011=(sj5*x9010);
evalcond[0]=(((x9000*x9003))+(((-1.0)*r21*x9001*x9010))+(((-1.0)*r22*x9011))+(((-1.0)*x9007*x9009))+(((-1.0)*r20*x9004*x9010)));
evalcond[1]=((((-1.0)*x9003*x9010))+(((-1.0)*r21*x9001*x9009))+((x8999*x9007))+(((-1.0)*r20*x9004*x9009))+(((-1.0)*r22*sj5*x9009)));
evalcond[2]=(cj0+((x9000*x9005))+(((-1.0)*r12*x9011))+(((-1.0)*r11*x9001*x9010))+(((-1.0)*r10*x9004*x9010))+(((-1.0)*x9002*x9009)));
evalcond[3]=(cj0+(((-1.0)*x9008*x9010))+(((-1.0)*r02*sj5*x9009))+(((-1.0)*r01*x9001*x9009))+((x8999*x9006))+(((-1.0)*r00*x9004*x9009)));
evalcond[4]=(sj0+(((-1.0)*r12*sj5*x9009))+(((-1.0)*r10*x9004*x9009))+(((-1.0)*r11*x9001*x9009))+((x8999*x9002))+(((-1.0)*x9005*x9010)));
evalcond[5]=((((-1.0)*sj0))+((x9000*x9008))+(((-1.0)*r01*x9001*x9010))+(((-1.0)*r02*x9011))+(((-1.0)*r00*x9004*x9010))+(((-1.0)*x9006*x9009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9012=cj5*cj5;
IkReal x9013=cj6*cj6;
IkReal x9014=(r22*sj5);
IkReal x9015=(cj6*r21);
IkReal x9016=(r20*sj6);
IkReal x9017=((1.0)*sj6);
IkReal x9018=(cj0*cj5);
IkReal x9019=(r02*r22);
IkReal x9020=(cj6*r01);
IkReal x9021=(r00*sj6);
IkReal x9022=(cj5*r02*sj5);
IkReal x9023=(r01*x9012);
IkReal x9024=(r21*x9013);
IkReal x9025=(r00*r20*x9012);
CheckValue<IkReal> x9026=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9016*x9020))+((r00*r20*x9013))+((x9015*x9022))+((r01*r21))+((x9012*x9015*x9021))+x9025+x9019+((x9012*x9016*x9020))+(((-1.0)*x9012*x9019))+((x9016*x9022))+(((-1.0)*x9013*x9025))+(((-1.0)*r00*x9015*x9017))+(((-1.0)*r01*x9024))+((cj5*x9014*x9021))+((cj5*x9014*x9020))+((x9023*x9024)))),-1);
if(!x9026.valid){
continue;
}
CheckValue<IkReal> x9027 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x9017)))),IkReal((((x9015*x9018))+((x9016*x9018))+((cj0*x9014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9026.value)))+(x9027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9028=IKsin(j4);
IkReal x9029=IKcos(j4);
IkReal x9030=(cj5*cj6);
IkReal x9031=(r11*sj6);
IkReal x9032=(cj6*r20);
IkReal x9033=(cj5*sj6);
IkReal x9034=(cj6*r10);
IkReal x9035=(r01*sj6);
IkReal x9036=(r21*sj6);
IkReal x9037=(cj6*r00);
IkReal x9038=((1.0)*x9029);
IkReal x9039=((1.0)*x9028);
IkReal x9040=(sj5*x9039);
evalcond[0]=((((-1.0)*r21*x9030*x9039))+(((-1.0)*x9036*x9038))+(((-1.0)*r22*x9040))+(((-1.0)*r20*x9033*x9039))+((x9029*x9032)));
evalcond[1]=((((-1.0)*r21*x9030*x9038))+((x9028*x9036))+(((-1.0)*x9032*x9039))+(((-1.0)*r22*sj5*x9038))+(((-1.0)*r20*x9033*x9038)));
evalcond[2]=(cj0+(((-1.0)*r11*x9030*x9039))+(((-1.0)*x9031*x9038))+(((-1.0)*r12*x9040))+(((-1.0)*r10*x9033*x9039))+((x9029*x9034)));
evalcond[3]=((((-1.0)*r01*x9030*x9038))+cj0+((x9028*x9035))+(((-1.0)*r00*x9033*x9038))+(((-1.0)*x9037*x9039))+(((-1.0)*r02*sj5*x9038)));
evalcond[4]=(sj0+(((-1.0)*r11*x9030*x9038))+(((-1.0)*x9034*x9039))+((x9028*x9031))+(((-1.0)*r12*sj5*x9038))+(((-1.0)*r10*x9033*x9038)));
evalcond[5]=((((-1.0)*r01*x9030*x9039))+(((-1.0)*x9035*x9038))+(((-1.0)*sj0))+(((-1.0)*r00*x9033*x9039))+((x9029*x9037))+(((-1.0)*r02*x9040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9041=(cj0*sj6);
IkReal x9042=(cj0*cj6);
CheckValue<IkReal> x9043 = IKatan2WithCheck(IkReal((((r20*x9042))+(((-1.0)*r21*x9041)))),IkReal((((cj5*r21*x9042))+((cj0*r22*sj5))+((cj5*r20*x9041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9043.valid){
continue;
}
CheckValue<IkReal> x9044=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x9044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9043.value)+(((1.5707963267949)*(x9044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9045=IKsin(j4);
IkReal x9046=IKcos(j4);
IkReal x9047=(cj5*cj6);
IkReal x9048=(r11*sj6);
IkReal x9049=(cj6*r20);
IkReal x9050=(cj5*sj6);
IkReal x9051=(cj6*r10);
IkReal x9052=(r01*sj6);
IkReal x9053=(r21*sj6);
IkReal x9054=(cj6*r00);
IkReal x9055=((1.0)*x9046);
IkReal x9056=((1.0)*x9045);
IkReal x9057=(sj5*x9056);
evalcond[0]=((((-1.0)*r20*x9050*x9056))+(((-1.0)*x9053*x9055))+(((-1.0)*r21*x9047*x9056))+(((-1.0)*r22*x9057))+((x9046*x9049)));
evalcond[1]=((((-1.0)*r20*x9050*x9055))+(((-1.0)*r21*x9047*x9055))+(((-1.0)*x9049*x9056))+(((-1.0)*r22*sj5*x9055))+((x9045*x9053)));
evalcond[2]=((((-1.0)*r11*x9047*x9056))+cj0+(((-1.0)*r10*x9050*x9056))+((x9046*x9051))+(((-1.0)*r12*x9057))+(((-1.0)*x9048*x9055)));
evalcond[3]=(cj0+(((-1.0)*x9054*x9056))+((x9045*x9052))+(((-1.0)*r01*x9047*x9055))+(((-1.0)*r02*sj5*x9055))+(((-1.0)*r00*x9050*x9055)));
evalcond[4]=(sj0+(((-1.0)*r11*x9047*x9055))+(((-1.0)*r10*x9050*x9055))+((x9045*x9048))+(((-1.0)*r12*sj5*x9055))+(((-1.0)*x9051*x9056)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x9057))+((x9046*x9054))+(((-1.0)*r01*x9047*x9056))+(((-1.0)*r00*x9050*x9056))+(((-1.0)*x9052*x9055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9058=(r20*sj0);
IkReal x9059=((1.0)*sj5);
IkReal x9060=(r21*sj0);
IkReal x9061=(((cj5*r12))+(((-1.0)*cj6*r11*x9059))+(((-1.0)*r10*sj6*x9059)));
j4eval[0]=x9061;
j4eval[1]=IKsign(x9061);
j4eval[2]=((IKabs((((cj6*x9058))+(((-1.0)*sj6*x9060)))))+(IKabs((((cj5*cj6*x9060))+((r22*sj0*sj5))+((cj5*sj6*x9058))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9062=cj5*cj5;
IkReal x9063=cj6*cj6;
IkReal x9064=(r00*r20);
IkReal x9065=(r02*r22);
IkReal x9066=(r22*sj5);
IkReal x9067=(cj6*r21);
IkReal x9068=(r00*sj6);
IkReal x9069=(r20*sj6);
IkReal x9070=(cj6*r01);
IkReal x9071=(cj0*cj5);
IkReal x9072=((1.0)*x9062);
IkReal x9073=(cj5*r02*sj5);
IkReal x9074=(r01*r21*x9063);
IkReal x9075=(((x9062*x9074))+(((-1.0)*x9074))+(((-1.0)*x9069*x9070))+((x9063*x9064))+((x9069*x9073))+(((-1.0)*x9063*x9064*x9072))+((x9067*x9073))+((cj5*x9066*x9068))+((r01*r21))+x9065+(((-1.0)*x9067*x9068))+(((-1.0)*x9065*x9072))+((x9062*x9069*x9070))+((x9062*x9064))+((x9062*x9067*x9068))+((cj5*x9066*x9070)));
j4eval[0]=x9075;
j4eval[1]=IKsign(x9075);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x9069*x9071))+((x9067*x9071))+((cj0*x9066))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9076=cj6*cj6;
IkReal x9077=cj5*cj5;
IkReal x9078=(r12*sj5);
IkReal x9079=(r22*sj5);
IkReal x9080=((1.0)*r11);
IkReal x9081=(r20*sj0);
IkReal x9082=(r10*r20);
IkReal x9083=(cj5*sj6);
IkReal x9084=(cj6*r10);
IkReal x9085=(r12*r22);
IkReal x9086=(cj5*cj6*r21);
IkReal x9087=(r21*x9076);
IkReal x9088=(cj6*r20*sj6);
IkReal x9089=(r11*x9077);
IkReal x9090=((1.0)*r21*sj6);
IkReal x9091=((1.0)*x9077);
IkReal x9092=(((r21*sj6*x9077*x9084))+((x9078*x9086))+((r11*r21))+((x9087*x9089))+((cj5*cj6*r11*x9079))+(((-1.0)*x9084*x9090))+x9085+(((-1.0)*x9085*x9091))+((x9088*x9089))+(((-1.0)*x9080*x9088))+(((-1.0)*x9080*x9087))+((x9077*x9082))+((r10*x9079*x9083))+((x9076*x9082))+(((-1.0)*x9076*x9082*x9091))+((r20*x9078*x9083)));
j4eval[0]=x9092;
j4eval[1]=IKsign(x9092);
j4eval[2]=((IKabs((((x9081*x9083))+((sj0*x9086))+((sj0*x9079)))))+(IKabs((((cj6*x9081))+(((-1.0)*sj0*x9090))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9093=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9093;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x9093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9094=((1.0)*sj6);
IkReal x9095=((((-1.0)*r00*sj5*x9094))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x9095;
j4eval[1]=IKsign(x9095);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x9094))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9096=cj6*cj6;
IkReal x9097=r01*r01;
IkReal x9098=cj5*cj5;
IkReal x9099=r00*r00;
IkReal x9100=r02*r02;
IkReal x9101=(cj6*r00);
IkReal x9102=(r02*sj5);
IkReal x9103=(cj5*cj6*r01);
IkReal x9104=((2.0)*r01*sj6);
IkReal x9105=(cj5*r00*sj6);
IkReal x9106=((1.0)*x9098);
IkReal x9107=(x9096*x9099);
IkReal x9108=(x9096*x9097);
IkReal x9109=(((x9098*x9108))+(((-1.0)*x9108))+(((-1.0)*x9101*x9104))+(((-1.0)*x9100*x9106))+(((2.0)*x9102*x9103))+(((2.0)*x9102*x9105))+x9107+x9100+x9097+((x9098*x9099))+((x9098*x9101*x9104))+(((-1.0)*x9106*x9107)));
j4eval[0]=x9109;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x9101)))+(IKabs((x9105+x9102+x9103))));
j4eval[2]=IKsign(x9109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9110=cj6*cj6;
IkReal x9111=r01*r01;
IkReal x9112=cj5*cj5;
IkReal x9113=r00*r00;
IkReal x9114=r02*r02;
IkReal x9115=(cj6*r00);
IkReal x9116=((2.0)*r01);
IkReal x9117=(cj5*cj6);
IkReal x9118=(r02*sj5);
IkReal x9119=(cj5*r00*sj6);
IkReal x9120=(x9112*x9113);
IkReal x9121=(x9110*x9111);
CheckValue<IkReal> x9122=IKPowWithIntegerCheck(IKsign((((sj6*x9112*x9115*x9116))+(((2.0)*x9118*x9119))+x9111+x9114+x9120+(((-1.0)*x9112*x9114))+((x9110*x9113))+(((-1.0)*sj6*x9115*x9116))+((x9116*x9117*x9118))+((x9112*x9121))+(((-1.0)*x9110*x9120))+(((-1.0)*x9121)))),-1);
if(!x9122.valid){
continue;
}
CheckValue<IkReal> x9123 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x9115)),IkReal((x9119+x9118+((r01*x9117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9122.value)))+(x9123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9124=IKsin(j4);
IkReal x9125=IKcos(j4);
IkReal x9126=(cj5*cj6);
IkReal x9127=(r11*sj6);
IkReal x9128=(cj6*r20);
IkReal x9129=(cj6*r10);
IkReal x9130=(cj5*sj6);
IkReal x9131=(r21*sj6);
IkReal x9132=(cj6*r00);
IkReal x9133=(r01*sj6);
IkReal x9134=((1.0)*x9125);
IkReal x9135=((1.0)*x9124);
IkReal x9136=(sj5*x9135);
evalcond[0]=((((-1.0)*x9131*x9134))+(((-1.0)*r21*x9126*x9135))+((x9125*x9128))+(((-1.0)*r22*x9136))+(((-1.0)*r20*x9130*x9135)));
evalcond[1]=((((-1.0)*x9133*x9134))+(((-1.0)*r02*x9136))+(((-1.0)*r00*x9130*x9135))+(((-1.0)*r01*x9126*x9135))+((x9125*x9132)));
evalcond[2]=((((-1.0)*x9128*x9135))+(((-1.0)*r21*x9126*x9134))+(((-1.0)*r22*sj5*x9134))+((x9124*x9131))+(((-1.0)*r20*x9130*x9134)));
evalcond[3]=((((-1.0)*r12*sj5*x9134))+(((-1.0)*r10*x9130*x9134))+((x9124*x9127))+(((-1.0)*x9129*x9135))+(((-1.0)*r11*x9126*x9134)));
evalcond[4]=((-1.0)+(((-1.0)*x9127*x9134))+(((-1.0)*r10*x9130*x9135))+((x9125*x9129))+(((-1.0)*r12*x9136))+(((-1.0)*r11*x9126*x9135)));
evalcond[5]=((1.0)+(((-1.0)*r00*x9130*x9134))+(((-1.0)*r02*sj5*x9134))+(((-1.0)*x9132*x9135))+(((-1.0)*r01*x9126*x9134))+((x9124*x9133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9137=((1.0)*sj6);
CheckValue<IkReal> x9138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x9137))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x9138.valid){
continue;
}
CheckValue<IkReal> x9139 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9137))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9138.value)))+(x9139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9140=IKsin(j4);
IkReal x9141=IKcos(j4);
IkReal x9142=(cj5*cj6);
IkReal x9143=(r11*sj6);
IkReal x9144=(cj6*r20);
IkReal x9145=(cj6*r10);
IkReal x9146=(cj5*sj6);
IkReal x9147=(r21*sj6);
IkReal x9148=(cj6*r00);
IkReal x9149=(r01*sj6);
IkReal x9150=((1.0)*x9141);
IkReal x9151=((1.0)*x9140);
IkReal x9152=(sj5*x9151);
evalcond[0]=((((-1.0)*x9147*x9150))+(((-1.0)*r22*x9152))+((x9141*x9144))+(((-1.0)*r21*x9142*x9151))+(((-1.0)*r20*x9146*x9151)));
evalcond[1]=((((-1.0)*r02*x9152))+(((-1.0)*r00*x9146*x9151))+(((-1.0)*r01*x9142*x9151))+((x9141*x9148))+(((-1.0)*x9149*x9150)));
evalcond[2]=(((x9140*x9147))+(((-1.0)*r21*x9142*x9150))+(((-1.0)*r22*sj5*x9150))+(((-1.0)*x9144*x9151))+(((-1.0)*r20*x9146*x9150)));
evalcond[3]=((((-1.0)*x9145*x9151))+(((-1.0)*r11*x9142*x9150))+((x9140*x9143))+(((-1.0)*r12*sj5*x9150))+(((-1.0)*r10*x9146*x9150)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x9142*x9151))+(((-1.0)*r12*x9152))+((x9141*x9145))+(((-1.0)*r10*x9146*x9151))+(((-1.0)*x9143*x9150)));
evalcond[5]=((1.0)+(((-1.0)*r00*x9146*x9150))+(((-1.0)*r01*x9142*x9150))+((x9140*x9149))+(((-1.0)*r02*sj5*x9150))+(((-1.0)*x9148*x9151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9153=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9153.valid){
continue;
}
CheckValue<IkReal> x9154 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9153.value)))+(x9154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9155=IKsin(j4);
IkReal x9156=IKcos(j4);
IkReal x9157=(cj5*cj6);
IkReal x9158=(r11*sj6);
IkReal x9159=(cj6*r20);
IkReal x9160=(cj6*r10);
IkReal x9161=(cj5*sj6);
IkReal x9162=(r21*sj6);
IkReal x9163=(cj6*r00);
IkReal x9164=(r01*sj6);
IkReal x9165=((1.0)*x9156);
IkReal x9166=((1.0)*x9155);
IkReal x9167=(sj5*x9166);
evalcond[0]=((((-1.0)*r21*x9157*x9166))+(((-1.0)*r22*x9167))+(((-1.0)*x9162*x9165))+(((-1.0)*r20*x9161*x9166))+((x9156*x9159)));
evalcond[1]=((((-1.0)*r00*x9161*x9166))+(((-1.0)*r02*x9167))+(((-1.0)*x9164*x9165))+(((-1.0)*r01*x9157*x9166))+((x9156*x9163)));
evalcond[2]=((((-1.0)*r21*x9157*x9165))+(((-1.0)*x9159*x9166))+(((-1.0)*r20*x9161*x9165))+(((-1.0)*r22*sj5*x9165))+((x9155*x9162)));
evalcond[3]=((((-1.0)*r11*x9157*x9165))+(((-1.0)*r12*sj5*x9165))+(((-1.0)*x9160*x9166))+((x9155*x9158))+(((-1.0)*r10*x9161*x9165)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x9157*x9166))+(((-1.0)*r12*x9167))+(((-1.0)*r10*x9161*x9166))+(((-1.0)*x9158*x9165))+((x9156*x9160)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x9165))+(((-1.0)*x9163*x9166))+(((-1.0)*r00*x9161*x9165))+(((-1.0)*r01*x9157*x9165))+((x9155*x9164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9168=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x9168;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x9168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9169=((1.0)*sj5);
IkReal x9170=(((cj5*r22))+(((-1.0)*cj6*r21*x9169))+(((-1.0)*r20*sj6*x9169)));
j4eval[0]=x9170;
j4eval[1]=IKsign(x9170);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9171=cj6*cj6;
IkReal x9172=cj5*cj5;
IkReal x9173=r00*r00;
IkReal x9174=r01*r01;
IkReal x9175=r02*r02;
IkReal x9176=(cj6*r00);
IkReal x9177=(cj5*cj6*r01);
IkReal x9178=((2.0)*r02*sj5);
IkReal x9179=((1.0)*x9171);
IkReal x9180=((2.0)*r01*sj6);
IkReal x9181=(cj5*r00*sj6);
IkReal x9182=(x9172*x9173);
IkReal x9183=((((-1.0)*x9175))+(((-1.0)*x9174))+(((-1.0)*x9172*x9176*x9180))+(((-1.0)*x9172*x9174*x9179))+((x9176*x9180))+(((-1.0)*x9173*x9179))+((x9171*x9182))+(((-1.0)*x9182))+(((-1.0)*x9177*x9178))+(((-1.0)*x9178*x9181))+((x9172*x9175))+((x9171*x9174)));
j4eval[0]=x9183;
j4eval[1]=((IKabs((x9181+x9177+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x9176))));
j4eval[2]=IKsign(x9183);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9184=cj6*cj6;
IkReal x9185=cj5*cj5;
IkReal x9186=r00*r00;
IkReal x9187=r01*r01;
IkReal x9188=r02*r02;
IkReal x9189=(cj6*r00);
IkReal x9190=(cj5*cj6*r01);
IkReal x9191=((2.0)*r02*sj5);
IkReal x9192=((1.0)*x9184);
IkReal x9193=((2.0)*r01*sj6);
IkReal x9194=(cj5*r00*sj6);
IkReal x9195=(x9185*x9186);
CheckValue<IkReal> x9196=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9191*x9194))+(((-1.0)*x9185*x9189*x9193))+((x9189*x9193))+((x9184*x9195))+((x9185*x9188))+((x9184*x9187))+(((-1.0)*x9187))+(((-1.0)*x9188))+(((-1.0)*x9190*x9191))+(((-1.0)*x9195))+(((-1.0)*x9186*x9192))+(((-1.0)*x9185*x9187*x9192)))),-1);
if(!x9196.valid){
continue;
}
CheckValue<IkReal> x9197 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x9189)),IkReal((x9190+x9194+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9196.value)))+(x9197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9198=IKsin(j4);
IkReal x9199=IKcos(j4);
IkReal x9200=(cj5*cj6);
IkReal x9201=(r11*sj6);
IkReal x9202=(cj6*r20);
IkReal x9203=(cj6*r10);
IkReal x9204=(cj5*sj6);
IkReal x9205=(r21*sj6);
IkReal x9206=(cj6*r00);
IkReal x9207=(r01*sj6);
IkReal x9208=((1.0)*x9199);
IkReal x9209=((1.0)*x9198);
IkReal x9210=(sj5*x9209);
evalcond[0]=((((-1.0)*x9205*x9208))+(((-1.0)*r21*x9200*x9209))+(((-1.0)*r20*x9204*x9209))+((x9199*x9202))+(((-1.0)*r22*x9210)));
evalcond[1]=((((-1.0)*r02*x9210))+(((-1.0)*r00*x9204*x9209))+(((-1.0)*r01*x9200*x9209))+(((-1.0)*x9207*x9208))+((x9199*x9206)));
evalcond[2]=(((x9198*x9205))+(((-1.0)*r22*sj5*x9208))+(((-1.0)*r21*x9200*x9208))+(((-1.0)*r20*x9204*x9208))+(((-1.0)*x9202*x9209)));
evalcond[3]=((((-1.0)*r10*x9204*x9208))+(((-1.0)*r11*x9200*x9208))+((x9198*x9201))+(((-1.0)*r12*sj5*x9208))+(((-1.0)*x9203*x9209)));
evalcond[4]=((1.0)+(((-1.0)*x9201*x9208))+(((-1.0)*r10*x9204*x9209))+(((-1.0)*r11*x9200*x9209))+(((-1.0)*r12*x9210))+((x9199*x9203)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x9204*x9208))+(((-1.0)*r01*x9200*x9208))+(((-1.0)*r02*sj5*x9208))+((x9198*x9207))+(((-1.0)*x9206*x9209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9211=((1.0)*sj5);
CheckValue<IkReal> x9212 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9212.valid){
continue;
}
CheckValue<IkReal> x9213=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x9211))+(((-1.0)*cj6*r21*x9211)))),-1);
if(!x9213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9212.value)+(((1.5707963267949)*(x9213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9214=IKsin(j4);
IkReal x9215=IKcos(j4);
IkReal x9216=(cj5*cj6);
IkReal x9217=(r11*sj6);
IkReal x9218=(cj6*r20);
IkReal x9219=(cj6*r10);
IkReal x9220=(cj5*sj6);
IkReal x9221=(r21*sj6);
IkReal x9222=(cj6*r00);
IkReal x9223=(r01*sj6);
IkReal x9224=((1.0)*x9215);
IkReal x9225=((1.0)*x9214);
IkReal x9226=(sj5*x9225);
evalcond[0]=((((-1.0)*x9221*x9224))+(((-1.0)*r21*x9216*x9225))+((x9215*x9218))+(((-1.0)*r20*x9220*x9225))+(((-1.0)*r22*x9226)));
evalcond[1]=((((-1.0)*r02*x9226))+(((-1.0)*r00*x9220*x9225))+(((-1.0)*r01*x9216*x9225))+((x9215*x9222))+(((-1.0)*x9223*x9224)));
evalcond[2]=(((x9214*x9221))+(((-1.0)*r22*sj5*x9224))+(((-1.0)*r21*x9216*x9224))+(((-1.0)*x9218*x9225))+(((-1.0)*r20*x9220*x9224)));
evalcond[3]=(((x9214*x9217))+(((-1.0)*x9219*x9225))+(((-1.0)*r11*x9216*x9224))+(((-1.0)*r12*sj5*x9224))+(((-1.0)*r10*x9220*x9224)));
evalcond[4]=((1.0)+(((-1.0)*x9217*x9224))+(((-1.0)*r11*x9216*x9225))+((x9215*x9219))+(((-1.0)*r12*x9226))+(((-1.0)*r10*x9220*x9225)));
evalcond[5]=((-1.0)+((x9214*x9223))+(((-1.0)*r00*x9220*x9224))+(((-1.0)*r01*x9216*x9224))+(((-1.0)*x9222*x9225))+(((-1.0)*r02*sj5*x9224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9227 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9227.valid){
continue;
}
CheckValue<IkReal> x9228=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x9228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9227.value)+(((1.5707963267949)*(x9228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9229=IKsin(j4);
IkReal x9230=IKcos(j4);
IkReal x9231=(cj5*cj6);
IkReal x9232=(r11*sj6);
IkReal x9233=(cj6*r20);
IkReal x9234=(cj6*r10);
IkReal x9235=(cj5*sj6);
IkReal x9236=(r21*sj6);
IkReal x9237=(cj6*r00);
IkReal x9238=(r01*sj6);
IkReal x9239=((1.0)*x9230);
IkReal x9240=((1.0)*x9229);
IkReal x9241=(sj5*x9240);
evalcond[0]=((((-1.0)*r22*x9241))+(((-1.0)*r20*x9235*x9240))+(((-1.0)*x9236*x9239))+(((-1.0)*r21*x9231*x9240))+((x9230*x9233)));
evalcond[1]=((((-1.0)*r01*x9231*x9240))+(((-1.0)*x9238*x9239))+(((-1.0)*r02*x9241))+((x9230*x9237))+(((-1.0)*r00*x9235*x9240)));
evalcond[2]=((((-1.0)*r20*x9235*x9239))+((x9229*x9236))+(((-1.0)*r22*sj5*x9239))+(((-1.0)*r21*x9231*x9239))+(((-1.0)*x9233*x9240)));
evalcond[3]=((((-1.0)*r11*x9231*x9239))+((x9229*x9232))+(((-1.0)*r12*sj5*x9239))+(((-1.0)*r10*x9235*x9239))+(((-1.0)*x9234*x9240)));
evalcond[4]=((1.0)+(((-1.0)*r12*x9241))+(((-1.0)*r10*x9235*x9240))+(((-1.0)*x9232*x9239))+((x9230*x9234))+(((-1.0)*r11*x9231*x9240)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x9235*x9239))+((x9229*x9238))+(((-1.0)*x9237*x9240))+(((-1.0)*r01*x9231*x9239))+(((-1.0)*r02*sj5*x9239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9242=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9242;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x9242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9243=((1.0)*sj6);
IkReal x9244=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x9243)));
j4eval[0]=x9244;
j4eval[1]=IKsign(x9244);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x9243))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9245=r11*r11;
IkReal x9246=cj5*cj5;
IkReal x9247=cj6*cj6;
IkReal x9248=r10*r10;
IkReal x9249=r12*r12;
IkReal x9250=(r12*sj5);
IkReal x9251=(cj6*r10);
IkReal x9252=((1.0)*x9247);
IkReal x9253=(cj5*cj6*r11);
IkReal x9254=(cj5*r10*sj6);
IkReal x9255=((2.0)*r11*sj6);
IkReal x9256=(x9246*x9248);
IkReal x9257=(((x9245*x9246*x9247))+(((2.0)*x9250*x9253))+(((2.0)*x9250*x9254))+(((-1.0)*x9251*x9255))+((x9247*x9248))+((x9246*x9251*x9255))+x9256+x9249+x9245+(((-1.0)*x9245*x9252))+(((-1.0)*x9246*x9249))+(((-1.0)*x9252*x9256)));
j4eval[0]=x9257;
j4eval[1]=IKsign(x9257);
j4eval[2]=((IKabs((x9254+x9253+x9250)))+(IKabs((x9251+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9258=r11*r11;
IkReal x9259=cj5*cj5;
IkReal x9260=cj6*cj6;
IkReal x9261=r10*r10;
IkReal x9262=r12*r12;
IkReal x9263=(r10*sj6);
IkReal x9264=(r12*sj5);
IkReal x9265=((1.0)*x9260);
IkReal x9266=(cj5*cj6*r11);
IkReal x9267=((2.0)*cj6*r11);
IkReal x9268=(x9259*x9261);
CheckValue<IkReal> x9269=IKPowWithIntegerCheck(IKsign(((((2.0)*x9264*x9266))+(((-1.0)*x9258*x9265))+x9262+x9268+x9258+(((-1.0)*x9263*x9267))+(((-1.0)*x9259*x9262))+((x9258*x9259*x9260))+((x9260*x9261))+(((2.0)*cj5*x9263*x9264))+((x9259*x9263*x9267))+(((-1.0)*x9265*x9268)))),-1);
if(!x9269.valid){
continue;
}
CheckValue<IkReal> x9270 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x9266+x9264+((cj5*x9263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9269.value)))+(x9270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9271=IKsin(j4);
IkReal x9272=IKcos(j4);
IkReal x9273=(cj5*cj6);
IkReal x9274=(r11*sj6);
IkReal x9275=(cj6*r20);
IkReal x9276=(cj6*r10);
IkReal x9277=(cj5*sj6);
IkReal x9278=(r01*sj6);
IkReal x9279=(r21*sj6);
IkReal x9280=(cj6*r00);
IkReal x9281=((1.0)*x9272);
IkReal x9282=((1.0)*x9271);
IkReal x9283=(sj5*x9282);
evalcond[0]=((((-1.0)*r22*x9283))+(((-1.0)*x9279*x9281))+((x9272*x9275))+(((-1.0)*r21*x9273*x9282))+(((-1.0)*r20*x9277*x9282)));
evalcond[1]=((((-1.0)*r12*x9283))+(((-1.0)*r10*x9277*x9282))+((x9272*x9276))+(((-1.0)*r11*x9273*x9282))+(((-1.0)*x9274*x9281)));
evalcond[2]=((((-1.0)*x9275*x9282))+(((-1.0)*r22*sj5*x9281))+((x9271*x9279))+(((-1.0)*r21*x9273*x9281))+(((-1.0)*r20*x9277*x9281)));
evalcond[3]=((((-1.0)*r02*sj5*x9281))+((x9271*x9278))+(((-1.0)*r00*x9277*x9281))+(((-1.0)*x9280*x9282))+(((-1.0)*r01*x9273*x9281)));
evalcond[4]=((1.0)+((x9272*x9280))+(((-1.0)*x9278*x9281))+(((-1.0)*r02*x9283))+(((-1.0)*r00*x9277*x9282))+(((-1.0)*r01*x9273*x9282)));
evalcond[5]=((1.0)+(((-1.0)*x9276*x9282))+(((-1.0)*r10*x9277*x9281))+((x9271*x9274))+(((-1.0)*r11*x9273*x9281))+(((-1.0)*r12*sj5*x9281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9284=((1.0)*sj6);
CheckValue<IkReal> x9285 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x9284)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9285.valid){
continue;
}
CheckValue<IkReal> x9286=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x9284)))),-1);
if(!x9286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9285.value)+(((1.5707963267949)*(x9286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9287=IKsin(j4);
IkReal x9288=IKcos(j4);
IkReal x9289=(cj5*cj6);
IkReal x9290=(r11*sj6);
IkReal x9291=(cj6*r20);
IkReal x9292=(cj6*r10);
IkReal x9293=(cj5*sj6);
IkReal x9294=(r01*sj6);
IkReal x9295=(r21*sj6);
IkReal x9296=(cj6*r00);
IkReal x9297=((1.0)*x9288);
IkReal x9298=((1.0)*x9287);
IkReal x9299=(sj5*x9298);
evalcond[0]=((((-1.0)*r20*x9293*x9298))+(((-1.0)*r21*x9289*x9298))+(((-1.0)*r22*x9299))+((x9288*x9291))+(((-1.0)*x9295*x9297)));
evalcond[1]=((((-1.0)*r10*x9293*x9298))+(((-1.0)*r11*x9289*x9298))+(((-1.0)*x9290*x9297))+((x9288*x9292))+(((-1.0)*r12*x9299)));
evalcond[2]=((((-1.0)*x9291*x9298))+(((-1.0)*r20*x9293*x9297))+(((-1.0)*r21*x9289*x9297))+(((-1.0)*r22*sj5*x9297))+((x9287*x9295)));
evalcond[3]=((((-1.0)*r01*x9289*x9297))+(((-1.0)*x9296*x9298))+(((-1.0)*r02*sj5*x9297))+(((-1.0)*r00*x9293*x9297))+((x9287*x9294)));
evalcond[4]=((1.0)+(((-1.0)*r01*x9289*x9298))+(((-1.0)*x9294*x9297))+(((-1.0)*r02*x9299))+((x9288*x9296))+(((-1.0)*r00*x9293*x9298)));
evalcond[5]=((1.0)+(((-1.0)*r10*x9293*x9297))+(((-1.0)*r11*x9289*x9297))+(((-1.0)*x9292*x9298))+((x9287*x9290))+(((-1.0)*r12*sj5*x9297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9300=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9300.valid){
continue;
}
CheckValue<IkReal> x9301 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9300.value)))+(x9301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9302=IKsin(j4);
IkReal x9303=IKcos(j4);
IkReal x9304=(cj5*cj6);
IkReal x9305=(r11*sj6);
IkReal x9306=(cj6*r20);
IkReal x9307=(cj6*r10);
IkReal x9308=(cj5*sj6);
IkReal x9309=(r01*sj6);
IkReal x9310=(r21*sj6);
IkReal x9311=(cj6*r00);
IkReal x9312=((1.0)*x9303);
IkReal x9313=((1.0)*x9302);
IkReal x9314=(sj5*x9313);
evalcond[0]=((((-1.0)*r20*x9308*x9313))+(((-1.0)*x9310*x9312))+(((-1.0)*r21*x9304*x9313))+((x9303*x9306))+(((-1.0)*r22*x9314)));
evalcond[1]=((((-1.0)*r11*x9304*x9313))+(((-1.0)*r10*x9308*x9313))+(((-1.0)*x9305*x9312))+((x9303*x9307))+(((-1.0)*r12*x9314)));
evalcond[2]=((((-1.0)*x9306*x9313))+(((-1.0)*r20*x9308*x9312))+(((-1.0)*r21*x9304*x9312))+(((-1.0)*r22*sj5*x9312))+((x9302*x9310)));
evalcond[3]=((((-1.0)*r01*x9304*x9312))+(((-1.0)*r02*sj5*x9312))+(((-1.0)*x9311*x9313))+((x9302*x9309))+(((-1.0)*r00*x9308*x9312)));
evalcond[4]=((1.0)+(((-1.0)*r01*x9304*x9313))+(((-1.0)*r02*x9314))+(((-1.0)*x9309*x9312))+((x9303*x9311))+(((-1.0)*r00*x9308*x9313)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x9312))+(((-1.0)*x9307*x9313))+(((-1.0)*r11*x9304*x9312))+(((-1.0)*r10*x9308*x9312))+((x9302*x9305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9315=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9315;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x9315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9316=((1.0)*sj5);
IkReal x9317=((((-1.0)*r20*sj6*x9316))+((cj5*r22))+(((-1.0)*cj6*r21*x9316)));
j4eval[0]=x9317;
j4eval[1]=IKsign(x9317);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9318=cj6*cj6;
IkReal x9319=cj5*cj5;
IkReal x9320=r10*r10;
IkReal x9321=r11*r11;
IkReal x9322=r12*r12;
IkReal x9323=(r10*sj6);
IkReal x9324=(r12*sj5);
IkReal x9325=((2.0)*cj6*r11);
IkReal x9326=((1.0)*x9320);
IkReal x9327=(x9318*x9321);
IkReal x9328=((((-1.0)*x9319*x9323*x9325))+(((-1.0)*x9322))+(((-1.0)*x9321))+x9327+((x9319*x9322))+(((-1.0)*x9318*x9326))+(((-2.0)*cj5*x9323*x9324))+(((-1.0)*x9319*x9326))+(((-1.0)*cj5*x9324*x9325))+((x9323*x9325))+(((-1.0)*x9319*x9327))+((x9318*x9319*x9320)));
j4eval[0]=x9328;
j4eval[1]=((IKabs((x9324+((cj5*cj6*r11))+((cj5*x9323)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x9328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9329=cj6*cj6;
IkReal x9330=cj5*cj5;
IkReal x9331=r10*r10;
IkReal x9332=r11*r11;
IkReal x9333=r12*r12;
IkReal x9334=(r10*sj6);
IkReal x9335=(r12*sj5);
IkReal x9336=((2.0)*cj6*r11);
IkReal x9337=(x9329*x9332);
IkReal x9338=(x9330*x9331);
CheckValue<IkReal> x9339 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x9335+((cj5*cj6*r11))+((cj5*x9334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9339.valid){
continue;
}
CheckValue<IkReal> x9340=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9329*x9331))+((x9329*x9338))+x9337+(((-1.0)*x9338))+(((-1.0)*x9333))+(((-1.0)*x9332))+(((-1.0)*x9330*x9337))+(((-1.0)*cj5*x9335*x9336))+(((-2.0)*cj5*x9334*x9335))+(((-1.0)*x9330*x9334*x9336))+((x9330*x9333))+((x9334*x9336)))),-1);
if(!x9340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9339.value)+(((1.5707963267949)*(x9340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9341=IKsin(j4);
IkReal x9342=IKcos(j4);
IkReal x9343=(cj5*cj6);
IkReal x9344=(r11*sj6);
IkReal x9345=(cj6*r20);
IkReal x9346=(cj6*r10);
IkReal x9347=(cj5*sj6);
IkReal x9348=(r01*sj6);
IkReal x9349=(r21*sj6);
IkReal x9350=(cj6*r00);
IkReal x9351=((1.0)*x9342);
IkReal x9352=((1.0)*x9341);
IkReal x9353=(sj5*x9352);
evalcond[0]=((((-1.0)*r22*x9353))+(((-1.0)*x9349*x9351))+((x9342*x9345))+(((-1.0)*r20*x9347*x9352))+(((-1.0)*r21*x9343*x9352)));
evalcond[1]=((((-1.0)*x9344*x9351))+(((-1.0)*r11*x9343*x9352))+((x9342*x9346))+(((-1.0)*r12*x9353))+(((-1.0)*r10*x9347*x9352)));
evalcond[2]=(((x9341*x9349))+(((-1.0)*x9345*x9352))+(((-1.0)*r22*sj5*x9351))+(((-1.0)*r20*x9347*x9351))+(((-1.0)*r21*x9343*x9351)));
evalcond[3]=((((-1.0)*r00*x9347*x9351))+(((-1.0)*r01*x9343*x9351))+((x9341*x9348))+(((-1.0)*x9350*x9352))+(((-1.0)*r02*sj5*x9351)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x9347*x9352))+(((-1.0)*r02*x9353))+(((-1.0)*r01*x9343*x9352))+((x9342*x9350))+(((-1.0)*x9348*x9351)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x9343*x9351))+((x9341*x9344))+(((-1.0)*x9346*x9352))+(((-1.0)*r12*sj5*x9351))+(((-1.0)*r10*x9347*x9351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9354=((1.0)*sj5);
CheckValue<IkReal> x9355 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9355.valid){
continue;
}
CheckValue<IkReal> x9356=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x9354))+(((-1.0)*r20*sj6*x9354)))),-1);
if(!x9356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9355.value)+(((1.5707963267949)*(x9356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9357=IKsin(j4);
IkReal x9358=IKcos(j4);
IkReal x9359=(cj5*cj6);
IkReal x9360=(r11*sj6);
IkReal x9361=(cj6*r20);
IkReal x9362=(cj6*r10);
IkReal x9363=(cj5*sj6);
IkReal x9364=(r01*sj6);
IkReal x9365=(r21*sj6);
IkReal x9366=(cj6*r00);
IkReal x9367=((1.0)*x9358);
IkReal x9368=((1.0)*x9357);
IkReal x9369=(sj5*x9368);
evalcond[0]=((((-1.0)*x9365*x9367))+(((-1.0)*r21*x9359*x9368))+(((-1.0)*r20*x9363*x9368))+((x9358*x9361))+(((-1.0)*r22*x9369)));
evalcond[1]=((((-1.0)*x9360*x9367))+(((-1.0)*r11*x9359*x9368))+(((-1.0)*r10*x9363*x9368))+((x9358*x9362))+(((-1.0)*r12*x9369)));
evalcond[2]=((((-1.0)*r21*x9359*x9367))+(((-1.0)*r20*x9363*x9367))+((x9357*x9365))+(((-1.0)*r22*sj5*x9367))+(((-1.0)*x9361*x9368)));
evalcond[3]=((((-1.0)*x9366*x9368))+((x9357*x9364))+(((-1.0)*r00*x9363*x9367))+(((-1.0)*r01*x9359*x9367))+(((-1.0)*r02*sj5*x9367)));
evalcond[4]=((-1.0)+(((-1.0)*x9364*x9367))+(((-1.0)*r00*x9363*x9368))+(((-1.0)*r02*x9369))+(((-1.0)*r01*x9359*x9368))+((x9358*x9366)));
evalcond[5]=((-1.0)+(((-1.0)*x9362*x9368))+((x9357*x9360))+(((-1.0)*r12*sj5*x9367))+(((-1.0)*r11*x9359*x9367))+(((-1.0)*r10*x9363*x9367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9370 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9370.valid){
continue;
}
CheckValue<IkReal> x9371=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9370.value)+(((1.5707963267949)*(x9371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9372=IKsin(j4);
IkReal x9373=IKcos(j4);
IkReal x9374=(cj5*cj6);
IkReal x9375=(r11*sj6);
IkReal x9376=(cj6*r20);
IkReal x9377=(cj6*r10);
IkReal x9378=(cj5*sj6);
IkReal x9379=(r01*sj6);
IkReal x9380=(r21*sj6);
IkReal x9381=(cj6*r00);
IkReal x9382=((1.0)*x9373);
IkReal x9383=((1.0)*x9372);
IkReal x9384=(sj5*x9383);
evalcond[0]=((((-1.0)*r20*x9378*x9383))+(((-1.0)*x9380*x9382))+(((-1.0)*r22*x9384))+(((-1.0)*r21*x9374*x9383))+((x9373*x9376)));
evalcond[1]=((((-1.0)*r11*x9374*x9383))+(((-1.0)*r10*x9378*x9383))+(((-1.0)*r12*x9384))+(((-1.0)*x9375*x9382))+((x9373*x9377)));
evalcond[2]=((((-1.0)*x9376*x9383))+(((-1.0)*r20*x9378*x9382))+(((-1.0)*r22*sj5*x9382))+((x9372*x9380))+(((-1.0)*r21*x9374*x9382)));
evalcond[3]=((((-1.0)*x9381*x9383))+((x9372*x9379))+(((-1.0)*r01*x9374*x9382))+(((-1.0)*r00*x9378*x9382))+(((-1.0)*r02*sj5*x9382)));
evalcond[4]=((-1.0)+(((-1.0)*x9379*x9382))+(((-1.0)*r02*x9384))+(((-1.0)*r01*x9374*x9383))+(((-1.0)*r00*x9378*x9383))+((x9373*x9381)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x9374*x9382))+(((-1.0)*r10*x9378*x9382))+(((-1.0)*r12*sj5*x9382))+((x9372*x9375))+(((-1.0)*x9377*x9383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9385=cj6*cj6;
IkReal x9386=cj5*cj5;
IkReal x9387=((1.0)*r11);
IkReal x9388=(cj5*sj0);
IkReal x9389=(cj6*r21);
IkReal x9390=(r22*sj5);
IkReal x9391=(r20*sj6);
IkReal x9392=(r12*r22);
IkReal x9393=((1.0)*sj6);
IkReal x9394=(r21*x9385);
IkReal x9395=(r10*x9386);
IkReal x9396=(r11*x9386);
IkReal x9397=(r20*x9385);
IkReal x9398=(cj5*r12*sj5);
CheckValue<IkReal> x9399 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x9393))+((cj6*r20*sj0)))),IkReal((((x9388*x9391))+((sj0*x9390))+((x9388*x9389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9399.valid){
continue;
}
CheckValue<IkReal> x9400=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9387*x9394))+(((-1.0)*r10*x9389*x9393))+((x9394*x9396))+((r10*x9397))+(((-1.0)*x9395*x9397))+x9392+((r11*r21))+((r20*x9395))+((x9391*x9398))+((x9389*x9398))+((cj6*x9391*x9396))+((cj5*cj6*r11*x9390))+((sj6*x9389*x9395))+(((-1.0)*x9386*x9392))+((cj5*r10*sj6*x9390))+(((-1.0)*cj6*x9387*x9391)))),-1);
if(!x9400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9399.value)+(((1.5707963267949)*(x9400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9401=IKsin(j4);
IkReal x9402=IKcos(j4);
IkReal x9403=(cj5*cj6);
IkReal x9404=(r11*sj6);
IkReal x9405=(cj6*r20);
IkReal x9406=(cj6*r10);
IkReal x9407=(cj5*sj6);
IkReal x9408=(r01*sj6);
IkReal x9409=(r21*sj6);
IkReal x9410=(cj6*r00);
IkReal x9411=((1.0)*x9402);
IkReal x9412=((1.0)*x9401);
IkReal x9413=(sj5*x9412);
evalcond[0]=((((-1.0)*r21*x9403*x9412))+(((-1.0)*r22*x9413))+((x9402*x9405))+(((-1.0)*r20*x9407*x9412))+(((-1.0)*x9409*x9411)));
evalcond[1]=(((x9401*x9409))+(((-1.0)*r21*x9403*x9411))+(((-1.0)*r20*x9407*x9411))+(((-1.0)*r22*sj5*x9411))+(((-1.0)*x9405*x9412)));
evalcond[2]=((((-1.0)*r01*x9403*x9412))+((x9402*x9410))+sj0+(((-1.0)*x9408*x9411))+(((-1.0)*r00*x9407*x9412))+(((-1.0)*r02*x9413)));
evalcond[3]=((((-1.0)*r01*x9403*x9411))+(((-1.0)*r00*x9407*x9411))+cj0+(((-1.0)*r02*sj5*x9411))+((x9401*x9408))+(((-1.0)*x9410*x9412)));
evalcond[4]=(sj0+(((-1.0)*r12*sj5*x9411))+((x9401*x9404))+(((-1.0)*x9406*x9412))+(((-1.0)*r10*x9407*x9411))+(((-1.0)*r11*x9403*x9411)));
evalcond[5]=((((-1.0)*x9404*x9411))+(((-1.0)*r12*x9413))+(((-1.0)*r10*x9407*x9412))+((x9402*x9406))+(((-1.0)*r11*x9403*x9412))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9414=cj5*cj5;
IkReal x9415=cj6*cj6;
IkReal x9416=(r22*sj5);
IkReal x9417=(cj6*r21);
IkReal x9418=(r20*sj6);
IkReal x9419=((1.0)*sj6);
IkReal x9420=(cj0*cj5);
IkReal x9421=(r02*r22);
IkReal x9422=(cj6*r01);
IkReal x9423=(r00*sj6);
IkReal x9424=(cj5*r02*sj5);
IkReal x9425=(r01*x9414);
IkReal x9426=(r21*x9415);
IkReal x9427=(r00*r20*x9414);
CheckValue<IkReal> x9428=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9415*x9427))+((cj5*x9416*x9422))+((cj5*x9416*x9423))+(((-1.0)*x9418*x9422))+((x9425*x9426))+((x9417*x9424))+((r01*r21))+((x9418*x9424))+(((-1.0)*r00*x9417*x9419))+((x9414*x9418*x9422))+(((-1.0)*r01*x9426))+(((-1.0)*x9414*x9421))+x9421+x9427+((r00*r20*x9415))+((x9414*x9417*x9423)))),-1);
if(!x9428.valid){
continue;
}
CheckValue<IkReal> x9429 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x9419)))),IkReal((((x9417*x9420))+((x9418*x9420))+((cj0*x9416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9428.value)))+(x9429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9430=IKsin(j4);
IkReal x9431=IKcos(j4);
IkReal x9432=(cj5*cj6);
IkReal x9433=(r11*sj6);
IkReal x9434=(cj6*r20);
IkReal x9435=(cj6*r10);
IkReal x9436=(cj5*sj6);
IkReal x9437=(r01*sj6);
IkReal x9438=(r21*sj6);
IkReal x9439=(cj6*r00);
IkReal x9440=((1.0)*x9431);
IkReal x9441=((1.0)*x9430);
IkReal x9442=(sj5*x9441);
evalcond[0]=((((-1.0)*r20*x9436*x9441))+((x9431*x9434))+(((-1.0)*r21*x9432*x9441))+(((-1.0)*x9438*x9440))+(((-1.0)*r22*x9442)));
evalcond[1]=((((-1.0)*r22*sj5*x9440))+(((-1.0)*r20*x9436*x9440))+((x9430*x9438))+(((-1.0)*r21*x9432*x9440))+(((-1.0)*x9434*x9441)));
evalcond[2]=(sj0+((x9431*x9439))+(((-1.0)*r00*x9436*x9441))+(((-1.0)*r02*x9442))+(((-1.0)*x9437*x9440))+(((-1.0)*r01*x9432*x9441)));
evalcond[3]=((((-1.0)*x9439*x9441))+cj0+((x9430*x9437))+(((-1.0)*r02*sj5*x9440))+(((-1.0)*r00*x9436*x9440))+(((-1.0)*r01*x9432*x9440)));
evalcond[4]=(sj0+(((-1.0)*r10*x9436*x9440))+(((-1.0)*x9435*x9441))+((x9430*x9433))+(((-1.0)*r11*x9432*x9440))+(((-1.0)*r12*sj5*x9440)));
evalcond[5]=((((-1.0)*r10*x9436*x9441))+(((-1.0)*x9433*x9440))+((x9431*x9435))+(((-1.0)*r11*x9432*x9441))+(((-1.0)*r12*x9442))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9443=(cj5*sj0);
IkReal x9444=((1.0)*sj5);
CheckValue<IkReal> x9445 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r22*sj0*sj5))+((cj6*r21*x9443))+((r20*sj6*x9443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9445.valid){
continue;
}
CheckValue<IkReal> x9446=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x9444))+(((-1.0)*cj6*r11*x9444)))),-1);
if(!x9446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9445.value)+(((1.5707963267949)*(x9446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9447=IKsin(j4);
IkReal x9448=IKcos(j4);
IkReal x9449=(cj5*cj6);
IkReal x9450=(r11*sj6);
IkReal x9451=(cj6*r20);
IkReal x9452=(cj6*r10);
IkReal x9453=(cj5*sj6);
IkReal x9454=(r01*sj6);
IkReal x9455=(r21*sj6);
IkReal x9456=(cj6*r00);
IkReal x9457=((1.0)*x9448);
IkReal x9458=((1.0)*x9447);
IkReal x9459=(sj5*x9458);
evalcond[0]=(((x9448*x9451))+(((-1.0)*r22*x9459))+(((-1.0)*r21*x9449*x9458))+(((-1.0)*r20*x9453*x9458))+(((-1.0)*x9455*x9457)));
evalcond[1]=((((-1.0)*r22*sj5*x9457))+(((-1.0)*x9451*x9458))+(((-1.0)*r21*x9449*x9457))+(((-1.0)*r20*x9453*x9457))+((x9447*x9455)));
evalcond[2]=(((x9448*x9456))+sj0+(((-1.0)*r01*x9449*x9458))+(((-1.0)*r00*x9453*x9458))+(((-1.0)*x9454*x9457))+(((-1.0)*r02*x9459)));
evalcond[3]=((((-1.0)*x9456*x9458))+(((-1.0)*r01*x9449*x9457))+cj0+(((-1.0)*r00*x9453*x9457))+(((-1.0)*r02*sj5*x9457))+((x9447*x9454)));
evalcond[4]=((((-1.0)*r10*x9453*x9457))+sj0+(((-1.0)*r11*x9449*x9457))+(((-1.0)*x9452*x9458))+(((-1.0)*r12*sj5*x9457))+((x9447*x9450)));
evalcond[5]=((((-1.0)*r10*x9453*x9458))+(((-1.0)*x9450*x9457))+((x9448*x9452))+(((-1.0)*r11*x9449*x9458))+(((-1.0)*r12*x9459))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9460=cj5*cj5;
IkReal x9461=cj6*cj6;
IkReal x9462=r20*r20;
IkReal x9463=r21*r21;
IkReal x9464=r22*r22;
IkReal x9465=(r22*sj5);
IkReal x9466=(cj6*r20);
IkReal x9467=(cj1*sj2);
IkReal x9468=(r21*sj6);
IkReal x9469=(cj5*r20*sj6);
IkReal x9470=(cj5*cj6*r21);
IkReal x9471=((1.0)*x9460);
IkReal x9472=(x9461*x9462);
IkReal x9473=(x9461*x9463);
CheckValue<IkReal> x9474=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9471*x9472))+(((2.0)*x9465*x9470))+((x9460*x9473))+(((2.0)*x9465*x9469))+((x9460*x9462))+(((-1.0)*x9473))+(((-2.0)*x9466*x9468))+x9472+x9464+x9463+(((2.0)*x9460*x9466*x9468))+(((-1.0)*x9464*x9471)))),-1);
if(!x9474.valid){
continue;
}
CheckValue<IkReal> x9475 = IKatan2WithCheck(IkReal((((x9465*x9467))+((sj1*x9466))+(((-1.0)*sj1*x9468))+((x9467*x9470))+((x9467*x9469)))),IkReal((((sj1*x9470))+((sj1*x9469))+((sj1*x9465))+(((-1.0)*x9466*x9467))+((x9467*x9468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9474.value)))+(x9475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9476=IKsin(j4);
IkReal x9477=IKcos(j4);
IkReal x9478=(cj5*cj6);
IkReal x9479=((1.0)*cj1);
IkReal x9480=(sj1*sj2);
IkReal x9481=(r11*sj6);
IkReal x9482=(cj6*r20);
IkReal x9483=(cj6*r10);
IkReal x9484=(cj5*sj6);
IkReal x9485=(r01*sj6);
IkReal x9486=(r21*sj6);
IkReal x9487=(cj6*r00);
IkReal x9488=((1.0)*x9477);
IkReal x9489=((1.0)*x9476);
IkReal x9490=(sj5*x9489);
evalcond[0]=(((x9476*x9486))+sj1+(((-1.0)*r20*x9484*x9488))+(((-1.0)*x9482*x9489))+(((-1.0)*r22*sj5*x9488))+(((-1.0)*r21*x9478*x9488)));
evalcond[1]=(((x9477*x9482))+(((-1.0)*r22*x9490))+((cj1*sj2))+(((-1.0)*r20*x9484*x9489))+(((-1.0)*x9486*x9488))+(((-1.0)*r21*x9478*x9489)));
evalcond[2]=(((x9476*x9485))+(((-1.0)*x9487*x9489))+(((-1.0)*r02*sj5*x9488))+(((-1.0)*r01*x9478*x9488))+(((-1.0)*cj0*x9479))+(((-1.0)*r00*x9484*x9488)));
evalcond[3]=((((-1.0)*r10*x9484*x9488))+((x9476*x9481))+(((-1.0)*r12*sj5*x9488))+(((-1.0)*sj0*x9479))+(((-1.0)*r11*x9478*x9488))+(((-1.0)*x9483*x9489)));
evalcond[4]=((((-1.0)*r10*x9484*x9489))+((sj0*x9480))+((x9477*x9483))+(((-1.0)*x9481*x9488))+((cj0*cj2))+(((-1.0)*r11*x9478*x9489))+(((-1.0)*r12*x9490)));
evalcond[5]=((((-1.0)*r02*x9490))+((x9477*x9487))+(((-1.0)*x9485*x9488))+(((-1.0)*cj2*sj0))+(((-1.0)*r01*x9478*x9489))+((cj0*x9480))+(((-1.0)*r00*x9484*x9489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9491=(cj6*sj1);
IkReal x9492=((1.0)*cj5);
IkReal x9493=((1.0)*sj5);
IkReal x9494=(cj1*sj0);
IkReal x9495=((1.0)*sj6);
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x9492*x9494))+(((-1.0)*r12*sj1*x9493))+(((-1.0)*r22*x9493*x9494))+(((-1.0)*r11*x9491*x9492))+(((-1.0)*cj6*r21*x9492*x9494))+(((-1.0)*r10*sj1*sj6*x9492)))),IkReal((((r10*x9491))+(((-1.0)*r11*sj1*x9495))+(((-1.0)*r21*x9494*x9495))+((cj6*r20*x9494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
CheckValue<IkReal> x9497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x9493))+(((-1.0)*cj6*r01*x9493))+((cj5*r02)))),-1);
if(!x9497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9496.value)+(((1.5707963267949)*(x9497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9498=IKsin(j4);
IkReal x9499=IKcos(j4);
IkReal x9500=(cj5*cj6);
IkReal x9501=((1.0)*cj1);
IkReal x9502=(sj1*sj2);
IkReal x9503=(r11*sj6);
IkReal x9504=(cj6*r20);
IkReal x9505=(cj6*r10);
IkReal x9506=(cj5*sj6);
IkReal x9507=(r01*sj6);
IkReal x9508=(r21*sj6);
IkReal x9509=(cj6*r00);
IkReal x9510=((1.0)*x9499);
IkReal x9511=((1.0)*x9498);
IkReal x9512=(sj5*x9511);
evalcond[0]=(((x9498*x9508))+sj1+(((-1.0)*x9504*x9511))+(((-1.0)*r20*x9506*x9510))+(((-1.0)*r21*x9500*x9510))+(((-1.0)*r22*sj5*x9510)));
evalcond[1]=((((-1.0)*x9508*x9510))+((cj1*sj2))+(((-1.0)*r20*x9506*x9511))+(((-1.0)*r22*x9512))+(((-1.0)*r21*x9500*x9511))+((x9499*x9504)));
evalcond[2]=(((x9498*x9507))+(((-1.0)*r02*sj5*x9510))+(((-1.0)*cj0*x9501))+(((-1.0)*r01*x9500*x9510))+(((-1.0)*r00*x9506*x9510))+(((-1.0)*x9509*x9511)));
evalcond[3]=(((x9498*x9503))+(((-1.0)*r12*sj5*x9510))+(((-1.0)*x9505*x9511))+(((-1.0)*sj0*x9501))+(((-1.0)*r10*x9506*x9510))+(((-1.0)*r11*x9500*x9510)));
evalcond[4]=(((cj0*cj2))+(((-1.0)*r10*x9506*x9511))+(((-1.0)*x9503*x9510))+((sj0*x9502))+(((-1.0)*r12*x9512))+(((-1.0)*r11*x9500*x9511))+((x9499*x9505)));
evalcond[5]=((((-1.0)*x9507*x9510))+(((-1.0)*r02*x9512))+((cj0*x9502))+(((-1.0)*cj2*sj0))+(((-1.0)*r01*x9500*x9511))+(((-1.0)*r00*x9506*x9511))+((x9499*x9509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9513=(cj0*cj1);
IkReal x9514=((1.0)*sj1);
IkReal x9515=((1.0)*cj5);
IkReal x9516=(cj5*x9514);
CheckValue<IkReal> x9517 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj5*x9514))+(((-1.0)*r20*sj6*x9513*x9515))+(((-1.0)*cj6*r01*x9516))+(((-1.0)*cj6*r21*x9513*x9515))+(((-1.0)*r22*sj5*x9513))+(((-1.0)*r00*sj6*x9516)))),IkReal((((cj6*r00*sj1))+((cj6*r20*x9513))+(((-1.0)*r21*sj6*x9513))+(((-1.0)*r01*sj6*x9514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9517.valid){
continue;
}
CheckValue<IkReal> x9518=IKPowWithIntegerCheck(IKsign((((cj6*r11*sj5))+(((-1.0)*r12*x9515))+((r10*sj5*sj6)))),-1);
if(!x9518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9517.value)+(((1.5707963267949)*(x9518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9519=IKsin(j4);
IkReal x9520=IKcos(j4);
IkReal x9521=(cj5*cj6);
IkReal x9522=((1.0)*cj1);
IkReal x9523=(sj1*sj2);
IkReal x9524=(r11*sj6);
IkReal x9525=(cj6*r20);
IkReal x9526=(cj6*r10);
IkReal x9527=(cj5*sj6);
IkReal x9528=(r01*sj6);
IkReal x9529=(r21*sj6);
IkReal x9530=(cj6*r00);
IkReal x9531=((1.0)*x9520);
IkReal x9532=((1.0)*x9519);
IkReal x9533=(sj5*x9532);
evalcond[0]=((((-1.0)*r21*x9521*x9531))+sj1+(((-1.0)*r20*x9527*x9531))+((x9519*x9529))+(((-1.0)*x9525*x9532))+(((-1.0)*r22*sj5*x9531)));
evalcond[1]=((((-1.0)*r21*x9521*x9532))+(((-1.0)*r22*x9533))+(((-1.0)*r20*x9527*x9532))+((x9520*x9525))+((cj1*sj2))+(((-1.0)*x9529*x9531)));
evalcond[2]=((((-1.0)*cj0*x9522))+(((-1.0)*r01*x9521*x9531))+((x9519*x9528))+(((-1.0)*r00*x9527*x9531))+(((-1.0)*x9530*x9532))+(((-1.0)*r02*sj5*x9531)));
evalcond[3]=(((x9519*x9524))+(((-1.0)*r11*x9521*x9531))+(((-1.0)*r10*x9527*x9531))+(((-1.0)*sj0*x9522))+(((-1.0)*x9526*x9532))+(((-1.0)*r12*sj5*x9531)));
evalcond[4]=(((sj0*x9523))+(((-1.0)*x9524*x9531))+((x9520*x9526))+((cj0*cj2))+(((-1.0)*r11*x9521*x9532))+(((-1.0)*r10*x9527*x9532))+(((-1.0)*r12*x9533)));
evalcond[5]=((((-1.0)*r01*x9521*x9532))+(((-1.0)*r00*x9527*x9532))+(((-1.0)*cj2*sj0))+((x9520*x9530))+((cj0*x9523))+(((-1.0)*r02*x9533))+(((-1.0)*x9528*x9531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9534=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x9534;
j0eval[1]=IKsign(x9534);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9535=cj5*cj5;
IkReal x9536=cj6*cj6;
IkReal x9537=r22*r22;
IkReal x9538=r21*r21;
IkReal x9539=r20*r20;
IkReal x9540=(cj6*r21);
IkReal x9541=((2.0)*r20*sj6);
IkReal x9542=(cj5*r22*sj5);
IkReal x9543=((1.0)*x9535);
IkReal x9544=(x9536*x9538);
IkReal x9545=(x9536*x9539);
IkReal x9546=((((-1.0)*x9541*x9542))+(((-1.0)*x9543*x9544))+((x9535*x9545))+(((-1.0)*x9539*x9543))+(((-1.0)*x9535*x9540*x9541))+(((-1.0)*x9537))+(((-1.0)*x9538))+x9544+(((-1.0)*x9545))+(((-2.0)*x9540*x9542))+((x9540*x9541))+((x9535*x9537)));
j4eval[0]=x9546;
j4eval[1]=IKsign(x9546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9547=cj1*cj1;
IkReal x9548=cj2*cj2;
IkReal x9549=(cj2*sj1);
IkReal x9550=(x9547*x9548);
j0eval[0]=((-1.0)+x9549+x9550+(((5.28144927536232)*cj1*x9549)));
j0eval[1]=IKsign(((-69.0)+(((69.0)*x9550))+(((69.0)*x9549))+(((364.42)*cj1*x9549))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9551=(r10*sj6);
IkReal x9552=((0.863573439158322)*sj5);
IkReal x9553=((0.0230723086152)*cj5);
IkReal x9554=(cj6*r11);
IkReal x9555=(r00*sj6);
IkReal x9556=((0.0230723086152)*sj5);
IkReal x9557=((0.863573439158322)*cj5);
IkReal x9558=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+(((-1.0)*x9551*x9553))+(((-1.0)*x9553*x9554))+((x9552*x9554))+((x9551*x9552))+(((-1.0)*r12*x9556))+(((-1.0)*r12*x9557)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+(((-1.0)*r02*x9556))+(((-1.0)*r02*x9557))+(((-1.0)*x9553*x9555))+(((-1.0)*x9553*x9558))+((x9552*x9555))+((x9552*x9558)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+(((-1.0)*x9551*x9553))+(((-1.0)*x9553*x9554))+((x9552*x9554))+((x9551*x9552))+(((-1.0)*r12*x9556))+(((-1.0)*r12*x9557))))+IKsqr(((((2.30723086152)*px))+(((-1.0)*r02*x9556))+(((-1.0)*r02*x9557))+(((-1.0)*x9553*x9555))+(((-1.0)*x9553*x9558))+((x9552*x9555))+((x9552*x9558))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+(((-1.0)*x9551*x9553))+(((-1.0)*x9553*x9554))+((x9552*x9554))+((x9551*x9552))+(((-1.0)*r12*x9556))+(((-1.0)*r12*x9557))), ((((2.30723086152)*px))+(((-1.0)*r02*x9556))+(((-1.0)*r02*x9557))+(((-1.0)*x9553*x9555))+(((-1.0)*x9553*x9558))+((x9552*x9555))+((x9552*x9558))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x9559=((0.01)*cj5);
IkReal x9560=(cj6*r01);
IkReal x9561=((0.37429)*sj5);
IkReal x9562=(cj6*r11);
IkReal x9563=((0.01)*sj5);
IkReal x9564=(r00*sj6);
IkReal x9565=((0.37429)*cj5);
IkReal x9566=(r10*sj6);
evalcond[0]=((((-1.0)*px))+(((-1.0)*x9561*x9564))+(((-1.0)*x9560*x9561))+((r02*x9563))+((r02*x9565))+((x9559*x9560))+((x9559*x9564))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=((((0.43342)*(IKsin(j0))))+(((-1.0)*py))+((r12*x9563))+((r12*x9565))+(((-1.0)*x9561*x9566))+(((-1.0)*x9561*x9562))+((x9559*x9562))+((x9559*x9566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9567=(cj0*r20);
IkReal x9568=(cj0*r21);
IkReal x9569=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9569;
j4eval[1]=((IKabs((((cj5*cj6*x9568))+((cj5*sj6*x9567))+((cj0*r22*sj5)))))+(IKabs(((((-1.0)*cj6*x9567))+((sj6*x9568))))));
j4eval[2]=IKsign(x9569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9570=(sj0*sj6);
IkReal x9571=((1.0)*cj6);
IkReal x9572=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x9571))+((cj5*r02)));
j4eval[0]=x9572;
j4eval[1]=IKsign(x9572);
j4eval[2]=((IKabs((((r21*x9570))+(((-1.0)*r20*sj0*x9571)))))+(IKabs((((cj5*r20*x9570))+((r22*sj0*sj5))+((cj5*cj6*r21*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9573=cj6*cj6;
IkReal x9574=cj5*cj5;
IkReal x9575=(r12*sj5);
IkReal x9576=(r22*sj5);
IkReal x9577=((1.0)*r11);
IkReal x9578=(cj0*sj6);
IkReal x9579=(cj5*r20);
IkReal x9580=((1.0)*cj6);
IkReal x9581=(r10*r20);
IkReal x9582=(r10*sj6);
IkReal x9583=(r12*r22);
IkReal x9584=(cj5*cj6*r21);
IkReal x9585=(r21*x9573);
IkReal x9586=(cj6*r20*sj6);
IkReal x9587=(r11*x9574);
IkReal x9588=((1.0)*x9574);
IkReal x9589=(((x9575*x9584))+((sj6*x9575*x9579))+((r11*r21))+((x9574*x9581))+((cj5*cj6*r11*x9576))+((x9586*x9587))+((x9585*x9587))+(((-1.0)*x9577*x9585))+(((-1.0)*x9577*x9586))+((cj5*x9576*x9582))+((cj6*r21*x9574*x9582))+x9583+(((-1.0)*x9573*x9581*x9588))+(((-1.0)*r21*x9580*x9582))+((x9573*x9581))+(((-1.0)*x9583*x9588)));
j4eval[0]=x9589;
j4eval[1]=IKsign(x9589);
j4eval[2]=((IKabs((((cj0*x9576))+((cj0*x9584))+((x9578*x9579)))))+(IKabs((((r21*x9578))+(((-1.0)*cj0*r20*x9580))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9590=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9590;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x9590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9591=((1.0)*sj5);
IkReal x9592=((((-1.0)*r00*sj6*x9591))+(((-1.0)*cj6*r01*x9591))+((cj5*r02)));
j4eval[0]=x9592;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9593=cj6*cj6;
IkReal x9594=cj5*cj5;
IkReal x9595=r00*r00;
IkReal x9596=r01*r01;
IkReal x9597=r02*r02;
IkReal x9598=(r00*sj6);
IkReal x9599=((2.0)*cj6*r01);
IkReal x9600=(cj5*r02*sj5);
IkReal x9601=((1.0)*x9593);
IkReal x9602=(x9594*x9595);
IkReal x9603=(((x9594*x9597))+((x9593*x9596))+(((-1.0)*x9595*x9601))+(((-1.0)*x9602))+(((-1.0)*x9594*x9598*x9599))+((x9598*x9599))+(((-1.0)*x9597))+(((-1.0)*x9596))+((x9593*x9602))+(((-2.0)*x9598*x9600))+(((-1.0)*x9594*x9596*x9601))+(((-1.0)*x9599*x9600)));
j4eval[0]=x9603;
j4eval[1]=((IKabs((((cj5*x9598))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x9603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9604=cj6*cj6;
IkReal x9605=cj5*cj5;
IkReal x9606=r00*r00;
IkReal x9607=r01*r01;
IkReal x9608=r02*r02;
IkReal x9609=(r01*sj6);
IkReal x9610=(cj6*r00);
IkReal x9611=(cj5*cj6*r01);
IkReal x9612=((2.0)*r02*sj5);
IkReal x9613=((1.0)*x9604);
IkReal x9614=(cj5*r00*sj6);
IkReal x9615=(x9605*x9606);
CheckValue<IkReal> x9616 = IKatan2WithCheck(IkReal((((r02*sj5))+x9614+x9611)),IkReal(((((-1.0)*x9610))+x9609)),IKFAST_ATAN2_MAGTHRESH);
if(!x9616.valid){
continue;
}
CheckValue<IkReal> x9617=IKPowWithIntegerCheck(IKsign(((((2.0)*x9609*x9610))+(((-1.0)*x9612*x9614))+((x9604*x9615))+(((-1.0)*x9605*x9607*x9613))+((x9604*x9607))+(((-1.0)*x9615))+(((-1.0)*x9608))+(((-1.0)*x9607))+(((-1.0)*x9611*x9612))+((x9605*x9608))+(((-2.0)*x9605*x9609*x9610))+(((-1.0)*x9606*x9613)))),-1);
if(!x9617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9616.value)+(((1.5707963267949)*(x9617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9618=IKcos(j4);
IkReal x9619=IKsin(j4);
IkReal x9620=(cj5*sj6);
IkReal x9621=(cj5*r21);
IkReal x9622=(cj5*r01);
IkReal x9623=(cj5*cj6*r11);
IkReal x9624=((1.0)*x9619);
IkReal x9625=(cj6*x9618);
IkReal x9626=(sj5*x9618);
IkReal x9627=(cj6*x9619);
IkReal x9628=(sj5*x9624);
IkReal x9629=((1.0)*sj6*x9618);
evalcond[0]=(((r20*x9627))+((x9621*x9625))+(((-1.0)*r21*sj6*x9624))+((r22*x9626))+((r20*x9618*x9620)));
evalcond[1]=(((r00*x9618*x9620))+((r00*x9627))+((x9622*x9625))+(((-1.0)*r01*sj6*x9624))+((r02*x9626)));
evalcond[2]=((-1.0)+(((-1.0)*r11*sj6*x9624))+((r10*x9618*x9620))+((r10*x9627))+((x9618*x9623))+((r12*x9626)));
evalcond[3]=(((r20*x9625))+(((-1.0)*r22*x9628))+(((-1.0)*cj6*x9621*x9624))+(((-1.0)*r21*x9629))+(((-1.0)*r20*x9620*x9624)));
evalcond[4]=((((-1.0)*r10*x9620*x9624))+((r10*x9625))+(((-1.0)*r11*x9629))+(((-1.0)*r12*x9628))+(((-1.0)*x9623*x9624)));
evalcond[5]=((-1.0)+((r00*x9625))+(((-1.0)*r01*x9629))+(((-1.0)*r02*x9628))+(((-1.0)*cj6*x9622*x9624))+(((-1.0)*r00*x9620*x9624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9630=((1.0)*sj5);
CheckValue<IkReal> x9631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x9630))+(((-1.0)*cj6*r01*x9630))+((cj5*r02)))),-1);
if(!x9631.valid){
continue;
}
CheckValue<IkReal> x9632 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9631.value)))+(x9632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9633=IKcos(j4);
IkReal x9634=IKsin(j4);
IkReal x9635=(cj5*sj6);
IkReal x9636=(cj5*r21);
IkReal x9637=(cj5*r01);
IkReal x9638=(cj5*cj6*r11);
IkReal x9639=((1.0)*x9634);
IkReal x9640=(cj6*x9633);
IkReal x9641=(sj5*x9633);
IkReal x9642=(cj6*x9634);
IkReal x9643=(sj5*x9639);
IkReal x9644=((1.0)*sj6*x9633);
evalcond[0]=(((r22*x9641))+((r20*x9633*x9635))+((x9636*x9640))+(((-1.0)*r21*sj6*x9639))+((r20*x9642)));
evalcond[1]=((((-1.0)*r01*sj6*x9639))+((x9637*x9640))+((r02*x9641))+((r00*x9642))+((r00*x9633*x9635)));
evalcond[2]=((-1.0)+(((-1.0)*r11*sj6*x9639))+((r10*x9642))+((r10*x9633*x9635))+((x9633*x9638))+((r12*x9641)));
evalcond[3]=((((-1.0)*cj6*x9636*x9639))+(((-1.0)*r21*x9644))+((r20*x9640))+(((-1.0)*r22*x9643))+(((-1.0)*r20*x9635*x9639)));
evalcond[4]=((((-1.0)*r12*x9643))+(((-1.0)*r11*x9644))+((r10*x9640))+(((-1.0)*x9638*x9639))+(((-1.0)*r10*x9635*x9639)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x9637*x9639))+((r00*x9640))+(((-1.0)*r00*x9635*x9639))+(((-1.0)*r01*x9644))+(((-1.0)*r02*x9643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9645 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9645.valid){
continue;
}
CheckValue<IkReal> x9646=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9645.value)+(((1.5707963267949)*(x9646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9647=IKcos(j4);
IkReal x9648=IKsin(j4);
IkReal x9649=(cj5*sj6);
IkReal x9650=(cj5*r21);
IkReal x9651=(cj5*r01);
IkReal x9652=(cj5*cj6*r11);
IkReal x9653=((1.0)*x9648);
IkReal x9654=(cj6*x9647);
IkReal x9655=(sj5*x9647);
IkReal x9656=(cj6*x9648);
IkReal x9657=(sj5*x9653);
IkReal x9658=((1.0)*sj6*x9647);
evalcond[0]=(((r20*x9656))+((r22*x9655))+((r20*x9647*x9649))+((x9650*x9654))+(((-1.0)*r21*sj6*x9653)));
evalcond[1]=((((-1.0)*r01*sj6*x9653))+((r00*x9647*x9649))+((r00*x9656))+((r02*x9655))+((x9651*x9654)));
evalcond[2]=((-1.0)+((x9647*x9652))+((r12*x9655))+(((-1.0)*r11*sj6*x9653))+((r10*x9656))+((r10*x9647*x9649)));
evalcond[3]=((((-1.0)*r21*x9658))+((r20*x9654))+(((-1.0)*r20*x9649*x9653))+(((-1.0)*cj6*x9650*x9653))+(((-1.0)*r22*x9657)));
evalcond[4]=((((-1.0)*r10*x9649*x9653))+(((-1.0)*x9652*x9653))+((r10*x9654))+(((-1.0)*r11*x9658))+(((-1.0)*r12*x9657)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x9658))+((r00*x9654))+(((-1.0)*cj6*x9651*x9653))+(((-1.0)*r02*x9657))+(((-1.0)*r00*x9649*x9653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9659=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x9659;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9660=((1.0)*cj6);
IkReal x9661=(((cj5*r22))+(((-1.0)*r21*sj5*x9660))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x9661;
j4eval[1]=IKsign(x9661);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs(((((-1.0)*r00*x9660))+((r01*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9662=cj6*cj6;
IkReal x9663=r01*r01;
IkReal x9664=cj5*cj5;
IkReal x9665=r00*r00;
IkReal x9666=r02*r02;
IkReal x9667=(r02*sj5);
IkReal x9668=(r01*sj6);
IkReal x9669=(cj6*r00);
IkReal x9670=(cj5*cj6*r01);
IkReal x9671=(cj5*r00*sj6);
IkReal x9672=((1.0)*x9664);
IkReal x9673=(x9662*x9665);
IkReal x9674=(x9662*x9663);
IkReal x9675=((((-2.0)*x9668*x9669))+(((-1.0)*x9666*x9672))+((x9664*x9674))+((x9664*x9665))+(((2.0)*x9667*x9671))+(((2.0)*x9667*x9670))+x9673+x9666+x9663+(((-1.0)*x9674))+(((2.0)*x9664*x9668*x9669))+(((-1.0)*x9672*x9673)));
j4eval[0]=x9675;
j4eval[1]=((IKabs((x9668+(((-1.0)*x9669)))))+(IKabs((x9670+x9671+x9667))));
j4eval[2]=IKsign(x9675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9676=cj6*cj6;
IkReal x9677=r01*r01;
IkReal x9678=cj5*cj5;
IkReal x9679=r00*r00;
IkReal x9680=r02*r02;
IkReal x9681=(r00*sj6);
IkReal x9682=(r02*sj5);
IkReal x9683=((2.0)*cj6*r01);
IkReal x9684=((1.0)*x9678);
IkReal x9685=(x9676*x9679);
IkReal x9686=(x9676*x9677);
CheckValue<IkReal> x9687 = IKatan2WithCheck(IkReal((((cj5*x9681))+((cj5*cj6*r01))+x9682)),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9687.valid){
continue;
}
CheckValue<IkReal> x9688=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9686))+((x9678*x9679))+(((-1.0)*x9680*x9684))+((cj5*x9682*x9683))+((x9678*x9681*x9683))+x9677+x9680+x9685+((x9678*x9686))+(((2.0)*cj5*x9681*x9682))+(((-1.0)*x9684*x9685))+(((-1.0)*x9681*x9683)))),-1);
if(!x9688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9687.value)+(((1.5707963267949)*(x9688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9689=IKcos(j4);
IkReal x9690=IKsin(j4);
IkReal x9691=(cj5*sj6);
IkReal x9692=(cj5*r21);
IkReal x9693=(cj5*r01);
IkReal x9694=(cj5*cj6*r11);
IkReal x9695=((1.0)*x9690);
IkReal x9696=(cj6*x9689);
IkReal x9697=(sj5*x9689);
IkReal x9698=(cj6*x9690);
IkReal x9699=(sj5*x9695);
IkReal x9700=((1.0)*sj6*x9689);
evalcond[0]=(((r22*x9697))+(((-1.0)*r21*sj6*x9695))+((r20*x9689*x9691))+((x9692*x9696))+((r20*x9698)));
evalcond[1]=(((r00*x9689*x9691))+((r02*x9697))+(((-1.0)*r01*sj6*x9695))+((r00*x9698))+((x9693*x9696)));
evalcond[2]=((1.0)+((x9689*x9694))+((r10*x9689*x9691))+((r12*x9697))+((r10*x9698))+(((-1.0)*r11*sj6*x9695)));
evalcond[3]=((((-1.0)*r20*x9691*x9695))+(((-1.0)*r22*x9699))+(((-1.0)*r21*x9700))+(((-1.0)*cj6*x9692*x9695))+((r20*x9696)));
evalcond[4]=((((-1.0)*r10*x9691*x9695))+(((-1.0)*r12*x9699))+(((-1.0)*r11*x9700))+(((-1.0)*x9694*x9695))+((r10*x9696)));
evalcond[5]=((1.0)+(((-1.0)*r02*x9699))+(((-1.0)*cj6*x9693*x9695))+(((-1.0)*r01*x9700))+((r00*x9696))+(((-1.0)*r00*x9691*x9695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9701=((1.0)*cj6);
CheckValue<IkReal> x9702=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x9701))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x9702.valid){
continue;
}
CheckValue<IkReal> x9703 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x9701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9702.value)))+(x9703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9704=IKcos(j4);
IkReal x9705=IKsin(j4);
IkReal x9706=(cj5*sj6);
IkReal x9707=(cj5*r21);
IkReal x9708=(cj5*r01);
IkReal x9709=(cj5*cj6*r11);
IkReal x9710=((1.0)*x9705);
IkReal x9711=(cj6*x9704);
IkReal x9712=(sj5*x9704);
IkReal x9713=(cj6*x9705);
IkReal x9714=(sj5*x9710);
IkReal x9715=((1.0)*sj6*x9704);
evalcond[0]=(((r22*x9712))+((r20*x9704*x9706))+((r20*x9713))+((x9707*x9711))+(((-1.0)*r21*sj6*x9710)));
evalcond[1]=(((r00*x9704*x9706))+((r02*x9712))+(((-1.0)*r01*sj6*x9710))+((r00*x9713))+((x9708*x9711)));
evalcond[2]=((1.0)+(((-1.0)*r11*sj6*x9710))+((x9704*x9709))+((r12*x9712))+((r10*x9704*x9706))+((r10*x9713)));
evalcond[3]=((((-1.0)*r20*x9706*x9710))+(((-1.0)*r21*x9715))+((r20*x9711))+(((-1.0)*cj6*x9707*x9710))+(((-1.0)*r22*x9714)));
evalcond[4]=((((-1.0)*x9709*x9710))+(((-1.0)*r10*x9706*x9710))+(((-1.0)*r11*x9715))+(((-1.0)*r12*x9714))+((r10*x9711)));
evalcond[5]=((1.0)+(((-1.0)*r01*x9715))+(((-1.0)*r02*x9714))+(((-1.0)*cj6*x9708*x9710))+(((-1.0)*r00*x9706*x9710))+((r00*x9711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9716=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x9716.valid){
continue;
}
CheckValue<IkReal> x9717 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9716.value)))+(x9717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9718=IKcos(j4);
IkReal x9719=IKsin(j4);
IkReal x9720=(cj5*sj6);
IkReal x9721=(cj5*r21);
IkReal x9722=(cj5*r01);
IkReal x9723=(cj5*cj6*r11);
IkReal x9724=((1.0)*x9719);
IkReal x9725=(cj6*x9718);
IkReal x9726=(sj5*x9718);
IkReal x9727=(cj6*x9719);
IkReal x9728=(sj5*x9724);
IkReal x9729=((1.0)*sj6*x9718);
evalcond[0]=(((r20*x9727))+((r20*x9718*x9720))+(((-1.0)*r21*sj6*x9724))+((r22*x9726))+((x9721*x9725)));
evalcond[1]=(((x9722*x9725))+((r00*x9718*x9720))+((r02*x9726))+(((-1.0)*r01*sj6*x9724))+((r00*x9727)));
evalcond[2]=((1.0)+(((-1.0)*r11*sj6*x9724))+((r12*x9726))+((x9718*x9723))+((r10*x9718*x9720))+((r10*x9727)));
evalcond[3]=((((-1.0)*r21*x9729))+((r20*x9725))+(((-1.0)*cj6*x9721*x9724))+(((-1.0)*r20*x9720*x9724))+(((-1.0)*r22*x9728)));
evalcond[4]=((((-1.0)*r12*x9728))+(((-1.0)*r11*x9729))+(((-1.0)*r10*x9720*x9724))+((r10*x9725))+(((-1.0)*x9723*x9724)));
evalcond[5]=((1.0)+(((-1.0)*cj6*x9722*x9724))+(((-1.0)*r02*x9728))+(((-1.0)*r01*x9729))+(((-1.0)*r00*x9720*x9724))+((r00*x9725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9730=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9730;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9731=((1.0)*cj6);
IkReal x9732=(((cj5*r22))+(((-1.0)*r21*sj5*x9731))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x9732;
j4eval[1]=((IKabs(((((-1.0)*r10*x9731))+((r11*sj6)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x9732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9733=r11*r11;
IkReal x9734=cj5*cj5;
IkReal x9735=cj6*cj6;
IkReal x9736=r10*r10;
IkReal x9737=r12*r12;
IkReal x9738=(r12*sj5);
IkReal x9739=(r11*sj6);
IkReal x9740=((1.0)*x9735);
IkReal x9741=(cj5*cj6*r11);
IkReal x9742=(cj5*r10*sj6);
IkReal x9743=((2.0)*cj6*r10);
IkReal x9744=(x9734*x9736);
IkReal x9745=((((-1.0)*x9739*x9743))+(((-1.0)*x9734*x9737))+((x9734*x9739*x9743))+((x9735*x9736))+x9733+x9737+x9744+((x9733*x9734*x9735))+(((2.0)*x9738*x9742))+(((2.0)*x9738*x9741))+(((-1.0)*x9740*x9744))+(((-1.0)*x9733*x9740)));
j4eval[0]=x9745;
j4eval[1]=((IKabs((x9738+x9741+x9742)))+(IKabs(((((-1.0)*cj6*r10))+x9739))));
j4eval[2]=IKsign(x9745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9746=r11*r11;
IkReal x9747=cj5*cj5;
IkReal x9748=cj6*cj6;
IkReal x9749=r10*r10;
IkReal x9750=r12*r12;
IkReal x9751=(r10*sj6);
IkReal x9752=(r12*sj5);
IkReal x9753=((1.0)*x9748);
IkReal x9754=(cj5*cj6*r11);
IkReal x9755=((2.0)*cj6*r11);
IkReal x9756=(x9747*x9749);
CheckValue<IkReal> x9757 = IKatan2WithCheck(IkReal((((cj5*x9751))+x9754+x9752)),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9757.valid){
continue;
}
CheckValue<IkReal> x9758=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9746*x9753))+((x9747*x9751*x9755))+(((2.0)*cj5*x9751*x9752))+(((2.0)*x9752*x9754))+((x9748*x9749))+x9756+x9750+x9746+((x9746*x9747*x9748))+(((-1.0)*x9747*x9750))+(((-1.0)*x9751*x9755))+(((-1.0)*x9753*x9756)))),-1);
if(!x9758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9757.value)+(((1.5707963267949)*(x9758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9759=IKcos(j4);
IkReal x9760=IKsin(j4);
IkReal x9761=(cj5*sj6);
IkReal x9762=(cj5*r01);
IkReal x9763=(cj5*r21);
IkReal x9764=(cj5*cj6*r11);
IkReal x9765=((1.0)*x9760);
IkReal x9766=(cj6*x9759);
IkReal x9767=(sj5*x9759);
IkReal x9768=(cj6*x9760);
IkReal x9769=(sj5*x9765);
IkReal x9770=((1.0)*sj6*x9759);
evalcond[0]=(((x9763*x9766))+((r22*x9767))+((r20*x9759*x9761))+(((-1.0)*r21*sj6*x9765))+((r20*x9768)));
evalcond[1]=(((r12*x9767))+((r10*x9768))+(((-1.0)*r11*sj6*x9765))+((r10*x9759*x9761))+((x9759*x9764)));
evalcond[2]=((-1.0)+((r00*x9759*x9761))+((r00*x9768))+((x9762*x9766))+(((-1.0)*r01*sj6*x9765))+((r02*x9767)));
evalcond[3]=((((-1.0)*r20*x9761*x9765))+(((-1.0)*r22*x9769))+(((-1.0)*cj6*x9763*x9765))+(((-1.0)*r21*x9770))+((r20*x9766)));
evalcond[4]=(((r00*x9766))+(((-1.0)*cj6*x9762*x9765))+(((-1.0)*r00*x9761*x9765))+(((-1.0)*r02*x9769))+(((-1.0)*r01*x9770)));
evalcond[5]=((1.0)+((r10*x9766))+(((-1.0)*x9764*x9765))+(((-1.0)*r12*x9769))+(((-1.0)*r11*x9770))+(((-1.0)*r10*x9761*x9765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9771=((1.0)*cj6);
CheckValue<IkReal> x9772 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal((((r11*sj6))+(((-1.0)*r10*x9771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9772.valid){
continue;
}
CheckValue<IkReal> x9773=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x9771))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x9773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9772.value)+(((1.5707963267949)*(x9773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9774=IKcos(j4);
IkReal x9775=IKsin(j4);
IkReal x9776=(cj5*sj6);
IkReal x9777=(cj5*r01);
IkReal x9778=(cj5*r21);
IkReal x9779=(cj5*cj6*r11);
IkReal x9780=((1.0)*x9775);
IkReal x9781=(cj6*x9774);
IkReal x9782=(sj5*x9774);
IkReal x9783=(cj6*x9775);
IkReal x9784=(sj5*x9780);
IkReal x9785=((1.0)*sj6*x9774);
evalcond[0]=(((x9778*x9781))+((r20*x9774*x9776))+(((-1.0)*r21*sj6*x9780))+((r22*x9782))+((r20*x9783)));
evalcond[1]=(((r10*x9774*x9776))+((r10*x9783))+(((-1.0)*r11*sj6*x9780))+((r12*x9782))+((x9774*x9779)));
evalcond[2]=((-1.0)+((r00*x9783))+(((-1.0)*r01*sj6*x9780))+((r00*x9774*x9776))+((r02*x9782))+((x9777*x9781)));
evalcond[3]=((((-1.0)*r20*x9776*x9780))+(((-1.0)*r21*x9785))+(((-1.0)*r22*x9784))+((r20*x9781))+(((-1.0)*cj6*x9778*x9780)));
evalcond[4]=(((r00*x9781))+(((-1.0)*cj6*x9777*x9780))+(((-1.0)*r01*x9785))+(((-1.0)*r00*x9776*x9780))+(((-1.0)*r02*x9784)));
evalcond[5]=((1.0)+(((-1.0)*r12*x9784))+(((-1.0)*r11*x9785))+(((-1.0)*r10*x9776*x9780))+((r10*x9781))+(((-1.0)*x9779*x9780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9786=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9786.valid){
continue;
}
CheckValue<IkReal> x9787 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9786.value)))+(x9787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9788=IKcos(j4);
IkReal x9789=IKsin(j4);
IkReal x9790=(cj5*sj6);
IkReal x9791=(cj5*r01);
IkReal x9792=(cj5*r21);
IkReal x9793=(cj5*cj6*r11);
IkReal x9794=((1.0)*x9789);
IkReal x9795=(cj6*x9788);
IkReal x9796=(sj5*x9788);
IkReal x9797=(cj6*x9789);
IkReal x9798=(sj5*x9794);
IkReal x9799=((1.0)*sj6*x9788);
evalcond[0]=(((x9792*x9795))+((r20*x9797))+(((-1.0)*r21*sj6*x9794))+((r20*x9788*x9790))+((r22*x9796)));
evalcond[1]=(((x9788*x9793))+((r10*x9797))+(((-1.0)*r11*sj6*x9794))+((r12*x9796))+((r10*x9788*x9790)));
evalcond[2]=((-1.0)+((r02*x9796))+(((-1.0)*r01*sj6*x9794))+((r00*x9797))+((x9791*x9795))+((r00*x9788*x9790)));
evalcond[3]=((((-1.0)*r20*x9790*x9794))+((r20*x9795))+(((-1.0)*r21*x9799))+(((-1.0)*cj6*x9792*x9794))+(((-1.0)*r22*x9798)));
evalcond[4]=((((-1.0)*r02*x9798))+(((-1.0)*cj6*x9791*x9794))+((r00*x9795))+(((-1.0)*r00*x9790*x9794))+(((-1.0)*r01*x9799)));
evalcond[5]=((1.0)+((r10*x9795))+(((-1.0)*x9793*x9794))+(((-1.0)*r10*x9790*x9794))+(((-1.0)*r12*x9798))+(((-1.0)*r11*x9799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9800=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9800;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9801=((1.0)*sj5);
IkReal x9802=(((cj5*r12))+(((-1.0)*cj6*r11*x9801))+(((-1.0)*r10*sj6*x9801)));
j4eval[0]=x9802;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9803=cj6*cj6;
IkReal x9804=cj5*cj5;
IkReal x9805=r10*r10;
IkReal x9806=r11*r11;
IkReal x9807=r12*r12;
IkReal x9808=(r10*sj6);
IkReal x9809=(r12*sj5);
IkReal x9810=((2.0)*cj6*r11);
IkReal x9811=((1.0)*x9805);
IkReal x9812=(x9803*x9806);
IkReal x9813=((((-1.0)*x9804*x9812))+((x9803*x9804*x9805))+((x9808*x9810))+(((-1.0)*x9807))+(((-1.0)*x9806))+(((-2.0)*cj5*x9808*x9809))+(((-1.0)*x9804*x9808*x9810))+(((-1.0)*cj5*x9809*x9810))+((x9804*x9807))+(((-1.0)*x9804*x9811))+(((-1.0)*x9803*x9811))+x9812);
j4eval[0]=x9813;
j4eval[1]=((IKabs((((cj5*cj6*r11))+x9809+((cj5*x9808)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9814=cj6*cj6;
IkReal x9815=cj5*cj5;
IkReal x9816=r10*r10;
IkReal x9817=r11*r11;
IkReal x9818=r12*r12;
IkReal x9819=(r10*sj6);
IkReal x9820=(r12*sj5);
IkReal x9821=((2.0)*cj6*r11);
IkReal x9822=(x9814*x9817);
IkReal x9823=(x9815*x9816);
CheckValue<IkReal> x9824=IKPowWithIntegerCheck(IKsign((((x9814*x9823))+(((-1.0)*x9817))+(((-1.0)*x9818))+((x9815*x9818))+(((-1.0)*x9815*x9819*x9821))+(((-1.0)*x9814*x9816))+(((-1.0)*cj5*x9820*x9821))+((x9819*x9821))+(((-2.0)*cj5*x9819*x9820))+x9822+(((-1.0)*x9823))+(((-1.0)*x9815*x9822)))),-1);
if(!x9824.valid){
continue;
}
CheckValue<IkReal> x9825 = IKatan2WithCheck(IkReal((((cj5*cj6*r11))+x9820+((cj5*x9819)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9824.value)))+(x9825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9826=IKcos(j4);
IkReal x9827=IKsin(j4);
IkReal x9828=(cj5*sj6);
IkReal x9829=(cj5*r01);
IkReal x9830=(cj5*r21);
IkReal x9831=(cj5*cj6*r11);
IkReal x9832=((1.0)*x9827);
IkReal x9833=(cj6*x9826);
IkReal x9834=(sj5*x9826);
IkReal x9835=(cj6*x9827);
IkReal x9836=(sj5*x9832);
IkReal x9837=((1.0)*sj6*x9826);
evalcond[0]=(((x9830*x9833))+((r22*x9834))+(((-1.0)*r21*sj6*x9832))+((r20*x9835))+((r20*x9826*x9828)));
evalcond[1]=(((r10*x9835))+((r12*x9834))+((x9826*x9831))+(((-1.0)*r11*sj6*x9832))+((r10*x9826*x9828)));
evalcond[2]=((1.0)+((r00*x9835))+(((-1.0)*r01*sj6*x9832))+((x9829*x9833))+((r02*x9834))+((r00*x9826*x9828)));
evalcond[3]=((((-1.0)*r21*x9837))+(((-1.0)*r22*x9836))+(((-1.0)*r20*x9828*x9832))+((r20*x9833))+(((-1.0)*cj6*x9830*x9832)));
evalcond[4]=(((r00*x9833))+(((-1.0)*r02*x9836))+(((-1.0)*r00*x9828*x9832))+(((-1.0)*r01*x9837))+(((-1.0)*cj6*x9829*x9832)));
evalcond[5]=((-1.0)+((r10*x9833))+(((-1.0)*r12*x9836))+(((-1.0)*r11*x9837))+(((-1.0)*x9831*x9832))+(((-1.0)*r10*x9828*x9832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9838=((1.0)*sj5);
CheckValue<IkReal> x9839 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9839.valid){
continue;
}
CheckValue<IkReal> x9840=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x9838))+(((-1.0)*r10*sj6*x9838)))),-1);
if(!x9840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9839.value)+(((1.5707963267949)*(x9840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9841=IKcos(j4);
IkReal x9842=IKsin(j4);
IkReal x9843=(cj5*sj6);
IkReal x9844=(cj5*r01);
IkReal x9845=(cj5*r21);
IkReal x9846=(cj5*cj6*r11);
IkReal x9847=((1.0)*x9842);
IkReal x9848=(cj6*x9841);
IkReal x9849=(sj5*x9841);
IkReal x9850=(cj6*x9842);
IkReal x9851=(sj5*x9847);
IkReal x9852=((1.0)*sj6*x9841);
evalcond[0]=(((x9845*x9848))+((r20*x9850))+((r20*x9841*x9843))+((r22*x9849))+(((-1.0)*r21*sj6*x9847)));
evalcond[1]=(((r10*x9850))+((r10*x9841*x9843))+(((-1.0)*r11*sj6*x9847))+((r12*x9849))+((x9841*x9846)));
evalcond[2]=((1.0)+((r02*x9849))+((x9844*x9848))+(((-1.0)*r01*sj6*x9847))+((r00*x9841*x9843))+((r00*x9850)));
evalcond[3]=((((-1.0)*cj6*x9845*x9847))+((r20*x9848))+(((-1.0)*r20*x9843*x9847))+(((-1.0)*r22*x9851))+(((-1.0)*r21*x9852)));
evalcond[4]=((((-1.0)*r02*x9851))+((r00*x9848))+(((-1.0)*r01*x9852))+(((-1.0)*r00*x9843*x9847))+(((-1.0)*cj6*x9844*x9847)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x9852))+((r10*x9848))+(((-1.0)*r10*x9843*x9847))+(((-1.0)*x9846*x9847))+(((-1.0)*r12*x9851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9853=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9853.valid){
continue;
}
CheckValue<IkReal> x9854 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9853.value)))+(x9854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9855=IKcos(j4);
IkReal x9856=IKsin(j4);
IkReal x9857=(cj5*sj6);
IkReal x9858=(cj5*r01);
IkReal x9859=(cj5*r21);
IkReal x9860=(cj5*cj6*r11);
IkReal x9861=((1.0)*x9856);
IkReal x9862=(cj6*x9855);
IkReal x9863=(sj5*x9855);
IkReal x9864=(cj6*x9856);
IkReal x9865=(sj5*x9861);
IkReal x9866=((1.0)*sj6*x9855);
evalcond[0]=(((r22*x9863))+(((-1.0)*r21*sj6*x9861))+((r20*x9855*x9857))+((x9859*x9862))+((r20*x9864)));
evalcond[1]=((((-1.0)*r11*sj6*x9861))+((r10*x9855*x9857))+((x9855*x9860))+((r12*x9863))+((r10*x9864)));
evalcond[2]=((1.0)+((r00*x9864))+((r02*x9863))+(((-1.0)*r01*sj6*x9861))+((x9858*x9862))+((r00*x9855*x9857)));
evalcond[3]=((((-1.0)*r22*x9865))+(((-1.0)*r21*x9866))+(((-1.0)*cj6*x9859*x9861))+(((-1.0)*r20*x9857*x9861))+((r20*x9862)));
evalcond[4]=((((-1.0)*r01*x9866))+((r00*x9862))+(((-1.0)*cj6*x9858*x9861))+(((-1.0)*r00*x9857*x9861))+(((-1.0)*r02*x9865)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x9865))+(((-1.0)*r10*x9857*x9861))+(((-1.0)*r11*x9866))+(((-1.0)*x9860*x9861))+((r10*x9862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9867=cj6*cj6;
IkReal x9868=cj5*cj5;
IkReal x9869=(r22*sj5);
IkReal x9870=((1.0)*r11);
IkReal x9871=(r20*sj6);
IkReal x9872=(cj0*cj5);
IkReal x9873=(cj6*r21);
IkReal x9874=((1.0)*r20);
IkReal x9875=(r12*r22);
IkReal x9876=(r10*sj6);
IkReal x9877=(r21*x9867);
IkReal x9878=(r10*x9868);
IkReal x9879=(r11*x9868);
IkReal x9880=(cj5*r12*sj5);
CheckValue<IkReal> x9881=IKPowWithIntegerCheck(IKsign((((r10*r20*x9867))+((x9873*x9880))+((x9877*x9879))+((x9868*x9873*x9876))+((r11*r21))+((cj5*x9869*x9876))+((r20*x9878))+(((-1.0)*cj6*x9870*x9871))+(((-1.0)*x9873*x9876))+((cj6*x9871*x9879))+(((-1.0)*x9867*x9874*x9878))+((x9871*x9880))+((cj5*cj6*r11*x9869))+(((-1.0)*x9870*x9877))+x9875+(((-1.0)*x9868*x9875)))),-1);
if(!x9881.valid){
continue;
}
CheckValue<IkReal> x9882 = IKatan2WithCheck(IkReal((((x9872*x9873))+((cj0*x9869))+((x9871*x9872)))),IkReal(((((-1.0)*cj0*cj6*x9874))+((cj0*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9881.value)))+(x9882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9883=IKcos(j4);
IkReal x9884=IKsin(j4);
IkReal x9885=((1.0)*sj0);
IkReal x9886=(cj5*r11);
IkReal x9887=((1.0)*sj6);
IkReal x9888=(cj5*r01);
IkReal x9889=(cj6*x9883);
IkReal x9890=(sj5*x9883);
IkReal x9891=(r21*x9884);
IkReal x9892=(cj6*x9884);
IkReal x9893=((1.0)*sj5*x9884);
IkReal x9894=(cj5*sj6*x9883);
IkReal x9895=(cj5*x9884*x9887);
evalcond[0]=(((cj5*r21*x9889))+(((-1.0)*x9887*x9891))+((r22*x9890))+((r20*x9892))+((r20*x9894)));
evalcond[1]=((((-1.0)*cj5*cj6*x9891))+((r20*x9889))+(((-1.0)*r21*x9883*x9887))+(((-1.0)*r20*x9895))+(((-1.0)*r22*x9893)));
evalcond[2]=(((x9888*x9889))+((r00*x9892))+((r00*x9894))+((r02*x9890))+(((-1.0)*r01*x9884*x9887))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x9885))+((x9886*x9889))+(((-1.0)*r11*x9884*x9887))+((r12*x9890))+((r10*x9892))+((r10*x9894)));
evalcond[4]=((((-1.0)*r11*x9883*x9887))+cj0+(((-1.0)*r12*x9893))+(((-1.0)*x9886*x9892))+(((-1.0)*r10*x9895))+((r10*x9889)));
evalcond[5]=((((-1.0)*r01*x9883*x9887))+(((-1.0)*r00*x9895))+(((-1.0)*x9885))+((r00*x9889))+(((-1.0)*x9888*x9892))+(((-1.0)*r02*x9893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9896=(sj0*sj6);
IkReal x9897=((1.0)*cj6);
CheckValue<IkReal> x9898 = IKatan2WithCheck(IkReal((((r22*sj0*sj5))+((cj5*cj6*r21*sj0))+((cj5*r20*x9896)))),IkReal(((((-1.0)*r20*sj0*x9897))+((r21*x9896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9898.valid){
continue;
}
CheckValue<IkReal> x9899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x9897))+((cj5*r02)))),-1);
if(!x9899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9898.value)+(((1.5707963267949)*(x9899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9900=IKcos(j4);
IkReal x9901=IKsin(j4);
IkReal x9902=((1.0)*sj0);
IkReal x9903=(cj5*r11);
IkReal x9904=((1.0)*sj6);
IkReal x9905=(cj5*r01);
IkReal x9906=(cj6*x9900);
IkReal x9907=(sj5*x9900);
IkReal x9908=(r21*x9901);
IkReal x9909=(cj6*x9901);
IkReal x9910=((1.0)*sj5*x9901);
IkReal x9911=(cj5*sj6*x9900);
IkReal x9912=(cj5*x9901*x9904);
evalcond[0]=(((r20*x9911))+((r20*x9909))+(((-1.0)*x9904*x9908))+((cj5*r21*x9906))+((r22*x9907)));
evalcond[1]=(((r20*x9906))+(((-1.0)*r22*x9910))+(((-1.0)*r21*x9900*x9904))+(((-1.0)*r20*x9912))+(((-1.0)*cj5*cj6*x9908)));
evalcond[2]=(((r02*x9907))+((x9905*x9906))+((r00*x9909))+((r00*x9911))+(((-1.0)*cj0))+(((-1.0)*r01*x9901*x9904)));
evalcond[3]=(((r12*x9907))+(((-1.0)*x9902))+((x9903*x9906))+(((-1.0)*r11*x9901*x9904))+((r10*x9909))+((r10*x9911)));
evalcond[4]=(cj0+(((-1.0)*r10*x9912))+(((-1.0)*r11*x9900*x9904))+(((-1.0)*r12*x9910))+(((-1.0)*x9903*x9909))+((r10*x9906)));
evalcond[5]=((((-1.0)*x9905*x9909))+((r00*x9906))+(((-1.0)*x9902))+(((-1.0)*r02*x9910))+(((-1.0)*r00*x9912))+(((-1.0)*r01*x9900*x9904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9913=(cj0*r20);
IkReal x9914=(cj0*r21);
CheckValue<IkReal> x9915=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9915.valid){
continue;
}
CheckValue<IkReal> x9916 = IKatan2WithCheck(IkReal((((cj5*sj6*x9913))+((cj0*r22*sj5))+((cj5*cj6*x9914)))),IkReal(((((-1.0)*cj6*x9913))+((sj6*x9914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9915.value)))+(x9916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9917=IKcos(j4);
IkReal x9918=IKsin(j4);
IkReal x9919=((1.0)*sj0);
IkReal x9920=(cj5*r11);
IkReal x9921=((1.0)*sj6);
IkReal x9922=(cj5*r01);
IkReal x9923=(cj6*x9917);
IkReal x9924=(sj5*x9917);
IkReal x9925=(r21*x9918);
IkReal x9926=(cj6*x9918);
IkReal x9927=((1.0)*sj5*x9918);
IkReal x9928=(cj5*sj6*x9917);
IkReal x9929=(cj5*x9918*x9921);
evalcond[0]=((((-1.0)*x9921*x9925))+((r20*x9928))+((r20*x9926))+((cj5*r21*x9923))+((r22*x9924)));
evalcond[1]=((((-1.0)*r20*x9929))+((r20*x9923))+(((-1.0)*r22*x9927))+(((-1.0)*r21*x9917*x9921))+(((-1.0)*cj5*cj6*x9925)));
evalcond[2]=((((-1.0)*r01*x9918*x9921))+((r02*x9924))+((x9922*x9923))+(((-1.0)*cj0))+((r00*x9926))+((r00*x9928)));
evalcond[3]=(((r10*x9926))+((r10*x9928))+(((-1.0)*x9919))+((x9920*x9923))+((r12*x9924))+(((-1.0)*r11*x9918*x9921)));
evalcond[4]=(((r10*x9923))+(((-1.0)*r11*x9917*x9921))+cj0+(((-1.0)*r12*x9927))+(((-1.0)*r10*x9929))+(((-1.0)*x9920*x9926)));
evalcond[5]=((((-1.0)*r02*x9927))+(((-1.0)*r01*x9917*x9921))+(((-1.0)*x9919))+(((-1.0)*x9922*x9926))+(((-1.0)*r00*x9929))+((r00*x9923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9930=(r10*sj6);
IkReal x9931=((0.863573439158322)*sj5);
IkReal x9932=((0.0230723086152)*cj5);
IkReal x9933=(cj6*r11);
IkReal x9934=(r00*sj6);
IkReal x9935=((0.0230723086152)*sj5);
IkReal x9936=((0.863573439158322)*cj5);
IkReal x9937=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+(((-1.0)*x9930*x9932))+((x9930*x9931))+((x9931*x9933))+(((-1.0)*r12*x9935))+(((-1.0)*r12*x9936))+(((-1.0)*x9932*x9933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+(((-1.0)*r02*x9935))+(((-1.0)*r02*x9936))+((x9931*x9937))+((x9931*x9934))+(((-1.0)*x9932*x9937))+(((-1.0)*x9932*x9934)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+(((-1.0)*x9930*x9932))+((x9930*x9931))+((x9931*x9933))+(((-1.0)*r12*x9935))+(((-1.0)*r12*x9936))+(((-1.0)*x9932*x9933))))+IKsqr(((((2.30723086152)*px))+(((-1.0)*r02*x9935))+(((-1.0)*r02*x9936))+((x9931*x9937))+((x9931*x9934))+(((-1.0)*x9932*x9937))+(((-1.0)*x9932*x9934))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+(((-1.0)*x9930*x9932))+((x9930*x9931))+((x9931*x9933))+(((-1.0)*r12*x9935))+(((-1.0)*r12*x9936))+(((-1.0)*x9932*x9933))), ((((2.30723086152)*px))+(((-1.0)*r02*x9935))+(((-1.0)*r02*x9936))+((x9931*x9937))+((x9931*x9934))+(((-1.0)*x9932*x9937))+(((-1.0)*x9932*x9934))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x9938=((0.01)*cj5);
IkReal x9939=(cj6*r01);
IkReal x9940=((0.37429)*sj5);
IkReal x9941=(cj6*r11);
IkReal x9942=((0.01)*sj5);
IkReal x9943=(r00*sj6);
IkReal x9944=((0.37429)*cj5);
IkReal x9945=(r10*sj6);
evalcond[0]=((((-1.0)*x9940*x9943))+((r02*x9942))+((r02*x9944))+(((-1.0)*x9939*x9940))+(((-1.0)*px))+((x9938*x9939))+((x9938*x9943))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=((((0.43342)*(IKsin(j0))))+(((-1.0)*x9940*x9941))+(((-1.0)*x9940*x9945))+((r12*x9944))+((r12*x9942))+(((-1.0)*py))+((x9938*x9945))+((x9938*x9941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9946=(cj0*r20);
IkReal x9947=(cj0*r21);
IkReal x9948=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9948;
j4eval[1]=((IKabs((((cj5*sj6*x9946))+((cj5*cj6*x9947))+((cj0*r22*sj5)))))+(IKabs((((sj6*x9947))+(((-1.0)*cj6*x9946))))));
j4eval[2]=IKsign(x9948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9949=(sj0*sj6);
IkReal x9950=((1.0)*cj6);
IkReal x9951=((((-1.0)*r01*sj5*x9950))+(((-1.0)*r00*sj5*sj6))+((cj5*r02)));
j4eval[0]=x9951;
j4eval[1]=IKsign(x9951);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x9950))+((r21*x9949)))))+(IKabs((((cj5*r20*x9949))+((r22*sj0*sj5))+((cj5*cj6*r21*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9952=cj5*cj5;
IkReal x9953=cj6*cj6;
IkReal x9954=(r00*r20);
IkReal x9955=(r02*r22);
IkReal x9956=(cj5*sj5);
IkReal x9957=(cj6*r21);
IkReal x9958=(r00*sj6);
IkReal x9959=(r20*sj6);
IkReal x9960=(cj6*r01);
IkReal x9961=(cj5*sj0);
IkReal x9962=((1.0)*x9952);
IkReal x9963=(r01*r21*x9953);
IkReal x9964=(((r22*x9956*x9960))+((x9952*x9957*x9958))+((x9953*x9954))+(((-1.0)*x9953*x9954*x9962))+((r22*x9956*x9958))+((r01*r21))+((x9952*x9954))+(((-1.0)*x9955*x9962))+(((-1.0)*x9959*x9960))+((r02*x9956*x9957))+((r02*x9956*x9959))+x9955+(((-1.0)*x9963))+((x9952*x9963))+((x9952*x9959*x9960))+(((-1.0)*x9957*x9958)));
j4eval[0]=x9964;
j4eval[1]=IKsign(x9964);
j4eval[2]=((IKabs((((r21*sj0*sj6))+(((-1.0)*cj6*r20*sj0)))))+(IKabs((((x9959*x9961))+((r22*sj0*sj5))+((x9957*x9961))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9965=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9965;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9966=((1.0)*cj6);
IkReal x9967=(((cj5*r22))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r21*sj5*x9966)));
j4eval[0]=x9967;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs((((r11*sj6))+(((-1.0)*r10*x9966))))));
j4eval[2]=IKsign(x9967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9968=cj6*cj6;
IkReal x9969=cj5*cj5;
IkReal x9970=r10*r10;
IkReal x9971=r11*r11;
IkReal x9972=r12*r12;
IkReal x9973=(r10*sj6);
IkReal x9974=(r12*sj5);
IkReal x9975=((2.0)*cj6*r11);
IkReal x9976=((1.0)*x9970);
IkReal x9977=(x9968*x9971);
IkReal x9978=(((x9969*x9972))+((x9968*x9969*x9970))+(((-1.0)*x9969*x9973*x9975))+(((-1.0)*x9968*x9976))+((x9973*x9975))+(((-1.0)*x9971))+(((-1.0)*x9972))+(((-1.0)*x9969*x9976))+(((-1.0)*x9969*x9977))+(((-2.0)*cj5*x9973*x9974))+x9977+(((-1.0)*cj5*x9974*x9975)));
j4eval[0]=x9978;
j4eval[1]=((IKabs((((cj5*x9973))+((cj5*cj6*r11))+x9974)))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9978);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9979=cj6*cj6;
IkReal x9980=cj5*cj5;
IkReal x9981=r10*r10;
IkReal x9982=r11*r11;
IkReal x9983=r12*r12;
IkReal x9984=(r10*sj6);
IkReal x9985=(r12*sj5);
IkReal x9986=((2.0)*cj6*r11);
IkReal x9987=(x9979*x9982);
IkReal x9988=(x9980*x9981);
CheckValue<IkReal> x9989=IKPowWithIntegerCheck(IKsign((((x9979*x9988))+((x9984*x9986))+(((-1.0)*cj5*x9985*x9986))+(((-1.0)*x9980*x9984*x9986))+(((-1.0)*x9979*x9981))+(((-1.0)*x9982))+(((-1.0)*x9983))+(((-1.0)*x9988))+x9987+(((-2.0)*cj5*x9984*x9985))+(((-1.0)*x9980*x9987))+((x9980*x9983)))),-1);
if(!x9989.valid){
continue;
}
CheckValue<IkReal> x9990 = IKatan2WithCheck(IkReal((((cj5*x9984))+((cj5*cj6*r11))+x9985)),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9989.value)))+(x9990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9991=IKcos(j4);
IkReal x9992=IKsin(j4);
IkReal x9993=(cj5*sj6);
IkReal x9994=(cj5*r01);
IkReal x9995=(cj5*r21);
IkReal x9996=(cj5*cj6*r11);
IkReal x9997=((1.0)*x9992);
IkReal x9998=(cj6*x9991);
IkReal x9999=(sj5*x9991);
IkReal x10000=(cj6*x9992);
IkReal x10001=(sj5*x9997);
IkReal x10002=((1.0)*sj6*x9991);
evalcond[0]=(((r22*x9999))+(((-1.0)*r21*sj6*x9997))+((r20*x9991*x9993))+((x9995*x9998))+((r20*x10000)));
evalcond[1]=(((r10*x9991*x9993))+((r12*x9999))+((r10*x10000))+((x9991*x9996))+(((-1.0)*r11*sj6*x9997)));
evalcond[2]=((-1.0)+((r02*x9999))+((r00*x10000))+((x9994*x9998))+((r00*x9991*x9993))+(((-1.0)*r01*sj6*x9997)));
evalcond[3]=((((-1.0)*r21*x10002))+(((-1.0)*r22*x10001))+(((-1.0)*r20*x9993*x9997))+(((-1.0)*cj6*x9995*x9997))+((r20*x9998)));
evalcond[4]=(((r00*x9998))+(((-1.0)*r02*x10001))+(((-1.0)*cj6*x9994*x9997))+(((-1.0)*r00*x9993*x9997))+(((-1.0)*r01*x10002)));
evalcond[5]=((-1.0)+((r10*x9998))+(((-1.0)*r11*x10002))+(((-1.0)*r12*x10001))+(((-1.0)*r10*x9993*x9997))+(((-1.0)*x9996*x9997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10003=((1.0)*cj6);
CheckValue<IkReal> x10004=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x10003))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x10004.valid){
continue;
}
CheckValue<IkReal> x10005 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal((((r11*sj6))+(((-1.0)*r10*x10003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10004.value)))+(x10005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10006=IKcos(j4);
IkReal x10007=IKsin(j4);
IkReal x10008=(cj5*sj6);
IkReal x10009=(cj5*r01);
IkReal x10010=(cj5*r21);
IkReal x10011=(cj5*cj6*r11);
IkReal x10012=((1.0)*x10007);
IkReal x10013=(cj6*x10006);
IkReal x10014=(sj5*x10006);
IkReal x10015=(cj6*x10007);
IkReal x10016=(sj5*x10012);
IkReal x10017=((1.0)*sj6*x10006);
evalcond[0]=(((r22*x10014))+((r20*x10006*x10008))+((x10010*x10013))+(((-1.0)*r21*sj6*x10012))+((r20*x10015)));
evalcond[1]=((((-1.0)*r11*sj6*x10012))+((x10006*x10011))+((r12*x10014))+((r10*x10015))+((r10*x10006*x10008)));
evalcond[2]=((-1.0)+((x10009*x10013))+((r00*x10006*x10008))+((r02*x10014))+((r00*x10015))+(((-1.0)*r01*sj6*x10012)));
evalcond[3]=((((-1.0)*r21*x10017))+(((-1.0)*r22*x10016))+((r20*x10013))+(((-1.0)*cj6*x10010*x10012))+(((-1.0)*r20*x10008*x10012)));
evalcond[4]=((((-1.0)*r01*x10017))+(((-1.0)*r00*x10008*x10012))+(((-1.0)*r02*x10016))+((r00*x10013))+(((-1.0)*cj6*x10009*x10012)));
evalcond[5]=((-1.0)+((r10*x10013))+(((-1.0)*r12*x10016))+(((-1.0)*r11*x10017))+(((-1.0)*x10011*x10012))+(((-1.0)*r10*x10008*x10012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10018=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10018.valid){
continue;
}
CheckValue<IkReal> x10019 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10018.value)))+(x10019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10020=IKcos(j4);
IkReal x10021=IKsin(j4);
IkReal x10022=(cj5*sj6);
IkReal x10023=(cj5*r01);
IkReal x10024=(cj5*r21);
IkReal x10025=(cj5*cj6*r11);
IkReal x10026=((1.0)*x10021);
IkReal x10027=(cj6*x10020);
IkReal x10028=(sj5*x10020);
IkReal x10029=(cj6*x10021);
IkReal x10030=(sj5*x10026);
IkReal x10031=((1.0)*sj6*x10020);
evalcond[0]=(((x10024*x10027))+((r20*x10029))+(((-1.0)*r21*sj6*x10026))+((r20*x10020*x10022))+((r22*x10028)));
evalcond[1]=((((-1.0)*r11*sj6*x10026))+((x10020*x10025))+((r10*x10020*x10022))+((r10*x10029))+((r12*x10028)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x10026))+((r00*x10020*x10022))+((r00*x10029))+((x10023*x10027))+((r02*x10028)));
evalcond[3]=((((-1.0)*r21*x10031))+(((-1.0)*r20*x10022*x10026))+((r20*x10027))+(((-1.0)*r22*x10030))+(((-1.0)*cj6*x10024*x10026)));
evalcond[4]=((((-1.0)*r02*x10030))+(((-1.0)*r01*x10031))+((r00*x10027))+(((-1.0)*cj6*x10023*x10026))+(((-1.0)*r00*x10022*x10026)));
evalcond[5]=((-1.0)+(((-1.0)*x10025*x10026))+((r10*x10027))+(((-1.0)*r10*x10022*x10026))+(((-1.0)*r12*x10030))+(((-1.0)*r11*x10031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10032=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10032;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x10032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10033=((1.0)*sj5);
IkReal x10034=((((-1.0)*r10*sj6*x10033))+((cj5*r12))+(((-1.0)*cj6*r11*x10033)));
j4eval[0]=x10034;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10035=r11*r11;
IkReal x10036=cj5*cj5;
IkReal x10037=cj6*cj6;
IkReal x10038=r10*r10;
IkReal x10039=r12*r12;
IkReal x10040=(r12*sj5);
IkReal x10041=(r11*sj6);
IkReal x10042=((1.0)*x10037);
IkReal x10043=(cj5*cj6*r11);
IkReal x10044=(cj5*r10*sj6);
IkReal x10045=((2.0)*cj6*r10);
IkReal x10046=(x10036*x10038);
IkReal x10047=((((2.0)*x10040*x10043))+(((2.0)*x10040*x10044))+(((-1.0)*x10041*x10045))+(((-1.0)*x10036*x10039))+((x10037*x10038))+((x10035*x10036*x10037))+(((-1.0)*x10042*x10046))+((x10036*x10041*x10045))+(((-1.0)*x10035*x10042))+x10046+x10039+x10035);
j4eval[0]=x10047;
j4eval[1]=((IKabs((x10043+x10040+x10044)))+(IKabs(((((-1.0)*cj6*r10))+x10041))));
j4eval[2]=IKsign(x10047);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10048=r11*r11;
IkReal x10049=cj5*cj5;
IkReal x10050=cj6*cj6;
IkReal x10051=r10*r10;
IkReal x10052=r12*r12;
IkReal x10053=(r10*sj6);
IkReal x10054=(r12*sj5);
IkReal x10055=((1.0)*x10050);
IkReal x10056=(cj5*cj6*r11);
IkReal x10057=((2.0)*cj6*r11);
IkReal x10058=(x10049*x10051);
CheckValue<IkReal> x10059=IKPowWithIntegerCheck(IKsign((((x10049*x10053*x10057))+(((-1.0)*x10053*x10057))+(((-1.0)*x10049*x10052))+(((2.0)*x10054*x10056))+x10058+x10052+x10048+(((-1.0)*x10048*x10055))+(((2.0)*cj5*x10053*x10054))+((x10048*x10049*x10050))+((x10050*x10051))+(((-1.0)*x10055*x10058)))),-1);
if(!x10059.valid){
continue;
}
CheckValue<IkReal> x10060 = IKatan2WithCheck(IkReal((((cj5*x10053))+x10054+x10056)),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10059.value)))+(x10060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10061=IKcos(j4);
IkReal x10062=IKsin(j4);
IkReal x10063=(cj5*sj6);
IkReal x10064=(cj5*r01);
IkReal x10065=(cj5*r21);
IkReal x10066=(cj5*cj6*r11);
IkReal x10067=((1.0)*x10062);
IkReal x10068=(cj6*x10061);
IkReal x10069=(sj5*x10061);
IkReal x10070=(cj6*x10062);
IkReal x10071=(sj5*x10067);
IkReal x10072=((1.0)*sj6*x10061);
evalcond[0]=((((-1.0)*r21*sj6*x10067))+((x10065*x10068))+((r20*x10070))+((r20*x10061*x10063))+((r22*x10069)));
evalcond[1]=(((r10*x10070))+((r12*x10069))+((r10*x10061*x10063))+(((-1.0)*r11*sj6*x10067))+((x10061*x10066)));
evalcond[2]=((1.0)+((x10064*x10068))+((r00*x10070))+((r02*x10069))+(((-1.0)*r01*sj6*x10067))+((r00*x10061*x10063)));
evalcond[3]=((((-1.0)*r20*x10063*x10067))+((r20*x10068))+(((-1.0)*r21*x10072))+(((-1.0)*cj6*x10065*x10067))+(((-1.0)*r22*x10071)));
evalcond[4]=(((r00*x10068))+(((-1.0)*r00*x10063*x10067))+(((-1.0)*r01*x10072))+(((-1.0)*cj6*x10064*x10067))+(((-1.0)*r02*x10071)));
evalcond[5]=((1.0)+(((-1.0)*x10066*x10067))+((r10*x10068))+(((-1.0)*r12*x10071))+(((-1.0)*r11*x10072))+(((-1.0)*r10*x10063*x10067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10073=((1.0)*sj5);
CheckValue<IkReal> x10074=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x10073))+(((-1.0)*r10*sj6*x10073)))),-1);
if(!x10074.valid){
continue;
}
CheckValue<IkReal> x10075 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10074.value)))+(x10075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10076=IKcos(j4);
IkReal x10077=IKsin(j4);
IkReal x10078=(cj5*sj6);
IkReal x10079=(cj5*r01);
IkReal x10080=(cj5*r21);
IkReal x10081=(cj5*cj6*r11);
IkReal x10082=((1.0)*x10077);
IkReal x10083=(cj6*x10076);
IkReal x10084=(sj5*x10076);
IkReal x10085=(cj6*x10077);
IkReal x10086=(sj5*x10082);
IkReal x10087=((1.0)*sj6*x10076);
evalcond[0]=((((-1.0)*r21*sj6*x10082))+((r20*x10085))+((r20*x10076*x10078))+((r22*x10084))+((x10080*x10083)));
evalcond[1]=(((r10*x10076*x10078))+(((-1.0)*r11*sj6*x10082))+((x10076*x10081))+((r12*x10084))+((r10*x10085)));
evalcond[2]=((1.0)+((r00*x10085))+(((-1.0)*r01*sj6*x10082))+((r00*x10076*x10078))+((r02*x10084))+((x10079*x10083)));
evalcond[3]=(((r20*x10083))+(((-1.0)*r21*x10087))+(((-1.0)*r20*x10078*x10082))+(((-1.0)*cj6*x10080*x10082))+(((-1.0)*r22*x10086)));
evalcond[4]=((((-1.0)*cj6*x10079*x10082))+((r00*x10083))+(((-1.0)*r01*x10087))+(((-1.0)*r02*x10086))+(((-1.0)*r00*x10078*x10082)));
evalcond[5]=((1.0)+(((-1.0)*x10081*x10082))+(((-1.0)*r10*x10078*x10082))+(((-1.0)*r12*x10086))+(((-1.0)*r11*x10087))+((r10*x10083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10088=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10088.valid){
continue;
}
CheckValue<IkReal> x10089 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10088.value)))+(x10089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10090=IKcos(j4);
IkReal x10091=IKsin(j4);
IkReal x10092=(cj5*sj6);
IkReal x10093=(cj5*r01);
IkReal x10094=(cj5*r21);
IkReal x10095=(cj5*cj6*r11);
IkReal x10096=((1.0)*x10091);
IkReal x10097=(cj6*x10090);
IkReal x10098=(sj5*x10090);
IkReal x10099=(cj6*x10091);
IkReal x10100=(sj5*x10096);
IkReal x10101=((1.0)*sj6*x10090);
evalcond[0]=(((x10094*x10097))+((r22*x10098))+((r20*x10099))+(((-1.0)*r21*sj6*x10096))+((r20*x10090*x10092)));
evalcond[1]=(((x10090*x10095))+((r12*x10098))+((r10*x10099))+(((-1.0)*r11*sj6*x10096))+((r10*x10090*x10092)));
evalcond[2]=((1.0)+((x10093*x10097))+((r00*x10090*x10092))+((r02*x10098))+(((-1.0)*r01*sj6*x10096))+((r00*x10099)));
evalcond[3]=((((-1.0)*cj6*x10094*x10096))+(((-1.0)*r22*x10100))+(((-1.0)*r20*x10092*x10096))+((r20*x10097))+(((-1.0)*r21*x10101)));
evalcond[4]=((((-1.0)*r00*x10092*x10096))+(((-1.0)*r01*x10101))+(((-1.0)*cj6*x10093*x10096))+(((-1.0)*r02*x10100))+((r00*x10097)));
evalcond[5]=((1.0)+(((-1.0)*x10095*x10096))+(((-1.0)*r11*x10101))+(((-1.0)*r12*x10100))+((r10*x10097))+(((-1.0)*r10*x10092*x10096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10102=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10102;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10103=((1.0)*sj5);
IkReal x10104=((((-1.0)*r00*sj6*x10103))+(((-1.0)*cj6*r01*x10103))+((cj5*r02)));
j4eval[0]=x10104;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10105=cj6*cj6;
IkReal x10106=r01*r01;
IkReal x10107=cj5*cj5;
IkReal x10108=r00*r00;
IkReal x10109=r02*r02;
IkReal x10110=(r02*sj5);
IkReal x10111=(r01*sj6);
IkReal x10112=(cj6*r00);
IkReal x10113=(cj5*cj6*r01);
IkReal x10114=(cj5*r00*sj6);
IkReal x10115=((1.0)*x10107);
IkReal x10116=(x10105*x10108);
IkReal x10117=(x10105*x10106);
IkReal x10118=((((-1.0)*x10117))+((x10107*x10108))+((x10107*x10117))+(((2.0)*x10107*x10111*x10112))+x10109+x10106+x10116+(((-2.0)*x10111*x10112))+(((-1.0)*x10109*x10115))+(((2.0)*x10110*x10114))+(((2.0)*x10110*x10113))+(((-1.0)*x10115*x10116)));
j4eval[0]=x10118;
j4eval[1]=((IKabs(((((-1.0)*x10112))+x10111)))+(IKabs((x10114+x10110+x10113))));
j4eval[2]=IKsign(x10118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10119=cj6*cj6;
IkReal x10120=r01*r01;
IkReal x10121=cj5*cj5;
IkReal x10122=r00*r00;
IkReal x10123=r02*r02;
IkReal x10124=(r00*sj6);
IkReal x10125=(r02*sj5);
IkReal x10126=((2.0)*cj6*r01);
IkReal x10127=((1.0)*x10121);
IkReal x10128=(x10119*x10122);
IkReal x10129=(x10119*x10120);
CheckValue<IkReal> x10130=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10127*x10128))+(((-1.0)*x10123*x10127))+((cj5*x10125*x10126))+(((2.0)*cj5*x10124*x10125))+x10128+x10120+x10123+(((-1.0)*x10129))+((x10121*x10122))+((x10121*x10129))+((x10121*x10124*x10126))+(((-1.0)*x10124*x10126)))),-1);
if(!x10130.valid){
continue;
}
CheckValue<IkReal> x10131 = IKatan2WithCheck(IkReal((x10125+((cj5*cj6*r01))+((cj5*x10124)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10130.value)))+(x10131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10132=IKcos(j4);
IkReal x10133=IKsin(j4);
IkReal x10134=(cj5*sj6);
IkReal x10135=(cj5*r21);
IkReal x10136=(cj5*r01);
IkReal x10137=(cj5*cj6*r11);
IkReal x10138=((1.0)*x10133);
IkReal x10139=(cj6*x10132);
IkReal x10140=(sj5*x10132);
IkReal x10141=(cj6*x10133);
IkReal x10142=(sj5*x10138);
IkReal x10143=((1.0)*sj6*x10132);
evalcond[0]=((((-1.0)*r21*sj6*x10138))+((r20*x10132*x10134))+((r22*x10140))+((x10135*x10139))+((r20*x10141)));
evalcond[1]=(((r00*x10132*x10134))+((x10136*x10139))+((r02*x10140))+((r00*x10141))+(((-1.0)*r01*sj6*x10138)));
evalcond[2]=((-1.0)+((r12*x10140))+((r10*x10141))+(((-1.0)*r11*sj6*x10138))+((r10*x10132*x10134))+((x10132*x10137)));
evalcond[3]=(((r20*x10139))+(((-1.0)*cj6*x10135*x10138))+(((-1.0)*r21*x10143))+(((-1.0)*r22*x10142))+(((-1.0)*r20*x10134*x10138)));
evalcond[4]=(((r10*x10139))+(((-1.0)*r10*x10134*x10138))+(((-1.0)*r12*x10142))+(((-1.0)*r11*x10143))+(((-1.0)*x10137*x10138)));
evalcond[5]=((1.0)+(((-1.0)*r02*x10142))+((r00*x10139))+(((-1.0)*cj6*x10136*x10138))+(((-1.0)*r00*x10134*x10138))+(((-1.0)*r01*x10143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10144=((1.0)*sj5);
CheckValue<IkReal> x10145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x10144))+(((-1.0)*cj6*r01*x10144))+((cj5*r02)))),-1);
if(!x10145.valid){
continue;
}
CheckValue<IkReal> x10146 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10145.value)))+(x10146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10147=IKcos(j4);
IkReal x10148=IKsin(j4);
IkReal x10149=(cj5*sj6);
IkReal x10150=(cj5*r21);
IkReal x10151=(cj5*r01);
IkReal x10152=(cj5*cj6*r11);
IkReal x10153=((1.0)*x10148);
IkReal x10154=(cj6*x10147);
IkReal x10155=(sj5*x10147);
IkReal x10156=(cj6*x10148);
IkReal x10157=(sj5*x10153);
IkReal x10158=((1.0)*sj6*x10147);
evalcond[0]=(((x10150*x10154))+(((-1.0)*r21*sj6*x10153))+((r22*x10155))+((r20*x10147*x10149))+((r20*x10156)));
evalcond[1]=(((x10151*x10154))+(((-1.0)*r01*sj6*x10153))+((r02*x10155))+((r00*x10147*x10149))+((r00*x10156)));
evalcond[2]=((-1.0)+((r12*x10155))+((x10147*x10152))+((r10*x10156))+(((-1.0)*r11*sj6*x10153))+((r10*x10147*x10149)));
evalcond[3]=((((-1.0)*r20*x10149*x10153))+(((-1.0)*cj6*x10150*x10153))+(((-1.0)*r21*x10158))+(((-1.0)*r22*x10157))+((r20*x10154)));
evalcond[4]=(((r10*x10154))+(((-1.0)*r10*x10149*x10153))+(((-1.0)*r11*x10158))+(((-1.0)*r12*x10157))+(((-1.0)*x10152*x10153)));
evalcond[5]=((1.0)+(((-1.0)*r02*x10157))+(((-1.0)*r01*x10158))+((r00*x10154))+(((-1.0)*cj6*x10151*x10153))+(((-1.0)*r00*x10149*x10153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10159 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10159.valid){
continue;
}
CheckValue<IkReal> x10160=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10159.value)+(((1.5707963267949)*(x10160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10161=IKcos(j4);
IkReal x10162=IKsin(j4);
IkReal x10163=(cj5*sj6);
IkReal x10164=(cj5*r21);
IkReal x10165=(cj5*r01);
IkReal x10166=(cj5*cj6*r11);
IkReal x10167=((1.0)*x10162);
IkReal x10168=(cj6*x10161);
IkReal x10169=(sj5*x10161);
IkReal x10170=(cj6*x10162);
IkReal x10171=(sj5*x10167);
IkReal x10172=((1.0)*sj6*x10161);
evalcond[0]=(((r22*x10169))+((x10164*x10168))+((r20*x10161*x10163))+(((-1.0)*r21*sj6*x10167))+((r20*x10170)));
evalcond[1]=((((-1.0)*r01*sj6*x10167))+((x10165*x10168))+((r00*x10170))+((r00*x10161*x10163))+((r02*x10169)));
evalcond[2]=((-1.0)+((x10161*x10166))+((r10*x10170))+((r12*x10169))+((r10*x10161*x10163))+(((-1.0)*r11*sj6*x10167)));
evalcond[3]=((((-1.0)*r22*x10171))+(((-1.0)*r21*x10172))+((r20*x10168))+(((-1.0)*cj6*x10164*x10167))+(((-1.0)*r20*x10163*x10167)));
evalcond[4]=(((r10*x10168))+(((-1.0)*r10*x10163*x10167))+(((-1.0)*x10166*x10167))+(((-1.0)*r12*x10171))+(((-1.0)*r11*x10172)));
evalcond[5]=((1.0)+((r00*x10168))+(((-1.0)*r01*x10172))+(((-1.0)*r00*x10163*x10167))+(((-1.0)*cj6*x10165*x10167))+(((-1.0)*r02*x10171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10173=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10173;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10174=((1.0)*cj6);
IkReal x10175=((((-1.0)*r21*sj5*x10174))+((cj5*r22))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10175;
j4eval[1]=IKsign(x10175);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x10174))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10176=cj6*cj6;
IkReal x10177=cj5*cj5;
IkReal x10178=r00*r00;
IkReal x10179=r01*r01;
IkReal x10180=r02*r02;
IkReal x10181=(r00*sj6);
IkReal x10182=((2.0)*cj6*r01);
IkReal x10183=(cj5*r02*sj5);
IkReal x10184=((1.0)*x10176);
IkReal x10185=(x10177*x10178);
IkReal x10186=(((x10181*x10182))+(((-1.0)*x10178*x10184))+(((-1.0)*x10179))+(((-1.0)*x10177*x10181*x10182))+(((-1.0)*x10182*x10183))+(((-1.0)*x10180))+(((-1.0)*x10185))+((x10177*x10180))+(((-1.0)*x10177*x10179*x10184))+((x10176*x10179))+((x10176*x10185))+(((-2.0)*x10181*x10183)));
j4eval[0]=x10186;
j4eval[1]=((IKabs((((r01*sj6))+(((-1.0)*cj6*r00)))))+(IKabs((((r02*sj5))+((cj5*cj6*r01))+((cj5*x10181))))));
j4eval[2]=IKsign(x10186);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10187=cj6*cj6;
IkReal x10188=cj5*cj5;
IkReal x10189=r00*r00;
IkReal x10190=r01*r01;
IkReal x10191=r02*r02;
IkReal x10192=(r01*sj6);
IkReal x10193=(cj6*r00);
IkReal x10194=(cj5*cj6*r01);
IkReal x10195=((2.0)*r02*sj5);
IkReal x10196=((1.0)*x10187);
IkReal x10197=(cj5*r00*sj6);
IkReal x10198=(x10188*x10189);
CheckValue<IkReal> x10199 = IKatan2WithCheck(IkReal((((r02*sj5))+x10194+x10197)),IkReal((x10192+(((-1.0)*x10193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10199.valid){
continue;
}
CheckValue<IkReal> x10200=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10188*x10192*x10193))+(((-1.0)*x10188*x10190*x10196))+(((-1.0)*x10195*x10197))+(((-1.0)*x10194*x10195))+(((-1.0)*x10198))+(((-1.0)*x10190))+(((-1.0)*x10191))+((x10188*x10191))+(((-1.0)*x10189*x10196))+((x10187*x10190))+((x10187*x10198))+(((2.0)*x10192*x10193)))),-1);
if(!x10200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10199.value)+(((1.5707963267949)*(x10200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10201=IKcos(j4);
IkReal x10202=IKsin(j4);
IkReal x10203=(cj5*sj6);
IkReal x10204=(cj5*r21);
IkReal x10205=(cj5*r01);
IkReal x10206=(cj5*cj6*r11);
IkReal x10207=((1.0)*x10202);
IkReal x10208=(cj6*x10201);
IkReal x10209=(sj5*x10201);
IkReal x10210=(cj6*x10202);
IkReal x10211=(sj5*x10207);
IkReal x10212=((1.0)*sj6*x10201);
evalcond[0]=(((r22*x10209))+((r20*x10201*x10203))+((r20*x10210))+((x10204*x10208))+(((-1.0)*r21*sj6*x10207)));
evalcond[1]=(((r02*x10209))+((r00*x10201*x10203))+((x10205*x10208))+(((-1.0)*r01*sj6*x10207))+((r00*x10210)));
evalcond[2]=((1.0)+((r10*x10210))+((x10201*x10206))+(((-1.0)*r11*sj6*x10207))+((r10*x10201*x10203))+((r12*x10209)));
evalcond[3]=((((-1.0)*r20*x10203*x10207))+(((-1.0)*r21*x10212))+(((-1.0)*r22*x10211))+(((-1.0)*cj6*x10204*x10207))+((r20*x10208)));
evalcond[4]=(((r10*x10208))+(((-1.0)*x10206*x10207))+(((-1.0)*r11*x10212))+(((-1.0)*r10*x10203*x10207))+(((-1.0)*r12*x10211)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x10212))+((r00*x10208))+(((-1.0)*r02*x10211))+(((-1.0)*r00*x10203*x10207))+(((-1.0)*cj6*x10205*x10207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10213=((1.0)*cj6);
CheckValue<IkReal> x10214=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x10213))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x10214.valid){
continue;
}
CheckValue<IkReal> x10215 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x10213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10214.value)))+(x10215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10216=IKcos(j4);
IkReal x10217=IKsin(j4);
IkReal x10218=(cj5*sj6);
IkReal x10219=(cj5*r21);
IkReal x10220=(cj5*r01);
IkReal x10221=(cj5*cj6*r11);
IkReal x10222=((1.0)*x10217);
IkReal x10223=(cj6*x10216);
IkReal x10224=(sj5*x10216);
IkReal x10225=(cj6*x10217);
IkReal x10226=(sj5*x10222);
IkReal x10227=((1.0)*sj6*x10216);
evalcond[0]=((((-1.0)*r21*sj6*x10222))+((r22*x10224))+((r20*x10216*x10218))+((x10219*x10223))+((r20*x10225)));
evalcond[1]=(((r02*x10224))+((r00*x10216*x10218))+((x10220*x10223))+((r00*x10225))+(((-1.0)*r01*sj6*x10222)));
evalcond[2]=((1.0)+((r12*x10224))+((r10*x10225))+((r10*x10216*x10218))+(((-1.0)*r11*sj6*x10222))+((x10216*x10221)));
evalcond[3]=((((-1.0)*r21*x10227))+(((-1.0)*r22*x10226))+(((-1.0)*r20*x10218*x10222))+((r20*x10223))+(((-1.0)*cj6*x10219*x10222)));
evalcond[4]=(((r10*x10223))+(((-1.0)*r10*x10218*x10222))+(((-1.0)*x10221*x10222))+(((-1.0)*r12*x10226))+(((-1.0)*r11*x10227)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x10226))+(((-1.0)*cj6*x10220*x10222))+(((-1.0)*r01*x10227))+((r00*x10223))+(((-1.0)*r00*x10218*x10222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10228=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10228.valid){
continue;
}
CheckValue<IkReal> x10229 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10228.value)))+(x10229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10230=IKcos(j4);
IkReal x10231=IKsin(j4);
IkReal x10232=(cj5*sj6);
IkReal x10233=(cj5*r21);
IkReal x10234=(cj5*r01);
IkReal x10235=(cj5*cj6*r11);
IkReal x10236=((1.0)*x10231);
IkReal x10237=(cj6*x10230);
IkReal x10238=(sj5*x10230);
IkReal x10239=(cj6*x10231);
IkReal x10240=(sj5*x10236);
IkReal x10241=((1.0)*sj6*x10230);
evalcond[0]=((((-1.0)*r21*sj6*x10236))+((r22*x10238))+((r20*x10230*x10232))+((r20*x10239))+((x10233*x10237)));
evalcond[1]=(((r00*x10230*x10232))+((r02*x10238))+((x10234*x10237))+(((-1.0)*r01*sj6*x10236))+((r00*x10239)));
evalcond[2]=((1.0)+((x10230*x10235))+(((-1.0)*r11*sj6*x10236))+((r10*x10230*x10232))+((r12*x10238))+((r10*x10239)));
evalcond[3]=((((-1.0)*r21*x10241))+(((-1.0)*cj6*x10233*x10236))+(((-1.0)*r20*x10232*x10236))+(((-1.0)*r22*x10240))+((r20*x10237)));
evalcond[4]=((((-1.0)*x10235*x10236))+(((-1.0)*r11*x10241))+(((-1.0)*r12*x10240))+(((-1.0)*r10*x10232*x10236))+((r10*x10237)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x10232*x10236))+(((-1.0)*r01*x10241))+(((-1.0)*cj6*x10234*x10236))+((r00*x10237))+(((-1.0)*r02*x10240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10242=cj5*cj5;
IkReal x10243=cj6*cj6;
IkReal x10244=(cj6*r21);
IkReal x10245=(r20*sj6);
IkReal x10246=(r00*sj6);
IkReal x10247=(r22*sj5);
IkReal x10248=(r02*r22);
IkReal x10249=(cj6*r01);
IkReal x10250=(cj5*sj0);
IkReal x10251=(cj5*r02*sj5);
IkReal x10252=(r01*x10242);
IkReal x10253=(r21*x10243);
IkReal x10254=(r00*r20*x10242);
CheckValue<IkReal> x10255 = IKatan2WithCheck(IkReal((((sj0*x10247))+((x10245*x10250))+((x10244*x10250)))),IkReal((((r21*sj0*sj6))+(((-1.0)*cj6*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10255.valid){
continue;
}
CheckValue<IkReal> x10256=IKPowWithIntegerCheck(IKsign((((x10242*x10244*x10246))+((x10242*x10245*x10249))+((r01*r21))+((cj5*x10247*x10249))+(((-1.0)*x10244*x10246))+(((-1.0)*x10245*x10249))+((x10245*x10251))+x10254+x10248+((r00*r20*x10243))+((x10244*x10251))+((cj5*x10246*x10247))+(((-1.0)*r01*x10253))+(((-1.0)*x10242*x10248))+((x10252*x10253))+(((-1.0)*x10243*x10254)))),-1);
if(!x10256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10255.value)+(((1.5707963267949)*(x10256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10257=IKcos(j4);
IkReal x10258=IKsin(j4);
IkReal x10259=((1.0)*cj0);
IkReal x10260=(cj5*r11);
IkReal x10261=((1.0)*sj6);
IkReal x10262=(cj5*r01);
IkReal x10263=(cj6*x10257);
IkReal x10264=(sj5*x10257);
IkReal x10265=(r21*x10258);
IkReal x10266=(cj6*x10258);
IkReal x10267=((1.0)*sj5*x10258);
IkReal x10268=(cj5*sj6*x10257);
IkReal x10269=(cj5*x10258*x10261);
evalcond[0]=(((r22*x10264))+(((-1.0)*x10261*x10265))+((cj5*r21*x10263))+((r20*x10266))+((r20*x10268)));
evalcond[1]=((((-1.0)*r22*x10267))+(((-1.0)*r21*x10257*x10261))+(((-1.0)*cj5*cj6*x10265))+(((-1.0)*r20*x10269))+((r20*x10263)));
evalcond[2]=(((r02*x10264))+((x10262*x10263))+(((-1.0)*r01*x10258*x10261))+((r00*x10268))+((r00*x10266))+(((-1.0)*x10259)));
evalcond[3]=((((-1.0)*sj0))+((r12*x10264))+(((-1.0)*r11*x10258*x10261))+((r10*x10268))+((r10*x10266))+((x10260*x10263)));
evalcond[4]=(sj0+(((-1.0)*r01*x10257*x10261))+(((-1.0)*r00*x10269))+((r00*x10263))+(((-1.0)*r02*x10267))+(((-1.0)*x10262*x10266)));
evalcond[5]=((((-1.0)*r10*x10269))+(((-1.0)*x10260*x10266))+(((-1.0)*r12*x10267))+(((-1.0)*x10259))+((r10*x10263))+(((-1.0)*r11*x10257*x10261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10270=(sj0*sj6);
IkReal x10271=((1.0)*cj6);
CheckValue<IkReal> x10272 = IKatan2WithCheck(IkReal((((cj5*r20*x10270))+((r22*sj0*sj5))+((cj5*cj6*r21*sj0)))),IkReal(((((-1.0)*r20*sj0*x10271))+((r21*x10270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10272.valid){
continue;
}
CheckValue<IkReal> x10273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10271))+((cj5*r02)))),-1);
if(!x10273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10272.value)+(((1.5707963267949)*(x10273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10274=IKcos(j4);
IkReal x10275=IKsin(j4);
IkReal x10276=((1.0)*cj0);
IkReal x10277=(cj5*r11);
IkReal x10278=((1.0)*sj6);
IkReal x10279=(cj5*r01);
IkReal x10280=(cj6*x10274);
IkReal x10281=(sj5*x10274);
IkReal x10282=(r21*x10275);
IkReal x10283=(cj6*x10275);
IkReal x10284=((1.0)*sj5*x10275);
IkReal x10285=(cj5*sj6*x10274);
IkReal x10286=(cj5*x10275*x10278);
evalcond[0]=(((r20*x10283))+((r20*x10285))+(((-1.0)*x10278*x10282))+((cj5*r21*x10280))+((r22*x10281)));
evalcond[1]=((((-1.0)*cj5*cj6*x10282))+((r20*x10280))+(((-1.0)*r21*x10274*x10278))+(((-1.0)*r22*x10284))+(((-1.0)*r20*x10286)));
evalcond[2]=((((-1.0)*x10276))+(((-1.0)*r01*x10275*x10278))+((x10279*x10280))+((r02*x10281))+((r00*x10283))+((r00*x10285)));
evalcond[3]=((((-1.0)*sj0))+(((-1.0)*r11*x10275*x10278))+((r12*x10281))+((r10*x10283))+((r10*x10285))+((x10277*x10280)));
evalcond[4]=(sj0+(((-1.0)*r01*x10274*x10278))+(((-1.0)*r00*x10286))+(((-1.0)*r02*x10284))+(((-1.0)*x10279*x10283))+((r00*x10280)));
evalcond[5]=((((-1.0)*r11*x10274*x10278))+(((-1.0)*x10277*x10283))+(((-1.0)*x10276))+(((-1.0)*r12*x10284))+(((-1.0)*r10*x10286))+((r10*x10280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10287=(cj0*r20);
IkReal x10288=(cj0*r21);
CheckValue<IkReal> x10289=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10289.valid){
continue;
}
CheckValue<IkReal> x10290 = IKatan2WithCheck(IkReal((((cj5*sj6*x10287))+((cj5*cj6*x10288))+((cj0*r22*sj5)))),IkReal((((sj6*x10288))+(((-1.0)*cj6*x10287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10289.value)))+(x10290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10291=IKcos(j4);
IkReal x10292=IKsin(j4);
IkReal x10293=((1.0)*cj0);
IkReal x10294=(cj5*r11);
IkReal x10295=((1.0)*sj6);
IkReal x10296=(cj5*r01);
IkReal x10297=(cj6*x10291);
IkReal x10298=(sj5*x10291);
IkReal x10299=(r21*x10292);
IkReal x10300=(cj6*x10292);
IkReal x10301=((1.0)*sj5*x10292);
IkReal x10302=(cj5*sj6*x10291);
IkReal x10303=(cj5*x10292*x10295);
evalcond[0]=(((r20*x10300))+((r20*x10302))+((cj5*r21*x10297))+(((-1.0)*x10295*x10299))+((r22*x10298)));
evalcond[1]=((((-1.0)*r21*x10291*x10295))+((r20*x10297))+(((-1.0)*r22*x10301))+(((-1.0)*cj5*cj6*x10299))+(((-1.0)*r20*x10303)));
evalcond[2]=((((-1.0)*r01*x10292*x10295))+((x10296*x10297))+((r00*x10302))+((r00*x10300))+((r02*x10298))+(((-1.0)*x10293)));
evalcond[3]=(((r10*x10302))+((r10*x10300))+(((-1.0)*sj0))+((r12*x10298))+(((-1.0)*r11*x10292*x10295))+((x10294*x10297)));
evalcond[4]=(sj0+(((-1.0)*r02*x10301))+(((-1.0)*x10296*x10300))+(((-1.0)*r00*x10303))+(((-1.0)*r01*x10291*x10295))+((r00*x10297)));
evalcond[5]=((((-1.0)*r10*x10303))+(((-1.0)*r12*x10301))+((r10*x10297))+(((-1.0)*r11*x10291*x10295))+(((-1.0)*x10294*x10300))+(((-1.0)*x10293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10304=((1.0)*sj5);
if( IKabs(((((-1.0)*r10*sj6*x10304))+((cj5*r12))+(((-1.0)*cj6*r11*x10304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x10304))+(((-1.0)*r00*sj6*x10304))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj6*x10304))+((cj5*r12))+(((-1.0)*cj6*r11*x10304))))+IKsqr(((((-1.0)*cj6*r01*x10304))+(((-1.0)*r00*sj6*x10304))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*sj6*x10304))+((cj5*r12))+(((-1.0)*cj6*r11*x10304))), ((((-1.0)*cj6*r01*x10304))+(((-1.0)*r00*sj6*x10304))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10305=((1.0)*sj5);
evalcond[0]=((((-1.0)*r10*sj6*x10305))+((cj5*r12))+(((-1.0)*cj6*r11*x10305))+(((-1.0)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*cj6*r01*x10305))+(((-1.0)*(IKcos(j0))))+(((-1.0)*r00*sj6*x10305))+((cj5*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10306=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10306;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10307=((1.0)*cj6);
IkReal x10308=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10307))+((cj5*r02)));
j4eval[0]=x10308;
j4eval[1]=((IKabs(((((-1.0)*r10*x10307))+((r11*sj6)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x10308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10309=r11*r11;
IkReal x10310=cj5*cj5;
IkReal x10311=cj6*cj6;
IkReal x10312=r10*r10;
IkReal x10313=r12*r12;
IkReal x10314=(cj6*r10);
IkReal x10315=(r12*sj5);
IkReal x10316=((2.0)*r11);
IkReal x10317=(cj5*cj6);
IkReal x10318=(cj0*sj6);
IkReal x10319=(cj5*r10);
IkReal x10320=((1.0)*x10311);
IkReal x10321=(x10310*x10312);
IkReal x10322=((((-1.0)*x10309*x10320))+(((2.0)*sj6*x10315*x10319))+((sj6*x10310*x10314*x10316))+((x10311*x10312))+x10313+x10321+x10309+((x10315*x10316*x10317))+(((-1.0)*sj6*x10314*x10316))+(((-1.0)*x10320*x10321))+(((-1.0)*x10310*x10313))+((x10309*x10310*x10311)));
j4eval[0]=x10322;
j4eval[1]=IKsign(x10322);
j4eval[2]=((IKabs((((cj0*r11*x10317))+((x10318*x10319))+((cj0*x10315)))))+(IKabs((((r11*x10318))+(((-1.0)*cj0*x10314))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10323=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10323;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10323);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10324=((1.0)*cj6);
IkReal x10325=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10324))+((cj5*r02)));
j4eval[0]=x10325;
j4eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x10324)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x10325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10326=cj6*cj6;
IkReal x10327=cj5*cj5;
IkReal x10328=r00*r00;
IkReal x10329=r01*r01;
IkReal x10330=r02*r02;
IkReal x10331=(r00*sj6);
IkReal x10332=((2.0)*cj6*r01);
IkReal x10333=(cj5*r02*sj5);
IkReal x10334=((1.0)*x10326);
IkReal x10335=(x10327*x10328);
IkReal x10336=((((-1.0)*x10328*x10334))+(((-1.0)*x10329))+(((-1.0)*x10335))+(((-1.0)*x10330))+((x10327*x10330))+((x10326*x10335))+((x10326*x10329))+(((-1.0)*x10327*x10331*x10332))+(((-1.0)*x10327*x10329*x10334))+(((-2.0)*x10331*x10333))+((x10331*x10332))+(((-1.0)*x10332*x10333)));
j4eval[0]=x10336;
j4eval[1]=((IKabs((((cj5*x10331))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10337=cj6*cj6;
IkReal x10338=cj5*cj5;
IkReal x10339=r00*r00;
IkReal x10340=r01*r01;
IkReal x10341=r02*r02;
IkReal x10342=(r01*sj6);
IkReal x10343=(cj6*r00);
IkReal x10344=(cj5*cj6*r01);
IkReal x10345=((2.0)*r02*sj5);
IkReal x10346=((1.0)*x10337);
IkReal x10347=(cj5*r00*sj6);
IkReal x10348=(x10338*x10339);
CheckValue<IkReal> x10349=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10339*x10346))+(((-1.0)*x10344*x10345))+(((-2.0)*x10338*x10342*x10343))+((x10338*x10341))+(((-1.0)*x10341))+(((-1.0)*x10340))+(((-1.0)*x10348))+(((-1.0)*x10345*x10347))+(((-1.0)*x10338*x10340*x10346))+(((2.0)*x10342*x10343))+((x10337*x10348))+((x10337*x10340)))),-1);
if(!x10349.valid){
continue;
}
CheckValue<IkReal> x10350 = IKatan2WithCheck(IkReal((((r02*sj5))+x10344+x10347)),IkReal((x10342+(((-1.0)*x10343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10349.value)))+(x10350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10351=IKcos(j4);
IkReal x10352=IKsin(j4);
IkReal x10353=(cj5*r11);
IkReal x10354=(cj5*r10);
IkReal x10355=(cj5*r00);
IkReal x10356=(cj5*r01);
IkReal x10357=(cj5*r20);
IkReal x10358=(cj5*r21);
IkReal x10359=(cj6*x10351);
IkReal x10360=(sj5*x10351);
IkReal x10361=(cj6*x10352);
IkReal x10362=(sj6*x10351);
IkReal x10363=((1.0)*sj5*x10352);
IkReal x10364=((1.0)*sj6*x10352);
IkReal x10365=((1.0)*x10362);
evalcond[0]=(((r00*x10361))+(((-1.0)*r01*x10364))+((r02*x10360))+((x10355*x10362))+((x10356*x10359)));
evalcond[1]=(((x10354*x10362))+((x10353*x10359))+((r10*x10361))+(((-1.0)*r11*x10364))+((r12*x10360)));
evalcond[2]=((1.0)+((r22*x10360))+((r20*x10361))+((x10357*x10362))+((x10358*x10359))+(((-1.0)*r21*x10364)));
evalcond[3]=(((r20*x10359))+(((-1.0)*x10358*x10361))+(((-1.0)*x10357*x10364))+(((-1.0)*r21*x10365))+(((-1.0)*r22*x10363)));
evalcond[4]=((((-1.0)*x10354*x10364))+(((-1.0)*x10353*x10361))+(((-1.0)*r12*x10363))+(((-1.0)*r11*x10365))+((r10*x10359)));
evalcond[5]=((-1.0)+(((-1.0)*x10355*x10364))+((r00*x10359))+(((-1.0)*r01*x10365))+(((-1.0)*r02*x10363))+(((-1.0)*x10356*x10361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10366=((1.0)*sj5);
CheckValue<IkReal> x10367=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x10366))+(((-1.0)*cj6*r01*x10366))+((cj5*r02)))),-1);
if(!x10367.valid){
continue;
}
CheckValue<IkReal> x10368 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10367.value)))+(x10368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10369=IKcos(j4);
IkReal x10370=IKsin(j4);
IkReal x10371=(cj5*r11);
IkReal x10372=(cj5*r10);
IkReal x10373=(cj5*r00);
IkReal x10374=(cj5*r01);
IkReal x10375=(cj5*r20);
IkReal x10376=(cj5*r21);
IkReal x10377=(cj6*x10369);
IkReal x10378=(sj5*x10369);
IkReal x10379=(cj6*x10370);
IkReal x10380=(sj6*x10369);
IkReal x10381=((1.0)*sj5*x10370);
IkReal x10382=((1.0)*sj6*x10370);
IkReal x10383=((1.0)*x10380);
evalcond[0]=(((r00*x10379))+((r02*x10378))+((x10373*x10380))+(((-1.0)*r01*x10382))+((x10374*x10377)));
evalcond[1]=(((x10372*x10380))+((r10*x10379))+((x10371*x10377))+(((-1.0)*r11*x10382))+((r12*x10378)));
evalcond[2]=((1.0)+((x10375*x10380))+((r22*x10378))+(((-1.0)*r21*x10382))+((r20*x10379))+((x10376*x10377)));
evalcond[3]=((((-1.0)*x10375*x10382))+(((-1.0)*r21*x10383))+((r20*x10377))+(((-1.0)*x10376*x10379))+(((-1.0)*r22*x10381)));
evalcond[4]=((((-1.0)*x10371*x10379))+(((-1.0)*x10372*x10382))+((r10*x10377))+(((-1.0)*r12*x10381))+(((-1.0)*r11*x10383)));
evalcond[5]=((-1.0)+((r00*x10377))+(((-1.0)*r02*x10381))+(((-1.0)*x10374*x10379))+(((-1.0)*x10373*x10382))+(((-1.0)*r01*x10383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10384 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10384.valid){
continue;
}
CheckValue<IkReal> x10385=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10384.value)+(((1.5707963267949)*(x10385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10386=IKcos(j4);
IkReal x10387=IKsin(j4);
IkReal x10388=(cj5*r11);
IkReal x10389=(cj5*r10);
IkReal x10390=(cj5*r00);
IkReal x10391=(cj5*r01);
IkReal x10392=(cj5*r20);
IkReal x10393=(cj5*r21);
IkReal x10394=(cj6*x10386);
IkReal x10395=(sj5*x10386);
IkReal x10396=(cj6*x10387);
IkReal x10397=(sj6*x10386);
IkReal x10398=((1.0)*sj5*x10387);
IkReal x10399=((1.0)*sj6*x10387);
IkReal x10400=((1.0)*x10397);
evalcond[0]=(((r02*x10395))+((x10390*x10397))+((x10391*x10394))+(((-1.0)*r01*x10399))+((r00*x10396)));
evalcond[1]=(((r12*x10395))+((x10389*x10397))+((r10*x10396))+(((-1.0)*r11*x10399))+((x10388*x10394)));
evalcond[2]=((1.0)+((x10392*x10397))+((x10393*x10394))+((r22*x10395))+(((-1.0)*r21*x10399))+((r20*x10396)));
evalcond[3]=((((-1.0)*x10392*x10399))+(((-1.0)*r21*x10400))+(((-1.0)*r22*x10398))+(((-1.0)*x10393*x10396))+((r20*x10394)));
evalcond[4]=((((-1.0)*x10389*x10399))+(((-1.0)*r11*x10400))+(((-1.0)*x10388*x10396))+(((-1.0)*r12*x10398))+((r10*x10394)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x10398))+(((-1.0)*r01*x10400))+(((-1.0)*x10390*x10399))+(((-1.0)*x10391*x10396))+((r00*x10394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10401=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10401;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10402=((1.0)*cj6);
IkReal x10403=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10402))+((cj5*r02)));
j4eval[0]=x10403;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r10*x10402))+((r11*sj6))))));
j4eval[2]=IKsign(x10403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10404=cj6*cj6;
IkReal x10405=r01*r01;
IkReal x10406=cj5*cj5;
IkReal x10407=r00*r00;
IkReal x10408=r02*r02;
IkReal x10409=(r02*sj5);
IkReal x10410=(r01*sj6);
IkReal x10411=(cj6*r00);
IkReal x10412=(cj5*cj6*r01);
IkReal x10413=(cj5*r00*sj6);
IkReal x10414=((1.0)*x10406);
IkReal x10415=(x10404*x10407);
IkReal x10416=(x10404*x10405);
IkReal x10417=((((2.0)*x10409*x10413))+(((2.0)*x10409*x10412))+((x10406*x10416))+(((-1.0)*x10414*x10415))+((x10406*x10407))+(((2.0)*x10406*x10410*x10411))+x10415+x10405+x10408+(((-2.0)*x10410*x10411))+(((-1.0)*x10416))+(((-1.0)*x10408*x10414)));
j4eval[0]=x10417;
j4eval[1]=((IKabs((x10413+x10412+x10409)))+(IKabs((x10410+(((-1.0)*x10411))))));
j4eval[2]=IKsign(x10417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10418=cj6*cj6;
IkReal x10419=r01*r01;
IkReal x10420=cj5*cj5;
IkReal x10421=r00*r00;
IkReal x10422=r02*r02;
IkReal x10423=(r00*sj6);
IkReal x10424=(r02*sj5);
IkReal x10425=((2.0)*cj6*r01);
IkReal x10426=((1.0)*x10420);
IkReal x10427=(x10418*x10421);
IkReal x10428=(x10418*x10419);
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal((((cj5*cj6*r01))+x10424+((cj5*x10423)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
CheckValue<IkReal> x10430=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10426*x10427))+((x10420*x10428))+((x10420*x10421))+(((-1.0)*x10422*x10426))+(((-1.0)*x10423*x10425))+x10422+x10427+x10419+(((2.0)*cj5*x10423*x10424))+((x10420*x10423*x10425))+(((-1.0)*x10428))+((cj5*x10424*x10425)))),-1);
if(!x10430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10429.value)+(((1.5707963267949)*(x10430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10431=IKcos(j4);
IkReal x10432=IKsin(j4);
IkReal x10433=(cj5*r11);
IkReal x10434=(cj5*r10);
IkReal x10435=(cj5*r00);
IkReal x10436=(cj5*r01);
IkReal x10437=(cj5*r20);
IkReal x10438=(cj5*r21);
IkReal x10439=(cj6*x10431);
IkReal x10440=(sj5*x10431);
IkReal x10441=(cj6*x10432);
IkReal x10442=(sj6*x10431);
IkReal x10443=((1.0)*sj5*x10432);
IkReal x10444=((1.0)*sj6*x10432);
IkReal x10445=((1.0)*x10442);
evalcond[0]=(((x10436*x10439))+((r02*x10440))+((r00*x10441))+(((-1.0)*r01*x10444))+((x10435*x10442)));
evalcond[1]=(((x10434*x10442))+(((-1.0)*r11*x10444))+((x10433*x10439))+((r12*x10440))+((r10*x10441)));
evalcond[2]=((1.0)+((r22*x10440))+((x10438*x10439))+(((-1.0)*r21*x10444))+((x10437*x10442))+((r20*x10441)));
evalcond[3]=((((-1.0)*r21*x10445))+(((-1.0)*x10437*x10444))+(((-1.0)*r22*x10443))+(((-1.0)*x10438*x10441))+((r20*x10439)));
evalcond[4]=((((-1.0)*x10434*x10444))+(((-1.0)*r12*x10443))+(((-1.0)*r11*x10445))+((r10*x10439))+(((-1.0)*x10433*x10441)));
evalcond[5]=((1.0)+(((-1.0)*x10436*x10441))+(((-1.0)*r02*x10443))+(((-1.0)*r01*x10445))+(((-1.0)*x10435*x10444))+((r00*x10439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10446=((1.0)*sj5);
CheckValue<IkReal> x10447 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10447.valid){
continue;
}
CheckValue<IkReal> x10448=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x10446))+(((-1.0)*r00*sj6*x10446))+((cj5*r02)))),-1);
if(!x10448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10447.value)+(((1.5707963267949)*(x10448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10449=IKcos(j4);
IkReal x10450=IKsin(j4);
IkReal x10451=(cj5*r11);
IkReal x10452=(cj5*r10);
IkReal x10453=(cj5*r00);
IkReal x10454=(cj5*r01);
IkReal x10455=(cj5*r20);
IkReal x10456=(cj5*r21);
IkReal x10457=(cj6*x10449);
IkReal x10458=(sj5*x10449);
IkReal x10459=(cj6*x10450);
IkReal x10460=(sj6*x10449);
IkReal x10461=((1.0)*sj5*x10450);
IkReal x10462=((1.0)*sj6*x10450);
IkReal x10463=((1.0)*x10460);
evalcond[0]=((((-1.0)*r01*x10462))+((x10453*x10460))+((r00*x10459))+((x10454*x10457))+((r02*x10458)));
evalcond[1]=(((r10*x10459))+((x10452*x10460))+((r12*x10458))+((x10451*x10457))+(((-1.0)*r11*x10462)));
evalcond[2]=((1.0)+((r22*x10458))+((x10455*x10460))+(((-1.0)*r21*x10462))+((x10456*x10457))+((r20*x10459)));
evalcond[3]=((((-1.0)*x10456*x10459))+(((-1.0)*r22*x10461))+(((-1.0)*r21*x10463))+((r20*x10457))+(((-1.0)*x10455*x10462)));
evalcond[4]=(((r10*x10457))+(((-1.0)*x10452*x10462))+(((-1.0)*x10451*x10459))+(((-1.0)*r11*x10463))+(((-1.0)*r12*x10461)));
evalcond[5]=((1.0)+(((-1.0)*r02*x10461))+(((-1.0)*x10454*x10459))+(((-1.0)*r01*x10463))+(((-1.0)*x10453*x10462))+((r00*x10457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10464 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10464.valid){
continue;
}
CheckValue<IkReal> x10465=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10464.value)+(((1.5707963267949)*(x10465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10466=IKcos(j4);
IkReal x10467=IKsin(j4);
IkReal x10468=(cj5*r11);
IkReal x10469=(cj5*r10);
IkReal x10470=(cj5*r00);
IkReal x10471=(cj5*r01);
IkReal x10472=(cj5*r20);
IkReal x10473=(cj5*r21);
IkReal x10474=(cj6*x10466);
IkReal x10475=(sj5*x10466);
IkReal x10476=(cj6*x10467);
IkReal x10477=(sj6*x10466);
IkReal x10478=((1.0)*sj5*x10467);
IkReal x10479=((1.0)*sj6*x10467);
IkReal x10480=((1.0)*x10477);
evalcond[0]=(((x10471*x10474))+(((-1.0)*r01*x10479))+((r00*x10476))+((x10470*x10477))+((r02*x10475)));
evalcond[1]=(((r12*x10475))+((x10468*x10474))+(((-1.0)*r11*x10479))+((r10*x10476))+((x10469*x10477)));
evalcond[2]=((1.0)+((r20*x10476))+((x10473*x10474))+(((-1.0)*r21*x10479))+((r22*x10475))+((x10472*x10477)));
evalcond[3]=(((r20*x10474))+(((-1.0)*x10472*x10479))+(((-1.0)*r21*x10480))+(((-1.0)*r22*x10478))+(((-1.0)*x10473*x10476)));
evalcond[4]=((((-1.0)*x10468*x10476))+(((-1.0)*r11*x10480))+(((-1.0)*x10469*x10479))+((r10*x10474))+(((-1.0)*r12*x10478)));
evalcond[5]=((1.0)+(((-1.0)*r02*x10478))+(((-1.0)*x10470*x10479))+((r00*x10474))+(((-1.0)*r01*x10480))+(((-1.0)*x10471*x10476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10481=r11*r11;
IkReal x10482=cj5*cj5;
IkReal x10483=cj6*cj6;
IkReal x10484=r10*r10;
IkReal x10485=r12*r12;
IkReal x10486=(cj6*r10);
IkReal x10487=(r12*sj5);
IkReal x10488=((2.0)*r11);
IkReal x10489=(cj5*cj6);
IkReal x10490=(cj0*sj6);
IkReal x10491=(cj5*r10);
IkReal x10492=((1.0)*x10483);
IkReal x10493=(x10482*x10484);
CheckValue<IkReal> x10494 = IKatan2WithCheck(IkReal((((cj0*x10487))+((x10490*x10491))+((cj0*r11*x10489)))),IkReal((((r11*x10490))+(((-1.0)*cj0*x10486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10494.valid){
continue;
}
CheckValue<IkReal> x10495=IKPowWithIntegerCheck(IKsign((((x10481*x10482*x10483))+(((-1.0)*x10481*x10492))+((x10487*x10488*x10489))+(((-1.0)*x10492*x10493))+((x10483*x10484))+(((2.0)*sj6*x10487*x10491))+(((-1.0)*sj6*x10486*x10488))+((sj6*x10482*x10486*x10488))+x10493+x10481+x10485+(((-1.0)*x10482*x10485)))),-1);
if(!x10495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10494.value)+(((1.5707963267949)*(x10495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10496=IKcos(j4);
IkReal x10497=IKsin(j4);
IkReal x10498=(cj5*r11);
IkReal x10499=(cj5*r10);
IkReal x10500=(cj5*r00);
IkReal x10501=(cj5*r01);
IkReal x10502=(cj5*r20);
IkReal x10503=(cj5*r21);
IkReal x10504=(cj6*x10496);
IkReal x10505=(sj5*x10496);
IkReal x10506=(cj6*x10497);
IkReal x10507=(sj6*x10496);
IkReal x10508=((1.0)*sj5*x10497);
IkReal x10509=((1.0)*sj6*x10497);
IkReal x10510=((1.0)*x10507);
evalcond[0]=((((-1.0)*r01*x10509))+((r00*x10506))+((r02*x10505))+((x10500*x10507))+((x10501*x10504)));
evalcond[1]=(((x10498*x10504))+((x10499*x10507))+((r10*x10506))+(((-1.0)*r11*x10509))+((r12*x10505)));
evalcond[2]=((1.0)+((r20*x10506))+((r22*x10505))+((x10502*x10507))+(((-1.0)*r21*x10509))+((x10503*x10504)));
evalcond[3]=((((-1.0)*r21*x10510))+((r20*x10504))+(((-1.0)*r22*x10508))+(((-1.0)*x10502*x10509))+(((-1.0)*x10503*x10506)));
evalcond[4]=(cj0+(((-1.0)*x10498*x10506))+((r10*x10504))+(((-1.0)*r12*x10508))+(((-1.0)*r11*x10510))+(((-1.0)*x10499*x10509)));
evalcond[5]=((((-1.0)*sj0))+((r00*x10504))+(((-1.0)*r02*x10508))+(((-1.0)*x10501*x10506))+(((-1.0)*x10500*x10509))+(((-1.0)*r01*x10510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10511=((1.0)*sj5);
CheckValue<IkReal> x10512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x10511))+(((-1.0)*cj6*r01*x10511))+((cj5*r02)))),-1);
if(!x10512.valid){
continue;
}
CheckValue<IkReal> x10513 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10512.value)))+(x10513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10514=IKcos(j4);
IkReal x10515=IKsin(j4);
IkReal x10516=(cj5*r11);
IkReal x10517=(cj5*r10);
IkReal x10518=(cj5*r00);
IkReal x10519=(cj5*r01);
IkReal x10520=(cj5*r20);
IkReal x10521=(cj5*r21);
IkReal x10522=(cj6*x10514);
IkReal x10523=(sj5*x10514);
IkReal x10524=(cj6*x10515);
IkReal x10525=(sj6*x10514);
IkReal x10526=((1.0)*sj5*x10515);
IkReal x10527=((1.0)*sj6*x10515);
IkReal x10528=((1.0)*x10525);
evalcond[0]=(((r02*x10523))+((x10518*x10525))+((x10519*x10522))+((r00*x10524))+(((-1.0)*r01*x10527)));
evalcond[1]=(((x10517*x10525))+((r10*x10524))+(((-1.0)*r11*x10527))+((r12*x10523))+((x10516*x10522)));
evalcond[2]=((1.0)+((x10521*x10522))+((r22*x10523))+(((-1.0)*r21*x10527))+((x10520*x10525))+((r20*x10524)));
evalcond[3]=((((-1.0)*x10520*x10527))+(((-1.0)*r22*x10526))+(((-1.0)*r21*x10528))+(((-1.0)*x10521*x10524))+((r20*x10522)));
evalcond[4]=(cj0+((r10*x10522))+(((-1.0)*r12*x10526))+(((-1.0)*r11*x10528))+(((-1.0)*x10517*x10527))+(((-1.0)*x10516*x10524)));
evalcond[5]=((((-1.0)*x10519*x10524))+(((-1.0)*sj0))+(((-1.0)*x10518*x10527))+(((-1.0)*r02*x10526))+((r00*x10522))+(((-1.0)*r01*x10528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10529 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10529.valid){
continue;
}
CheckValue<IkReal> x10530=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10529.value)+(((1.5707963267949)*(x10530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10531=IKcos(j4);
IkReal x10532=IKsin(j4);
IkReal x10533=(cj5*r11);
IkReal x10534=(cj5*r10);
IkReal x10535=(cj5*r00);
IkReal x10536=(cj5*r01);
IkReal x10537=(cj5*r20);
IkReal x10538=(cj5*r21);
IkReal x10539=(cj6*x10531);
IkReal x10540=(sj5*x10531);
IkReal x10541=(cj6*x10532);
IkReal x10542=(sj6*x10531);
IkReal x10543=((1.0)*sj5*x10532);
IkReal x10544=((1.0)*sj6*x10532);
IkReal x10545=((1.0)*x10542);
evalcond[0]=(((x10536*x10539))+((x10535*x10542))+(((-1.0)*r01*x10544))+((r02*x10540))+((r00*x10541)));
evalcond[1]=(((x10533*x10539))+((x10534*x10542))+((r12*x10540))+(((-1.0)*r11*x10544))+((r10*x10541)));
evalcond[2]=((1.0)+((r22*x10540))+((x10537*x10542))+((r20*x10541))+((x10538*x10539))+(((-1.0)*r21*x10544)));
evalcond[3]=((((-1.0)*x10538*x10541))+(((-1.0)*r22*x10543))+(((-1.0)*x10537*x10544))+((r20*x10539))+(((-1.0)*r21*x10545)));
evalcond[4]=((((-1.0)*x10534*x10544))+cj0+((r10*x10539))+(((-1.0)*r12*x10543))+(((-1.0)*x10533*x10541))+(((-1.0)*r11*x10545)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x10535*x10544))+(((-1.0)*r01*x10545))+(((-1.0)*r02*x10543))+((r00*x10539))+(((-1.0)*x10536*x10541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10546=((1.26697583102024)*cj5);
IkReal x10547=((0.0338501117053686)*cj5);
IkReal x10548=(r00*sj6);
IkReal x10549=(r10*sj6);
IkReal x10550=((1.26697583102024)*sj5);
IkReal x10551=(cj6*r11);
IkReal x10552=((0.0338501117053686)*sj5);
IkReal x10553=(cj6*r01);
if( IKabs(((((-3.38501117053686)*py))+((r12*x10546))+((x10547*x10551))+(((-1.0)*x10550*x10551))+((x10547*x10549))+((r12*x10552))+(((-1.0)*x10549*x10550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x10552))+(((-3.38501117053686)*px))+((x10547*x10553))+(((-1.0)*x10550*x10553))+((r02*x10546))+((x10547*x10548))+(((-1.0)*x10548*x10550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.38501117053686)*py))+((r12*x10546))+((x10547*x10551))+(((-1.0)*x10550*x10551))+((x10547*x10549))+((r12*x10552))+(((-1.0)*x10549*x10550))))+IKsqr((((r02*x10552))+(((-3.38501117053686)*px))+((x10547*x10553))+(((-1.0)*x10550*x10553))+((r02*x10546))+((x10547*x10548))+(((-1.0)*x10548*x10550))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.38501117053686)*py))+((r12*x10546))+((x10547*x10551))+(((-1.0)*x10550*x10551))+((x10547*x10549))+((r12*x10552))+(((-1.0)*x10549*x10550))), (((r02*x10552))+(((-3.38501117053686)*px))+((x10547*x10553))+(((-1.0)*x10550*x10553))+((r02*x10546))+((x10547*x10548))+(((-1.0)*x10548*x10550))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10554=((0.01)*cj5);
IkReal x10555=(cj6*r01);
IkReal x10556=(r00*sj6);
IkReal x10557=((0.01)*sj5);
IkReal x10558=((0.37429)*sj5);
IkReal x10559=((0.37429)*cj5);
IkReal x10560=(r10*sj6);
IkReal x10561=(cj6*r11);
evalcond[0]=(((r02*x10557))+((r02*x10559))+(((-1.0)*px))+(((-1.0)*x10556*x10558))+(((-1.0)*x10555*x10558))+(((-0.29542)*(IKcos(j0))))+((x10554*x10556))+((x10554*x10555)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+((x10554*x10561))+((x10554*x10560))+(((-1.0)*x10558*x10560))+(((-1.0)*x10558*x10561))+(((-1.0)*py))+((r12*x10559))+((r12*x10557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10562=(r21*sj0);
IkReal x10563=(r20*sj0);
IkReal x10564=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10564;
j4eval[1]=((IKabs((((cj5*sj6*x10563))+((r22*sj0*sj5))+((cj5*cj6*x10562)))))+(IKabs(((((-1.0)*cj6*x10563))+((sj6*x10562))))));
j4eval[2]=IKsign(x10564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10565=(cj0*r20);
IkReal x10566=((1.0)*cj6);
IkReal x10567=(cj0*r21);
IkReal x10568=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x10566)));
j4eval[0]=x10568;
j4eval[1]=((IKabs((((cj5*sj6*x10565))+((cj0*r22*sj5))+((cj5*cj6*x10567)))))+(IKabs((((sj6*x10567))+(((-1.0)*x10565*x10566))))));
j4eval[2]=IKsign(x10568);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10569=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10569;
j4eval[1]=IKsign(x10569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10570=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10570;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10571=((1.0)*cj6);
IkReal x10572=(((cj5*r22))+(((-1.0)*r21*sj5*x10571))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10572;
j4eval[1]=IKsign(x10572);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x10571))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10573=cj6*cj6;
IkReal x10574=cj5*cj5;
IkReal x10575=r00*r00;
IkReal x10576=r01*r01;
IkReal x10577=r02*r02;
IkReal x10578=(r00*sj6);
IkReal x10579=((2.0)*cj6*r01);
IkReal x10580=(cj5*r02*sj5);
IkReal x10581=((1.0)*x10573);
IkReal x10582=(x10574*x10575);
IkReal x10583=((((-1.0)*x10574*x10578*x10579))+((x10573*x10582))+(((-1.0)*x10574*x10576*x10581))+(((-1.0)*x10575*x10581))+((x10573*x10576))+(((-2.0)*x10578*x10580))+((x10574*x10577))+(((-1.0)*x10577))+(((-1.0)*x10576))+(((-1.0)*x10582))+(((-1.0)*x10579*x10580))+((x10578*x10579)));
j4eval[0]=x10583;
j4eval[1]=((IKabs((((cj5*x10578))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10584=cj6*cj6;
IkReal x10585=cj5*cj5;
IkReal x10586=r00*r00;
IkReal x10587=r01*r01;
IkReal x10588=r02*r02;
IkReal x10589=(r01*sj6);
IkReal x10590=(cj6*r00);
IkReal x10591=(cj5*cj6*r01);
IkReal x10592=((2.0)*r02*sj5);
IkReal x10593=((1.0)*x10584);
IkReal x10594=(cj5*r00*sj6);
IkReal x10595=(x10585*x10586);
CheckValue<IkReal> x10596=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10592*x10594))+(((-1.0)*x10595))+((x10584*x10595))+(((2.0)*x10589*x10590))+(((-1.0)*x10591*x10592))+(((-2.0)*x10585*x10589*x10590))+((x10584*x10587))+((x10585*x10588))+(((-1.0)*x10585*x10587*x10593))+(((-1.0)*x10588))+(((-1.0)*x10587))+(((-1.0)*x10586*x10593)))),-1);
if(!x10596.valid){
continue;
}
CheckValue<IkReal> x10597 = IKatan2WithCheck(IkReal((((r02*sj5))+x10591+x10594)),IkReal(((((-1.0)*x10590))+x10589)),IKFAST_ATAN2_MAGTHRESH);
if(!x10597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10596.value)))+(x10597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10598=IKcos(j4);
IkReal x10599=IKsin(j4);
IkReal x10600=(cj5*sj6);
IkReal x10601=(cj5*r21);
IkReal x10602=(cj5*r01);
IkReal x10603=(cj5*cj6*r11);
IkReal x10604=((1.0)*x10599);
IkReal x10605=(cj6*x10598);
IkReal x10606=(sj5*x10598);
IkReal x10607=(cj6*x10599);
IkReal x10608=(sj5*x10604);
IkReal x10609=((1.0)*sj6*x10598);
evalcond[0]=(((x10601*x10605))+((r22*x10606))+((r20*x10598*x10600))+((r20*x10607))+(((-1.0)*r21*sj6*x10604)));
evalcond[1]=(((r00*x10607))+((r00*x10598*x10600))+(((-1.0)*r01*sj6*x10604))+((r02*x10606))+((x10602*x10605)));
evalcond[2]=((1.0)+((r10*x10598*x10600))+((r12*x10606))+((r10*x10607))+(((-1.0)*r11*sj6*x10604))+((x10598*x10603)));
evalcond[3]=((((-1.0)*cj6*x10601*x10604))+(((-1.0)*r21*x10609))+(((-1.0)*r22*x10608))+(((-1.0)*r20*x10600*x10604))+((r20*x10605)));
evalcond[4]=((((-1.0)*r11*x10609))+(((-1.0)*r12*x10608))+((r10*x10605))+(((-1.0)*x10603*x10604))+(((-1.0)*r10*x10600*x10604)));
evalcond[5]=((-1.0)+((r00*x10605))+(((-1.0)*cj6*x10602*x10604))+(((-1.0)*r00*x10600*x10604))+(((-1.0)*r01*x10609))+(((-1.0)*r02*x10608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10610=((1.0)*cj6);
CheckValue<IkReal> x10611=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x10610))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x10611.valid){
continue;
}
CheckValue<IkReal> x10612 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x10610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10611.value)))+(x10612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10613=IKcos(j4);
IkReal x10614=IKsin(j4);
IkReal x10615=(cj5*sj6);
IkReal x10616=(cj5*r21);
IkReal x10617=(cj5*r01);
IkReal x10618=(cj5*cj6*r11);
IkReal x10619=((1.0)*x10614);
IkReal x10620=(cj6*x10613);
IkReal x10621=(sj5*x10613);
IkReal x10622=(cj6*x10614);
IkReal x10623=(sj5*x10619);
IkReal x10624=((1.0)*sj6*x10613);
evalcond[0]=(((r20*x10622))+((x10616*x10620))+(((-1.0)*r21*sj6*x10619))+((r22*x10621))+((r20*x10613*x10615)));
evalcond[1]=(((r00*x10622))+((x10617*x10620))+((r00*x10613*x10615))+((r02*x10621))+(((-1.0)*r01*sj6*x10619)));
evalcond[2]=((1.0)+((x10613*x10618))+((r10*x10622))+(((-1.0)*r11*sj6*x10619))+((r10*x10613*x10615))+((r12*x10621)));
evalcond[3]=(((r20*x10620))+(((-1.0)*r20*x10615*x10619))+(((-1.0)*r22*x10623))+(((-1.0)*cj6*x10616*x10619))+(((-1.0)*r21*x10624)));
evalcond[4]=((((-1.0)*r10*x10615*x10619))+(((-1.0)*r12*x10623))+((r10*x10620))+(((-1.0)*r11*x10624))+(((-1.0)*x10618*x10619)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x10617*x10619))+(((-1.0)*r02*x10623))+((r00*x10620))+(((-1.0)*r00*x10615*x10619))+(((-1.0)*r01*x10624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10625=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10625.valid){
continue;
}
CheckValue<IkReal> x10626 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10625.value)))+(x10626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10627=IKcos(j4);
IkReal x10628=IKsin(j4);
IkReal x10629=(cj5*sj6);
IkReal x10630=(cj5*r21);
IkReal x10631=(cj5*r01);
IkReal x10632=(cj5*cj6*r11);
IkReal x10633=((1.0)*x10628);
IkReal x10634=(cj6*x10627);
IkReal x10635=(sj5*x10627);
IkReal x10636=(cj6*x10628);
IkReal x10637=(sj5*x10633);
IkReal x10638=((1.0)*sj6*x10627);
evalcond[0]=((((-1.0)*r21*sj6*x10633))+((r20*x10636))+((r20*x10627*x10629))+((r22*x10635))+((x10630*x10634)));
evalcond[1]=(((r00*x10636))+(((-1.0)*r01*sj6*x10633))+((r00*x10627*x10629))+((r02*x10635))+((x10631*x10634)));
evalcond[2]=((1.0)+((x10627*x10632))+((r10*x10636))+(((-1.0)*r11*sj6*x10633))+((r10*x10627*x10629))+((r12*x10635)));
evalcond[3]=((((-1.0)*cj6*x10630*x10633))+((r20*x10634))+(((-1.0)*r22*x10637))+(((-1.0)*r21*x10638))+(((-1.0)*r20*x10629*x10633)));
evalcond[4]=((((-1.0)*r10*x10629*x10633))+((r10*x10634))+(((-1.0)*x10632*x10633))+(((-1.0)*r12*x10637))+(((-1.0)*r11*x10638)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x10637))+(((-1.0)*r01*x10638))+((r00*x10634))+(((-1.0)*cj6*x10631*x10633))+(((-1.0)*r00*x10629*x10633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10639=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10639;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10640=((1.0)*sj5);
IkReal x10641=((((-1.0)*cj6*r01*x10640))+(((-1.0)*r00*sj6*x10640))+((cj5*r02)));
j4eval[0]=x10641;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10642=cj6*cj6;
IkReal x10643=r01*r01;
IkReal x10644=cj5*cj5;
IkReal x10645=r00*r00;
IkReal x10646=r02*r02;
IkReal x10647=(r02*sj5);
IkReal x10648=(r01*sj6);
IkReal x10649=(cj6*r00);
IkReal x10650=(cj5*cj6*r01);
IkReal x10651=(cj5*r00*sj6);
IkReal x10652=((1.0)*x10644);
IkReal x10653=(x10642*x10645);
IkReal x10654=(x10642*x10643);
IkReal x10655=((((-1.0)*x10654))+(((-1.0)*x10646*x10652))+(((-2.0)*x10648*x10649))+((x10644*x10645))+(((2.0)*x10644*x10648*x10649))+(((-1.0)*x10652*x10653))+(((2.0)*x10647*x10651))+(((2.0)*x10647*x10650))+x10646+x10643+x10653+((x10644*x10654)));
j4eval[0]=x10655;
j4eval[1]=((IKabs(((((-1.0)*x10649))+x10648)))+(IKabs((x10647+x10651+x10650))));
j4eval[2]=IKsign(x10655);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10656=cj6*cj6;
IkReal x10657=r01*r01;
IkReal x10658=cj5*cj5;
IkReal x10659=r00*r00;
IkReal x10660=r02*r02;
IkReal x10661=(r00*sj6);
IkReal x10662=(r02*sj5);
IkReal x10663=((2.0)*cj6*r01);
IkReal x10664=((1.0)*x10658);
IkReal x10665=(x10656*x10659);
IkReal x10666=(x10656*x10657);
CheckValue<IkReal> x10667=IKPowWithIntegerCheck(IKsign((((x10658*x10659))+((cj5*x10662*x10663))+(((2.0)*cj5*x10661*x10662))+(((-1.0)*x10661*x10663))+((x10658*x10666))+(((-1.0)*x10660*x10664))+(((-1.0)*x10666))+x10665+x10660+x10657+(((-1.0)*x10664*x10665))+((x10658*x10661*x10663)))),-1);
if(!x10667.valid){
continue;
}
CheckValue<IkReal> x10668 = IKatan2WithCheck(IkReal((((cj5*cj6*r01))+((cj5*x10661))+x10662)),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10667.value)))+(x10668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10669=IKcos(j4);
IkReal x10670=IKsin(j4);
IkReal x10671=(cj5*sj6);
IkReal x10672=(cj5*r21);
IkReal x10673=(cj5*r01);
IkReal x10674=(cj5*cj6*r11);
IkReal x10675=((1.0)*x10670);
IkReal x10676=(cj6*x10669);
IkReal x10677=(sj5*x10669);
IkReal x10678=(cj6*x10670);
IkReal x10679=(sj5*x10675);
IkReal x10680=((1.0)*sj6*x10669);
evalcond[0]=(((r20*x10669*x10671))+((r22*x10677))+(((-1.0)*r21*sj6*x10675))+((x10672*x10676))+((r20*x10678)));
evalcond[1]=(((r02*x10677))+((r00*x10669*x10671))+((r00*x10678))+(((-1.0)*r01*sj6*x10675))+((x10673*x10676)));
evalcond[2]=((-1.0)+((x10669*x10674))+((r10*x10678))+(((-1.0)*r11*sj6*x10675))+((r12*x10677))+((r10*x10669*x10671)));
evalcond[3]=((((-1.0)*r21*x10680))+(((-1.0)*r20*x10671*x10675))+(((-1.0)*cj6*x10672*x10675))+((r20*x10676))+(((-1.0)*r22*x10679)));
evalcond[4]=((((-1.0)*r10*x10671*x10675))+((r10*x10676))+(((-1.0)*x10674*x10675))+(((-1.0)*r11*x10680))+(((-1.0)*r12*x10679)));
evalcond[5]=((1.0)+(((-1.0)*r01*x10680))+(((-1.0)*r02*x10679))+(((-1.0)*cj6*x10673*x10675))+((r00*x10676))+(((-1.0)*r00*x10671*x10675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10681=((1.0)*sj5);
CheckValue<IkReal> x10682=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x10681))+(((-1.0)*r00*sj6*x10681))+((cj5*r02)))),-1);
if(!x10682.valid){
continue;
}
CheckValue<IkReal> x10683 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10682.value)))+(x10683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10684=IKcos(j4);
IkReal x10685=IKsin(j4);
IkReal x10686=(cj5*sj6);
IkReal x10687=(cj5*r21);
IkReal x10688=(cj5*r01);
IkReal x10689=(cj5*cj6*r11);
IkReal x10690=((1.0)*x10685);
IkReal x10691=(cj6*x10684);
IkReal x10692=(sj5*x10684);
IkReal x10693=(cj6*x10685);
IkReal x10694=(sj5*x10690);
IkReal x10695=((1.0)*sj6*x10684);
evalcond[0]=(((r22*x10692))+((r20*x10684*x10686))+(((-1.0)*r21*sj6*x10690))+((r20*x10693))+((x10687*x10691)));
evalcond[1]=(((r00*x10684*x10686))+((r02*x10692))+((r00*x10693))+(((-1.0)*r01*sj6*x10690))+((x10688*x10691)));
evalcond[2]=((-1.0)+((r10*x10693))+(((-1.0)*r11*sj6*x10690))+((r10*x10684*x10686))+((x10684*x10689))+((r12*x10692)));
evalcond[3]=((((-1.0)*r21*x10695))+(((-1.0)*cj6*x10687*x10690))+(((-1.0)*r22*x10694))+((r20*x10691))+(((-1.0)*r20*x10686*x10690)));
evalcond[4]=(((r10*x10691))+(((-1.0)*r10*x10686*x10690))+(((-1.0)*r11*x10695))+(((-1.0)*r12*x10694))+(((-1.0)*x10689*x10690)));
evalcond[5]=((1.0)+(((-1.0)*cj6*x10688*x10690))+(((-1.0)*r00*x10686*x10690))+(((-1.0)*r01*x10695))+(((-1.0)*r02*x10694))+((r00*x10691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10696 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10696.valid){
continue;
}
CheckValue<IkReal> x10697=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10696.value)+(((1.5707963267949)*(x10697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10698=IKcos(j4);
IkReal x10699=IKsin(j4);
IkReal x10700=(cj5*sj6);
IkReal x10701=(cj5*r21);
IkReal x10702=(cj5*r01);
IkReal x10703=(cj5*cj6*r11);
IkReal x10704=((1.0)*x10699);
IkReal x10705=(cj6*x10698);
IkReal x10706=(sj5*x10698);
IkReal x10707=(cj6*x10699);
IkReal x10708=(sj5*x10704);
IkReal x10709=((1.0)*sj6*x10698);
evalcond[0]=(((r20*x10698*x10700))+((x10701*x10705))+((r22*x10706))+(((-1.0)*r21*sj6*x10704))+((r20*x10707)));
evalcond[1]=(((r00*x10698*x10700))+((r00*x10707))+((x10702*x10705))+((r02*x10706))+(((-1.0)*r01*sj6*x10704)));
evalcond[2]=((-1.0)+((r12*x10706))+((x10698*x10703))+((r10*x10707))+(((-1.0)*r11*sj6*x10704))+((r10*x10698*x10700)));
evalcond[3]=((((-1.0)*cj6*x10701*x10704))+(((-1.0)*r22*x10708))+(((-1.0)*r20*x10700*x10704))+((r20*x10705))+(((-1.0)*r21*x10709)));
evalcond[4]=((((-1.0)*r12*x10708))+(((-1.0)*r10*x10700*x10704))+((r10*x10705))+(((-1.0)*x10703*x10704))+(((-1.0)*r11*x10709)));
evalcond[5]=((1.0)+(((-1.0)*r00*x10700*x10704))+((r00*x10705))+(((-1.0)*cj6*x10702*x10704))+(((-1.0)*r02*x10708))+(((-1.0)*r01*x10709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x10710=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10710;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x10710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x10711=((1.0)*sj5);
IkReal x10712=(((cj5*r12))+(((-1.0)*cj6*r11*x10711))+(((-1.0)*r10*sj6*x10711)));
j4eval[0]=x10712;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x10713=r11*r11;
IkReal x10714=cj5*cj5;
IkReal x10715=cj6*cj6;
IkReal x10716=r10*r10;
IkReal x10717=r12*r12;
IkReal x10718=(r12*sj5);
IkReal x10719=(r11*sj6);
IkReal x10720=((1.0)*x10715);
IkReal x10721=(cj5*cj6*r11);
IkReal x10722=(cj5*r10*sj6);
IkReal x10723=((2.0)*cj6*r10);
IkReal x10724=(x10714*x10716);
IkReal x10725=(((x10715*x10716))+((x10714*x10719*x10723))+(((-1.0)*x10714*x10717))+(((-1.0)*x10713*x10720))+(((-1.0)*x10720*x10724))+(((2.0)*x10718*x10722))+(((2.0)*x10718*x10721))+(((-1.0)*x10719*x10723))+((x10713*x10714*x10715))+x10717+x10713+x10724);
j4eval[0]=x10725;
j4eval[1]=((IKabs((x10718+x10722+x10721)))+(IKabs(((((-1.0)*cj6*r10))+x10719))));
j4eval[2]=IKsign(x10725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10726=r11*r11;
IkReal x10727=cj5*cj5;
IkReal x10728=cj6*cj6;
IkReal x10729=r10*r10;
IkReal x10730=r12*r12;
IkReal x10731=(r10*sj6);
IkReal x10732=(r12*sj5);
IkReal x10733=((1.0)*x10728);
IkReal x10734=(cj5*cj6*r11);
IkReal x10735=((2.0)*cj6*r11);
IkReal x10736=(x10727*x10729);
CheckValue<IkReal> x10737=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10731*x10735))+(((2.0)*x10732*x10734))+(((-1.0)*x10733*x10736))+(((-1.0)*x10726*x10733))+((x10726*x10727*x10728))+(((2.0)*cj5*x10731*x10732))+((x10727*x10731*x10735))+x10726+x10736+x10730+(((-1.0)*x10727*x10730))+((x10728*x10729)))),-1);
if(!x10737.valid){
continue;
}
CheckValue<IkReal> x10738 = IKatan2WithCheck(IkReal((((cj5*x10731))+x10734+x10732)),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10737.value)))+(x10738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10739=IKcos(j4);
IkReal x10740=IKsin(j4);
IkReal x10741=(cj5*sj6);
IkReal x10742=(cj5*r01);
IkReal x10743=(cj5*r21);
IkReal x10744=(cj5*cj6*r11);
IkReal x10745=((1.0)*x10740);
IkReal x10746=(cj6*x10739);
IkReal x10747=(sj5*x10739);
IkReal x10748=(cj6*x10740);
IkReal x10749=(sj5*x10745);
IkReal x10750=((1.0)*sj6*x10739);
evalcond[0]=(((x10743*x10746))+((r22*x10747))+(((-1.0)*r21*sj6*x10745))+((r20*x10748))+((r20*x10739*x10741)));
evalcond[1]=(((r10*x10739*x10741))+((r10*x10748))+(((-1.0)*r11*sj6*x10745))+((x10739*x10744))+((r12*x10747)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj6*x10745))+((r00*x10739*x10741))+((r02*x10747))+((x10742*x10746))+((r00*x10748)));
evalcond[3]=((((-1.0)*cj6*x10743*x10745))+(((-1.0)*r21*x10750))+((r20*x10746))+(((-1.0)*r20*x10741*x10745))+(((-1.0)*r22*x10749)));
evalcond[4]=((((-1.0)*r01*x10750))+(((-1.0)*r02*x10749))+(((-1.0)*cj6*x10742*x10745))+(((-1.0)*r00*x10741*x10745))+((r00*x10746)));
evalcond[5]=((1.0)+((r10*x10746))+(((-1.0)*x10744*x10745))+(((-1.0)*r10*x10741*x10745))+(((-1.0)*r11*x10750))+(((-1.0)*r12*x10749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10751=((1.0)*sj5);
CheckValue<IkReal> x10752=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x10751))+(((-1.0)*r10*sj6*x10751)))),-1);
if(!x10752.valid){
continue;
}
CheckValue<IkReal> x10753 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10752.value)))+(x10753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10754=IKcos(j4);
IkReal x10755=IKsin(j4);
IkReal x10756=(cj5*sj6);
IkReal x10757=(cj5*r01);
IkReal x10758=(cj5*r21);
IkReal x10759=(cj5*cj6*r11);
IkReal x10760=((1.0)*x10755);
IkReal x10761=(cj6*x10754);
IkReal x10762=(sj5*x10754);
IkReal x10763=(cj6*x10755);
IkReal x10764=(sj5*x10760);
IkReal x10765=((1.0)*sj6*x10754);
evalcond[0]=(((r20*x10754*x10756))+((r20*x10763))+((r22*x10762))+((x10758*x10761))+(((-1.0)*r21*sj6*x10760)));
evalcond[1]=(((r12*x10762))+((r10*x10754*x10756))+((x10754*x10759))+(((-1.0)*r11*sj6*x10760))+((r10*x10763)));
evalcond[2]=((1.0)+((r00*x10754*x10756))+((r00*x10763))+((x10757*x10761))+(((-1.0)*r01*sj6*x10760))+((r02*x10762)));
evalcond[3]=((((-1.0)*r21*x10765))+(((-1.0)*r20*x10756*x10760))+(((-1.0)*cj6*x10758*x10760))+((r20*x10761))+(((-1.0)*r22*x10764)));
evalcond[4]=((((-1.0)*r01*x10765))+(((-1.0)*r00*x10756*x10760))+((r00*x10761))+(((-1.0)*cj6*x10757*x10760))+(((-1.0)*r02*x10764)));
evalcond[5]=((1.0)+(((-1.0)*r11*x10765))+(((-1.0)*r12*x10764))+((r10*x10761))+(((-1.0)*x10759*x10760))+(((-1.0)*r10*x10756*x10760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10766=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10766.valid){
continue;
}
CheckValue<IkReal> x10767 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10766.value)))+(x10767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10768=IKcos(j4);
IkReal x10769=IKsin(j4);
IkReal x10770=(cj5*sj6);
IkReal x10771=(cj5*r01);
IkReal x10772=(cj5*r21);
IkReal x10773=(cj5*cj6*r11);
IkReal x10774=((1.0)*x10769);
IkReal x10775=(cj6*x10768);
IkReal x10776=(sj5*x10768);
IkReal x10777=(cj6*x10769);
IkReal x10778=(sj5*x10774);
IkReal x10779=((1.0)*sj6*x10768);
evalcond[0]=((((-1.0)*r21*sj6*x10774))+((r20*x10777))+((r20*x10768*x10770))+((x10772*x10775))+((r22*x10776)));
evalcond[1]=(((r10*x10768*x10770))+((r12*x10776))+(((-1.0)*r11*sj6*x10774))+((r10*x10777))+((x10768*x10773)));
evalcond[2]=((1.0)+((x10771*x10775))+((r00*x10777))+(((-1.0)*r01*sj6*x10774))+((r02*x10776))+((r00*x10768*x10770)));
evalcond[3]=(((r20*x10775))+(((-1.0)*r21*x10779))+(((-1.0)*cj6*x10772*x10774))+(((-1.0)*r22*x10778))+(((-1.0)*r20*x10770*x10774)));
evalcond[4]=((((-1.0)*r02*x10778))+(((-1.0)*r01*x10779))+((r00*x10775))+(((-1.0)*r00*x10770*x10774))+(((-1.0)*cj6*x10771*x10774)));
evalcond[5]=((1.0)+(((-1.0)*r12*x10778))+(((-1.0)*r11*x10779))+(((-1.0)*x10773*x10774))+((r10*x10775))+(((-1.0)*r10*x10770*x10774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10780=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10780;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10781=((1.0)*cj6);
IkReal x10782=(((cj5*r22))+(((-1.0)*r21*sj5*x10781))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10782;
j4eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x10781)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x10782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10783=cj6*cj6;
IkReal x10784=cj5*cj5;
IkReal x10785=r10*r10;
IkReal x10786=r11*r11;
IkReal x10787=r12*r12;
IkReal x10788=(r10*sj6);
IkReal x10789=(r12*sj5);
IkReal x10790=((2.0)*cj6*r11);
IkReal x10791=((1.0)*x10785);
IkReal x10792=(x10783*x10786);
IkReal x10793=(((x10783*x10784*x10785))+(((-1.0)*x10784*x10792))+(((-1.0)*cj5*x10789*x10790))+(((-2.0)*cj5*x10788*x10789))+(((-1.0)*x10784*x10791))+((x10784*x10787))+(((-1.0)*x10786))+(((-1.0)*x10787))+(((-1.0)*x10784*x10788*x10790))+x10792+((x10788*x10790))+(((-1.0)*x10783*x10791)));
j4eval[0]=x10793;
j4eval[1]=((IKabs((((cj5*x10788))+((cj5*cj6*r11))+x10789)))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x10793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10794=cj6*cj6;
IkReal x10795=cj5*cj5;
IkReal x10796=r10*r10;
IkReal x10797=r11*r11;
IkReal x10798=r12*r12;
IkReal x10799=(r10*sj6);
IkReal x10800=(r12*sj5);
IkReal x10801=((2.0)*cj6*r11);
IkReal x10802=(x10794*x10797);
IkReal x10803=(x10795*x10796);
CheckValue<IkReal> x10804 = IKatan2WithCheck(IkReal((((cj5*x10799))+((cj5*cj6*r11))+x10800)),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10804.valid){
continue;
}
CheckValue<IkReal> x10805=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x10800*x10801))+(((-1.0)*x10794*x10796))+((x10795*x10798))+(((-1.0)*x10795*x10802))+(((-2.0)*cj5*x10799*x10800))+(((-1.0)*x10795*x10799*x10801))+((x10799*x10801))+(((-1.0)*x10803))+(((-1.0)*x10798))+(((-1.0)*x10797))+((x10794*x10803))+x10802)),-1);
if(!x10805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10804.value)+(((1.5707963267949)*(x10805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10806=IKcos(j4);
IkReal x10807=IKsin(j4);
IkReal x10808=(cj5*sj6);
IkReal x10809=(cj5*r01);
IkReal x10810=(cj5*r21);
IkReal x10811=(cj5*cj6*r11);
IkReal x10812=((1.0)*x10807);
IkReal x10813=(cj6*x10806);
IkReal x10814=(sj5*x10806);
IkReal x10815=(cj6*x10807);
IkReal x10816=(sj5*x10812);
IkReal x10817=((1.0)*sj6*x10806);
evalcond[0]=(((r22*x10814))+((r20*x10806*x10808))+((x10810*x10813))+(((-1.0)*r21*sj6*x10812))+((r20*x10815)));
evalcond[1]=(((x10806*x10811))+((r10*x10806*x10808))+((r10*x10815))+(((-1.0)*r11*sj6*x10812))+((r12*x10814)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x10812))+((r02*x10814))+((x10809*x10813))+((r00*x10806*x10808))+((r00*x10815)));
evalcond[3]=((((-1.0)*r20*x10808*x10812))+((r20*x10813))+(((-1.0)*cj6*x10810*x10812))+(((-1.0)*r21*x10817))+(((-1.0)*r22*x10816)));
evalcond[4]=((((-1.0)*r02*x10816))+(((-1.0)*r00*x10808*x10812))+(((-1.0)*r01*x10817))+(((-1.0)*cj6*x10809*x10812))+((r00*x10813)));
evalcond[5]=((-1.0)+(((-1.0)*x10811*x10812))+(((-1.0)*r11*x10817))+(((-1.0)*r12*x10816))+(((-1.0)*r10*x10808*x10812))+((r10*x10813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10818=((1.0)*cj6);
CheckValue<IkReal> x10819=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x10818))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x10819.valid){
continue;
}
CheckValue<IkReal> x10820 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*r10*x10818))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10819.value)))+(x10820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10821=IKcos(j4);
IkReal x10822=IKsin(j4);
IkReal x10823=(cj5*sj6);
IkReal x10824=(cj5*r01);
IkReal x10825=(cj5*r21);
IkReal x10826=(cj5*cj6*r11);
IkReal x10827=((1.0)*x10822);
IkReal x10828=(cj6*x10821);
IkReal x10829=(sj5*x10821);
IkReal x10830=(cj6*x10822);
IkReal x10831=(sj5*x10827);
IkReal x10832=((1.0)*sj6*x10821);
evalcond[0]=(((x10825*x10828))+(((-1.0)*r21*sj6*x10827))+((r20*x10830))+((r20*x10821*x10823))+((r22*x10829)));
evalcond[1]=(((r10*x10821*x10823))+((r12*x10829))+((r10*x10830))+((x10821*x10826))+(((-1.0)*r11*sj6*x10827)));
evalcond[2]=((-1.0)+((r00*x10821*x10823))+((r02*x10829))+((x10824*x10828))+((r00*x10830))+(((-1.0)*r01*sj6*x10827)));
evalcond[3]=((((-1.0)*r20*x10823*x10827))+(((-1.0)*cj6*x10825*x10827))+(((-1.0)*r21*x10832))+((r20*x10828))+(((-1.0)*r22*x10831)));
evalcond[4]=((((-1.0)*cj6*x10824*x10827))+(((-1.0)*r01*x10832))+(((-1.0)*r00*x10823*x10827))+((r00*x10828))+(((-1.0)*r02*x10831)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x10823*x10827))+(((-1.0)*r11*x10832))+(((-1.0)*r12*x10831))+((r10*x10828))+(((-1.0)*x10826*x10827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10833=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10833.valid){
continue;
}
CheckValue<IkReal> x10834 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10833.value)))+(x10834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10835=IKcos(j4);
IkReal x10836=IKsin(j4);
IkReal x10837=(cj5*sj6);
IkReal x10838=(cj5*r01);
IkReal x10839=(cj5*r21);
IkReal x10840=(cj5*cj6*r11);
IkReal x10841=((1.0)*x10836);
IkReal x10842=(cj6*x10835);
IkReal x10843=(sj5*x10835);
IkReal x10844=(cj6*x10836);
IkReal x10845=(sj5*x10841);
IkReal x10846=((1.0)*sj6*x10835);
evalcond[0]=(((r22*x10843))+(((-1.0)*r21*sj6*x10841))+((r20*x10835*x10837))+((x10839*x10842))+((r20*x10844)));
evalcond[1]=(((r10*x10835*x10837))+(((-1.0)*r11*sj6*x10841))+((r12*x10843))+((r10*x10844))+((x10835*x10840)));
evalcond[2]=((-1.0)+((x10838*x10842))+((r00*x10844))+((r00*x10835*x10837))+(((-1.0)*r01*sj6*x10841))+((r02*x10843)));
evalcond[3]=((((-1.0)*r22*x10845))+((r20*x10842))+(((-1.0)*r20*x10837*x10841))+(((-1.0)*r21*x10846))+(((-1.0)*cj6*x10839*x10841)));
evalcond[4]=(((r00*x10842))+(((-1.0)*r02*x10845))+(((-1.0)*r01*x10846))+(((-1.0)*cj6*x10838*x10841))+(((-1.0)*r00*x10837*x10841)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x10837*x10841))+(((-1.0)*r11*x10846))+(((-1.0)*r12*x10845))+(((-1.0)*x10840*x10841))+((r10*x10842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10847=(cj0*cj6);
IkReal x10848=((1.0)*sj0);
IkReal x10849=(cj0*sj6);
IkReal x10850=(sj6*x10848);
CheckValue<IkReal> x10851=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10851.valid){
continue;
}
CheckValue<IkReal> x10852 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj5*x10848))+(((-1.0)*cj5*r00*x10850))+((cj0*r12*sj5))+((cj5*r10*x10849))+(((-1.0)*cj5*cj6*r01*x10848))+((cj5*r11*x10847)))),IkReal((((cj6*r00*sj0))+(((-1.0)*r10*x10847))+(((-1.0)*r01*x10850))+((r11*x10849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10851.value)))+(x10852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10853=IKcos(j4);
IkReal x10854=IKsin(j4);
IkReal x10855=(cj5*sj6);
IkReal x10856=(cj5*r21);
IkReal x10857=(cj5*r01);
IkReal x10858=(cj5*cj6*r11);
IkReal x10859=((1.0)*x10854);
IkReal x10860=(cj6*x10853);
IkReal x10861=(sj5*x10853);
IkReal x10862=(cj6*x10854);
IkReal x10863=(sj5*x10859);
IkReal x10864=((1.0)*sj6*x10853);
evalcond[0]=((((-1.0)*r21*sj6*x10859))+((r20*x10853*x10855))+((x10856*x10860))+((r20*x10862))+((r22*x10861)));
evalcond[1]=(((r00*x10853*x10855))+(((-1.0)*r01*sj6*x10859))+cj0+((x10857*x10860))+((r00*x10862))+((r02*x10861)));
evalcond[2]=(sj0+((r12*x10861))+((r10*x10862))+((r10*x10853*x10855))+(((-1.0)*r11*sj6*x10859))+((x10853*x10858)));
evalcond[3]=((((-1.0)*r22*x10863))+(((-1.0)*r20*x10855*x10859))+(((-1.0)*r21*x10864))+((r20*x10860))+(((-1.0)*cj6*x10856*x10859)));
evalcond[4]=((((-1.0)*r12*x10863))+(((-1.0)*r11*x10864))+(((-1.0)*x10858*x10859))+cj0+((r10*x10860))+(((-1.0)*r10*x10855*x10859)));
evalcond[5]=((((-1.0)*r00*x10855*x10859))+(((-1.0)*sj0))+(((-1.0)*cj6*x10857*x10859))+((r00*x10860))+(((-1.0)*r01*x10864))+(((-1.0)*r02*x10863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10865=(cj0*r20);
IkReal x10866=((1.0)*cj6);
IkReal x10867=(cj0*r21);
CheckValue<IkReal> x10868 = IKatan2WithCheck(IkReal((((cj5*sj6*x10865))+((cj5*cj6*x10867))+((cj0*r22*sj5)))),IkReal(((((-1.0)*x10865*x10866))+((sj6*x10867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10868.valid){
continue;
}
CheckValue<IkReal> x10869=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x10866)))),-1);
if(!x10869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10868.value)+(((1.5707963267949)*(x10869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10870=IKcos(j4);
IkReal x10871=IKsin(j4);
IkReal x10872=(cj5*sj6);
IkReal x10873=(cj5*r21);
IkReal x10874=(cj5*r01);
IkReal x10875=(cj5*cj6*r11);
IkReal x10876=((1.0)*x10871);
IkReal x10877=(cj6*x10870);
IkReal x10878=(sj5*x10870);
IkReal x10879=(cj6*x10871);
IkReal x10880=(sj5*x10876);
IkReal x10881=((1.0)*sj6*x10870);
evalcond[0]=(((r20*x10879))+((r20*x10870*x10872))+(((-1.0)*r21*sj6*x10876))+((r22*x10878))+((x10873*x10877)));
evalcond[1]=((((-1.0)*r01*sj6*x10876))+((r00*x10870*x10872))+((x10874*x10877))+((r02*x10878))+cj0+((r00*x10879)));
evalcond[2]=(((x10870*x10875))+((r12*x10878))+sj0+((r10*x10870*x10872))+((r10*x10879))+(((-1.0)*r11*sj6*x10876)));
evalcond[3]=((((-1.0)*cj6*x10873*x10876))+(((-1.0)*r20*x10872*x10876))+((r20*x10877))+(((-1.0)*r22*x10880))+(((-1.0)*r21*x10881)));
evalcond[4]=(cj0+((r10*x10877))+(((-1.0)*x10875*x10876))+(((-1.0)*r10*x10872*x10876))+(((-1.0)*r11*x10881))+(((-1.0)*r12*x10880)));
evalcond[5]=((((-1.0)*r01*x10881))+(((-1.0)*sj0))+(((-1.0)*cj6*x10874*x10876))+(((-1.0)*r02*x10880))+(((-1.0)*r00*x10872*x10876))+((r00*x10877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10882=(r21*sj0);
IkReal x10883=(r20*sj0);
CheckValue<IkReal> x10884 = IKatan2WithCheck(IkReal((((cj5*sj6*x10883))+((r22*sj0*sj5))+((cj5*cj6*x10882)))),IkReal((((sj6*x10882))+(((-1.0)*cj6*x10883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10884.valid){
continue;
}
CheckValue<IkReal> x10885=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10884.value)+(((1.5707963267949)*(x10885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10886=IKcos(j4);
IkReal x10887=IKsin(j4);
IkReal x10888=(cj5*sj6);
IkReal x10889=(cj5*r21);
IkReal x10890=(cj5*r01);
IkReal x10891=(cj5*cj6*r11);
IkReal x10892=((1.0)*x10887);
IkReal x10893=(cj6*x10886);
IkReal x10894=(sj5*x10886);
IkReal x10895=(cj6*x10887);
IkReal x10896=(sj5*x10892);
IkReal x10897=((1.0)*sj6*x10886);
evalcond[0]=(((r20*x10895))+((r22*x10894))+(((-1.0)*r21*sj6*x10892))+((r20*x10886*x10888))+((x10889*x10893)));
evalcond[1]=(cj0+((x10890*x10893))+(((-1.0)*r01*sj6*x10892))+((r02*x10894))+((r00*x10886*x10888))+((r00*x10895)));
evalcond[2]=(sj0+((r12*x10894))+((r10*x10895))+((x10886*x10891))+(((-1.0)*r11*sj6*x10892))+((r10*x10886*x10888)));
evalcond[3]=(((r20*x10893))+(((-1.0)*r20*x10888*x10892))+(((-1.0)*r22*x10896))+(((-1.0)*cj6*x10889*x10892))+(((-1.0)*r21*x10897)));
evalcond[4]=((((-1.0)*x10891*x10892))+cj0+(((-1.0)*r10*x10888*x10892))+((r10*x10893))+(((-1.0)*r12*x10896))+(((-1.0)*r11*x10897)));
evalcond[5]=((((-1.0)*r00*x10888*x10892))+(((-1.0)*sj0))+(((-1.0)*r01*x10897))+(((-1.0)*r02*x10896))+(((-1.0)*cj6*x10890*x10892))+((r00*x10893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10898=((1.26697583102024)*cj5);
IkReal x10899=((0.0338501117053686)*cj5);
IkReal x10900=(r00*sj6);
IkReal x10901=(r10*sj6);
IkReal x10902=((1.26697583102024)*sj5);
IkReal x10903=(cj6*r11);
IkReal x10904=((0.0338501117053686)*sj5);
IkReal x10905=(cj6*r01);
if( IKabs((((r12*x10904))+(((-3.38501117053686)*py))+(((-1.0)*x10901*x10902))+((r12*x10898))+(((-1.0)*x10902*x10903))+((x10899*x10903))+((x10899*x10901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.38501117053686)*px))+(((-1.0)*x10900*x10902))+((r02*x10898))+(((-1.0)*x10902*x10905))+((x10899*x10905))+((x10899*x10900))+((r02*x10904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x10904))+(((-3.38501117053686)*py))+(((-1.0)*x10901*x10902))+((r12*x10898))+(((-1.0)*x10902*x10903))+((x10899*x10903))+((x10899*x10901))))+IKsqr(((((-3.38501117053686)*px))+(((-1.0)*x10900*x10902))+((r02*x10898))+(((-1.0)*x10902*x10905))+((x10899*x10905))+((x10899*x10900))+((r02*x10904))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r12*x10904))+(((-3.38501117053686)*py))+(((-1.0)*x10901*x10902))+((r12*x10898))+(((-1.0)*x10902*x10903))+((x10899*x10903))+((x10899*x10901))), ((((-3.38501117053686)*px))+(((-1.0)*x10900*x10902))+((r02*x10898))+(((-1.0)*x10902*x10905))+((x10899*x10905))+((x10899*x10900))+((r02*x10904))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10906=((0.01)*cj5);
IkReal x10907=(cj6*r01);
IkReal x10908=(r00*sj6);
IkReal x10909=((0.01)*sj5);
IkReal x10910=((0.37429)*sj5);
IkReal x10911=((0.37429)*cj5);
IkReal x10912=(r10*sj6);
IkReal x10913=(cj6*r11);
evalcond[0]=((((-1.0)*x10908*x10910))+((r02*x10911))+(((-1.0)*px))+((x10906*x10908))+((x10906*x10907))+(((-1.0)*x10907*x10910))+(((-0.29542)*(IKcos(j0))))+((r02*x10909)));
evalcond[1]=(((r12*x10909))+(((-0.29542)*(IKsin(j0))))+(((-1.0)*x10910*x10912))+(((-1.0)*x10910*x10913))+(((-1.0)*py))+((r12*x10911))+((x10906*x10913))+((x10906*x10912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x10914=(r21*sj0);
IkReal x10915=(r20*sj0);
IkReal x10916=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10916;
j4eval[1]=((IKabs((((sj6*x10914))+(((-1.0)*cj6*x10915)))))+(IKabs((((cj5*cj6*x10914))+((cj5*sj6*x10915))+((r22*sj0*sj5))))));
j4eval[2]=IKsign(x10916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x10917=(cj0*r20);
IkReal x10918=((1.0)*cj6);
IkReal x10919=(cj0*r21);
IkReal x10920=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x10918)));
j4eval[0]=x10920;
j4eval[1]=((IKabs(((((-1.0)*x10917*x10918))+((sj6*x10919)))))+(IKabs((((cj5*cj6*x10919))+((cj5*sj6*x10917))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x10920);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x10921=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10921;
j4eval[1]=IKsign(x10921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10922=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10922;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10923=((1.0)*cj6);
IkReal x10924=(((cj5*r22))+(((-1.0)*r21*sj5*x10923))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10924;
j4eval[1]=IKsign(x10924);
j4eval[2]=((IKabs((((r01*sj6))+(((-1.0)*r00*x10923)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10925=cj6*cj6;
IkReal x10926=r01*r01;
IkReal x10927=cj5*cj5;
IkReal x10928=r00*r00;
IkReal x10929=r02*r02;
IkReal x10930=(r02*sj5);
IkReal x10931=(r01*sj6);
IkReal x10932=(cj6*r00);
IkReal x10933=(cj5*cj6*r01);
IkReal x10934=(cj5*r00*sj6);
IkReal x10935=((1.0)*x10927);
IkReal x10936=(x10925*x10928);
IkReal x10937=(x10925*x10926);
IkReal x10938=((((-1.0)*x10929*x10935))+(((2.0)*x10927*x10931*x10932))+((x10927*x10928))+(((-1.0)*x10937))+((x10927*x10937))+(((-2.0)*x10931*x10932))+(((2.0)*x10930*x10933))+(((2.0)*x10930*x10934))+(((-1.0)*x10935*x10936))+x10926+x10929+x10936);
j4eval[0]=x10938;
j4eval[1]=((IKabs((x10934+x10933+x10930)))+(IKabs(((((-1.0)*x10932))+x10931))));
j4eval[2]=IKsign(x10938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10939=cj6*cj6;
IkReal x10940=r01*r01;
IkReal x10941=cj5*cj5;
IkReal x10942=r00*r00;
IkReal x10943=r02*r02;
IkReal x10944=(r00*sj6);
IkReal x10945=(r02*sj5);
IkReal x10946=((2.0)*cj6*r01);
IkReal x10947=((1.0)*x10941);
IkReal x10948=(x10939*x10942);
IkReal x10949=(x10939*x10940);
CheckValue<IkReal> x10950=IKPowWithIntegerCheck(IKsign((((x10941*x10942))+((x10941*x10949))+((x10941*x10944*x10946))+(((-1.0)*x10943*x10947))+((cj5*x10945*x10946))+(((-1.0)*x10949))+(((2.0)*cj5*x10944*x10945))+(((-1.0)*x10947*x10948))+x10948+x10943+x10940+(((-1.0)*x10944*x10946)))),-1);
if(!x10950.valid){
continue;
}
CheckValue<IkReal> x10951 = IKatan2WithCheck(IkReal((((cj5*cj6*r01))+((cj5*x10944))+x10945)),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10950.value)))+(x10951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10952=IKcos(j4);
IkReal x10953=IKsin(j4);
IkReal x10954=(cj5*sj6);
IkReal x10955=(cj5*r21);
IkReal x10956=(cj5*r01);
IkReal x10957=(cj5*cj6*r11);
IkReal x10958=((1.0)*x10953);
IkReal x10959=(cj6*x10952);
IkReal x10960=(sj5*x10952);
IkReal x10961=(cj6*x10953);
IkReal x10962=(sj5*x10958);
IkReal x10963=((1.0)*sj6*x10952);
evalcond[0]=((((-1.0)*r21*sj6*x10958))+((r22*x10960))+((r20*x10952*x10954))+((x10955*x10959))+((r20*x10961)));
evalcond[1]=(((r02*x10960))+((r00*x10961))+(((-1.0)*r01*sj6*x10958))+((x10956*x10959))+((r00*x10952*x10954)));
evalcond[2]=((1.0)+((r10*x10952*x10954))+((r10*x10961))+(((-1.0)*r11*sj6*x10958))+((r12*x10960))+((x10952*x10957)));
evalcond[3]=((((-1.0)*r20*x10954*x10958))+(((-1.0)*r21*x10963))+(((-1.0)*cj6*x10955*x10958))+(((-1.0)*r22*x10962))+((r20*x10959)));
evalcond[4]=((((-1.0)*r10*x10954*x10958))+(((-1.0)*x10957*x10958))+((r10*x10959))+(((-1.0)*r11*x10963))+(((-1.0)*r12*x10962)));
evalcond[5]=((1.0)+((r00*x10959))+(((-1.0)*r00*x10954*x10958))+(((-1.0)*r02*x10962))+(((-1.0)*r01*x10963))+(((-1.0)*cj6*x10956*x10958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10964=((1.0)*cj6);
CheckValue<IkReal> x10965=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x10964))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x10965.valid){
continue;
}
CheckValue<IkReal> x10966 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal(((((-1.0)*r00*x10964))+((r01*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10965.value)))+(x10966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10967=IKcos(j4);
IkReal x10968=IKsin(j4);
IkReal x10969=(cj5*sj6);
IkReal x10970=(cj5*r21);
IkReal x10971=(cj5*r01);
IkReal x10972=(cj5*cj6*r11);
IkReal x10973=((1.0)*x10968);
IkReal x10974=(cj6*x10967);
IkReal x10975=(sj5*x10967);
IkReal x10976=(cj6*x10968);
IkReal x10977=(sj5*x10973);
IkReal x10978=((1.0)*sj6*x10967);
evalcond[0]=(((r20*x10967*x10969))+(((-1.0)*r21*sj6*x10973))+((r22*x10975))+((r20*x10976))+((x10970*x10974)));
evalcond[1]=(((r02*x10975))+((r00*x10976))+(((-1.0)*r01*sj6*x10973))+((r00*x10967*x10969))+((x10971*x10974)));
evalcond[2]=((1.0)+((x10967*x10972))+((r10*x10967*x10969))+((r10*x10976))+((r12*x10975))+(((-1.0)*r11*sj6*x10973)));
evalcond[3]=((((-1.0)*r21*x10978))+(((-1.0)*r22*x10977))+((r20*x10974))+(((-1.0)*r20*x10969*x10973))+(((-1.0)*cj6*x10970*x10973)));
evalcond[4]=((((-1.0)*r10*x10969*x10973))+(((-1.0)*x10972*x10973))+((r10*x10974))+(((-1.0)*r11*x10978))+(((-1.0)*r12*x10977)));
evalcond[5]=((1.0)+(((-1.0)*cj6*x10971*x10973))+(((-1.0)*r00*x10969*x10973))+((r00*x10974))+(((-1.0)*r02*x10977))+(((-1.0)*r01*x10978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10979=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10979.valid){
continue;
}
CheckValue<IkReal> x10980 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10979.value)))+(x10980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10981=IKcos(j4);
IkReal x10982=IKsin(j4);
IkReal x10983=(cj5*sj6);
IkReal x10984=(cj5*r21);
IkReal x10985=(cj5*r01);
IkReal x10986=(cj5*cj6*r11);
IkReal x10987=((1.0)*x10982);
IkReal x10988=(cj6*x10981);
IkReal x10989=(sj5*x10981);
IkReal x10990=(cj6*x10982);
IkReal x10991=(sj5*x10987);
IkReal x10992=((1.0)*sj6*x10981);
evalcond[0]=(((r22*x10989))+((r20*x10990))+((r20*x10981*x10983))+((x10984*x10988))+(((-1.0)*r21*sj6*x10987)));
evalcond[1]=(((r00*x10990))+((x10985*x10988))+(((-1.0)*r01*sj6*x10987))+((r00*x10981*x10983))+((r02*x10989)));
evalcond[2]=((1.0)+((r12*x10989))+((x10981*x10986))+((r10*x10990))+(((-1.0)*r11*sj6*x10987))+((r10*x10981*x10983)));
evalcond[3]=((((-1.0)*r22*x10991))+(((-1.0)*r21*x10992))+(((-1.0)*cj6*x10984*x10987))+((r20*x10988))+(((-1.0)*r20*x10983*x10987)));
evalcond[4]=((((-1.0)*x10986*x10987))+(((-1.0)*r10*x10983*x10987))+((r10*x10988))+(((-1.0)*r11*x10992))+(((-1.0)*r12*x10991)));
evalcond[5]=((1.0)+((r00*x10988))+(((-1.0)*r00*x10983*x10987))+(((-1.0)*r01*x10992))+(((-1.0)*cj6*x10985*x10987))+(((-1.0)*r02*x10991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10993=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10993;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10994=((1.0)*sj5);
IkReal x10995=((((-1.0)*r00*sj6*x10994))+(((-1.0)*cj6*r01*x10994))+((cj5*r02)));
j4eval[0]=x10995;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10996=cj6*cj6;
IkReal x10997=cj5*cj5;
IkReal x10998=r00*r00;
IkReal x10999=r01*r01;
IkReal x11000=r02*r02;
IkReal x11001=(r00*sj6);
IkReal x11002=((2.0)*cj6*r01);
IkReal x11003=(cj5*r02*sj5);
IkReal x11004=((1.0)*x10996);
IkReal x11005=(x10997*x10998);
IkReal x11006=((((-2.0)*x11001*x11003))+((x11001*x11002))+(((-1.0)*x10997*x10999*x11004))+((x10996*x10999))+(((-1.0)*x11002*x11003))+(((-1.0)*x10998*x11004))+(((-1.0)*x10999))+((x10996*x11005))+((x10997*x11000))+(((-1.0)*x11005))+(((-1.0)*x11000))+(((-1.0)*x10997*x11001*x11002)));
j4eval[0]=x11006;
j4eval[1]=((IKabs((((r02*sj5))+((cj5*x11001))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x11006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11007=cj6*cj6;
IkReal x11008=cj5*cj5;
IkReal x11009=r00*r00;
IkReal x11010=r01*r01;
IkReal x11011=r02*r02;
IkReal x11012=(r01*sj6);
IkReal x11013=(cj6*r00);
IkReal x11014=(cj5*cj6*r01);
IkReal x11015=((2.0)*r02*sj5);
IkReal x11016=((1.0)*x11007);
IkReal x11017=(cj5*r00*sj6);
IkReal x11018=(x11008*x11009);
CheckValue<IkReal> x11019=IKPowWithIntegerCheck(IKsign((((x11008*x11011))+(((-1.0)*x11014*x11015))+(((-1.0)*x11015*x11017))+((x11007*x11018))+((x11007*x11010))+(((2.0)*x11012*x11013))+(((-1.0)*x11008*x11010*x11016))+(((-2.0)*x11008*x11012*x11013))+(((-1.0)*x11018))+(((-1.0)*x11010))+(((-1.0)*x11011))+(((-1.0)*x11009*x11016)))),-1);
if(!x11019.valid){
continue;
}
CheckValue<IkReal> x11020 = IKatan2WithCheck(IkReal((x11017+x11014+((r02*sj5)))),IkReal((x11012+(((-1.0)*x11013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11019.value)))+(x11020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11021=IKcos(j4);
IkReal x11022=IKsin(j4);
IkReal x11023=(cj5*sj6);
IkReal x11024=(cj5*r21);
IkReal x11025=(cj5*r01);
IkReal x11026=(cj5*cj6*r11);
IkReal x11027=((1.0)*x11022);
IkReal x11028=(cj6*x11021);
IkReal x11029=(sj5*x11021);
IkReal x11030=(cj6*x11022);
IkReal x11031=(sj5*x11027);
IkReal x11032=((1.0)*sj6*x11021);
evalcond[0]=((((-1.0)*r21*sj6*x11027))+((r20*x11030))+((r20*x11021*x11023))+((x11024*x11028))+((r22*x11029)));
evalcond[1]=(((r00*x11030))+((r00*x11021*x11023))+((x11025*x11028))+(((-1.0)*r01*sj6*x11027))+((r02*x11029)));
evalcond[2]=((-1.0)+((x11021*x11026))+((r10*x11021*x11023))+((r10*x11030))+(((-1.0)*r11*sj6*x11027))+((r12*x11029)));
evalcond[3]=((((-1.0)*r21*x11032))+((r20*x11028))+(((-1.0)*cj6*x11024*x11027))+(((-1.0)*r20*x11023*x11027))+(((-1.0)*r22*x11031)));
evalcond[4]=(((r10*x11028))+(((-1.0)*x11026*x11027))+(((-1.0)*r11*x11032))+(((-1.0)*r12*x11031))+(((-1.0)*r10*x11023*x11027)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x11031))+((r00*x11028))+(((-1.0)*r00*x11023*x11027))+(((-1.0)*r01*x11032))+(((-1.0)*cj6*x11025*x11027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11033=((1.0)*sj5);
CheckValue<IkReal> x11034 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11034.valid){
continue;
}
CheckValue<IkReal> x11035=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x11033))+(((-1.0)*r00*sj6*x11033))+((cj5*r02)))),-1);
if(!x11035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11034.value)+(((1.5707963267949)*(x11035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11036=IKcos(j4);
IkReal x11037=IKsin(j4);
IkReal x11038=(cj5*sj6);
IkReal x11039=(cj5*r21);
IkReal x11040=(cj5*r01);
IkReal x11041=(cj5*cj6*r11);
IkReal x11042=((1.0)*x11037);
IkReal x11043=(cj6*x11036);
IkReal x11044=(sj5*x11036);
IkReal x11045=(cj6*x11037);
IkReal x11046=(sj5*x11042);
IkReal x11047=((1.0)*sj6*x11036);
evalcond[0]=((((-1.0)*r21*sj6*x11042))+((r20*x11045))+((r20*x11036*x11038))+((r22*x11044))+((x11039*x11043)));
evalcond[1]=((((-1.0)*r01*sj6*x11042))+((r00*x11045))+((x11040*x11043))+((r00*x11036*x11038))+((r02*x11044)));
evalcond[2]=((-1.0)+((r10*x11045))+(((-1.0)*r11*sj6*x11042))+((x11036*x11041))+((r12*x11044))+((r10*x11036*x11038)));
evalcond[3]=((((-1.0)*cj6*x11039*x11042))+((r20*x11043))+(((-1.0)*r22*x11046))+(((-1.0)*r21*x11047))+(((-1.0)*r20*x11038*x11042)));
evalcond[4]=(((r10*x11043))+(((-1.0)*x11041*x11042))+(((-1.0)*r11*x11047))+(((-1.0)*r12*x11046))+(((-1.0)*r10*x11038*x11042)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x11047))+((r00*x11043))+(((-1.0)*r00*x11038*x11042))+(((-1.0)*cj6*x11040*x11042))+(((-1.0)*r02*x11046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11048 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11048.valid){
continue;
}
CheckValue<IkReal> x11049=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11048.value)+(((1.5707963267949)*(x11049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11050=IKcos(j4);
IkReal x11051=IKsin(j4);
IkReal x11052=(cj5*sj6);
IkReal x11053=(cj5*r21);
IkReal x11054=(cj5*r01);
IkReal x11055=(cj5*cj6*r11);
IkReal x11056=((1.0)*x11051);
IkReal x11057=(cj6*x11050);
IkReal x11058=(sj5*x11050);
IkReal x11059=(cj6*x11051);
IkReal x11060=(sj5*x11056);
IkReal x11061=((1.0)*sj6*x11050);
evalcond[0]=(((r20*x11059))+(((-1.0)*r21*sj6*x11056))+((r22*x11058))+((r20*x11050*x11052))+((x11053*x11057)));
evalcond[1]=((((-1.0)*r01*sj6*x11056))+((r00*x11050*x11052))+((r00*x11059))+((x11054*x11057))+((r02*x11058)));
evalcond[2]=((-1.0)+((r12*x11058))+((r10*x11059))+(((-1.0)*r11*sj6*x11056))+((x11050*x11055))+((r10*x11050*x11052)));
evalcond[3]=((((-1.0)*r22*x11060))+((r20*x11057))+(((-1.0)*cj6*x11053*x11056))+(((-1.0)*r20*x11052*x11056))+(((-1.0)*r21*x11061)));
evalcond[4]=(((r10*x11057))+(((-1.0)*r11*x11061))+(((-1.0)*r12*x11060))+(((-1.0)*r10*x11052*x11056))+(((-1.0)*x11055*x11056)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x11054*x11056))+(((-1.0)*r01*x11061))+(((-1.0)*r02*x11060))+((r00*x11057))+(((-1.0)*r00*x11052*x11056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11062=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x11062;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11063=((1.0)*sj5);
IkReal x11064=(((cj5*r12))+(((-1.0)*r10*sj6*x11063))+(((-1.0)*cj6*r11*x11063)));
j4eval[0]=x11064;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x11064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11065=cj6*cj6;
IkReal x11066=cj5*cj5;
IkReal x11067=r10*r10;
IkReal x11068=r11*r11;
IkReal x11069=r12*r12;
IkReal x11070=(r10*sj6);
IkReal x11071=(r12*sj5);
IkReal x11072=((2.0)*cj6*r11);
IkReal x11073=((1.0)*x11067);
IkReal x11074=(x11065*x11068);
IkReal x11075=((((-1.0)*x11065*x11073))+(((-1.0)*x11066*x11070*x11072))+x11074+((x11065*x11066*x11067))+(((-1.0)*cj5*x11071*x11072))+(((-1.0)*x11066*x11074))+(((-2.0)*cj5*x11070*x11071))+(((-1.0)*x11066*x11073))+((x11066*x11069))+((x11070*x11072))+(((-1.0)*x11068))+(((-1.0)*x11069)));
j4eval[0]=x11075;
j4eval[1]=((IKabs((((cj5*x11070))+x11071+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11076=cj6*cj6;
IkReal x11077=cj5*cj5;
IkReal x11078=r10*r10;
IkReal x11079=r11*r11;
IkReal x11080=r12*r12;
IkReal x11081=(r10*sj6);
IkReal x11082=(r12*sj5);
IkReal x11083=((2.0)*cj6*r11);
IkReal x11084=(x11076*x11079);
IkReal x11085=(x11077*x11078);
CheckValue<IkReal> x11086=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x11082*x11083))+(((-1.0)*x11085))+(((-1.0)*x11080))+x11084+((x11081*x11083))+(((-1.0)*x11077*x11081*x11083))+(((-2.0)*cj5*x11081*x11082))+((x11076*x11085))+((x11077*x11080))+(((-1.0)*x11076*x11078))+(((-1.0)*x11077*x11084))+(((-1.0)*x11079)))),-1);
if(!x11086.valid){
continue;
}
CheckValue<IkReal> x11087 = IKatan2WithCheck(IkReal((x11082+((cj5*cj6*r11))+((cj5*x11081)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11086.value)))+(x11087.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11088=IKcos(j4);
IkReal x11089=IKsin(j4);
IkReal x11090=(cj5*sj6);
IkReal x11091=(cj5*r01);
IkReal x11092=(cj5*r21);
IkReal x11093=(cj5*cj6*r11);
IkReal x11094=((1.0)*x11089);
IkReal x11095=(cj6*x11088);
IkReal x11096=(sj5*x11088);
IkReal x11097=(cj6*x11089);
IkReal x11098=(sj5*x11094);
IkReal x11099=((1.0)*sj6*x11088);
evalcond[0]=(((r20*x11088*x11090))+((x11092*x11095))+((r20*x11097))+(((-1.0)*r21*sj6*x11094))+((r22*x11096)));
evalcond[1]=(((r12*x11096))+((x11088*x11093))+((r10*x11097))+(((-1.0)*r11*sj6*x11094))+((r10*x11088*x11090)));
evalcond[2]=((1.0)+((r00*x11088*x11090))+((r02*x11096))+(((-1.0)*r01*sj6*x11094))+((r00*x11097))+((x11091*x11095)));
evalcond[3]=((((-1.0)*r22*x11098))+(((-1.0)*r20*x11090*x11094))+((r20*x11095))+(((-1.0)*cj6*x11092*x11094))+(((-1.0)*r21*x11099)));
evalcond[4]=(((r00*x11095))+(((-1.0)*r02*x11098))+(((-1.0)*r01*x11099))+(((-1.0)*cj6*x11091*x11094))+(((-1.0)*r00*x11090*x11094)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x11090*x11094))+(((-1.0)*r12*x11098))+(((-1.0)*r11*x11099))+(((-1.0)*x11093*x11094))+((r10*x11095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11100=((1.0)*sj5);
CheckValue<IkReal> x11101=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x11100))+(((-1.0)*r10*sj6*x11100)))),-1);
if(!x11101.valid){
continue;
}
CheckValue<IkReal> x11102 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11101.value)))+(x11102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11103=IKcos(j4);
IkReal x11104=IKsin(j4);
IkReal x11105=(cj5*sj6);
IkReal x11106=(cj5*r01);
IkReal x11107=(cj5*r21);
IkReal x11108=(cj5*cj6*r11);
IkReal x11109=((1.0)*x11104);
IkReal x11110=(cj6*x11103);
IkReal x11111=(sj5*x11103);
IkReal x11112=(cj6*x11104);
IkReal x11113=(sj5*x11109);
IkReal x11114=((1.0)*sj6*x11103);
evalcond[0]=(((x11107*x11110))+((r20*x11103*x11105))+((r20*x11112))+((r22*x11111))+(((-1.0)*r21*sj6*x11109)));
evalcond[1]=((((-1.0)*r11*sj6*x11109))+((x11103*x11108))+((r10*x11112))+((r10*x11103*x11105))+((r12*x11111)));
evalcond[2]=((1.0)+((x11106*x11110))+((r02*x11111))+((r00*x11103*x11105))+(((-1.0)*r01*sj6*x11109))+((r00*x11112)));
evalcond[3]=((((-1.0)*r21*x11114))+(((-1.0)*cj6*x11107*x11109))+(((-1.0)*r22*x11113))+((r20*x11110))+(((-1.0)*r20*x11105*x11109)));
evalcond[4]=((((-1.0)*r02*x11113))+(((-1.0)*cj6*x11106*x11109))+(((-1.0)*r01*x11114))+(((-1.0)*r00*x11105*x11109))+((r00*x11110)));
evalcond[5]=((-1.0)+(((-1.0)*x11108*x11109))+(((-1.0)*r10*x11105*x11109))+((r10*x11110))+(((-1.0)*r12*x11113))+(((-1.0)*r11*x11114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11115=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11115.valid){
continue;
}
CheckValue<IkReal> x11116 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11115.value)))+(x11116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11117=IKcos(j4);
IkReal x11118=IKsin(j4);
IkReal x11119=(cj5*sj6);
IkReal x11120=(cj5*r01);
IkReal x11121=(cj5*r21);
IkReal x11122=(cj5*cj6*r11);
IkReal x11123=((1.0)*x11118);
IkReal x11124=(cj6*x11117);
IkReal x11125=(sj5*x11117);
IkReal x11126=(cj6*x11118);
IkReal x11127=(sj5*x11123);
IkReal x11128=((1.0)*sj6*x11117);
evalcond[0]=((((-1.0)*r21*sj6*x11123))+((r22*x11125))+((x11121*x11124))+((r20*x11117*x11119))+((r20*x11126)));
evalcond[1]=(((r10*x11117*x11119))+(((-1.0)*r11*sj6*x11123))+((x11117*x11122))+((r12*x11125))+((r10*x11126)));
evalcond[2]=((1.0)+((x11120*x11124))+((r02*x11125))+(((-1.0)*r01*sj6*x11123))+((r00*x11117*x11119))+((r00*x11126)));
evalcond[3]=((((-1.0)*r21*x11128))+(((-1.0)*cj6*x11121*x11123))+(((-1.0)*r22*x11127))+(((-1.0)*r20*x11119*x11123))+((r20*x11124)));
evalcond[4]=((((-1.0)*cj6*x11120*x11123))+(((-1.0)*r01*x11128))+(((-1.0)*r02*x11127))+((r00*x11124))+(((-1.0)*r00*x11119*x11123)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11127))+(((-1.0)*r11*x11128))+((r10*x11124))+(((-1.0)*x11122*x11123))+(((-1.0)*r10*x11119*x11123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11129=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x11129;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x11129);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11130=((1.0)*cj6);
IkReal x11131=(((cj5*r22))+(((-1.0)*r21*sj5*x11130))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x11131;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r10*x11130))+((r11*sj6))))));
j4eval[2]=IKsign(x11131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11132=r11*r11;
IkReal x11133=cj5*cj5;
IkReal x11134=cj6*cj6;
IkReal x11135=r10*r10;
IkReal x11136=r12*r12;
IkReal x11137=(r12*sj5);
IkReal x11138=(r11*sj6);
IkReal x11139=((1.0)*x11134);
IkReal x11140=(cj5*cj6*r11);
IkReal x11141=(cj5*r10*sj6);
IkReal x11142=((2.0)*cj6*r10);
IkReal x11143=(x11133*x11135);
IkReal x11144=(((x11133*x11138*x11142))+(((-1.0)*x11132*x11139))+((x11134*x11135))+(((-1.0)*x11139*x11143))+x11136+x11132+x11143+((x11132*x11133*x11134))+(((-1.0)*x11133*x11136))+(((2.0)*x11137*x11141))+(((2.0)*x11137*x11140))+(((-1.0)*x11138*x11142)));
j4eval[0]=x11144;
j4eval[1]=((IKabs(((((-1.0)*cj6*r10))+x11138)))+(IKabs((x11137+x11140+x11141))));
j4eval[2]=IKsign(x11144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11145=r11*r11;
IkReal x11146=cj5*cj5;
IkReal x11147=cj6*cj6;
IkReal x11148=r10*r10;
IkReal x11149=r12*r12;
IkReal x11150=(r10*sj6);
IkReal x11151=(r12*sj5);
IkReal x11152=((1.0)*x11147);
IkReal x11153=(cj5*cj6*r11);
IkReal x11154=((2.0)*cj6*r11);
IkReal x11155=(x11146*x11148);
CheckValue<IkReal> x11156=IKPowWithIntegerCheck(IKsign((((x11147*x11148))+((x11145*x11146*x11147))+(((-1.0)*x11150*x11154))+x11155+x11145+x11149+((x11146*x11150*x11154))+(((2.0)*cj5*x11150*x11151))+(((-1.0)*x11146*x11149))+(((-1.0)*x11145*x11152))+(((2.0)*x11151*x11153))+(((-1.0)*x11152*x11155)))),-1);
if(!x11156.valid){
continue;
}
CheckValue<IkReal> x11157 = IKatan2WithCheck(IkReal((x11153+x11151+((cj5*x11150)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11156.value)))+(x11157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11158=IKcos(j4);
IkReal x11159=IKsin(j4);
IkReal x11160=(cj5*sj6);
IkReal x11161=(cj5*r01);
IkReal x11162=(cj5*r21);
IkReal x11163=(cj5*cj6*r11);
IkReal x11164=((1.0)*x11159);
IkReal x11165=(cj6*x11158);
IkReal x11166=(sj5*x11158);
IkReal x11167=(cj6*x11159);
IkReal x11168=(sj5*x11164);
IkReal x11169=((1.0)*sj6*x11158);
evalcond[0]=(((r20*x11167))+(((-1.0)*r21*sj6*x11164))+((x11162*x11165))+((r22*x11166))+((r20*x11158*x11160)));
evalcond[1]=(((r12*x11166))+((x11158*x11163))+(((-1.0)*r11*sj6*x11164))+((r10*x11158*x11160))+((r10*x11167)));
evalcond[2]=((-1.0)+((x11161*x11165))+((r00*x11167))+(((-1.0)*r01*sj6*x11164))+((r00*x11158*x11160))+((r02*x11166)));
evalcond[3]=(((r20*x11165))+(((-1.0)*r22*x11168))+(((-1.0)*r21*x11169))+(((-1.0)*cj6*x11162*x11164))+(((-1.0)*r20*x11160*x11164)));
evalcond[4]=((((-1.0)*r01*x11169))+(((-1.0)*cj6*x11161*x11164))+((r00*x11165))+(((-1.0)*r00*x11160*x11164))+(((-1.0)*r02*x11168)));
evalcond[5]=((1.0)+(((-1.0)*x11163*x11164))+(((-1.0)*r11*x11169))+(((-1.0)*r12*x11168))+(((-1.0)*r10*x11160*x11164))+((r10*x11165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11170=((1.0)*cj6);
CheckValue<IkReal> x11171=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x11170))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x11171.valid){
continue;
}
CheckValue<IkReal> x11172 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*r10*x11170))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11171.value)))+(x11172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11173=IKcos(j4);
IkReal x11174=IKsin(j4);
IkReal x11175=(cj5*sj6);
IkReal x11176=(cj5*r01);
IkReal x11177=(cj5*r21);
IkReal x11178=(cj5*cj6*r11);
IkReal x11179=((1.0)*x11174);
IkReal x11180=(cj6*x11173);
IkReal x11181=(sj5*x11173);
IkReal x11182=(cj6*x11174);
IkReal x11183=(sj5*x11179);
IkReal x11184=((1.0)*sj6*x11173);
evalcond[0]=(((r20*x11182))+((x11177*x11180))+(((-1.0)*r21*sj6*x11179))+((r22*x11181))+((r20*x11173*x11175)));
evalcond[1]=(((x11173*x11178))+((r12*x11181))+(((-1.0)*r11*sj6*x11179))+((r10*x11173*x11175))+((r10*x11182)));
evalcond[2]=((-1.0)+((x11176*x11180))+(((-1.0)*r01*sj6*x11179))+((r00*x11182))+((r02*x11181))+((r00*x11173*x11175)));
evalcond[3]=(((r20*x11180))+(((-1.0)*r22*x11183))+(((-1.0)*cj6*x11177*x11179))+(((-1.0)*r20*x11175*x11179))+(((-1.0)*r21*x11184)));
evalcond[4]=((((-1.0)*r02*x11183))+(((-1.0)*cj6*x11176*x11179))+(((-1.0)*r01*x11184))+((r00*x11180))+(((-1.0)*r00*x11175*x11179)));
evalcond[5]=((1.0)+(((-1.0)*r11*x11184))+(((-1.0)*r12*x11183))+(((-1.0)*r10*x11175*x11179))+(((-1.0)*x11178*x11179))+((r10*x11180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11185=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x11185.valid){
continue;
}
CheckValue<IkReal> x11186 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11185.value)))+(x11186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11187=IKcos(j4);
IkReal x11188=IKsin(j4);
IkReal x11189=(cj5*sj6);
IkReal x11190=(cj5*r01);
IkReal x11191=(cj5*r21);
IkReal x11192=(cj5*cj6*r11);
IkReal x11193=((1.0)*x11188);
IkReal x11194=(cj6*x11187);
IkReal x11195=(sj5*x11187);
IkReal x11196=(cj6*x11188);
IkReal x11197=(sj5*x11193);
IkReal x11198=((1.0)*sj6*x11187);
evalcond[0]=(((r20*x11196))+((x11191*x11194))+((r22*x11195))+(((-1.0)*r21*sj6*x11193))+((r20*x11187*x11189)));
evalcond[1]=(((r12*x11195))+((r10*x11187*x11189))+(((-1.0)*r11*sj6*x11193))+((r10*x11196))+((x11187*x11192)));
evalcond[2]=((-1.0)+((x11190*x11194))+((r00*x11196))+(((-1.0)*r01*sj6*x11193))+((r00*x11187*x11189))+((r02*x11195)));
evalcond[3]=(((r20*x11194))+(((-1.0)*r22*x11197))+(((-1.0)*cj6*x11191*x11193))+(((-1.0)*r21*x11198))+(((-1.0)*r20*x11189*x11193)));
evalcond[4]=((((-1.0)*r00*x11189*x11193))+(((-1.0)*r02*x11197))+(((-1.0)*r01*x11198))+((r00*x11194))+(((-1.0)*cj6*x11190*x11193)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11197))+(((-1.0)*r11*x11198))+(((-1.0)*x11192*x11193))+((r10*x11194))+(((-1.0)*r10*x11189*x11193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11199=(cj0*cj6);
IkReal x11200=((1.0)*sj0);
IkReal x11201=(cj0*sj6);
IkReal x11202=(sj6*x11200);
CheckValue<IkReal> x11203=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11203.valid){
continue;
}
CheckValue<IkReal> x11204 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x11202))+((cj5*r11*x11199))+(((-1.0)*cj5*cj6*r01*x11200))+(((-1.0)*r02*sj5*x11200))+((cj0*r12*sj5))+((cj5*r10*x11201)))),IkReal((((cj6*r00*sj0))+(((-1.0)*r01*x11202))+((r11*x11201))+(((-1.0)*r10*x11199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11203.value)))+(x11204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11205=IKcos(j4);
IkReal x11206=IKsin(j4);
IkReal x11207=(cj5*sj6);
IkReal x11208=(cj5*r21);
IkReal x11209=(cj5*r01);
IkReal x11210=(cj5*cj6*r11);
IkReal x11211=((1.0)*x11206);
IkReal x11212=(cj6*x11205);
IkReal x11213=(sj5*x11205);
IkReal x11214=(cj6*x11206);
IkReal x11215=(sj5*x11211);
IkReal x11216=((1.0)*sj6*x11205);
evalcond[0]=(((r20*x11214))+((r20*x11205*x11207))+((x11208*x11212))+((r22*x11213))+(((-1.0)*r21*sj6*x11211)));
evalcond[1]=(((r02*x11213))+cj0+(((-1.0)*r01*sj6*x11211))+((r00*x11205*x11207))+((r00*x11214))+((x11209*x11212)));
evalcond[2]=((((-1.0)*r11*sj6*x11211))+sj0+((x11205*x11210))+((r10*x11205*x11207))+((r10*x11214))+((r12*x11213)));
evalcond[3]=(((r20*x11212))+(((-1.0)*r21*x11216))+(((-1.0)*cj6*x11208*x11211))+(((-1.0)*r20*x11207*x11211))+(((-1.0)*r22*x11215)));
evalcond[4]=(sj0+(((-1.0)*cj6*x11209*x11211))+(((-1.0)*r00*x11207*x11211))+(((-1.0)*r01*x11216))+((r00*x11212))+(((-1.0)*r02*x11215)));
evalcond[5]=((((-1.0)*r11*x11216))+(((-1.0)*r12*x11215))+((r10*x11212))+(((-1.0)*x11210*x11211))+(((-1.0)*cj0))+(((-1.0)*r10*x11207*x11211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11217=(cj0*r20);
IkReal x11218=((1.0)*cj6);
IkReal x11219=(cj0*r21);
CheckValue<IkReal> x11220 = IKatan2WithCheck(IkReal((((cj5*sj6*x11217))+((cj5*cj6*x11219))+((cj0*r22*sj5)))),IkReal((((sj6*x11219))+(((-1.0)*x11217*x11218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11220.valid){
continue;
}
CheckValue<IkReal> x11221=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11218)))),-1);
if(!x11221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11220.value)+(((1.5707963267949)*(x11221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11222=IKcos(j4);
IkReal x11223=IKsin(j4);
IkReal x11224=(cj5*sj6);
IkReal x11225=(cj5*r21);
IkReal x11226=(cj5*r01);
IkReal x11227=(cj5*cj6*r11);
IkReal x11228=((1.0)*x11223);
IkReal x11229=(cj6*x11222);
IkReal x11230=(sj5*x11222);
IkReal x11231=(cj6*x11223);
IkReal x11232=(sj5*x11228);
IkReal x11233=((1.0)*sj6*x11222);
evalcond[0]=(((r22*x11230))+((r20*x11222*x11224))+(((-1.0)*r21*sj6*x11228))+((r20*x11231))+((x11225*x11229)));
evalcond[1]=((((-1.0)*r01*sj6*x11228))+cj0+((r00*x11222*x11224))+((r02*x11230))+((x11226*x11229))+((r00*x11231)));
evalcond[2]=(sj0+(((-1.0)*r11*sj6*x11228))+((x11222*x11227))+((r12*x11230))+((r10*x11222*x11224))+((r10*x11231)));
evalcond[3]=((((-1.0)*r20*x11224*x11228))+((r20*x11229))+(((-1.0)*r21*x11233))+(((-1.0)*cj6*x11225*x11228))+(((-1.0)*r22*x11232)));
evalcond[4]=((((-1.0)*r02*x11232))+sj0+(((-1.0)*r01*x11233))+((r00*x11229))+(((-1.0)*r00*x11224*x11228))+(((-1.0)*cj6*x11226*x11228)));
evalcond[5]=((((-1.0)*r10*x11224*x11228))+((r10*x11229))+(((-1.0)*r12*x11232))+(((-1.0)*x11227*x11228))+(((-1.0)*r11*x11233))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11234=(r21*sj0);
IkReal x11235=(r20*sj0);
CheckValue<IkReal> x11236=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11236.valid){
continue;
}
CheckValue<IkReal> x11237 = IKatan2WithCheck(IkReal((((cj5*cj6*x11234))+((r22*sj0*sj5))+((cj5*sj6*x11235)))),IkReal((((sj6*x11234))+(((-1.0)*cj6*x11235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11236.value)))+(x11237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11238=IKcos(j4);
IkReal x11239=IKsin(j4);
IkReal x11240=(cj5*sj6);
IkReal x11241=(cj5*r21);
IkReal x11242=(cj5*r01);
IkReal x11243=(cj5*cj6*r11);
IkReal x11244=((1.0)*x11239);
IkReal x11245=(cj6*x11238);
IkReal x11246=(sj5*x11238);
IkReal x11247=(cj6*x11239);
IkReal x11248=(sj5*x11244);
IkReal x11249=((1.0)*sj6*x11238);
evalcond[0]=(((r22*x11246))+(((-1.0)*r21*sj6*x11244))+((r20*x11247))+((x11241*x11245))+((r20*x11238*x11240)));
evalcond[1]=(cj0+((x11242*x11245))+((r02*x11246))+(((-1.0)*r01*sj6*x11244))+((r00*x11238*x11240))+((r00*x11247)));
evalcond[2]=(((x11238*x11243))+sj0+((r10*x11238*x11240))+((r12*x11246))+(((-1.0)*r11*sj6*x11244))+((r10*x11247)));
evalcond[3]=(((r20*x11245))+(((-1.0)*r20*x11240*x11244))+(((-1.0)*r21*x11249))+(((-1.0)*r22*x11248))+(((-1.0)*cj6*x11241*x11244)));
evalcond[4]=((((-1.0)*r02*x11248))+sj0+(((-1.0)*r01*x11249))+(((-1.0)*cj6*x11242*x11244))+(((-1.0)*r00*x11240*x11244))+((r00*x11245)));
evalcond[5]=((((-1.0)*x11243*x11244))+(((-1.0)*r11*x11249))+((r10*x11245))+(((-1.0)*r12*x11248))+(((-1.0)*cj0))+(((-1.0)*r10*x11240*x11244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11250=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x11250))+(((-1.0)*cj6*r11*x11250)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x11250))+(((-1.0)*cj6*r01*x11250))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x11250))+(((-1.0)*cj6*r11*x11250))))+IKsqr(((((-1.0)*r00*sj6*x11250))+(((-1.0)*cj6*r01*x11250))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x11250))+(((-1.0)*cj6*r11*x11250))), ((((-1.0)*r00*sj6*x11250))+(((-1.0)*cj6*r01*x11250))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x11251=((1.0)*sj5);
evalcond[0]=(((cj5*r12))+(((-1.0)*r10*sj6*x11251))+(((-1.0)*cj6*r11*x11251))+(((-1.0)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*r00*sj6*x11251))+(((-1.0)*(IKcos(j0))))+(((-1.0)*cj6*r01*x11251))+((cj5*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11252=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11252;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11253=((1.0)*cj6);
IkReal x11254=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11253)));
j4eval[0]=x11254;
j4eval[1]=((IKabs((((r01*sj6))+(((-1.0)*r00*x11253)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x11254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11255=cj6*cj6;
IkReal x11256=r01*r01;
IkReal x11257=cj5*cj5;
IkReal x11258=r00*r00;
IkReal x11259=r02*r02;
IkReal x11260=(r02*sj5);
IkReal x11261=(r01*sj6);
IkReal x11262=(cj5*cj6*r01);
IkReal x11263=((2.0)*cj6*r00);
IkReal x11264=((1.0)*x11257);
IkReal x11265=(cj5*r00*sj6);
IkReal x11266=(x11255*x11258);
IkReal x11267=(x11255*x11256);
IkReal x11268=(((x11257*x11258))+((x11257*x11261*x11263))+(((-1.0)*x11267))+x11259+x11256+x11266+(((-1.0)*x11259*x11264))+(((-1.0)*x11261*x11263))+(((-1.0)*x11264*x11266))+(((2.0)*x11260*x11262))+(((2.0)*x11260*x11265))+((x11257*x11267)));
j4eval[0]=x11268;
j4eval[1]=((IKabs((((sj0*x11261))+(((-1.0)*cj6*r00*sj0)))))+(IKabs((((sj0*x11265))+((sj0*x11262))+((sj0*x11260))))));
j4eval[2]=IKsign(x11268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11269=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11269;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11270=((1.0)*cj6);
IkReal x11271=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11270)));
j4eval[0]=x11271;
j4eval[1]=((IKabs(((((-1.0)*r00*x11270))+((r01*sj6)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x11271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11272=cj6*cj6;
IkReal x11273=cj5*cj5;
IkReal x11274=r10*r10;
IkReal x11275=r11*r11;
IkReal x11276=r12*r12;
IkReal x11277=(r10*sj6);
IkReal x11278=(r12*sj5);
IkReal x11279=((2.0)*cj6*r11);
IkReal x11280=((1.0)*x11274);
IkReal x11281=(x11272*x11275);
IkReal x11282=(((x11273*x11276))+x11281+(((-1.0)*x11272*x11280))+(((-2.0)*cj5*x11277*x11278))+(((-1.0)*x11276))+(((-1.0)*x11275))+(((-1.0)*x11273*x11280))+((x11272*x11273*x11274))+(((-1.0)*x11273*x11281))+((x11277*x11279))+(((-1.0)*x11273*x11277*x11279))+(((-1.0)*cj5*x11278*x11279)));
j4eval[0]=x11282;
j4eval[1]=((IKabs((((cj5*x11277))+x11278+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11283=cj6*cj6;
IkReal x11284=cj5*cj5;
IkReal x11285=r10*r10;
IkReal x11286=r11*r11;
IkReal x11287=r12*r12;
IkReal x11288=(r10*sj6);
IkReal x11289=(r12*sj5);
IkReal x11290=((2.0)*cj6*r11);
IkReal x11291=(x11283*x11286);
IkReal x11292=(x11284*x11285);
CheckValue<IkReal> x11293 = IKatan2WithCheck(IkReal((x11289+((cj5*x11288))+((cj5*cj6*r11)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11293.valid){
continue;
}
CheckValue<IkReal> x11294=IKPowWithIntegerCheck(IKsign((((x11284*x11287))+x11291+(((-1.0)*x11287))+(((-1.0)*x11286))+((x11288*x11290))+(((-1.0)*cj5*x11289*x11290))+(((-1.0)*x11292))+(((-2.0)*cj5*x11288*x11289))+((x11283*x11292))+(((-1.0)*x11283*x11285))+(((-1.0)*x11284*x11291))+(((-1.0)*x11284*x11288*x11290)))),-1);
if(!x11294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11293.value)+(((1.5707963267949)*(x11294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11295=IKcos(j4);
IkReal x11296=IKsin(j4);
IkReal x11297=(cj5*sj6);
IkReal x11298=(cj5*r01);
IkReal x11299=(cj5*r21);
IkReal x11300=(cj5*cj6*r11);
IkReal x11301=((1.0)*x11296);
IkReal x11302=(cj6*x11295);
IkReal x11303=(sj5*x11295);
IkReal x11304=(cj6*x11296);
IkReal x11305=(sj5*x11301);
IkReal x11306=((1.0)*sj6*x11295);
evalcond[0]=(((r02*x11303))+((r00*x11295*x11297))+((r00*x11304))+(((-1.0)*r01*sj6*x11301))+((x11298*x11302)));
evalcond[1]=(((x11295*x11300))+(((-1.0)*r11*sj6*x11301))+((r12*x11303))+((r10*x11295*x11297))+((r10*x11304)));
evalcond[2]=((-1.0)+((r20*x11304))+(((-1.0)*r21*sj6*x11301))+((r20*x11295*x11297))+((x11299*x11302))+((r22*x11303)));
evalcond[3]=(((r20*x11302))+(((-1.0)*cj6*x11299*x11301))+(((-1.0)*r22*x11305))+(((-1.0)*r21*x11306))+(((-1.0)*r20*x11297*x11301)));
evalcond[4]=(((r00*x11302))+(((-1.0)*r02*x11305))+(((-1.0)*r01*x11306))+(((-1.0)*cj6*x11298*x11301))+(((-1.0)*r00*x11297*x11301)));
evalcond[5]=((-1.0)+((r10*x11302))+(((-1.0)*r11*x11306))+(((-1.0)*r12*x11305))+(((-1.0)*r10*x11297*x11301))+(((-1.0)*x11300*x11301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11307=((1.0)*cj6);
CheckValue<IkReal> x11308=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11307)))),-1);
if(!x11308.valid){
continue;
}
CheckValue<IkReal> x11309 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x11307)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11308.value)))+(x11309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11310=IKcos(j4);
IkReal x11311=IKsin(j4);
IkReal x11312=(cj5*sj6);
IkReal x11313=(cj5*r01);
IkReal x11314=(cj5*r21);
IkReal x11315=(cj5*cj6*r11);
IkReal x11316=((1.0)*x11311);
IkReal x11317=(cj6*x11310);
IkReal x11318=(sj5*x11310);
IkReal x11319=(cj6*x11311);
IkReal x11320=(sj5*x11316);
IkReal x11321=((1.0)*sj6*x11310);
evalcond[0]=((((-1.0)*r01*sj6*x11316))+((r02*x11318))+((r00*x11310*x11312))+((x11313*x11317))+((r00*x11319)));
evalcond[1]=((((-1.0)*r11*sj6*x11316))+((r10*x11310*x11312))+((r10*x11319))+((x11310*x11315))+((r12*x11318)));
evalcond[2]=((-1.0)+((r20*x11310*x11312))+((r22*x11318))+((x11314*x11317))+((r20*x11319))+(((-1.0)*r21*sj6*x11316)));
evalcond[3]=((((-1.0)*r20*x11312*x11316))+(((-1.0)*r22*x11320))+(((-1.0)*r21*x11321))+((r20*x11317))+(((-1.0)*cj6*x11314*x11316)));
evalcond[4]=((((-1.0)*r02*x11320))+(((-1.0)*cj6*x11313*x11316))+(((-1.0)*r00*x11312*x11316))+(((-1.0)*r01*x11321))+((r00*x11317)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11320))+(((-1.0)*r11*x11321))+((r10*x11317))+(((-1.0)*r10*x11312*x11316))+(((-1.0)*x11315*x11316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11322 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11322.valid){
continue;
}
CheckValue<IkReal> x11323=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11322.value)+(((1.5707963267949)*(x11323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11324=IKcos(j4);
IkReal x11325=IKsin(j4);
IkReal x11326=(cj5*sj6);
IkReal x11327=(cj5*r01);
IkReal x11328=(cj5*r21);
IkReal x11329=(cj5*cj6*r11);
IkReal x11330=((1.0)*x11325);
IkReal x11331=(cj6*x11324);
IkReal x11332=(sj5*x11324);
IkReal x11333=(cj6*x11325);
IkReal x11334=(sj5*x11330);
IkReal x11335=((1.0)*sj6*x11324);
evalcond[0]=(((x11327*x11331))+(((-1.0)*r01*sj6*x11330))+((r00*x11333))+((r02*x11332))+((r00*x11324*x11326)));
evalcond[1]=((((-1.0)*r11*sj6*x11330))+((r12*x11332))+((r10*x11324*x11326))+((r10*x11333))+((x11324*x11329)));
evalcond[2]=((-1.0)+((x11328*x11331))+((r20*x11333))+(((-1.0)*r21*sj6*x11330))+((r22*x11332))+((r20*x11324*x11326)));
evalcond[3]=((((-1.0)*r20*x11326*x11330))+(((-1.0)*r21*x11335))+(((-1.0)*r22*x11334))+((r20*x11331))+(((-1.0)*cj6*x11328*x11330)));
evalcond[4]=((((-1.0)*r01*x11335))+(((-1.0)*r00*x11326*x11330))+(((-1.0)*cj6*x11327*x11330))+((r00*x11331))+(((-1.0)*r02*x11334)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11334))+((r10*x11331))+(((-1.0)*r10*x11326*x11330))+(((-1.0)*r11*x11335))+(((-1.0)*x11329*x11330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11336=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11336;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11337=((1.0)*cj6);
IkReal x11338=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11337)));
j4eval[0]=x11338;
j4eval[1]=((IKabs((((r01*sj6))+(((-1.0)*r00*x11337)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x11338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11339=r11*r11;
IkReal x11340=cj5*cj5;
IkReal x11341=cj6*cj6;
IkReal x11342=r10*r10;
IkReal x11343=r12*r12;
IkReal x11344=(r12*sj5);
IkReal x11345=(r11*sj6);
IkReal x11346=((1.0)*x11341);
IkReal x11347=(cj5*cj6*r11);
IkReal x11348=(cj5*r10*sj6);
IkReal x11349=((2.0)*cj6*r10);
IkReal x11350=(x11340*x11342);
IkReal x11351=(((x11340*x11345*x11349))+x11350+x11343+x11339+(((-1.0)*x11346*x11350))+((x11341*x11342))+(((-1.0)*x11339*x11346))+(((-1.0)*x11345*x11349))+(((-1.0)*x11340*x11343))+(((2.0)*x11344*x11347))+(((2.0)*x11344*x11348))+((x11339*x11340*x11341)));
j4eval[0]=x11351;
j4eval[1]=((IKabs((x11345+(((-1.0)*cj6*r10)))))+(IKabs((x11347+x11344+x11348))));
j4eval[2]=IKsign(x11351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11352=r11*r11;
IkReal x11353=cj5*cj5;
IkReal x11354=cj6*cj6;
IkReal x11355=r10*r10;
IkReal x11356=r12*r12;
IkReal x11357=(r10*sj6);
IkReal x11358=(r12*sj5);
IkReal x11359=((1.0)*x11354);
IkReal x11360=(cj5*cj6*r11);
IkReal x11361=((2.0)*cj6*r11);
IkReal x11362=(x11353*x11355);
CheckValue<IkReal> x11363=IKPowWithIntegerCheck(IKsign((((x11352*x11353*x11354))+((x11353*x11357*x11361))+(((2.0)*x11358*x11360))+(((-1.0)*x11357*x11361))+x11352+x11356+x11362+(((-1.0)*x11353*x11356))+(((-1.0)*x11359*x11362))+((x11354*x11355))+(((2.0)*cj5*x11357*x11358))+(((-1.0)*x11352*x11359)))),-1);
if(!x11363.valid){
continue;
}
CheckValue<IkReal> x11364 = IKatan2WithCheck(IkReal((((cj5*x11357))+x11358+x11360)),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11363.value)))+(x11364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11365=IKcos(j4);
IkReal x11366=IKsin(j4);
IkReal x11367=(cj5*sj6);
IkReal x11368=(cj5*r01);
IkReal x11369=(cj5*r21);
IkReal x11370=(cj5*cj6*r11);
IkReal x11371=((1.0)*x11366);
IkReal x11372=(cj6*x11365);
IkReal x11373=(sj5*x11365);
IkReal x11374=(cj6*x11366);
IkReal x11375=(sj5*x11371);
IkReal x11376=((1.0)*sj6*x11365);
evalcond[0]=(((r00*x11374))+(((-1.0)*r01*sj6*x11371))+((r00*x11365*x11367))+((x11368*x11372))+((r02*x11373)));
evalcond[1]=(((r10*x11365*x11367))+(((-1.0)*r11*sj6*x11371))+((r10*x11374))+((r12*x11373))+((x11365*x11370)));
evalcond[2]=((-1.0)+((r20*x11374))+(((-1.0)*r21*sj6*x11371))+((r22*x11373))+((x11369*x11372))+((r20*x11365*x11367)));
evalcond[3]=(((r20*x11372))+(((-1.0)*r20*x11367*x11371))+(((-1.0)*r22*x11375))+(((-1.0)*cj6*x11369*x11371))+(((-1.0)*r21*x11376)));
evalcond[4]=(((r00*x11372))+(((-1.0)*r02*x11375))+(((-1.0)*r01*x11376))+(((-1.0)*cj6*x11368*x11371))+(((-1.0)*r00*x11367*x11371)));
evalcond[5]=((1.0)+(((-1.0)*x11370*x11371))+((r10*x11372))+(((-1.0)*r10*x11367*x11371))+(((-1.0)*r12*x11375))+(((-1.0)*r11*x11376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11377=((1.0)*cj6);
CheckValue<IkReal> x11378 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x11377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11378.valid){
continue;
}
CheckValue<IkReal> x11379=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11377)))),-1);
if(!x11379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11378.value)+(((1.5707963267949)*(x11379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11380=IKcos(j4);
IkReal x11381=IKsin(j4);
IkReal x11382=(cj5*sj6);
IkReal x11383=(cj5*r01);
IkReal x11384=(cj5*r21);
IkReal x11385=(cj5*cj6*r11);
IkReal x11386=((1.0)*x11381);
IkReal x11387=(cj6*x11380);
IkReal x11388=(sj5*x11380);
IkReal x11389=(cj6*x11381);
IkReal x11390=(sj5*x11386);
IkReal x11391=((1.0)*sj6*x11380);
evalcond[0]=(((r02*x11388))+((x11383*x11387))+((r00*x11389))+((r00*x11380*x11382))+(((-1.0)*r01*sj6*x11386)));
evalcond[1]=(((r10*x11389))+((r12*x11388))+(((-1.0)*r11*sj6*x11386))+((x11380*x11385))+((r10*x11380*x11382)));
evalcond[2]=((-1.0)+((r20*x11380*x11382))+((r20*x11389))+((x11384*x11387))+(((-1.0)*r21*sj6*x11386))+((r22*x11388)));
evalcond[3]=(((r20*x11387))+(((-1.0)*r20*x11382*x11386))+(((-1.0)*cj6*x11384*x11386))+(((-1.0)*r22*x11390))+(((-1.0)*r21*x11391)));
evalcond[4]=((((-1.0)*r00*x11382*x11386))+(((-1.0)*r02*x11390))+(((-1.0)*r01*x11391))+((r00*x11387))+(((-1.0)*cj6*x11383*x11386)));
evalcond[5]=((1.0)+((r10*x11387))+(((-1.0)*r10*x11382*x11386))+(((-1.0)*r12*x11390))+(((-1.0)*r11*x11391))+(((-1.0)*x11385*x11386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11392 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11392.valid){
continue;
}
CheckValue<IkReal> x11393=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11392.value)+(((1.5707963267949)*(x11393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11394=IKcos(j4);
IkReal x11395=IKsin(j4);
IkReal x11396=(cj5*sj6);
IkReal x11397=(cj5*r01);
IkReal x11398=(cj5*r21);
IkReal x11399=(cj5*cj6*r11);
IkReal x11400=((1.0)*x11395);
IkReal x11401=(cj6*x11394);
IkReal x11402=(sj5*x11394);
IkReal x11403=(cj6*x11395);
IkReal x11404=(sj5*x11400);
IkReal x11405=((1.0)*sj6*x11394);
evalcond[0]=((((-1.0)*r01*sj6*x11400))+((r00*x11394*x11396))+((r02*x11402))+((x11397*x11401))+((r00*x11403)));
evalcond[1]=(((r10*x11403))+((r12*x11402))+((x11394*x11399))+(((-1.0)*r11*sj6*x11400))+((r10*x11394*x11396)));
evalcond[2]=((-1.0)+((r22*x11402))+((r20*x11403))+((r20*x11394*x11396))+((x11398*x11401))+(((-1.0)*r21*sj6*x11400)));
evalcond[3]=((((-1.0)*r20*x11396*x11400))+(((-1.0)*cj6*x11398*x11400))+((r20*x11401))+(((-1.0)*r22*x11404))+(((-1.0)*r21*x11405)));
evalcond[4]=((((-1.0)*cj6*x11397*x11400))+(((-1.0)*r02*x11404))+(((-1.0)*r01*x11405))+(((-1.0)*r00*x11396*x11400))+((r00*x11401)));
evalcond[5]=((1.0)+(((-1.0)*r10*x11396*x11400))+((r10*x11401))+(((-1.0)*x11399*x11400))+(((-1.0)*r11*x11405))+(((-1.0)*r12*x11404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11406=cj6*cj6;
IkReal x11407=r01*r01;
IkReal x11408=cj5*cj5;
IkReal x11409=r00*r00;
IkReal x11410=r02*r02;
IkReal x11411=(r00*sj6);
IkReal x11412=(r02*sj5);
IkReal x11413=(r01*sj0);
IkReal x11414=((2.0)*cj6*r01);
IkReal x11415=((1.0)*x11408);
IkReal x11416=(x11406*x11409);
IkReal x11417=(x11406*x11407);
CheckValue<IkReal> x11418=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11410*x11415))+((x11408*x11409))+x11410+x11416+x11407+(((-1.0)*x11415*x11416))+((x11408*x11411*x11414))+(((-1.0)*x11417))+((x11408*x11417))+(((2.0)*cj5*x11411*x11412))+(((-1.0)*x11411*x11414))+((cj5*x11412*x11414)))),-1);
if(!x11418.valid){
continue;
}
CheckValue<IkReal> x11419 = IKatan2WithCheck(IkReal((((cj5*sj0*x11411))+((sj0*x11412))+((cj5*cj6*x11413)))),IkReal((((sj6*x11413))+(((-1.0)*cj6*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11418.value)))+(x11419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11420=IKcos(j4);
IkReal x11421=IKsin(j4);
IkReal x11422=(cj5*sj6);
IkReal x11423=(cj5*r01);
IkReal x11424=(cj5*r21);
IkReal x11425=(cj5*cj6*r11);
IkReal x11426=((1.0)*x11421);
IkReal x11427=(cj6*x11420);
IkReal x11428=(sj5*x11420);
IkReal x11429=(cj6*x11421);
IkReal x11430=(sj5*x11426);
IkReal x11431=((1.0)*sj6*x11420);
evalcond[0]=(((r02*x11428))+((r00*x11420*x11422))+((x11423*x11427))+(((-1.0)*r01*sj6*x11426))+((r00*x11429)));
evalcond[1]=(((r10*x11429))+(((-1.0)*r11*sj6*x11426))+((r10*x11420*x11422))+((r12*x11428))+((x11420*x11425)));
evalcond[2]=((-1.0)+((r20*x11429))+(((-1.0)*r21*sj6*x11426))+((r22*x11428))+((x11424*x11427))+((r20*x11420*x11422)));
evalcond[3]=(((r20*x11427))+(((-1.0)*cj6*x11424*x11426))+(((-1.0)*r20*x11422*x11426))+(((-1.0)*r21*x11431))+(((-1.0)*r22*x11430)));
evalcond[4]=((((-1.0)*r01*x11431))+sj0+(((-1.0)*r02*x11430))+(((-1.0)*cj6*x11423*x11426))+(((-1.0)*r00*x11422*x11426))+((r00*x11427)));
evalcond[5]=(((r10*x11427))+(((-1.0)*x11425*x11426))+(((-1.0)*r11*x11431))+(((-1.0)*r12*x11430))+(((-1.0)*r10*x11422*x11426))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11432=((1.0)*cj6);
CheckValue<IkReal> x11433 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x11432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11433.valid){
continue;
}
CheckValue<IkReal> x11434=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11432)))),-1);
if(!x11434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11433.value)+(((1.5707963267949)*(x11434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11435=IKcos(j4);
IkReal x11436=IKsin(j4);
IkReal x11437=(cj5*sj6);
IkReal x11438=(cj5*r01);
IkReal x11439=(cj5*r21);
IkReal x11440=(cj5*cj6*r11);
IkReal x11441=((1.0)*x11436);
IkReal x11442=(cj6*x11435);
IkReal x11443=(sj5*x11435);
IkReal x11444=(cj6*x11436);
IkReal x11445=(sj5*x11441);
IkReal x11446=((1.0)*sj6*x11435);
evalcond[0]=(((r00*x11444))+((x11438*x11442))+((r02*x11443))+(((-1.0)*r01*sj6*x11441))+((r00*x11435*x11437)));
evalcond[1]=(((r12*x11443))+(((-1.0)*r11*sj6*x11441))+((r10*x11444))+((r10*x11435*x11437))+((x11435*x11440)));
evalcond[2]=((-1.0)+(((-1.0)*r21*sj6*x11441))+((x11439*x11442))+((r22*x11443))+((r20*x11435*x11437))+((r20*x11444)));
evalcond[3]=((((-1.0)*r21*x11446))+(((-1.0)*r20*x11437*x11441))+(((-1.0)*r22*x11445))+((r20*x11442))+(((-1.0)*cj6*x11439*x11441)));
evalcond[4]=(((r00*x11442))+sj0+(((-1.0)*r01*x11446))+(((-1.0)*r00*x11437*x11441))+(((-1.0)*r02*x11445))+(((-1.0)*cj6*x11438*x11441)));
evalcond[5]=((((-1.0)*r11*x11446))+(((-1.0)*x11440*x11441))+(((-1.0)*r12*x11445))+((r10*x11442))+(((-1.0)*r10*x11437*x11441))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11447 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11447.valid){
continue;
}
CheckValue<IkReal> x11448=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11447.value)+(((1.5707963267949)*(x11448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11449=IKcos(j4);
IkReal x11450=IKsin(j4);
IkReal x11451=(cj5*sj6);
IkReal x11452=(cj5*r01);
IkReal x11453=(cj5*r21);
IkReal x11454=(cj5*cj6*r11);
IkReal x11455=((1.0)*x11450);
IkReal x11456=(cj6*x11449);
IkReal x11457=(sj5*x11449);
IkReal x11458=(cj6*x11450);
IkReal x11459=(sj5*x11455);
IkReal x11460=((1.0)*sj6*x11449);
evalcond[0]=(((r02*x11457))+((r00*x11449*x11451))+(((-1.0)*r01*sj6*x11455))+((x11452*x11456))+((r00*x11458)));
evalcond[1]=(((r10*x11458))+(((-1.0)*r11*sj6*x11455))+((x11449*x11454))+((r10*x11449*x11451))+((r12*x11457)));
evalcond[2]=((-1.0)+((r20*x11458))+((x11453*x11456))+(((-1.0)*r21*sj6*x11455))+((r22*x11457))+((r20*x11449*x11451)));
evalcond[3]=(((r20*x11456))+(((-1.0)*r21*x11460))+(((-1.0)*cj6*x11453*x11455))+(((-1.0)*r20*x11451*x11455))+(((-1.0)*r22*x11459)));
evalcond[4]=(sj0+(((-1.0)*r02*x11459))+(((-1.0)*cj6*x11452*x11455))+(((-1.0)*r00*x11451*x11455))+((r00*x11456))+(((-1.0)*r01*x11460)));
evalcond[5]=(((r10*x11456))+(((-1.0)*r10*x11451*x11455))+(((-1.0)*r11*x11460))+(((-1.0)*x11454*x11455))+(((-1.0)*r12*x11459))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11461=(cj2*sj1);
IkReal x11462=((364.42)*cj1);
IkReal x11463=((1000.0)*px);
IkReal x11464=(cj5*sj2);
IkReal x11465=(cj6*r01);
IkReal x11466=((69.0)*r12);
IkReal x11467=(sj5*sj6);
IkReal x11468=((69.0)*r10);
IkReal x11469=((374.29)*r00);
IkReal x11470=((374.29)*sj5);
IkReal x11471=((374.29)*r02);
IkReal x11472=((10.0)*r02*sj5);
IkReal x11473=((10.0)*r00*sj6);
IkReal x11474=(cj6*r11*sj5);
CheckValue<IkReal> x11475=IKPowWithIntegerCheck(IKsign(((-69.0)+(((69.0)*x11461))+((x11461*x11462))+(((69.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x11475.valid){
continue;
}
CheckValue<IkReal> x11476 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x11461*x11466))+(((-1.0)*x11464*x11471))+(((-1.0)*x11464*x11473))+(((-1.0)*x11462*x11474))+(((-69.0)*x11474))+((sj2*x11465*x11470))+(((-1.0)*sj2*x11472))+(((-10.0)*x11464*x11465))+((cj5*r12*x11462))+((sj2*x11463))+((cj5*x11466))+((sj2*x11467*x11469))+(((-1.0)*x11467*x11468))+((x11461*x11467*x11468))+(((69.0)*x11461*x11474))+(((-1.0)*r10*x11462*x11467)))),IkReal(((((-10.0)*cj5*x11461*x11465))+(((-69.0)*sj2*x11474))+(((-1.0)*cj5*x11461*x11471))+(((-1.0)*cj5*x11461*x11473))+(((-1.0)*sj2*x11467*x11468))+(((-1.0)*x11461*x11472))+((x11461*x11465*x11470))+((x11464*x11466))+((x11461*x11467*x11469))+((x11461*x11463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11476.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11475.value)))+(x11476.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x11477=IKsin(j0);
IkReal x11478=IKcos(j0);
IkReal x11479=((0.01)*cj5);
IkReal x11480=(cj6*r11);
IkReal x11481=(cj5*r12);
IkReal x11482=(r10*sj6);
IkReal x11483=((0.37429)*sj5);
IkReal x11484=((0.36442)*cj1);
IkReal x11485=((1.0)*sj5);
IkReal x11486=(r00*sj6);
IkReal x11487=(cj6*r01);
IkReal x11488=(cj2*sj1);
IkReal x11489=(cj5*r02);
IkReal x11490=((0.01)*sj5);
IkReal x11491=((0.069)*x11477);
IkReal x11492=((0.069)*x11478);
IkReal x11493=((1.0)*x11477);
evalcond[0]=(x11481+(((-1.0)*x11482*x11485))+(((-1.0)*x11480*x11485))+((sj2*x11478))+(((-1.0)*x11488*x11493)));
evalcond[1]=(x11489+(((-1.0)*x11478*x11488))+(((-1.0)*sj2*x11493))+(((-1.0)*x11485*x11487))+(((-1.0)*x11485*x11486)));
evalcond[2]=((((-1.0)*x11483*x11487))+(((-1.0)*x11483*x11486))+x11492+(((-1.0)*sj2*x11491))+((r02*x11490))+(((-1.0)*px))+((x11479*x11486))+((x11479*x11487))+(((0.37429)*x11489))+(((-1.0)*x11488*x11492))+((x11478*x11484)));
evalcond[3]=(((sj2*x11492))+x11491+(((-1.0)*x11482*x11483))+(((-1.0)*x11480*x11483))+((r12*x11490))+(((-1.0)*py))+((x11479*x11482))+((x11479*x11480))+(((0.37429)*x11481))+(((-1.0)*x11488*x11491))+((x11477*x11484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11494=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x11494;
j4eval[1]=IKsign(x11494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11495=((1.0)*sj5);
IkReal x11496=((((-1.0)*cj6*r01*x11495))+(((-1.0)*r00*sj6*x11495))+((cj5*r02)));
j4eval[0]=x11496;
j4eval[1]=IKsign(x11496);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11497=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x11497;
j4eval[1]=IKsign(x11497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11498=(cj1*sj0);
IkReal x11499=(cj0*cj1);
IkReal x11500=(cj5*cj6);
IkReal x11501=((1.0)*sj6);
CheckValue<IkReal> x11502=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11502.valid){
continue;
}
CheckValue<IkReal> x11503 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10*x11499*x11501))+((r01*x11498*x11500))+(((-1.0)*r12*sj5*x11499))+((r02*sj5*x11498))+(((-1.0)*r11*x11499*x11500))+((cj5*r00*sj6*x11498)))),IkReal((((cj6*r10*x11499))+(((-1.0)*r11*x11499*x11501))+(((-1.0)*cj6*r00*x11498))+((r01*sj6*x11498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11502.value)))+(x11503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11504=IKcos(j4);
IkReal x11505=IKsin(j4);
IkReal x11506=((1.0)*cj1);
IkReal x11507=(sj1*sj2);
IkReal x11508=(r10*sj6);
IkReal x11509=(r00*sj6);
IkReal x11510=((1.0)*sj6);
IkReal x11511=(r20*sj6);
IkReal x11512=(cj6*x11504);
IkReal x11513=(sj5*x11504);
IkReal x11514=(cj6*x11505);
IkReal x11515=(cj5*x11504);
IkReal x11516=(cj5*x11512);
IkReal x11517=((1.0)*sj5*x11505);
IkReal x11518=((1.0)*cj5*x11505);
evalcond[0]=(sj1+((r20*x11514))+((r22*x11513))+(((-1.0)*r21*x11505*x11510))+((r21*x11516))+((x11511*x11515)));
evalcond[1]=(((r01*x11516))+((x11509*x11515))+(((-1.0)*r01*x11505*x11510))+(((-1.0)*cj0*x11506))+((r02*x11513))+((r00*x11514)));
evalcond[2]=(((x11508*x11515))+(((-1.0)*sj0*x11506))+((r12*x11513))+((r10*x11514))+((r11*x11516))+(((-1.0)*r11*x11505*x11510)));
evalcond[3]=(((r20*x11512))+((cj1*sj2))+(((-1.0)*r22*x11517))+(((-1.0)*r21*x11504*x11510))+(((-1.0)*cj5*r21*x11514))+(((-1.0)*cj5*r20*x11505*x11510)));
evalcond[4]=(((cj0*cj2))+(((-1.0)*r11*x11504*x11510))+(((-1.0)*x11508*x11518))+(((-1.0)*r12*x11517))+(((-1.0)*cj5*r11*x11514))+((r10*x11512))+((sj0*x11507)));
evalcond[5]=((((-1.0)*x11509*x11518))+(((-1.0)*r01*x11504*x11510))+(((-1.0)*cj2*sj0))+(((-1.0)*r02*x11517))+(((-1.0)*cj5*r01*x11514))+((cj0*x11507))+((r00*x11512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11519=(sj1*sj6);
IkReal x11520=((1.0)*cj6);
IkReal x11521=(cj1*sj0);
IkReal x11522=(cj5*cj6);
IkReal x11523=(r20*x11521);
CheckValue<IkReal> x11524 = IKatan2WithCheck(IkReal((((r22*sj5*x11521))+((r12*sj1*sj5))+((r11*sj1*x11522))+((r21*x11521*x11522))+((cj5*r10*x11519))+((cj5*sj6*x11523)))),IkReal((((r21*sj6*x11521))+(((-1.0)*r10*sj1*x11520))+(((-1.0)*x11520*x11523))+((r11*x11519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11524.valid){
continue;
}
CheckValue<IkReal> x11525=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x11520))+((cj5*r02)))),-1);
if(!x11525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11524.value)+(((1.5707963267949)*(x11525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11526=IKcos(j4);
IkReal x11527=IKsin(j4);
IkReal x11528=((1.0)*cj1);
IkReal x11529=(sj1*sj2);
IkReal x11530=(r10*sj6);
IkReal x11531=(r00*sj6);
IkReal x11532=((1.0)*sj6);
IkReal x11533=(r20*sj6);
IkReal x11534=(cj6*x11526);
IkReal x11535=(sj5*x11526);
IkReal x11536=(cj6*x11527);
IkReal x11537=(cj5*x11526);
IkReal x11538=(cj5*x11534);
IkReal x11539=((1.0)*sj5*x11527);
IkReal x11540=((1.0)*cj5*x11527);
evalcond[0]=(((r22*x11535))+sj1+((r21*x11538))+((x11533*x11537))+((r20*x11536))+(((-1.0)*r21*x11527*x11532)));
evalcond[1]=((((-1.0)*r01*x11527*x11532))+((r01*x11538))+((x11531*x11537))+(((-1.0)*cj0*x11528))+((r00*x11536))+((r02*x11535)));
evalcond[2]=((((-1.0)*r11*x11527*x11532))+((r12*x11535))+((r11*x11538))+((r10*x11536))+((x11530*x11537))+(((-1.0)*sj0*x11528)));
evalcond[3]=((((-1.0)*cj5*r21*x11536))+((cj1*sj2))+(((-1.0)*r22*x11539))+((r20*x11534))+(((-1.0)*r21*x11526*x11532))+(((-1.0)*cj5*r20*x11527*x11532)));
evalcond[4]=((((-1.0)*cj5*r11*x11536))+(((-1.0)*r11*x11526*x11532))+(((-1.0)*r12*x11539))+((cj0*cj2))+((r10*x11534))+(((-1.0)*x11530*x11540))+((sj0*x11529)));
evalcond[5]=((((-1.0)*cj2*sj0))+(((-1.0)*x11531*x11540))+((r00*x11534))+(((-1.0)*cj5*r01*x11536))+(((-1.0)*r01*x11526*x11532))+((cj0*x11529))+(((-1.0)*r02*x11539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11541=(cj0*cj1);
IkReal x11542=(cj5*cj6);
IkReal x11543=(cj5*sj6);
IkReal x11544=(r00*sj1);
IkReal x11545=((1.0)*cj6);
IkReal x11546=(r01*sj1);
CheckValue<IkReal> x11547 = IKatan2WithCheck(IkReal((((r20*x11541*x11543))+((x11542*x11546))+((x11543*x11544))+((r21*x11541*x11542))+((r22*sj5*x11541))+((r02*sj1*sj5)))),IkReal((((sj6*x11546))+(((-1.0)*r20*x11541*x11545))+((r21*sj6*x11541))+(((-1.0)*x11544*x11545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11547.valid){
continue;
}
CheckValue<IkReal> x11548=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x11548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11547.value)+(((1.5707963267949)*(x11548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11549=IKcos(j4);
IkReal x11550=IKsin(j4);
IkReal x11551=((1.0)*cj1);
IkReal x11552=(sj1*sj2);
IkReal x11553=(r10*sj6);
IkReal x11554=(r00*sj6);
IkReal x11555=((1.0)*sj6);
IkReal x11556=(r20*sj6);
IkReal x11557=(cj6*x11549);
IkReal x11558=(sj5*x11549);
IkReal x11559=(cj6*x11550);
IkReal x11560=(cj5*x11549);
IkReal x11561=(cj5*x11557);
IkReal x11562=((1.0)*sj5*x11550);
IkReal x11563=((1.0)*cj5*x11550);
evalcond[0]=(sj1+((x11556*x11560))+(((-1.0)*r21*x11550*x11555))+((r22*x11558))+((r21*x11561))+((r20*x11559)));
evalcond[1]=(((r02*x11558))+((x11554*x11560))+((r01*x11561))+((r00*x11559))+(((-1.0)*cj0*x11551))+(((-1.0)*r01*x11550*x11555)));
evalcond[2]=(((r12*x11558))+(((-1.0)*sj0*x11551))+((r11*x11561))+((r10*x11559))+(((-1.0)*r11*x11550*x11555))+((x11553*x11560)));
evalcond[3]=((((-1.0)*cj5*r20*x11550*x11555))+(((-1.0)*cj5*r21*x11559))+((cj1*sj2))+(((-1.0)*r21*x11549*x11555))+(((-1.0)*r22*x11562))+((r20*x11557)));
evalcond[4]=(((cj0*cj2))+(((-1.0)*cj5*r11*x11559))+((r10*x11557))+(((-1.0)*r12*x11562))+((sj0*x11552))+(((-1.0)*x11553*x11563))+(((-1.0)*r11*x11549*x11555)));
evalcond[5]=((((-1.0)*r01*x11549*x11555))+(((-1.0)*cj5*r01*x11559))+(((-1.0)*cj2*sj0))+(((-1.0)*x11554*x11563))+((r00*x11557))+(((-1.0)*r02*x11562))+((cj0*x11552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11564=cj5*cj5;
IkReal x11565=cj6*cj6;
IkReal x11566=r22*r22;
IkReal x11567=r21*r21;
IkReal x11568=r20*r20;
IkReal x11569=(r21*sj1);
IkReal x11570=(cj5*cj6);
IkReal x11571=((1.0)*sj6);
IkReal x11572=(r22*sj5);
IkReal x11573=(cj1*sj2);
IkReal x11574=(cj5*r20);
IkReal x11575=(cj6*r20);
IkReal x11576=((1.0)*x11567);
IkReal x11577=(x11565*x11568);
IkReal x11578=((2.0)*r21*sj6*x11575);
CheckValue<IkReal> x11579 = IKatan2WithCheck(IkReal((((sj1*x11575))+(((-1.0)*r21*x11570*x11573))+(((-1.0)*x11569*x11571))+(((-1.0)*x11571*x11573*x11574))+(((-1.0)*x11572*x11573)))),IkReal((((sj1*x11572))+((x11573*x11575))+(((-1.0)*r21*x11571*x11573))+((sj1*sj6*x11574))+((x11569*x11570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11579.valid){
continue;
}
CheckValue<IkReal> x11580=IKPowWithIntegerCheck(IKsign((((x11564*x11566))+((x11564*x11577))+(((-1.0)*x11564*x11565*x11576))+x11578+((x11565*x11567))+(((-2.0)*sj6*x11572*x11574))+(((-1.0)*x11577))+(((-1.0)*x11566))+(((-1.0)*x11564*x11578))+(((-1.0)*x11576))+(((-2.0)*r21*x11570*x11572))+(((-1.0)*x11564*x11568)))),-1);
if(!x11580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11579.value)+(((1.5707963267949)*(x11580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x11581=IKcos(j4);
IkReal x11582=IKsin(j4);
IkReal x11583=(r22*sj5);
IkReal x11584=(cj6*r20);
IkReal x11585=((1.0)*r21*sj6);
IkReal x11586=((1.0)*x11582);
IkReal x11587=(cj5*cj6*r21);
IkReal x11588=(cj5*r20*sj6);
evalcond[0]=(sj1+((x11582*x11584))+((x11581*x11588))+((x11581*x11587))+((x11581*x11583))+(((-1.0)*x11582*x11585)));
evalcond[1]=((((-1.0)*x11583*x11586))+((cj1*sj2))+(((-1.0)*x11586*x11587))+(((-1.0)*x11586*x11588))+((x11581*x11584))+(((-1.0)*x11581*x11585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11589=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x11589;
j0eval[1]=IKsign(x11589);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11590=(sj2*sj5);
IkReal x11591=(r10*sj6);
IkReal x11592=(cj6*r11);
IkReal x11593=(cj5*r02);
IkReal x11594=(cj6*r01);
IkReal x11595=(r00*sj6);
IkReal x11596=(cj5*r12);
IkReal x11597=((1.0)*cj2*sj5);
if( IKabs(((((-1.0)*x11590*x11594))+(((-1.0)*x11590*x11595))+(((-1.0)*x11591*x11597))+(((-1.0)*x11592*x11597))+((cj2*x11596))+((sj2*x11593)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x11596))+(((-1.0)*x11594*x11597))+((x11590*x11591))+((x11590*x11592))+(((-1.0)*x11595*x11597))+((cj2*x11593)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11590*x11594))+(((-1.0)*x11590*x11595))+(((-1.0)*x11591*x11597))+(((-1.0)*x11592*x11597))+((cj2*x11596))+((sj2*x11593))))+IKsqr(((((-1.0)*sj2*x11596))+(((-1.0)*x11594*x11597))+((x11590*x11591))+((x11590*x11592))+(((-1.0)*x11595*x11597))+((cj2*x11593))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x11590*x11594))+(((-1.0)*x11590*x11595))+(((-1.0)*x11591*x11597))+(((-1.0)*x11592*x11597))+((cj2*x11596))+((sj2*x11593))), ((((-1.0)*sj2*x11596))+(((-1.0)*x11594*x11597))+((x11590*x11591))+((x11590*x11592))+(((-1.0)*x11595*x11597))+((cj2*x11593))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11598=IKcos(j0);
IkReal x11599=IKsin(j0);
IkReal x11600=((1.0)*sj4);
IkReal x11601=(cj5*r12);
IkReal x11602=((0.37429)*sj5);
IkReal x11603=(r10*sj6);
IkReal x11604=((0.069)*sj2);
IkReal x11605=(cj6*r01);
IkReal x11606=((0.01)*cj5);
IkReal x11607=(r12*sj5);
IkReal x11608=(r00*sj6);
IkReal x11609=((1.0)*sj5);
IkReal x11610=(r02*sj5);
IkReal x11611=(cj6*r11);
IkReal x11612=(cj4*cj6);
IkReal x11613=(cj5*r02);
IkReal x11614=(sj2*x11598);
IkReal x11615=(cj5*x11611);
IkReal x11616=(cj2*x11598);
IkReal x11617=((0.069)*x11599);
IkReal x11618=(sj2*x11599);
IkReal x11619=((1.0)*cj4*sj6);
IkReal x11620=((1.0)*cj2*x11599);
evalcond[0]=(x11614+x11601+(((-1.0)*x11603*x11609))+(((-1.0)*x11609*x11611))+(((-1.0)*x11620)));
evalcond[1]=((((-1.0)*x11608*x11609))+x11613+(((-1.0)*x11618))+(((-1.0)*x11616))+(((-1.0)*x11605*x11609)));
evalcond[2]=((((-1.0)*cj5*x11600*x11603))+x11616+x11618+(((-1.0)*r11*x11619))+(((-1.0)*x11600*x11615))+((r10*x11612))+(((-1.0)*x11600*x11607)));
evalcond[3]=((((-1.0)*cj5*x11600*x11605))+(((-1.0)*cj5*x11600*x11608))+x11614+(((-1.0)*x11600*x11610))+(((-1.0)*x11620))+(((-1.0)*r01*x11619))+((r00*x11612)));
evalcond[4]=((((-1.0)*x11602*x11608))+(((-1.0)*x11602*x11605))+(((-0.069)*x11616))+(((-1.0)*x11599*x11604))+((x11605*x11606))+(((-1.0)*px))+((x11606*x11608))+(((0.37429)*x11613))+(((0.069)*x11598))+(((0.01)*x11610)));
evalcond[5]=((((-1.0)*x11602*x11603))+x11617+(((-1.0)*cj2*x11617))+(((-1.0)*x11602*x11611))+((x11603*x11606))+(((0.37429)*x11601))+(((-1.0)*py))+((x11606*x11611))+(((0.01)*x11607))+((x11598*x11604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11621=((1.0)*sj2);
IkReal x11622=((1.0)*cj2*cj5);
IkReal x11623=(cj6*r11*sj5);
IkReal x11624=(cj6*r01*sj5);
IkReal x11625=(r00*sj5*sj6);
IkReal x11626=(r10*sj5*sj6);
if( IKabs(((((-1.0)*r12*x11622))+((cj2*x11626))+((cj2*x11623))+(((-1.0)*x11621*x11624))+(((-1.0)*x11621*x11625))+((cj5*r02*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12*x11621))+((cj2*x11625))+((cj2*x11624))+((sj2*x11623))+((sj2*x11626))+(((-1.0)*r02*x11622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x11622))+((cj2*x11626))+((cj2*x11623))+(((-1.0)*x11621*x11624))+(((-1.0)*x11621*x11625))+((cj5*r02*sj2))))+IKsqr(((((-1.0)*cj5*r12*x11621))+((cj2*x11625))+((cj2*x11624))+((sj2*x11623))+((sj2*x11626))+(((-1.0)*r02*x11622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x11622))+((cj2*x11626))+((cj2*x11623))+(((-1.0)*x11621*x11624))+(((-1.0)*x11621*x11625))+((cj5*r02*sj2))), ((((-1.0)*cj5*r12*x11621))+((cj2*x11625))+((cj2*x11624))+((sj2*x11623))+((sj2*x11626))+(((-1.0)*r02*x11622))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11627=IKcos(j0);
IkReal x11628=IKsin(j0);
IkReal x11629=((1.0)*sj4);
IkReal x11630=(cj5*r12);
IkReal x11631=((0.37429)*sj5);
IkReal x11632=(r10*sj6);
IkReal x11633=((0.069)*sj2);
IkReal x11634=(cj6*r01);
IkReal x11635=((0.01)*cj5);
IkReal x11636=(r12*sj5);
IkReal x11637=(r00*sj6);
IkReal x11638=((1.0)*sj5);
IkReal x11639=(r02*sj5);
IkReal x11640=(cj6*r11);
IkReal x11641=(cj4*cj6);
IkReal x11642=(cj5*r02);
IkReal x11643=(cj2*x11627);
IkReal x11644=(cj5*x11640);
IkReal x11645=((0.069)*x11628);
IkReal x11646=(sj2*x11627);
IkReal x11647=(cj2*x11628);
IkReal x11648=((1.0)*cj4*sj6);
IkReal x11649=((1.0)*sj2*x11628);
evalcond[0]=(x11630+x11647+x11646+(((-1.0)*x11638*x11640))+(((-1.0)*x11632*x11638)));
evalcond[1]=(x11643+x11642+(((-1.0)*x11637*x11638))+(((-1.0)*x11634*x11638))+(((-1.0)*x11649)));
evalcond[2]=((((-1.0)*r11*x11648))+(((-1.0)*x11629*x11644))+x11643+((r10*x11641))+(((-1.0)*cj5*x11629*x11632))+(((-1.0)*x11629*x11636))+(((-1.0)*x11649)));
evalcond[3]=((((-1.0)*x11647))+(((-1.0)*x11646))+(((-1.0)*r01*x11648))+(((-1.0)*cj5*x11629*x11637))+(((-1.0)*cj5*x11629*x11634))+((r00*x11641))+(((-1.0)*x11629*x11639)));
evalcond[4]=(((x11635*x11637))+(((-1.0)*x11628*x11633))+(((-1.0)*x11631*x11637))+(((-1.0)*x11631*x11634))+(((0.37429)*x11642))+(((-1.0)*px))+(((0.01)*x11639))+(((0.069)*x11643))+(((0.069)*x11627))+((x11634*x11635)));
evalcond[5]=(((x11635*x11640))+x11645+((cj2*x11645))+(((-1.0)*x11631*x11640))+(((-1.0)*x11631*x11632))+(((0.37429)*x11630))+(((-1.0)*py))+((x11627*x11633))+(((0.01)*x11636))+((x11632*x11635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11650=(sj5*sj6);
IkReal x11651=(cj6*sj5);
if( IKabs(((((-1.0)*r01*x11651))+(((-1.0)*r00*x11650))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x11651))+((r10*x11650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x11651))+(((-1.0)*r00*x11650))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x11651))+((r10*x11650))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x11651))+(((-1.0)*r00*x11650))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x11651))+((r10*x11650))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11652=IKcos(j0);
IkReal x11653=IKsin(j0);
IkReal x11654=((1.0)*sj4);
IkReal x11655=(cj5*r12);
IkReal x11656=((0.37429)*sj5);
IkReal x11657=(r10*sj6);
IkReal x11658=(r01*sj6);
IkReal x11659=((0.36442)*cj1);
IkReal x11660=(cj6*r01);
IkReal x11661=((0.01)*cj5);
IkReal x11662=(cj6*r10);
IkReal x11663=(r00*sj6);
IkReal x11664=((1.0)*sj5);
IkReal x11665=(r02*sj5);
IkReal x11666=(cj6*r11);
IkReal x11667=(r12*sj5);
IkReal x11668=(cj5*r02);
IkReal x11669=(cj4*cj5);
IkReal x11670=(cj6*r00);
IkReal x11671=((1.0)*cj4);
IkReal x11672=(r11*sj6);
IkReal x11673=((0.069)*x11653);
IkReal x11674=((0.069)*x11652);
IkReal x11675=(cj5*x11666);
IkReal x11676=((1.0)*x11653);
evalcond[0]=(x11652+x11655+(((-1.0)*x11664*x11666))+(((-1.0)*x11657*x11664)));
evalcond[1]=(x11668+(((-1.0)*x11663*x11664))+(((-1.0)*x11660*x11664))+(((-1.0)*x11676)));
evalcond[2]=(((cj4*x11665))+(((-1.0)*cj1*x11652))+(((-1.0)*x11654*x11658))+((x11660*x11669))+((x11663*x11669))+((sj4*x11670)));
evalcond[3]=(((cj4*x11667))+(((-1.0)*cj1*x11676))+((sj4*x11662))+((x11657*x11669))+(((-1.0)*x11654*x11672))+((x11666*x11669)));
evalcond[4]=((((-1.0)*x11654*x11667))+(((-1.0)*x11671*x11672))+((cj4*x11662))+(((-1.0)*cj5*x11654*x11657))+((sj1*x11653))+(((-1.0)*x11654*x11675)));
evalcond[5]=((((-1.0)*x11654*x11665))+((cj4*x11670))+((sj1*x11652))+(((-1.0)*x11658*x11671))+(((-1.0)*cj5*x11654*x11660))+(((-1.0)*cj5*x11654*x11663)));
evalcond[6]=(x11674+(((0.01)*x11665))+((x11652*x11659))+(((-1.0)*px))+((x11660*x11661))+(((0.37429)*x11668))+((x11661*x11663))+(((-1.0)*x11656*x11660))+(((-1.0)*x11656*x11663))+(((-1.0)*x11673)));
evalcond[7]=(x11673+x11674+(((0.01)*x11667))+((x11653*x11659))+(((-1.0)*x11656*x11657))+(((0.37429)*x11655))+(((-1.0)*py))+((x11657*x11661))+((x11661*x11666))+(((-1.0)*x11656*x11666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11677=(cj6*sj5);
IkReal x11678=(sj5*sj6);
if( IKabs((((r00*x11678))+((r01*x11677))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x11678))+((cj5*r12))+(((-1.0)*r11*x11677)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x11678))+((r01*x11677))+(((-1.0)*cj5*r02))))+IKsqr(((((-1.0)*r10*x11678))+((cj5*r12))+(((-1.0)*r11*x11677))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x11678))+((r01*x11677))+(((-1.0)*cj5*r02))), ((((-1.0)*r10*x11678))+((cj5*r12))+(((-1.0)*r11*x11677))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11679=IKcos(j0);
IkReal x11680=IKsin(j0);
IkReal x11681=((1.0)*sj4);
IkReal x11682=(cj5*r12);
IkReal x11683=((0.37429)*sj5);
IkReal x11684=(r10*sj6);
IkReal x11685=(r01*sj6);
IkReal x11686=((0.36442)*cj1);
IkReal x11687=(cj6*r01);
IkReal x11688=((0.01)*cj5);
IkReal x11689=(r12*sj5);
IkReal x11690=(cj6*r10);
IkReal x11691=(r00*sj6);
IkReal x11692=((1.0)*sj5);
IkReal x11693=(r02*sj5);
IkReal x11694=(cj6*r11);
IkReal x11695=(cj5*r02);
IkReal x11696=(cj4*cj5);
IkReal x11697=(cj6*r00);
IkReal x11698=((1.0)*cj4);
IkReal x11699=(r11*sj6);
IkReal x11700=((0.069)*x11680);
IkReal x11701=((0.069)*x11679);
IkReal x11702=(cj5*x11694);
IkReal x11703=((1.0)*x11679);
IkReal x11704=((1.0)*x11680);
evalcond[0]=(x11680+x11695+(((-1.0)*x11687*x11692))+(((-1.0)*x11691*x11692)));
evalcond[1]=(x11682+(((-1.0)*x11703))+(((-1.0)*x11692*x11694))+(((-1.0)*x11684*x11692)));
evalcond[2]=(((x11691*x11696))+((cj4*x11693))+((x11687*x11696))+(((-1.0)*x11681*x11685))+(((-1.0)*cj1*x11703))+((sj4*x11697)));
evalcond[3]=(((x11684*x11696))+((x11694*x11696))+(((-1.0)*cj1*x11704))+((sj4*x11690))+((cj4*x11689))+(((-1.0)*x11681*x11699)));
evalcond[4]=(((cj4*x11690))+(((-1.0)*x11681*x11689))+(((-1.0)*cj5*x11681*x11684))+(((-1.0)*sj1*x11704))+(((-1.0)*x11698*x11699))+(((-1.0)*x11681*x11702)));
evalcond[5]=((((-1.0)*x11685*x11698))+((cj4*x11697))+(((-1.0)*cj5*x11681*x11691))+(((-1.0)*cj5*x11681*x11687))+(((-1.0)*sj1*x11703))+(((-1.0)*x11681*x11693)));
evalcond[6]=(x11700+x11701+(((0.01)*x11693))+(((-1.0)*px))+(((-1.0)*x11683*x11691))+((x11679*x11686))+((x11688*x11691))+(((-1.0)*x11683*x11687))+(((0.37429)*x11695))+((x11687*x11688)));
evalcond[7]=(x11700+(((0.37429)*x11682))+((x11680*x11686))+(((0.01)*x11689))+(((-1.0)*x11701))+(((-1.0)*py))+((x11684*x11688))+(((-1.0)*x11683*x11694))+((x11688*x11694))+(((-1.0)*x11683*x11684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x11705=(sj5*sj6);
IkReal x11706=(cj6*sj5);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs(((((-1.0)*cj5*r12))+((r10*x11705))+((r11*x11706)))))+(IKabs(((((-1.0)*r01*x11706))+(((-1.0)*r00*x11705))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11707=(sj5*sj6);
IkReal x11708=(cj6*sj5);
if( IKabs(((((-1.0)*r01*x11708))+(((-1.0)*r00*x11707))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x11707))+((r11*x11708)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x11708))+(((-1.0)*r00*x11707))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x11707))+((r11*x11708))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x11708))+(((-1.0)*r00*x11707))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x11707))+((r11*x11708))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11709=IKcos(j0);
IkReal x11710=IKsin(j0);
IkReal x11711=((0.01)*cj5);
IkReal x11712=(cj6*r11);
IkReal x11713=(cj5*r12);
IkReal x11714=(r10*sj6);
IkReal x11715=((0.37429)*sj5);
IkReal x11716=((1.0)*r01);
IkReal x11717=(sj4*sj6);
IkReal x11718=(cj6*sj4);
IkReal x11719=(r00*sj6);
IkReal x11720=((1.0)*sj5);
IkReal x11721=(cj4*sj5);
IkReal x11722=(cj6*r01);
IkReal x11723=(cj5*r02);
IkReal x11724=(cj4*cj5);
IkReal x11725=((0.01)*sj5);
IkReal x11726=((1.0)*x11710);
evalcond[0]=((((-1.0)*x11714*x11720))+x11713+x11709+(((-1.0)*x11712*x11720)));
evalcond[1]=(x11723+(((-1.0)*x11726))+(((-1.0)*cj6*sj5*x11716))+(((-1.0)*x11719*x11720)));
evalcond[2]=(((r00*x11718))+((x11719*x11724))+((r02*x11721))+(((-1.0)*x11709))+((x11722*x11724))+(((-1.0)*x11716*x11717)));
evalcond[3]=(((r12*x11721))+(((-1.0)*x11726))+(((-1.0)*r11*x11717))+((x11712*x11724))+((r10*x11718))+((x11714*x11724)));
evalcond[4]=((((0.43342)*x11709))+(((-1.0)*x11715*x11719))+(((-1.0)*x11715*x11722))+(((-0.069)*x11710))+((r02*x11725))+(((-1.0)*px))+((x11711*x11719))+((x11711*x11722))+(((0.37429)*x11723)));
evalcond[5]=(((r12*x11725))+(((-1.0)*x11712*x11715))+(((-1.0)*py))+(((0.069)*x11709))+(((0.43342)*x11710))+((x11711*x11712))+((x11711*x11714))+(((0.37429)*x11713))+(((-1.0)*x11714*x11715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11727=(cj6*sj5);
IkReal x11728=(sj5*sj6);
if( IKabs((((r00*x11728))+((r01*x11727))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x11727))+(((-1.0)*r10*x11728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x11728))+((r01*x11727))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x11727))+(((-1.0)*r10*x11728))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x11728))+((r01*x11727))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r11*x11727))+(((-1.0)*r10*x11728))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11729=IKsin(j0);
IkReal x11730=IKcos(j0);
IkReal x11731=((0.01)*cj5);
IkReal x11732=(cj6*r11);
IkReal x11733=(cj5*r12);
IkReal x11734=(r10*sj6);
IkReal x11735=((0.37429)*sj5);
IkReal x11736=((1.0)*r01);
IkReal x11737=(sj4*sj6);
IkReal x11738=(cj6*sj4);
IkReal x11739=(r00*sj6);
IkReal x11740=((1.0)*sj5);
IkReal x11741=(cj4*sj5);
IkReal x11742=(cj6*r01);
IkReal x11743=(cj5*r02);
IkReal x11744=(cj4*cj5);
IkReal x11745=((0.01)*sj5);
IkReal x11746=((1.0)*x11730);
evalcond[0]=(x11743+x11729+(((-1.0)*x11739*x11740))+(((-1.0)*cj6*sj5*x11736)));
evalcond[1]=(x11733+(((-1.0)*x11746))+(((-1.0)*x11732*x11740))+(((-1.0)*x11734*x11740)));
evalcond[2]=(((r00*x11738))+(((-1.0)*x11746))+((r02*x11741))+((x11742*x11744))+(((-1.0)*x11736*x11737))+((x11739*x11744)));
evalcond[3]=(((x11734*x11744))+(((-1.0)*r11*x11737))+(((-1.0)*x11729))+((r10*x11738))+((x11732*x11744))+((r12*x11741)));
evalcond[4]=((((0.37429)*x11743))+(((-1.0)*px))+((r02*x11745))+(((0.069)*x11729))+((x11731*x11742))+(((0.43342)*x11730))+((x11731*x11739))+(((-1.0)*x11735*x11739))+(((-1.0)*x11735*x11742)));
evalcond[5]=((((-1.0)*x11734*x11735))+(((-1.0)*py))+(((0.43342)*x11729))+(((-0.069)*x11730))+(((-1.0)*x11732*x11735))+((x11731*x11734))+((x11731*x11732))+((r12*x11745))+(((0.37429)*x11733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11747=(cj6*sj4);
IkReal x11748=(cj4*sj5);
IkReal x11749=(cj4*cj5*cj6);
IkReal x11750=((1.0)*sj4*sj6);
IkReal x11751=(cj4*cj5*sj6);
if( IKabs(((((-1.0)*r11*x11750))+((r10*x11751))+((r10*x11747))+((r12*x11748))+((r11*x11749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x11747))+((r01*x11749))+((r02*x11748))+(((-1.0)*r01*x11750))+((r00*x11751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x11750))+((r10*x11751))+((r10*x11747))+((r12*x11748))+((r11*x11749))))+IKsqr((((r00*x11747))+((r01*x11749))+((r02*x11748))+(((-1.0)*r01*x11750))+((r00*x11751))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x11750))+((r10*x11751))+((r10*x11747))+((r12*x11748))+((r11*x11749))), (((r00*x11747))+((r01*x11749))+((r02*x11748))+(((-1.0)*r01*x11750))+((r00*x11751))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11752=IKcos(j0);
IkReal x11753=IKsin(j0);
IkReal x11754=((1.0)*sj4);
IkReal x11755=(cj6*sj4);
IkReal x11756=(r10*sj6);
IkReal x11757=((0.37429)*sj5);
IkReal x11758=(r01*sj6);
IkReal x11759=((0.37429)*cj5);
IkReal x11760=((0.01)*cj5);
IkReal x11761=(r12*sj5);
IkReal x11762=(r00*sj6);
IkReal x11763=(r02*sj5);
IkReal x11764=(cj4*cj6);
IkReal x11765=(cj4*cj5);
IkReal x11766=((1.0)*cj4);
IkReal x11767=(r11*sj6);
IkReal x11768=((1.0)*x11753);
IkReal x11769=(cj5*cj6*r11);
IkReal x11770=(cj5*cj6*r01);
evalcond[0]=(((x11762*x11765))+((cj5*r01*x11764))+(((-1.0)*x11754*x11758))+((cj4*x11763))+(((-1.0)*x11752))+((r00*x11755)));
evalcond[1]=(((cj5*r11*x11764))+(((-1.0)*x11754*x11767))+((r10*x11755))+((cj4*x11761))+(((-1.0)*x11768))+((x11756*x11765)));
evalcond[2]=(x11752+(((-1.0)*x11754*x11769))+(((-1.0)*x11754*x11761))+((r10*x11764))+(((-1.0)*x11766*x11767))+(((-1.0)*cj5*x11754*x11756)));
evalcond[3]=((((-1.0)*x11754*x11763))+(((-1.0)*x11754*x11770))+(((-1.0)*cj5*x11754*x11762))+(((-1.0)*x11758*x11766))+(((-1.0)*x11768))+((r00*x11764)));
evalcond[4]=((((0.43342)*x11752))+((r02*x11759))+(((-1.0)*px))+(((-1.0)*x11757*x11762))+(((-1.0)*cj6*r01*x11757))+((cj6*r01*x11760))+(((0.01)*x11763))+((x11760*x11762)));
evalcond[5]=(((cj6*r11*x11760))+(((-1.0)*cj6*r11*x11757))+((r12*x11759))+(((0.43342)*x11753))+(((-1.0)*py))+(((-1.0)*x11756*x11757))+(((0.01)*x11761))+((x11756*x11760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11771=(cj6*sj4);
IkReal x11772=(cj4*sj5);
IkReal x11773=(cj4*cj5*cj6);
IkReal x11774=((1.0)*sj4*sj6);
IkReal x11775=(cj4*cj5*sj6);
if( IKabs((((r10*x11771))+((r10*x11775))+((r12*x11772))+(((-1.0)*r11*x11774))+((r11*x11773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x11772))+(((-1.0)*r01*x11774))+((r01*x11773))+((r00*x11771))+((r00*x11775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x11771))+((r10*x11775))+((r12*x11772))+(((-1.0)*r11*x11774))+((r11*x11773))))+IKsqr((((r02*x11772))+(((-1.0)*r01*x11774))+((r01*x11773))+((r00*x11771))+((r00*x11775))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x11771))+((r10*x11775))+((r12*x11772))+(((-1.0)*r11*x11774))+((r11*x11773))), (((r02*x11772))+(((-1.0)*r01*x11774))+((r01*x11773))+((r00*x11771))+((r00*x11775))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11776=IKsin(j0);
IkReal x11777=IKcos(j0);
IkReal x11778=((1.0)*sj4);
IkReal x11779=(cj6*sj4);
IkReal x11780=(r10*sj6);
IkReal x11781=((0.37429)*sj5);
IkReal x11782=(r01*sj6);
IkReal x11783=((0.37429)*cj5);
IkReal x11784=((0.01)*cj5);
IkReal x11785=(r12*sj5);
IkReal x11786=(r00*sj6);
IkReal x11787=(r02*sj5);
IkReal x11788=(cj4*cj6);
IkReal x11789=(cj4*cj5);
IkReal x11790=((1.0)*cj4);
IkReal x11791=(r11*sj6);
IkReal x11792=((1.0)*x11777);
IkReal x11793=(cj5*cj6*r11);
IkReal x11794=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*x11778*x11782))+((cj4*x11787))+((cj5*r01*x11788))+((r00*x11779))+((x11786*x11789))+(((-1.0)*x11792)));
evalcond[1]=(((r10*x11779))+(((-1.0)*x11778*x11791))+((x11780*x11789))+((cj4*x11785))+(((-1.0)*x11776))+((cj5*r11*x11788)));
evalcond[2]=((((-1.0)*x11782*x11790))+x11776+(((-1.0)*x11778*x11787))+(((-1.0)*x11778*x11794))+(((-1.0)*cj5*x11778*x11786))+((r00*x11788)));
evalcond[3]=((((-1.0)*x11778*x11785))+(((-1.0)*x11778*x11793))+((r10*x11788))+(((-1.0)*cj5*x11778*x11780))+(((-1.0)*x11792))+(((-1.0)*x11790*x11791)));
evalcond[4]=(((x11784*x11786))+(((-1.0)*cj6*r01*x11781))+((r02*x11783))+(((0.43342)*x11777))+(((-1.0)*px))+(((-1.0)*x11781*x11786))+(((0.01)*x11787))+((cj6*r01*x11784)));
evalcond[5]=(((x11780*x11784))+((r12*x11783))+(((0.43342)*x11776))+(((-1.0)*py))+(((-1.0)*x11780*x11781))+(((-1.0)*cj6*r11*x11781))+(((0.01)*x11785))+((cj6*r11*x11784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11795=((1.0)*sj6);
IkReal x11796=(cj5*sj4);
CheckValue<IkReal> x11797=IKPowWithIntegerCheck(cj2,-1);
if(!x11797.valid){
continue;
}
CheckValue<IkReal> x11798=IKPowWithIntegerCheck(sj2,-1);
if(!x11798.valid){
continue;
}
if( IKabs(((x11797.value)*(((((-1.0)*cj6*r01*x11796))+(((-1.0)*cj4*r01*x11795))+(((-1.0)*r00*x11795*x11796))+((cj4*cj6*r00))+(((-1.0)*r02*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11798.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11797.value)*(((((-1.0)*cj6*r01*x11796))+(((-1.0)*cj4*r01*x11795))+(((-1.0)*r00*x11795*x11796))+((cj4*cj6*r00))+(((-1.0)*r02*sj4*sj5))))))+IKsqr(((x11798.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x11797.value)*(((((-1.0)*cj6*r01*x11796))+(((-1.0)*cj4*r01*x11795))+(((-1.0)*r00*x11795*x11796))+((cj4*cj6*r00))+(((-1.0)*r02*sj4*sj5))))), ((x11798.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11799=IKcos(j0);
IkReal x11800=IKsin(j0);
IkReal x11801=((1.0)*sj4);
IkReal x11802=(cj5*r12);
IkReal x11803=((0.37429)*sj5);
IkReal x11804=(r10*sj6);
IkReal x11805=(r01*sj6);
IkReal x11806=((0.069)*sj2);
IkReal x11807=(cj6*r01);
IkReal x11808=((0.01)*cj5);
IkReal x11809=(r12*sj5);
IkReal x11810=(cj6*r10);
IkReal x11811=(r00*sj6);
IkReal x11812=((1.0)*sj5);
IkReal x11813=(r02*sj5);
IkReal x11814=(cj6*r11);
IkReal x11815=(cj5*r02);
IkReal x11816=(cj4*cj5);
IkReal x11817=(cj6*r00);
IkReal x11818=((1.0)*cj4);
IkReal x11819=(r11*sj6);
IkReal x11820=(cj5*x11814);
IkReal x11821=((1.0)*x11800);
evalcond[0]=((((-1.0)*x11812*x11814))+(((-1.0)*x11804*x11812))+((sj2*x11799))+x11802);
evalcond[1]=((((-1.0)*sj2*x11821))+(((-1.0)*x11807*x11812))+(((-1.0)*x11811*x11812))+x11815);
evalcond[2]=(((sj4*x11817))+(((-1.0)*x11799))+((cj4*x11813))+((x11811*x11816))+((x11807*x11816))+(((-1.0)*x11801*x11805)));
evalcond[3]=(((sj4*x11810))+((x11814*x11816))+((cj4*x11809))+(((-1.0)*x11801*x11819))+((x11804*x11816))+(((-1.0)*x11821)));
evalcond[4]=((((-1.0)*x11818*x11819))+((cj4*x11810))+(((-1.0)*cj5*x11801*x11804))+(((-1.0)*x11801*x11820))+((cj2*x11799))+(((-1.0)*x11801*x11809)));
evalcond[5]=((((-1.0)*x11805*x11818))+((cj4*x11817))+(((-1.0)*cj5*x11801*x11811))+(((-1.0)*cj5*x11801*x11807))+(((-1.0)*x11801*x11813))+(((-1.0)*cj2*x11821)));
evalcond[6]=(((x11807*x11808))+(((0.01)*x11813))+(((-1.0)*x11803*x11807))+(((0.37429)*x11815))+((x11808*x11811))+(((-1.0)*px))+(((0.43342)*x11799))+(((-1.0)*x11800*x11806))+(((-1.0)*x11803*x11811)));
evalcond[7]=(((x11804*x11808))+(((-1.0)*x11803*x11804))+(((0.37429)*x11802))+((x11799*x11806))+((x11808*x11814))+(((0.01)*x11809))+(((-1.0)*py))+(((0.43342)*x11800))+(((-1.0)*x11803*x11814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11822=(cj6*r11);
IkReal x11823=(cj4*cj5);
IkReal x11824=(r10*sj6);
CheckValue<IkReal> x11825=IKPowWithIntegerCheck(sj2,-1);
if(!x11825.valid){
continue;
}
if( IKabs((((x11823*x11824))+((cj6*r10*sj4))+((x11822*x11823))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11825.value)*(((((-1.0)*cj5*r12))+((sj5*x11824))+((sj5*x11822)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x11823*x11824))+((cj6*r10*sj4))+((x11822*x11823))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))+IKsqr(((x11825.value)*(((((-1.0)*cj5*r12))+((sj5*x11824))+((sj5*x11822))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x11823*x11824))+((cj6*r10*sj4))+((x11822*x11823))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))), ((x11825.value)*(((((-1.0)*cj5*r12))+((sj5*x11824))+((sj5*x11822))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11826=IKcos(j0);
IkReal x11827=IKsin(j0);
IkReal x11828=((1.0)*sj4);
IkReal x11829=(cj5*r12);
IkReal x11830=((0.37429)*sj5);
IkReal x11831=(r10*sj6);
IkReal x11832=(r01*sj6);
IkReal x11833=((0.069)*sj2);
IkReal x11834=(cj6*r01);
IkReal x11835=((0.01)*cj5);
IkReal x11836=(r12*sj5);
IkReal x11837=(cj6*r10);
IkReal x11838=(r00*sj6);
IkReal x11839=((1.0)*sj5);
IkReal x11840=(r02*sj5);
IkReal x11841=(cj6*r11);
IkReal x11842=(cj5*r02);
IkReal x11843=(cj4*cj5);
IkReal x11844=(cj6*r00);
IkReal x11845=((1.0)*cj4);
IkReal x11846=(r11*sj6);
IkReal x11847=(cj5*x11841);
IkReal x11848=((1.0)*x11827);
evalcond[0]=((((-1.0)*x11831*x11839))+(((-1.0)*x11839*x11841))+((sj2*x11826))+x11829);
evalcond[1]=((((-1.0)*sj2*x11848))+(((-1.0)*x11834*x11839))+(((-1.0)*x11838*x11839))+x11842);
evalcond[2]=(((cj4*x11840))+((x11838*x11843))+((x11834*x11843))+(((-1.0)*x11826))+((sj4*x11844))+(((-1.0)*x11828*x11832)));
evalcond[3]=(((x11841*x11843))+(((-1.0)*x11848))+((x11831*x11843))+((cj4*x11836))+(((-1.0)*x11828*x11846))+((sj4*x11837)));
evalcond[4]=((((-1.0)*x11845*x11846))+((cj2*x11826))+(((-1.0)*cj5*x11828*x11831))+((cj4*x11837))+(((-1.0)*x11828*x11836))+(((-1.0)*x11828*x11847)));
evalcond[5]=(((cj4*x11844))+(((-1.0)*cj5*x11828*x11838))+(((-1.0)*cj5*x11828*x11834))+(((-1.0)*x11832*x11845))+(((-1.0)*cj2*x11848))+(((-1.0)*x11828*x11840)));
evalcond[6]=((((-1.0)*x11830*x11838))+(((-1.0)*x11830*x11834))+(((0.01)*x11840))+(((-1.0)*x11827*x11833))+(((-1.0)*px))+((x11835*x11838))+(((0.37429)*x11842))+((x11834*x11835))+(((0.43342)*x11826)));
evalcond[7]=(((x11835*x11841))+(((-1.0)*x11830*x11831))+(((0.37429)*x11829))+(((0.01)*x11836))+(((-1.0)*py))+(((-1.0)*x11830*x11841))+((x11831*x11835))+((x11826*x11833))+(((0.43342)*x11827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11849=(sj5*sj6);
IkReal x11850=(cj6*sj5);
CheckValue<IkReal> x11851=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x11851.valid){
continue;
}
CheckValue<IkReal> x11852 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x11850))+(((-1.0)*r00*x11849))+((cj5*r02)))),IkReal(((((-1.0)*cj5*r12))+((r11*x11850))+((r10*x11849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11852.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11851.value)))+(x11852.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11853=IKcos(j0);
IkReal x11854=IKsin(j0);
IkReal x11855=((1.0)*sj4);
IkReal x11856=(cj5*r12);
IkReal x11857=((0.37429)*sj5);
IkReal x11858=(r10*sj6);
IkReal x11859=(r01*sj6);
IkReal x11860=((0.069)*sj2);
IkReal x11861=(cj6*r01);
IkReal x11862=((0.01)*cj5);
IkReal x11863=(r12*sj5);
IkReal x11864=(cj6*r10);
IkReal x11865=(r00*sj6);
IkReal x11866=((1.0)*sj5);
IkReal x11867=(r02*sj5);
IkReal x11868=(cj6*r11);
IkReal x11869=(cj5*r02);
IkReal x11870=(cj4*cj5);
IkReal x11871=(cj6*r00);
IkReal x11872=((1.0)*cj4);
IkReal x11873=(r11*sj6);
IkReal x11874=(cj5*x11868);
IkReal x11875=((1.0)*x11854);
evalcond[0]=((((-1.0)*x11866*x11868))+(((-1.0)*x11858*x11866))+((sj2*x11853))+x11856);
evalcond[1]=((((-1.0)*x11861*x11866))+(((-1.0)*sj2*x11875))+(((-1.0)*x11865*x11866))+x11869);
evalcond[2]=((((-1.0)*x11855*x11859))+((cj4*x11867))+(((-1.0)*x11853))+((sj4*x11871))+((x11861*x11870))+((x11865*x11870)));
evalcond[3]=((((-1.0)*x11855*x11873))+(((-1.0)*x11875))+((x11868*x11870))+((cj4*x11863))+((sj4*x11864))+((x11858*x11870)));
evalcond[4]=((((-1.0)*x11872*x11873))+(((-1.0)*x11855*x11874))+((cj4*x11864))+((cj2*x11853))+(((-1.0)*cj5*x11855*x11858))+(((-1.0)*x11855*x11863)));
evalcond[5]=(((cj4*x11871))+(((-1.0)*x11859*x11872))+(((-1.0)*cj2*x11875))+(((-1.0)*cj5*x11855*x11865))+(((-1.0)*cj5*x11855*x11861))+(((-1.0)*x11855*x11867)));
evalcond[6]=((((0.43342)*x11853))+(((0.01)*x11867))+(((-1.0)*x11854*x11860))+(((-1.0)*px))+((x11861*x11862))+((x11862*x11865))+(((0.37429)*x11869))+(((-1.0)*x11857*x11865))+(((-1.0)*x11857*x11861)));
evalcond[7]=((((-1.0)*x11857*x11858))+(((0.43342)*x11854))+(((0.01)*x11863))+((x11853*x11860))+(((-1.0)*py))+(((0.37429)*x11856))+((x11862*x11868))+((x11858*x11862))+(((-1.0)*x11857*x11868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x11876=(sj5*sj6);
IkReal x11877=(cj6*sj5);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs(((((-1.0)*r00*x11876))+(((-1.0)*r01*x11877))+((cj5*r02)))))+(IKabs(((((-1.0)*cj5*r12))+((r10*x11876))+((r11*x11877))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11878=(sj5*sj6);
IkReal x11879=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x11878))+(((-1.0)*r01*x11879))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x11878))+((r11*x11879)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x11878))+(((-1.0)*r01*x11879))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x11878))+((r11*x11879))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x11878))+(((-1.0)*r01*x11879))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x11878))+((r11*x11879))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11880=IKcos(j0);
IkReal x11881=IKsin(j0);
IkReal x11882=((0.01)*cj5);
IkReal x11883=(cj6*r11);
IkReal x11884=(cj5*r12);
IkReal x11885=(r10*sj6);
IkReal x11886=((0.37429)*sj5);
IkReal x11887=((1.0)*r01);
IkReal x11888=(sj4*sj6);
IkReal x11889=(cj6*sj4);
IkReal x11890=(r00*sj6);
IkReal x11891=((1.0)*sj5);
IkReal x11892=(cj4*sj5);
IkReal x11893=(cj6*r01);
IkReal x11894=(cj5*r02);
IkReal x11895=(cj4*cj5);
IkReal x11896=((0.01)*sj5);
evalcond[0]=((((-1.0)*x11883*x11891))+(((-1.0)*x11885*x11891))+x11880+x11884);
evalcond[1]=((((-1.0)*x11881))+(((-1.0)*cj6*sj5*x11887))+(((-1.0)*x11890*x11891))+x11894);
evalcond[2]=(((r00*x11889))+(((-1.0)*x11887*x11888))+((r02*x11892))+((x11890*x11895))+((x11893*x11895))+x11880);
evalcond[3]=((((-1.0)*r11*x11888))+((x11883*x11895))+((r10*x11889))+((x11885*x11895))+((r12*x11892))+x11881);
evalcond[4]=((((0.37429)*x11894))+((x11882*x11890))+((x11882*x11893))+(((-1.0)*x11886*x11893))+(((-1.0)*x11886*x11890))+(((-0.29542)*x11880))+(((-1.0)*px))+((r02*x11896))+(((-0.069)*x11881)));
evalcond[5]=((((0.069)*x11880))+(((-1.0)*x11883*x11886))+((x11882*x11883))+((x11882*x11885))+(((0.37429)*x11884))+(((-0.29542)*x11881))+(((-1.0)*py))+(((-1.0)*x11885*x11886))+((r12*x11896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11897=(cj6*sj5);
IkReal x11898=(sj5*sj6);
if( IKabs((((r01*x11897))+((r00*x11898))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x11897))+(((-1.0)*r10*x11898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x11897))+((r00*x11898))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x11897))+(((-1.0)*r10*x11898))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x11897))+((r00*x11898))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r11*x11897))+(((-1.0)*r10*x11898))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11899=IKcos(j0);
IkReal x11900=IKsin(j0);
IkReal x11901=((0.01)*cj5);
IkReal x11902=(cj6*r11);
IkReal x11903=(cj5*r12);
IkReal x11904=(r10*sj6);
IkReal x11905=((0.37429)*sj5);
IkReal x11906=((1.0)*r01);
IkReal x11907=(sj4*sj6);
IkReal x11908=(cj6*sj4);
IkReal x11909=(r00*sj6);
IkReal x11910=((1.0)*sj5);
IkReal x11911=(cj4*sj5);
IkReal x11912=(cj6*r01);
IkReal x11913=(cj5*r02);
IkReal x11914=(cj4*cj5);
IkReal x11915=((0.01)*sj5);
evalcond[0]=(x11913+x11900+(((-1.0)*cj6*sj5*x11906))+(((-1.0)*x11909*x11910)));
evalcond[1]=(x11903+(((-1.0)*x11899))+(((-1.0)*x11904*x11910))+(((-1.0)*x11902*x11910)));
evalcond[2]=(((x11909*x11914))+((r00*x11908))+((x11912*x11914))+((r02*x11911))+(((-1.0)*x11906*x11907))+x11899);
evalcond[3]=(x11900+(((-1.0)*r11*x11907))+((x11902*x11914))+((r10*x11908))+((x11904*x11914))+((r12*x11911)));
evalcond[4]=((((-1.0)*x11905*x11909))+(((-1.0)*x11905*x11912))+((x11901*x11912))+(((-0.29542)*x11899))+(((-1.0)*px))+((x11901*x11909))+(((0.069)*x11900))+((r02*x11915))+(((0.37429)*x11913)));
evalcond[5]=((((-0.29542)*x11900))+(((-1.0)*py))+((x11901*x11904))+((x11901*x11902))+(((-0.069)*x11899))+(((-1.0)*x11904*x11905))+(((0.37429)*x11903))+(((-1.0)*x11902*x11905))+((r12*x11915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11916=(cj6*sj4);
IkReal x11917=(cj5*r11);
IkReal x11918=(r11*sj6);
IkReal x11919=(r12*sj5);
IkReal x11920=((1.0)*r10);
IkReal x11921=(cj4*cj6);
IkReal x11922=(cj5*sj6);
if( IKabs(((((-1.0)*x11917*x11921))+(((-1.0)*cj4*x11920*x11922))+(((-1.0)*cj4*x11919))+(((-1.0)*x11916*x11920))+((sj4*x11918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj4*x11922))+((x11916*x11917))+(((-1.0)*x11920*x11921))+((cj4*x11918))+((sj4*x11919)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11917*x11921))+(((-1.0)*cj4*x11920*x11922))+(((-1.0)*cj4*x11919))+(((-1.0)*x11916*x11920))+((sj4*x11918))))+IKsqr((((r10*sj4*x11922))+((x11916*x11917))+(((-1.0)*x11920*x11921))+((cj4*x11918))+((sj4*x11919))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x11917*x11921))+(((-1.0)*cj4*x11920*x11922))+(((-1.0)*cj4*x11919))+(((-1.0)*x11916*x11920))+((sj4*x11918))), (((r10*sj4*x11922))+((x11916*x11917))+(((-1.0)*x11920*x11921))+((cj4*x11918))+((sj4*x11919))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11923=IKcos(j0);
IkReal x11924=IKsin(j0);
IkReal x11925=((1.0)*sj4);
IkReal x11926=(cj6*sj4);
IkReal x11927=(r10*sj6);
IkReal x11928=((0.37429)*sj5);
IkReal x11929=(r01*sj6);
IkReal x11930=((0.01)*cj5);
IkReal x11931=(r12*sj5);
IkReal x11932=(r00*sj6);
IkReal x11933=(r02*sj5);
IkReal x11934=((0.37429)*cj5);
IkReal x11935=(cj4*cj6);
IkReal x11936=(cj4*cj5);
IkReal x11937=((1.0)*cj4);
IkReal x11938=(r11*sj6);
IkReal x11939=(cj5*cj6*r11);
IkReal x11940=(cj5*cj6*r01);
evalcond[0]=(x11923+((cj4*x11933))+((x11932*x11936))+((cj5*r01*x11935))+(((-1.0)*x11925*x11929))+((r00*x11926)));
evalcond[1]=(x11924+((cj4*x11931))+((r10*x11926))+(((-1.0)*x11925*x11938))+((cj5*r11*x11935))+((x11927*x11936)));
evalcond[2]=(x11923+(((-1.0)*cj5*x11925*x11927))+((r10*x11935))+(((-1.0)*x11925*x11939))+(((-1.0)*x11925*x11931))+(((-1.0)*x11937*x11938)));
evalcond[3]=((((-1.0)*cj5*x11925*x11932))+(((-1.0)*x11925*x11940))+(((-1.0)*x11925*x11933))+(((-1.0)*x11929*x11937))+((r00*x11935))+(((-1.0)*x11924)));
evalcond[4]=(((r02*x11934))+((x11930*x11932))+(((-1.0)*px))+(((-1.0)*cj6*r01*x11928))+(((-0.29542)*x11923))+((cj6*r01*x11930))+(((0.01)*x11933))+(((-1.0)*x11928*x11932)));
evalcond[5]=(((cj6*r11*x11930))+(((-1.0)*cj6*r11*x11928))+((x11927*x11930))+(((-1.0)*py))+((r12*x11934))+(((-0.29542)*x11924))+(((-1.0)*x11927*x11928))+(((0.01)*x11931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11941=(cj5*r01);
IkReal x11942=(cj4*sj6);
IkReal x11943=((1.0)*r00);
IkReal x11944=(cj6*sj4);
IkReal x11945=(r02*sj5);
IkReal x11946=(sj4*sj6);
IkReal x11947=((1.0)*cj4*cj6);
if( IKabs((((sj4*x11945))+((cj5*r00*x11946))+(((-1.0)*cj4*cj6*x11943))+((r01*x11942))+((x11941*x11944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x11943*x11944))+(((-1.0)*cj4*x11945))+((r01*x11946))+(((-1.0)*x11941*x11947))+(((-1.0)*cj5*x11942*x11943)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x11945))+((cj5*r00*x11946))+(((-1.0)*cj4*cj6*x11943))+((r01*x11942))+((x11941*x11944))))+IKsqr(((((-1.0)*x11943*x11944))+(((-1.0)*cj4*x11945))+((r01*x11946))+(((-1.0)*x11941*x11947))+(((-1.0)*cj5*x11942*x11943))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x11945))+((cj5*r00*x11946))+(((-1.0)*cj4*cj6*x11943))+((r01*x11942))+((x11941*x11944))), ((((-1.0)*x11943*x11944))+(((-1.0)*cj4*x11945))+((r01*x11946))+(((-1.0)*x11941*x11947))+(((-1.0)*cj5*x11942*x11943))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11948=IKsin(j0);
IkReal x11949=IKcos(j0);
IkReal x11950=((1.0)*sj4);
IkReal x11951=(cj6*sj4);
IkReal x11952=(r10*sj6);
IkReal x11953=((0.37429)*sj5);
IkReal x11954=(r01*sj6);
IkReal x11955=((0.01)*cj5);
IkReal x11956=(r12*sj5);
IkReal x11957=(r00*sj6);
IkReal x11958=(r02*sj5);
IkReal x11959=((0.37429)*cj5);
IkReal x11960=(cj4*cj6);
IkReal x11961=(cj4*cj5);
IkReal x11962=((1.0)*cj4);
IkReal x11963=(r11*sj6);
IkReal x11964=(cj5*cj6*r11);
IkReal x11965=(cj5*cj6*r01);
evalcond[0]=(x11949+((x11957*x11961))+((cj4*x11958))+((cj5*r01*x11960))+(((-1.0)*x11950*x11954))+((r00*x11951)));
evalcond[1]=(x11948+((cj4*x11956))+((cj5*r11*x11960))+(((-1.0)*x11950*x11963))+((r10*x11951))+((x11952*x11961)));
evalcond[2]=(x11948+((r00*x11960))+(((-1.0)*x11950*x11965))+(((-1.0)*x11950*x11958))+(((-1.0)*x11954*x11962))+(((-1.0)*cj5*x11950*x11957)));
evalcond[3]=(((r10*x11960))+(((-1.0)*x11949))+(((-1.0)*x11950*x11964))+(((-1.0)*x11950*x11956))+(((-1.0)*x11962*x11963))+(((-1.0)*cj5*x11950*x11952)));
evalcond[4]=(((cj6*r01*x11955))+(((-0.29542)*x11949))+((r02*x11959))+(((-1.0)*px))+((x11955*x11957))+(((0.01)*x11958))+(((-1.0)*cj6*r01*x11953))+(((-1.0)*x11953*x11957)));
evalcond[5]=(((r12*x11959))+(((-1.0)*cj6*r11*x11953))+(((-0.29542)*x11948))+(((-1.0)*x11952*x11953))+((cj6*r11*x11955))+(((-1.0)*py))+((x11952*x11955))+(((0.01)*x11956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11966=((1.0)*sj6);
IkReal x11967=(cj5*sj4);
CheckValue<IkReal> x11968=IKPowWithIntegerCheck(cj2,-1);
if(!x11968.valid){
continue;
}
CheckValue<IkReal> x11969=IKPowWithIntegerCheck(sj2,-1);
if(!x11969.valid){
continue;
}
if( IKabs(((x11968.value)*(((((-1.0)*cj4*r01*x11966))+(((-1.0)*r00*x11966*x11967))+((cj4*cj6*r00))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*cj6*r01*x11967)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11969.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11968.value)*(((((-1.0)*cj4*r01*x11966))+(((-1.0)*r00*x11966*x11967))+((cj4*cj6*r00))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*cj6*r01*x11967))))))+IKsqr(((x11969.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x11968.value)*(((((-1.0)*cj4*r01*x11966))+(((-1.0)*r00*x11966*x11967))+((cj4*cj6*r00))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*cj6*r01*x11967))))), ((x11969.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11970=IKcos(j0);
IkReal x11971=IKsin(j0);
IkReal x11972=((1.0)*sj4);
IkReal x11973=(cj5*r12);
IkReal x11974=((0.37429)*sj5);
IkReal x11975=(r10*sj6);
IkReal x11976=(r01*sj6);
IkReal x11977=((0.069)*sj2);
IkReal x11978=(cj6*r01);
IkReal x11979=((0.01)*cj5);
IkReal x11980=(r12*sj5);
IkReal x11981=(cj6*r10);
IkReal x11982=(r00*sj6);
IkReal x11983=((1.0)*sj5);
IkReal x11984=(r02*sj5);
IkReal x11985=(cj6*r11);
IkReal x11986=(cj5*r02);
IkReal x11987=(cj4*cj5);
IkReal x11988=(cj6*r00);
IkReal x11989=((1.0)*cj4);
IkReal x11990=(r11*sj6);
IkReal x11991=(cj5*x11985);
IkReal x11992=((1.0)*x11971);
evalcond[0]=(x11973+((sj2*x11970))+(((-1.0)*x11975*x11983))+(((-1.0)*x11983*x11985)));
evalcond[1]=(x11986+(((-1.0)*x11978*x11983))+(((-1.0)*x11982*x11983))+(((-1.0)*sj2*x11992)));
evalcond[2]=(x11970+((cj4*x11984))+((x11978*x11987))+((sj4*x11988))+((x11982*x11987))+(((-1.0)*x11972*x11976)));
evalcond[3]=(x11971+((cj4*x11980))+(((-1.0)*x11972*x11990))+((x11975*x11987))+((sj4*x11981))+((x11985*x11987)));
evalcond[4]=(((cj4*x11981))+(((-1.0)*x11972*x11991))+(((-1.0)*x11989*x11990))+((cj2*x11970))+(((-1.0)*x11972*x11980))+(((-1.0)*cj5*x11972*x11975)));
evalcond[5]=((((-1.0)*x11976*x11989))+(((-1.0)*cj2*x11992))+((cj4*x11988))+(((-1.0)*cj5*x11972*x11982))+(((-1.0)*x11972*x11984))+(((-1.0)*cj5*x11972*x11978)));
evalcond[6]=((((0.01)*x11984))+(((-1.0)*x11974*x11982))+(((0.37429)*x11986))+(((-1.0)*x11974*x11978))+((x11979*x11982))+(((-1.0)*x11971*x11977))+((x11978*x11979))+(((-1.0)*px))+(((-0.29542)*x11970)));
evalcond[7]=((((0.01)*x11980))+((x11975*x11979))+((x11970*x11977))+(((-1.0)*x11974*x11985))+(((-1.0)*x11974*x11975))+((x11979*x11985))+(((0.37429)*x11973))+(((-1.0)*py))+(((-0.29542)*x11971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11993=(r10*sj6);
IkReal x11994=(cj6*r11);
IkReal x11995=((1.0)*r12);
IkReal x11996=((1.0)*cj4*cj5);
CheckValue<IkReal> x11997=IKPowWithIntegerCheck(sj2,-1);
if(!x11997.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*sj5*x11995))+(((-1.0)*cj6*r10*sj4))+(((-1.0)*x11993*x11996))+(((-1.0)*x11994*x11996))+((r11*sj4*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11997.value)*((((sj5*x11993))+((sj5*x11994))+(((-1.0)*cj5*x11995)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*sj5*x11995))+(((-1.0)*cj6*r10*sj4))+(((-1.0)*x11993*x11996))+(((-1.0)*x11994*x11996))+((r11*sj4*sj6))))+IKsqr(((x11997.value)*((((sj5*x11993))+((sj5*x11994))+(((-1.0)*cj5*x11995))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*sj5*x11995))+(((-1.0)*cj6*r10*sj4))+(((-1.0)*x11993*x11996))+(((-1.0)*x11994*x11996))+((r11*sj4*sj6))), ((x11997.value)*((((sj5*x11993))+((sj5*x11994))+(((-1.0)*cj5*x11995))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11998=IKcos(j0);
IkReal x11999=IKsin(j0);
IkReal x12000=((1.0)*sj4);
IkReal x12001=(cj5*r12);
IkReal x12002=((0.37429)*sj5);
IkReal x12003=(r10*sj6);
IkReal x12004=(r01*sj6);
IkReal x12005=((0.069)*sj2);
IkReal x12006=(cj6*r01);
IkReal x12007=((0.01)*cj5);
IkReal x12008=(r12*sj5);
IkReal x12009=(cj6*r10);
IkReal x12010=(r00*sj6);
IkReal x12011=((1.0)*sj5);
IkReal x12012=(r02*sj5);
IkReal x12013=(cj6*r11);
IkReal x12014=(cj5*r02);
IkReal x12015=(cj4*cj5);
IkReal x12016=(cj6*r00);
IkReal x12017=((1.0)*cj4);
IkReal x12018=(r11*sj6);
IkReal x12019=(cj5*x12013);
IkReal x12020=((1.0)*x11999);
evalcond[0]=((((-1.0)*x12003*x12011))+(((-1.0)*x12011*x12013))+x12001+((sj2*x11998)));
evalcond[1]=((((-1.0)*x12010*x12011))+(((-1.0)*x12006*x12011))+(((-1.0)*sj2*x12020))+x12014);
evalcond[2]=(x11998+((x12010*x12015))+(((-1.0)*x12000*x12004))+((cj4*x12012))+((sj4*x12016))+((x12006*x12015)));
evalcond[3]=((((-1.0)*x12000*x12018))+x11999+((cj4*x12008))+((sj4*x12009))+((x12003*x12015))+((x12013*x12015)));
evalcond[4]=((((-1.0)*x12000*x12019))+((cj4*x12009))+(((-1.0)*x12017*x12018))+(((-1.0)*x12000*x12008))+(((-1.0)*cj5*x12000*x12003))+((cj2*x11998)));
evalcond[5]=((((-1.0)*x12000*x12012))+(((-1.0)*cj2*x12020))+(((-1.0)*cj5*x12000*x12010))+(((-1.0)*cj5*x12000*x12006))+(((-1.0)*x12004*x12017))+((cj4*x12016)));
evalcond[6]=((((-1.0)*x12002*x12010))+(((-1.0)*x11999*x12005))+(((0.01)*x12012))+((x12007*x12010))+(((-1.0)*px))+((x12006*x12007))+(((-1.0)*x12002*x12006))+(((0.37429)*x12014))+(((-0.29542)*x11998)));
evalcond[7]=((((-1.0)*x12002*x12013))+(((0.37429)*x12001))+((x12003*x12007))+((x11998*x12005))+((x12007*x12013))+(((-1.0)*py))+(((-1.0)*x12002*x12003))+(((0.01)*x12008))+(((-0.29542)*x11999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12021=(sj5*sj6);
IkReal x12022=(cj6*sj5);
CheckValue<IkReal> x12023=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x12023.valid){
continue;
}
CheckValue<IkReal> x12024 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12022))+(((-1.0)*r00*x12021))+((cj5*r02)))),IkReal(((((-1.0)*cj5*r12))+((r11*x12022))+((r10*x12021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12024.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12023.value)))+(x12024.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12025=IKcos(j0);
IkReal x12026=IKsin(j0);
IkReal x12027=((1.0)*sj4);
IkReal x12028=(cj5*r12);
IkReal x12029=((0.37429)*sj5);
IkReal x12030=(r10*sj6);
IkReal x12031=(r01*sj6);
IkReal x12032=((0.069)*sj2);
IkReal x12033=(cj6*r01);
IkReal x12034=((0.01)*cj5);
IkReal x12035=(r12*sj5);
IkReal x12036=(cj6*r10);
IkReal x12037=(r00*sj6);
IkReal x12038=((1.0)*sj5);
IkReal x12039=(r02*sj5);
IkReal x12040=(cj6*r11);
IkReal x12041=(cj5*r02);
IkReal x12042=(cj4*cj5);
IkReal x12043=(cj6*r00);
IkReal x12044=((1.0)*cj4);
IkReal x12045=(r11*sj6);
IkReal x12046=(cj5*x12040);
IkReal x12047=((1.0)*x12026);
evalcond[0]=((((-1.0)*x12030*x12038))+x12028+((sj2*x12025))+(((-1.0)*x12038*x12040)));
evalcond[1]=((((-1.0)*x12033*x12038))+x12041+(((-1.0)*sj2*x12047))+(((-1.0)*x12037*x12038)));
evalcond[2]=(((cj4*x12039))+x12025+((x12033*x12042))+((sj4*x12043))+(((-1.0)*x12027*x12031))+((x12037*x12042)));
evalcond[3]=(((x12040*x12042))+((cj4*x12035))+((x12030*x12042))+((sj4*x12036))+(((-1.0)*x12027*x12045))+x12026);
evalcond[4]=((((-1.0)*cj5*x12027*x12030))+((cj4*x12036))+(((-1.0)*x12027*x12046))+(((-1.0)*x12027*x12035))+(((-1.0)*x12044*x12045))+((cj2*x12025)));
evalcond[5]=(((cj4*x12043))+(((-1.0)*cj2*x12047))+(((-1.0)*cj5*x12027*x12037))+(((-1.0)*cj5*x12027*x12033))+(((-1.0)*x12031*x12044))+(((-1.0)*x12027*x12039)));
evalcond[6]=((((-1.0)*x12029*x12033))+(((-1.0)*x12029*x12037))+((x12033*x12034))+(((-1.0)*x12026*x12032))+(((-0.29542)*x12025))+(((-1.0)*px))+((x12034*x12037))+(((0.37429)*x12041))+(((0.01)*x12039)));
evalcond[7]=((((-1.0)*x12029*x12030))+(((-1.0)*x12029*x12040))+(((0.37429)*x12028))+((x12030*x12034))+((x12034*x12040))+(((-0.29542)*x12026))+(((-1.0)*py))+((x12025*x12032))+(((0.01)*x12035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x12048=((1.0)*cj6*sj5);
IkReal x12049=((1.0)*sj5*sj6);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x12048))+(((-1.0)*r10*x12049)))))+(IKabs(((((-1.0)*r00*x12049))+(((-1.0)*r01*x12048))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12050=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x12050))+(((-1.0)*cj6*r11*x12050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x12050))+(((-1.0)*cj6*r01*x12050))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x12050))+(((-1.0)*cj6*r11*x12050))))+IKsqr(((((-1.0)*r00*sj6*x12050))+(((-1.0)*cj6*r01*x12050))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x12050))+(((-1.0)*cj6*r11*x12050))), ((((-1.0)*r00*sj6*x12050))+(((-1.0)*cj6*r01*x12050))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12051=IKcos(j0);
IkReal x12052=(cj4*cj6);
IkReal x12053=(r00*sj6);
IkReal x12054=(cj6*r01);
IkReal x12055=((1.0)*sj5);
IkReal x12056=(cj6*r11);
IkReal x12057=(r10*sj6);
IkReal x12058=((1.0)*(IKsin(j0)));
IkReal x12059=((1.0)*cj4*sj6);
IkReal x12060=((1.0)*cj5*sj4);
evalcond[0]=(((cj5*r12))+(((-1.0)*x12058))+(((-1.0)*x12055*x12056))+(((-1.0)*x12055*x12057)));
evalcond[1]=((((-1.0)*x12051))+(((-1.0)*x12054*x12055))+(((-1.0)*x12053*x12055))+((cj5*r02)));
evalcond[2]=(((r10*x12052))+(((-1.0)*x12057*x12060))+x12051+(((-1.0)*r12*sj4*x12055))+(((-1.0)*r11*x12059))+(((-1.0)*x12056*x12060)));
evalcond[3]=((((-1.0)*x12054*x12060))+(((-1.0)*x12058))+(((-1.0)*r02*sj4*x12055))+(((-1.0)*x12053*x12060))+((r00*x12052))+(((-1.0)*r01*x12059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12061=(cj6*sj5);
IkReal x12062=(sj5*sj6);
IkReal x12063=((1.0)*cj5);
if( IKabs((((r10*x12062))+(((-1.0)*r12*x12063))+((r11*x12061)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x12062))+((r01*x12061))+(((-1.0)*r02*x12063)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x12062))+(((-1.0)*r12*x12063))+((r11*x12061))))+IKsqr((((r00*x12062))+((r01*x12061))+(((-1.0)*r02*x12063))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x12062))+(((-1.0)*r12*x12063))+((r11*x12061))), (((r00*x12062))+((r01*x12061))+(((-1.0)*r02*x12063))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12064=IKcos(j0);
IkReal x12065=IKsin(j0);
IkReal x12066=((1.0)*sj4);
IkReal x12067=(cj5*r12);
IkReal x12068=(r10*sj6);
IkReal x12069=((0.37429)*sj5);
IkReal x12070=(cj6*r01);
IkReal x12071=((0.01)*cj5);
IkReal x12072=(r12*sj5);
IkReal x12073=(r00*sj6);
IkReal x12074=((1.0)*sj5);
IkReal x12075=(r02*sj5);
IkReal x12076=(cj6*r11);
IkReal x12077=(cj4*cj6);
IkReal x12078=(cj5*r02);
IkReal x12079=(cj5*x12076);
IkReal x12080=((1.0)*cj4*sj6);
evalcond[0]=(x12067+x12065+(((-1.0)*x12068*x12074))+(((-1.0)*x12074*x12076)));
evalcond[1]=((((-1.0)*x12073*x12074))+x12078+x12064+(((-1.0)*x12070*x12074)));
evalcond[2]=((((-1.0)*r11*x12080))+(((-1.0)*cj5*x12066*x12068))+((r10*x12077))+(((-1.0)*x12066*x12072))+(((-1.0)*x12066*x12079))+x12064);
evalcond[3]=((((-1.0)*x12065))+(((-1.0)*cj5*x12066*x12073))+(((-1.0)*cj5*x12066*x12070))+(((-1.0)*r01*x12080))+(((-1.0)*x12066*x12075))+((r00*x12077)));
evalcond[4]=(((x12071*x12073))+(((0.138)*x12064))+(((-1.0)*x12069*x12073))+(((-1.0)*x12069*x12070))+(((0.37429)*x12078))+((x12070*x12071))+(((-1.0)*px))+(((0.01)*x12075)));
evalcond[5]=(((x12071*x12076))+(((0.138)*x12065))+(((0.37429)*x12067))+(((-1.0)*x12068*x12069))+(((-1.0)*x12069*x12076))+((x12068*x12071))+(((-1.0)*py))+(((0.01)*x12072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12081=(cj4*cj5);
IkReal x12082=((1.0)*sj6);
CheckValue<IkReal> x12083=IKPowWithIntegerCheck(sj1,-1);
if(!x12083.valid){
continue;
}
CheckValue<IkReal> x12084=IKPowWithIntegerCheck(cj1,-1);
if(!x12084.valid){
continue;
}
if( IKabs(((x12083.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x12082)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12084.value)*((((cj6*r01*x12081))+(((-1.0)*r01*sj4*x12082))+((cj6*r00*sj4))+((r00*sj6*x12081))+((cj4*r02*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12083.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x12082))))))+IKsqr(((x12084.value)*((((cj6*r01*x12081))+(((-1.0)*r01*sj4*x12082))+((cj6*r00*sj4))+((r00*sj6*x12081))+((cj4*r02*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12083.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x12082))))), ((x12084.value)*((((cj6*r01*x12081))+(((-1.0)*r01*sj4*x12082))+((cj6*r00*sj4))+((r00*sj6*x12081))+((cj4*r02*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12085=IKcos(j0);
IkReal x12086=IKsin(j0);
IkReal x12087=(r02*sj5);
IkReal x12088=((1.0)*sj4);
IkReal x12089=(cj5*r12);
IkReal x12090=((0.37429)*sj5);
IkReal x12091=(r10*sj6);
IkReal x12092=(r01*sj6);
IkReal x12093=((0.36442)*cj1);
IkReal x12094=(cj6*r01);
IkReal x12095=((0.01)*cj5);
IkReal x12096=(r12*sj5);
IkReal x12097=(cj6*sj4);
IkReal x12098=(r00*sj6);
IkReal x12099=((1.0)*sj5);
IkReal x12100=(cj6*r11);
IkReal x12101=(cj4*cj6);
IkReal x12102=(cj5*r02);
IkReal x12103=(cj4*cj5);
IkReal x12104=((1.0)*cj4);
IkReal x12105=(r11*sj6);
IkReal x12106=(cj5*x12100);
IkReal x12107=((0.069)*x12085);
IkReal x12108=((0.069)*x12086);
IkReal x12109=((1.0)*x12086);
IkReal x12110=((1.0)*x12085);
evalcond[0]=((((-1.0)*sj1*x12109))+(((-1.0)*x12099*x12100))+x12089+(((-1.0)*x12091*x12099)));
evalcond[1]=((((-1.0)*sj1*x12110))+(((-1.0)*x12098*x12099))+x12102+(((-1.0)*x12094*x12099)));
evalcond[2]=(((r10*x12101))+(((-1.0)*x12088*x12106))+(((-1.0)*x12088*x12096))+x12085+(((-1.0)*x12104*x12105))+(((-1.0)*cj5*x12088*x12091)));
evalcond[3]=(((r00*x12097))+((x12094*x12103))+(((-1.0)*x12088*x12092))+((cj4*x12087))+((x12098*x12103))+(((-1.0)*cj1*x12110)));
evalcond[4]=((((-1.0)*x12088*x12105))+((cj4*x12096))+((x12100*x12103))+(((-1.0)*cj1*x12109))+((x12091*x12103))+((r10*x12097)));
evalcond[5]=((((-1.0)*x12092*x12104))+((r00*x12101))+(((-1.0)*x12087*x12088))+(((-1.0)*x12109))+(((-1.0)*cj5*x12088*x12094))+(((-1.0)*cj5*x12088*x12098)));
evalcond[6]=((((0.01)*x12087))+((x12085*x12093))+x12107+(((-1.0)*sj1*x12107))+(((0.37429)*x12102))+((x12094*x12095))+(((-1.0)*x12090*x12098))+(((-1.0)*x12090*x12094))+(((-1.0)*px))+((x12095*x12098)));
evalcond[7]=(((x12086*x12093))+((x12095*x12100))+x12108+(((-1.0)*sj1*x12108))+(((-1.0)*x12090*x12091))+(((-1.0)*py))+(((0.37429)*x12089))+(((0.01)*x12096))+(((-1.0)*x12090*x12100))+((x12091*x12095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12111=(cj5*sj4);
IkReal x12112=(cj6*r11);
IkReal x12113=(r10*sj6);
IkReal x12114=((1.0)*sj5);
CheckValue<IkReal> x12115=IKPowWithIntegerCheck(sj1,-1);
if(!x12115.valid){
continue;
}
if( IKabs(((x12115.value)*((((cj5*r12))+(((-1.0)*x12112*x12114))+(((-1.0)*x12113*x12114)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*cj6*r10))+((x12111*x12113))+((x12111*x12112))+((cj4*r11*sj6))+((r12*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12115.value)*((((cj5*r12))+(((-1.0)*x12112*x12114))+(((-1.0)*x12113*x12114))))))+IKsqr(((((-1.0)*cj4*cj6*r10))+((x12111*x12113))+((x12111*x12112))+((cj4*r11*sj6))+((r12*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12115.value)*((((cj5*r12))+(((-1.0)*x12112*x12114))+(((-1.0)*x12113*x12114))))), ((((-1.0)*cj4*cj6*r10))+((x12111*x12113))+((x12111*x12112))+((cj4*r11*sj6))+((r12*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12116=IKcos(j0);
IkReal x12117=IKsin(j0);
IkReal x12118=(r02*sj5);
IkReal x12119=((1.0)*sj4);
IkReal x12120=(cj5*r12);
IkReal x12121=((0.37429)*sj5);
IkReal x12122=(r10*sj6);
IkReal x12123=(r01*sj6);
IkReal x12124=((0.36442)*cj1);
IkReal x12125=(cj6*r01);
IkReal x12126=((0.01)*cj5);
IkReal x12127=(r12*sj5);
IkReal x12128=(cj6*sj4);
IkReal x12129=(r00*sj6);
IkReal x12130=((1.0)*sj5);
IkReal x12131=(cj6*r11);
IkReal x12132=(cj4*cj6);
IkReal x12133=(cj5*r02);
IkReal x12134=(cj4*cj5);
IkReal x12135=((1.0)*cj4);
IkReal x12136=(r11*sj6);
IkReal x12137=(cj5*x12131);
IkReal x12138=((0.069)*x12116);
IkReal x12139=((0.069)*x12117);
IkReal x12140=((1.0)*x12117);
IkReal x12141=((1.0)*x12116);
evalcond[0]=(x12120+(((-1.0)*sj1*x12140))+(((-1.0)*x12130*x12131))+(((-1.0)*x12122*x12130)));
evalcond[1]=((((-1.0)*x12129*x12130))+(((-1.0)*x12125*x12130))+x12133+(((-1.0)*sj1*x12141)));
evalcond[2]=((((-1.0)*x12135*x12136))+x12116+(((-1.0)*x12119*x12127))+(((-1.0)*x12119*x12137))+(((-1.0)*cj5*x12119*x12122))+((r10*x12132)));
evalcond[3]=(((x12125*x12134))+((r00*x12128))+((x12129*x12134))+(((-1.0)*x12119*x12123))+(((-1.0)*cj1*x12141))+((cj4*x12118)));
evalcond[4]=(((x12131*x12134))+(((-1.0)*x12119*x12136))+(((-1.0)*cj1*x12140))+((cj4*x12127))+((x12122*x12134))+((r10*x12128)));
evalcond[5]=((((-1.0)*x12118*x12119))+((r00*x12132))+(((-1.0)*cj5*x12119*x12129))+(((-1.0)*cj5*x12119*x12125))+(((-1.0)*x12140))+(((-1.0)*x12123*x12135)));
evalcond[6]=(((x12125*x12126))+(((0.37429)*x12133))+x12138+(((-1.0)*px))+((x12126*x12129))+(((-1.0)*x12121*x12125))+(((-1.0)*x12121*x12129))+(((0.01)*x12118))+(((-1.0)*sj1*x12138))+((x12116*x12124)));
evalcond[7]=((((0.37429)*x12120))+(((0.01)*x12127))+x12139+(((-1.0)*py))+((x12126*x12131))+(((-1.0)*x12121*x12131))+(((-1.0)*x12121*x12122))+((x12117*x12124))+((x12122*x12126))+(((-1.0)*sj1*x12139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12142=((1.0)*sj5);
CheckValue<IkReal> x12143=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x12143.valid){
continue;
}
CheckValue<IkReal> x12144 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*sj6*x12142))+(((-1.0)*cj6*r11*x12142)))),IkReal(((((-1.0)*r00*sj6*x12142))+(((-1.0)*cj6*r01*x12142))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12144.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12143.value)))+(x12144.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12145=IKcos(j0);
IkReal x12146=IKsin(j0);
IkReal x12147=(r02*sj5);
IkReal x12148=((1.0)*sj4);
IkReal x12149=(cj5*r12);
IkReal x12150=((0.37429)*sj5);
IkReal x12151=(r10*sj6);
IkReal x12152=(r01*sj6);
IkReal x12153=((0.36442)*cj1);
IkReal x12154=(cj6*r01);
IkReal x12155=((0.01)*cj5);
IkReal x12156=(r12*sj5);
IkReal x12157=(cj6*sj4);
IkReal x12158=(r00*sj6);
IkReal x12159=((1.0)*sj5);
IkReal x12160=(cj6*r11);
IkReal x12161=(cj4*cj6);
IkReal x12162=(cj5*r02);
IkReal x12163=(cj4*cj5);
IkReal x12164=((1.0)*cj4);
IkReal x12165=(r11*sj6);
IkReal x12166=(cj5*x12160);
IkReal x12167=((0.069)*x12145);
IkReal x12168=((0.069)*x12146);
IkReal x12169=((1.0)*x12146);
IkReal x12170=((1.0)*x12145);
evalcond[0]=((((-1.0)*sj1*x12169))+x12149+(((-1.0)*x12151*x12159))+(((-1.0)*x12159*x12160)));
evalcond[1]=((((-1.0)*sj1*x12170))+x12162+(((-1.0)*x12154*x12159))+(((-1.0)*x12158*x12159)));
evalcond[2]=((((-1.0)*cj5*x12148*x12151))+(((-1.0)*x12164*x12165))+((r10*x12161))+x12145+(((-1.0)*x12148*x12156))+(((-1.0)*x12148*x12166)));
evalcond[3]=(((x12158*x12163))+((cj4*x12147))+((r00*x12157))+((x12154*x12163))+(((-1.0)*x12148*x12152))+(((-1.0)*cj1*x12170)));
evalcond[4]=(((r10*x12157))+((cj4*x12156))+((x12160*x12163))+(((-1.0)*cj1*x12169))+((x12151*x12163))+(((-1.0)*x12148*x12165)));
evalcond[5]=((((-1.0)*cj5*x12148*x12158))+(((-1.0)*cj5*x12148*x12154))+(((-1.0)*x12152*x12164))+(((-1.0)*x12169))+((r00*x12161))+(((-1.0)*x12147*x12148)));
evalcond[6]=((((0.01)*x12147))+(((-1.0)*sj1*x12167))+(((0.37429)*x12162))+x12167+(((-1.0)*px))+(((-1.0)*x12150*x12154))+(((-1.0)*x12150*x12158))+((x12155*x12158))+((x12145*x12153))+((x12154*x12155)));
evalcond[7]=((((0.01)*x12156))+(((-1.0)*sj1*x12168))+((x12146*x12153))+x12168+(((-1.0)*py))+(((-1.0)*x12150*x12151))+(((-1.0)*x12150*x12160))+((x12155*x12160))+((x12151*x12155))+(((0.37429)*x12149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x12171=(cj6*sj5);
IkReal x12172=(sj5*sj6);
IkReal x12173=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs((((r10*x12172))+((r11*x12171))+(((-1.0)*r12*x12173)))))+(IKabs((((r01*x12171))+((r00*x12172))+(((-1.0)*r02*x12173))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12174=(cj6*sj5);
IkReal x12175=(sj5*sj6);
IkReal x12176=((1.0)*cj5);
if( IKabs((((r10*x12175))+((r11*x12174))+(((-1.0)*r12*x12176)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x12174))+((r00*x12175))+(((-1.0)*r02*x12176)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x12175))+((r11*x12174))+(((-1.0)*r12*x12176))))+IKsqr((((r01*x12174))+((r00*x12175))+(((-1.0)*r02*x12176))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x12175))+((r11*x12174))+(((-1.0)*r12*x12176))), (((r01*x12174))+((r00*x12175))+(((-1.0)*r02*x12176))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12177=IKsin(j0);
IkReal x12178=IKcos(j0);
IkReal x12179=((1.0)*sj4);
IkReal x12180=(cj5*r12);
IkReal x12181=(r10*sj6);
IkReal x12182=((0.37429)*sj5);
IkReal x12183=(cj6*r01);
IkReal x12184=((0.01)*cj5);
IkReal x12185=(r12*sj5);
IkReal x12186=(r00*sj6);
IkReal x12187=((1.0)*sj5);
IkReal x12188=(r02*sj5);
IkReal x12189=(cj6*r11);
IkReal x12190=(cj4*cj6);
IkReal x12191=(cj5*r02);
IkReal x12192=(cj5*x12189);
IkReal x12193=((1.0)*cj4*sj6);
evalcond[0]=(x12177+x12180+(((-1.0)*x12187*x12189))+(((-1.0)*x12181*x12187)));
evalcond[1]=((((-1.0)*x12183*x12187))+x12178+x12191+(((-1.0)*x12186*x12187)));
evalcond[2]=((((-1.0)*x12179*x12188))+x12177+(((-1.0)*cj5*x12179*x12186))+(((-1.0)*cj5*x12179*x12183))+(((-1.0)*r01*x12193))+((r00*x12190)));
evalcond[3]=((((-1.0)*x12179*x12192))+(((-1.0)*x12179*x12185))+(((-1.0)*x12178))+(((-1.0)*cj5*x12179*x12181))+((r10*x12190))+(((-1.0)*r11*x12193)));
evalcond[4]=((((-1.0)*x12182*x12183))+(((-1.0)*x12182*x12186))+(((0.138)*x12178))+(((0.01)*x12188))+(((-1.0)*px))+((x12183*x12184))+((x12184*x12186))+(((0.37429)*x12191)));
evalcond[5]=((((0.37429)*x12180))+(((-1.0)*x12182*x12189))+((x12181*x12184))+(((0.138)*x12177))+(((0.01)*x12185))+(((-1.0)*py))+((x12184*x12189))+(((-1.0)*x12181*x12182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12194=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x12194))+(((-1.0)*r10*sj6*x12194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x12194))+(((-1.0)*cj6*r01*x12194))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x12194))+(((-1.0)*r10*sj6*x12194))))+IKsqr(((((-1.0)*r00*sj6*x12194))+(((-1.0)*cj6*r01*x12194))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x12194))+(((-1.0)*r10*sj6*x12194))), ((((-1.0)*r00*sj6*x12194))+(((-1.0)*cj6*r01*x12194))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12195=IKsin(j0);
IkReal x12196=(cj4*cj6);
IkReal x12197=((1.0)*sj5);
IkReal x12198=(cj6*r11);
IkReal x12199=(cj6*r01);
IkReal x12200=((1.0)*(IKcos(j0)));
IkReal x12201=((1.0)*cj4*sj6);
IkReal x12202=((1.0)*cj5*sj4);
IkReal x12203=(sj6*x12202);
evalcond[0]=((((-1.0)*x12197*x12198))+((cj5*r12))+(((-1.0)*x12195))+(((-1.0)*r10*sj6*x12197)));
evalcond[1]=((((-1.0)*x12197*x12199))+(((-1.0)*r00*sj6*x12197))+(((-1.0)*x12200))+((cj5*r02)));
evalcond[2]=((((-1.0)*r02*sj4*x12197))+x12195+(((-1.0)*r01*x12201))+(((-1.0)*r00*x12203))+(((-1.0)*x12199*x12202))+((r00*x12196)));
evalcond[3]=((((-1.0)*r12*sj4*x12197))+(((-1.0)*r11*x12201))+((r10*x12196))+(((-1.0)*r10*x12203))+(((-1.0)*x12200))+(((-1.0)*x12198*x12202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12204=(cj4*cj5);
CheckValue<IkReal> x12205=IKPowWithIntegerCheck(sj1,-1);
if(!x12205.valid){
continue;
}
CheckValue<IkReal> x12206=IKPowWithIntegerCheck(cj1,-1);
if(!x12206.valid){
continue;
}
if( IKabs(((x12205.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12206.value)*((((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((r00*sj6*x12204))+((cj6*r01*x12204)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12205.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))+IKsqr(((x12206.value)*((((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((r00*sj6*x12204))+((cj6*r01*x12204))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12205.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))), ((x12206.value)*((((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((r00*sj6*x12204))+((cj6*r01*x12204))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12207=IKsin(j0);
IkReal x12208=IKcos(j0);
IkReal x12209=((1.0)*sj4);
IkReal x12210=(cj5*r12);
IkReal x12211=((0.37429)*sj5);
IkReal x12212=(r10*sj6);
IkReal x12213=(r01*sj6);
IkReal x12214=((0.36442)*cj1);
IkReal x12215=(cj6*r01);
IkReal x12216=((0.01)*cj5);
IkReal x12217=(cj6*sj4);
IkReal x12218=(r00*sj6);
IkReal x12219=((1.0)*sj5);
IkReal x12220=(r02*sj5);
IkReal x12221=(cj6*r11);
IkReal x12222=(r12*sj5);
IkReal x12223=(cj4*cj6);
IkReal x12224=(cj5*r02);
IkReal x12225=(cj4*cj5);
IkReal x12226=((1.0)*cj4);
IkReal x12227=(r11*sj6);
IkReal x12228=(cj5*x12221);
IkReal x12229=(sj1*x12207);
IkReal x12230=((1.0)*x12208);
IkReal x12231=((0.069)*x12208);
evalcond[0]=((((-1.0)*x12212*x12219))+x12229+x12210+(((-1.0)*x12219*x12221)));
evalcond[1]=(((sj1*x12208))+x12224+(((-1.0)*x12215*x12219))+(((-1.0)*x12218*x12219)));
evalcond[2]=(x12207+(((-1.0)*x12213*x12226))+(((-1.0)*cj5*x12209*x12218))+(((-1.0)*cj5*x12209*x12215))+((r00*x12223))+(((-1.0)*x12209*x12220)));
evalcond[3]=(((cj4*x12220))+((x12215*x12225))+((x12218*x12225))+(((-1.0)*cj1*x12230))+((r00*x12217))+(((-1.0)*x12209*x12213)));
evalcond[4]=(((cj4*x12222))+((x12212*x12225))+(((-1.0)*cj1*x12207))+((x12221*x12225))+((r10*x12217))+(((-1.0)*x12209*x12227)));
evalcond[5]=((((-1.0)*x12230))+(((-1.0)*x12226*x12227))+((r10*x12223))+(((-1.0)*cj5*x12209*x12212))+(((-1.0)*x12209*x12228))+(((-1.0)*x12209*x12222)));
evalcond[6]=((((0.37429)*x12224))+((x12215*x12216))+x12231+((sj1*x12231))+((x12216*x12218))+(((-1.0)*px))+(((-1.0)*x12211*x12215))+(((-1.0)*x12211*x12218))+((x12208*x12214))+(((0.01)*x12220)));
evalcond[7]=(((x12212*x12216))+(((0.069)*x12207))+(((0.069)*x12229))+((x12216*x12221))+(((-1.0)*x12211*x12221))+(((-1.0)*py))+((x12207*x12214))+(((-1.0)*x12211*x12212))+(((0.01)*x12222))+(((0.37429)*x12210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12232=(cj6*r01);
IkReal x12233=(cj5*sj4);
IkReal x12234=(r00*sj6);
CheckValue<IkReal> x12235=IKPowWithIntegerCheck(sj1,-1);
if(!x12235.valid){
continue;
}
if( IKabs((((x12233*x12234))+(((-1.0)*cj4*cj6*r00))+((x12232*x12233))+((cj4*r01*sj6))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12235.value)*((((sj5*x12234))+((sj5*x12232))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x12233*x12234))+(((-1.0)*cj4*cj6*r00))+((x12232*x12233))+((cj4*r01*sj6))+((r02*sj4*sj5))))+IKsqr(((x12235.value)*((((sj5*x12234))+((sj5*x12232))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x12233*x12234))+(((-1.0)*cj4*cj6*r00))+((x12232*x12233))+((cj4*r01*sj6))+((r02*sj4*sj5))), ((x12235.value)*((((sj5*x12234))+((sj5*x12232))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12236=IKsin(j0);
IkReal x12237=IKcos(j0);
IkReal x12238=((1.0)*sj4);
IkReal x12239=(cj5*r12);
IkReal x12240=((0.37429)*sj5);
IkReal x12241=(r10*sj6);
IkReal x12242=(r01*sj6);
IkReal x12243=((0.36442)*cj1);
IkReal x12244=(cj6*r01);
IkReal x12245=((0.01)*cj5);
IkReal x12246=(cj6*sj4);
IkReal x12247=(r00*sj6);
IkReal x12248=((1.0)*sj5);
IkReal x12249=(r02*sj5);
IkReal x12250=(cj6*r11);
IkReal x12251=(r12*sj5);
IkReal x12252=(cj4*cj6);
IkReal x12253=(cj5*r02);
IkReal x12254=(cj4*cj5);
IkReal x12255=((1.0)*cj4);
IkReal x12256=(r11*sj6);
IkReal x12257=(cj5*x12250);
IkReal x12258=(sj1*x12236);
IkReal x12259=((1.0)*x12237);
IkReal x12260=((0.069)*x12237);
evalcond[0]=((((-1.0)*x12248*x12250))+x12258+x12239+(((-1.0)*x12241*x12248)));
evalcond[1]=(x12253+((sj1*x12237))+(((-1.0)*x12244*x12248))+(((-1.0)*x12247*x12248)));
evalcond[2]=((((-1.0)*x12242*x12255))+x12236+((r00*x12252))+(((-1.0)*cj5*x12238*x12247))+(((-1.0)*cj5*x12238*x12244))+(((-1.0)*x12238*x12249)));
evalcond[3]=(((x12244*x12254))+((cj4*x12249))+((x12247*x12254))+((r00*x12246))+(((-1.0)*x12238*x12242))+(((-1.0)*cj1*x12259)));
evalcond[4]=((((-1.0)*cj1*x12236))+(((-1.0)*x12238*x12256))+((x12241*x12254))+((cj4*x12251))+((r10*x12246))+((x12250*x12254)));
evalcond[5]=((((-1.0)*x12238*x12251))+(((-1.0)*x12238*x12257))+((r10*x12252))+(((-1.0)*cj5*x12238*x12241))+(((-1.0)*x12255*x12256))+(((-1.0)*x12259)));
evalcond[6]=(((sj1*x12260))+((x12244*x12245))+((x12245*x12247))+(((0.01)*x12249))+x12260+(((-1.0)*px))+((x12237*x12243))+(((0.37429)*x12253))+(((-1.0)*x12240*x12244))+(((-1.0)*x12240*x12247)));
evalcond[7]=(((x12245*x12250))+((x12241*x12245))+(((0.01)*x12251))+(((-1.0)*py))+(((0.069)*x12258))+(((0.37429)*x12239))+(((-1.0)*x12240*x12250))+((x12236*x12243))+(((0.069)*x12236))+(((-1.0)*x12240*x12241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12261=(cj6*sj5);
IkReal x12262=(sj5*sj6);
IkReal x12263=((1.0)*cj5);
CheckValue<IkReal> x12264=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x12264.valid){
continue;
}
CheckValue<IkReal> x12265 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12263))+((r10*x12262))+((r11*x12261)))),IkReal((((r00*x12262))+((r01*x12261))+(((-1.0)*r02*x12263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12265.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12264.value)))+(x12265.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12266=IKsin(j0);
IkReal x12267=IKcos(j0);
IkReal x12268=((1.0)*sj4);
IkReal x12269=(cj5*r12);
IkReal x12270=((0.37429)*sj5);
IkReal x12271=(r10*sj6);
IkReal x12272=(r01*sj6);
IkReal x12273=((0.36442)*cj1);
IkReal x12274=(cj6*r01);
IkReal x12275=((0.01)*cj5);
IkReal x12276=(cj6*sj4);
IkReal x12277=(r00*sj6);
IkReal x12278=((1.0)*sj5);
IkReal x12279=(r02*sj5);
IkReal x12280=(cj6*r11);
IkReal x12281=(r12*sj5);
IkReal x12282=(cj4*cj6);
IkReal x12283=(cj5*r02);
IkReal x12284=(cj4*cj5);
IkReal x12285=((1.0)*cj4);
IkReal x12286=(r11*sj6);
IkReal x12287=(cj5*x12280);
IkReal x12288=(sj1*x12266);
IkReal x12289=((1.0)*x12267);
IkReal x12290=((0.069)*x12267);
evalcond[0]=((((-1.0)*x12278*x12280))+x12269+x12288+(((-1.0)*x12271*x12278)));
evalcond[1]=(((sj1*x12267))+x12283+(((-1.0)*x12277*x12278))+(((-1.0)*x12274*x12278)));
evalcond[2]=(x12266+(((-1.0)*x12268*x12279))+((r00*x12282))+(((-1.0)*x12272*x12285))+(((-1.0)*cj5*x12268*x12274))+(((-1.0)*cj5*x12268*x12277)));
evalcond[3]=(((cj4*x12279))+((x12274*x12284))+(((-1.0)*cj1*x12289))+((x12277*x12284))+(((-1.0)*x12268*x12272))+((r00*x12276)));
evalcond[4]=(((x12280*x12284))+((x12271*x12284))+(((-1.0)*cj1*x12266))+((cj4*x12281))+(((-1.0)*x12268*x12286))+((r10*x12276)));
evalcond[5]=((((-1.0)*x12268*x12287))+(((-1.0)*x12268*x12281))+(((-1.0)*x12285*x12286))+(((-1.0)*cj5*x12268*x12271))+((r10*x12282))+(((-1.0)*x12289)));
evalcond[6]=((((0.37429)*x12283))+x12290+((x12267*x12273))+(((-1.0)*px))+((sj1*x12290))+(((-1.0)*x12270*x12274))+(((-1.0)*x12270*x12277))+((x12275*x12277))+(((0.01)*x12279))+((x12274*x12275)));
evalcond[7]=(((x12275*x12280))+(((-1.0)*x12270*x12280))+(((0.01)*x12281))+(((0.069)*x12266))+(((-1.0)*py))+(((0.069)*x12288))+(((-1.0)*x12270*x12271))+(((0.37429)*x12269))+((x12266*x12273))+((x12271*x12275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12300=IKPowWithIntegerCheck(cj1,-1);
if(!x12300.valid){
continue;
}
IkReal x12291=x12300.value;
IkReal x12292=(cj4*cj5);
IkReal x12293=(r00*sj2);
IkReal x12294=((1.0)*sj6);
IkReal x12295=(r01*sj4);
IkReal x12296=(cj1*sj5);
IkReal x12297=(cj6*r01);
IkReal x12298=(cj6*sj4);
IkReal x12299=(cj4*r02*sj5);
CheckValue<IkReal> x12301=IKPowWithIntegerCheck(cj2,-1);
if(!x12301.valid){
continue;
}
CheckValue<IkReal> x12302=IKPowWithIntegerCheck(sj1,-1);
if(!x12302.valid){
continue;
}
if( IKabs((x12291*(x12301.value)*(x12302.value)*((((sj6*x12292*x12293))+((cj1*cj5*r12))+((sj2*x12292*x12297))+((x12293*x12298))+(((-1.0)*cj6*r11*x12296))+((sj2*x12299))+(((-1.0)*sj2*x12294*x12295))+(((-1.0)*r10*x12294*x12296)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12291*(((((-1.0)*x12294*x12295))+((r00*x12298))+x12299+((r00*sj6*x12292))+((x12292*x12297)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12291*(x12301.value)*(x12302.value)*((((sj6*x12292*x12293))+((cj1*cj5*r12))+((sj2*x12292*x12297))+((x12293*x12298))+(((-1.0)*cj6*r11*x12296))+((sj2*x12299))+(((-1.0)*sj2*x12294*x12295))+(((-1.0)*r10*x12294*x12296))))))+IKsqr((x12291*(((((-1.0)*x12294*x12295))+((r00*x12298))+x12299+((r00*sj6*x12292))+((x12292*x12297))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x12291*(x12301.value)*(x12302.value)*((((sj6*x12292*x12293))+((cj1*cj5*r12))+((sj2*x12292*x12297))+((x12293*x12298))+(((-1.0)*cj6*r11*x12296))+((sj2*x12299))+(((-1.0)*sj2*x12294*x12295))+(((-1.0)*r10*x12294*x12296))))), (x12291*(((((-1.0)*x12294*x12295))+((r00*x12298))+x12299+((r00*sj6*x12292))+((x12292*x12297))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12303=IKsin(j0);
IkReal x12304=IKcos(j0);
IkReal x12305=((1.0)*sj4);
IkReal x12306=(cj5*r12);
IkReal x12307=((0.37429)*sj5);
IkReal x12308=(r10*sj6);
IkReal x12309=((0.36442)*cj1);
IkReal x12310=(cj6*r11);
IkReal x12311=(r01*sj6);
IkReal x12312=(r00*sj6);
IkReal x12313=((0.069)*sj2);
IkReal x12314=(cj6*r01);
IkReal x12315=((0.01)*cj5);
IkReal x12316=(r12*sj5);
IkReal x12317=((1.0)*sj5);
IkReal x12318=(cj6*r10);
IkReal x12319=(r02*sj5);
IkReal x12320=((1.0)*sj1);
IkReal x12321=((1.0)*cj1);
IkReal x12322=(cj5*r02);
IkReal x12323=(cj4*cj5);
IkReal x12324=(cj6*r00);
IkReal x12325=((1.0)*cj4);
IkReal x12326=(r11*sj6);
IkReal x12327=(cj5*x12310);
IkReal x12328=(cj2*x12304);
IkReal x12329=((0.069)*x12303);
IkReal x12330=(sj2*x12304);
IkReal x12331=((1.0)*x12303);
evalcond[0]=(x12330+x12306+(((-1.0)*x12310*x12317))+(((-1.0)*cj2*x12303*x12320))+(((-1.0)*x12308*x12317)));
evalcond[1]=((((-1.0)*x12314*x12317))+(((-1.0)*x12320*x12328))+x12322+(((-1.0)*x12312*x12317))+(((-1.0)*sj2*x12331)));
evalcond[2]=(((x12314*x12323))+(((-1.0)*x12305*x12311))+((sj4*x12324))+((x12312*x12323))+(((-1.0)*x12304*x12321))+((cj4*x12319)));
evalcond[3]=((((-1.0)*x12303*x12321))+((cj4*x12316))+(((-1.0)*x12305*x12326))+((x12310*x12323))+((sj4*x12318))+((x12308*x12323)));
evalcond[4]=((((-1.0)*x12305*x12316))+x12328+(((-1.0)*cj5*x12305*x12308))+((cj4*x12318))+(((-1.0)*x12305*x12327))+((sj1*sj2*x12303))+(((-1.0)*x12325*x12326)));
evalcond[5]=((((-1.0)*x12305*x12319))+(((-1.0)*cj2*x12331))+(((-1.0)*cj5*x12305*x12312))+(((-1.0)*cj5*x12305*x12314))+((sj1*x12330))+((cj4*x12324))+(((-1.0)*x12311*x12325)));
evalcond[6]=((((-1.0)*x12307*x12314))+(((-1.0)*x12307*x12312))+(((-0.069)*sj1*x12328))+(((-1.0)*px))+((x12304*x12309))+((x12314*x12315))+(((0.069)*x12304))+((x12312*x12315))+(((0.01)*x12319))+(((0.37429)*x12322))+(((-1.0)*x12303*x12313)));
evalcond[7]=((((-1.0)*x12307*x12310))+((x12310*x12315))+(((-1.0)*x12307*x12308))+x12329+(((-1.0)*cj2*sj1*x12329))+(((-1.0)*py))+((x12308*x12315))+((x12303*x12309))+(((0.01)*x12316))+((x12304*x12313))+(((0.37429)*x12306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12341=IKPowWithIntegerCheck(cj1,-1);
if(!x12341.valid){
continue;
}
IkReal x12332=x12341.value;
IkReal x12333=(cj4*cj5);
IkReal x12334=(cj6*r11);
IkReal x12335=(r10*sj6);
IkReal x12336=(cj1*sj5);
IkReal x12337=(cj2*sj1);
IkReal x12338=(cj6*r10*sj4);
IkReal x12339=(cj4*r12*sj5);
IkReal x12340=((1.0)*r11*sj4*sj6);
CheckValue<IkReal> x12342=IKPowWithIntegerCheck(sj2,-1);
if(!x12342.valid){
continue;
}
if( IKabs((x12332*((((x12333*x12335))+((x12333*x12334))+x12338+x12339+(((-1.0)*x12340)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12332*(x12342.value)*((((x12335*x12336))+(((-1.0)*x12337*x12340))+((x12337*x12339))+((x12337*x12338))+(((-1.0)*cj1*cj5*r12))+((x12334*x12336))+((x12333*x12335*x12337))+((x12333*x12334*x12337)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12332*((((x12333*x12335))+((x12333*x12334))+x12338+x12339+(((-1.0)*x12340))))))+IKsqr((x12332*(x12342.value)*((((x12335*x12336))+(((-1.0)*x12337*x12340))+((x12337*x12339))+((x12337*x12338))+(((-1.0)*cj1*cj5*r12))+((x12334*x12336))+((x12333*x12335*x12337))+((x12333*x12334*x12337))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x12332*((((x12333*x12335))+((x12333*x12334))+x12338+x12339+(((-1.0)*x12340))))), (x12332*(x12342.value)*((((x12335*x12336))+(((-1.0)*x12337*x12340))+((x12337*x12339))+((x12337*x12338))+(((-1.0)*cj1*cj5*r12))+((x12334*x12336))+((x12333*x12335*x12337))+((x12333*x12334*x12337))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12343=IKsin(j0);
IkReal x12344=IKcos(j0);
IkReal x12345=((1.0)*sj4);
IkReal x12346=(cj5*r12);
IkReal x12347=((0.37429)*sj5);
IkReal x12348=(r10*sj6);
IkReal x12349=((0.36442)*cj1);
IkReal x12350=(cj6*r11);
IkReal x12351=(r01*sj6);
IkReal x12352=(r00*sj6);
IkReal x12353=((0.069)*sj2);
IkReal x12354=(cj6*r01);
IkReal x12355=((0.01)*cj5);
IkReal x12356=(r12*sj5);
IkReal x12357=((1.0)*sj5);
IkReal x12358=(cj6*r10);
IkReal x12359=(r02*sj5);
IkReal x12360=((1.0)*sj1);
IkReal x12361=((1.0)*cj1);
IkReal x12362=(cj5*r02);
IkReal x12363=(cj4*cj5);
IkReal x12364=(cj6*r00);
IkReal x12365=((1.0)*cj4);
IkReal x12366=(r11*sj6);
IkReal x12367=(cj5*x12350);
IkReal x12368=(cj2*x12344);
IkReal x12369=((0.069)*x12343);
IkReal x12370=(sj2*x12344);
IkReal x12371=((1.0)*x12343);
evalcond[0]=((((-1.0)*x12348*x12357))+x12370+x12346+(((-1.0)*cj2*x12343*x12360))+(((-1.0)*x12350*x12357)));
evalcond[1]=((((-1.0)*x12354*x12357))+x12362+(((-1.0)*x12352*x12357))+(((-1.0)*sj2*x12371))+(((-1.0)*x12360*x12368)));
evalcond[2]=((((-1.0)*x12345*x12351))+(((-1.0)*x12344*x12361))+((cj4*x12359))+((x12354*x12363))+((x12352*x12363))+((sj4*x12364)));
evalcond[3]=(((x12348*x12363))+(((-1.0)*x12343*x12361))+((sj4*x12358))+(((-1.0)*x12345*x12366))+((x12350*x12363))+((cj4*x12356)));
evalcond[4]=((((-1.0)*x12365*x12366))+(((-1.0)*x12345*x12356))+((sj1*sj2*x12343))+(((-1.0)*cj5*x12345*x12348))+x12368+(((-1.0)*x12345*x12367))+((cj4*x12358)));
evalcond[5]=((((-1.0)*x12345*x12359))+((cj4*x12364))+(((-1.0)*cj5*x12345*x12352))+(((-1.0)*cj5*x12345*x12354))+(((-1.0)*x12351*x12365))+(((-1.0)*cj2*x12371))+((sj1*x12370)));
evalcond[6]=((((0.01)*x12359))+((x12352*x12355))+((x12354*x12355))+((x12344*x12349))+(((-0.069)*sj1*x12368))+(((-1.0)*x12347*x12352))+(((-1.0)*x12347*x12354))+(((-1.0)*px))+(((-1.0)*x12343*x12353))+(((0.37429)*x12362))+(((0.069)*x12344)));
evalcond[7]=((((-1.0)*cj2*sj1*x12369))+(((0.01)*x12356))+((x12344*x12353))+(((-1.0)*x12347*x12348))+(((-1.0)*x12347*x12350))+((x12350*x12355))+x12369+((x12343*x12349))+(((-1.0)*py))+(((0.37429)*x12346))+((x12348*x12355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12372=(cj2*sj1);
IkReal x12373=(cj5*r02);
IkReal x12374=(cj6*sj5);
IkReal x12375=((1.0)*r01);
IkReal x12376=(cj5*r12);
IkReal x12377=((1.0)*r00);
IkReal x12378=(sj5*sj6);
IkReal x12379=(sj2*x12378);
CheckValue<IkReal> x12380 = IKatan2WithCheck(IkReal(((((-1.0)*x12377*x12379))+(((-1.0)*r11*x12372*x12374))+(((-1.0)*sj2*x12374*x12375))+((sj2*x12373))+((x12372*x12376))+(((-1.0)*r10*x12372*x12378)))),IkReal((((r10*x12379))+(((-1.0)*x12372*x12377*x12378))+(((-1.0)*x12372*x12374*x12375))+((r11*sj2*x12374))+((x12372*x12373))+(((-1.0)*sj2*x12376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12380.valid){
continue;
}
CheckValue<IkReal> x12381=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x12381.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x12380.value)+(((1.5707963267949)*(x12381.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12382=IKsin(j0);
IkReal x12383=IKcos(j0);
IkReal x12384=((1.0)*sj4);
IkReal x12385=(cj5*r12);
IkReal x12386=((0.37429)*sj5);
IkReal x12387=(r10*sj6);
IkReal x12388=((0.36442)*cj1);
IkReal x12389=(cj6*r11);
IkReal x12390=(r01*sj6);
IkReal x12391=(r00*sj6);
IkReal x12392=((0.069)*sj2);
IkReal x12393=(cj6*r01);
IkReal x12394=((0.01)*cj5);
IkReal x12395=(r12*sj5);
IkReal x12396=((1.0)*sj5);
IkReal x12397=(cj6*r10);
IkReal x12398=(r02*sj5);
IkReal x12399=((1.0)*sj1);
IkReal x12400=((1.0)*cj1);
IkReal x12401=(cj5*r02);
IkReal x12402=(cj4*cj5);
IkReal x12403=(cj6*r00);
IkReal x12404=((1.0)*cj4);
IkReal x12405=(r11*sj6);
IkReal x12406=(cj5*x12389);
IkReal x12407=(cj2*x12383);
IkReal x12408=((0.069)*x12382);
IkReal x12409=(sj2*x12383);
IkReal x12410=((1.0)*x12382);
evalcond[0]=(x12385+(((-1.0)*x12389*x12396))+(((-1.0)*cj2*x12382*x12399))+x12409+(((-1.0)*x12387*x12396)));
evalcond[1]=((((-1.0)*x12399*x12407))+(((-1.0)*x12393*x12396))+(((-1.0)*sj2*x12410))+x12401+(((-1.0)*x12391*x12396)));
evalcond[2]=(((sj4*x12403))+((x12391*x12402))+(((-1.0)*x12383*x12400))+((x12393*x12402))+((cj4*x12398))+(((-1.0)*x12384*x12390)));
evalcond[3]=(((sj4*x12397))+(((-1.0)*x12382*x12400))+((x12389*x12402))+(((-1.0)*x12384*x12405))+((cj4*x12395))+((x12387*x12402)));
evalcond[4]=(((sj1*sj2*x12382))+(((-1.0)*x12384*x12406))+(((-1.0)*cj5*x12384*x12387))+((cj4*x12397))+x12407+(((-1.0)*x12404*x12405))+(((-1.0)*x12384*x12395)));
evalcond[5]=((((-1.0)*x12390*x12404))+(((-1.0)*cj2*x12410))+((sj1*x12409))+(((-1.0)*cj5*x12384*x12393))+(((-1.0)*cj5*x12384*x12391))+((cj4*x12403))+(((-1.0)*x12384*x12398)));
evalcond[6]=((((0.01)*x12398))+(((0.069)*x12383))+(((-1.0)*x12382*x12392))+(((0.37429)*x12401))+(((-0.069)*sj1*x12407))+((x12391*x12394))+(((-1.0)*px))+((x12383*x12388))+(((-1.0)*x12386*x12393))+(((-1.0)*x12386*x12391))+((x12393*x12394)));
evalcond[7]=(((x12389*x12394))+(((0.01)*x12395))+(((0.37429)*x12385))+(((-1.0)*cj2*sj1*x12408))+(((-1.0)*py))+((x12383*x12392))+((x12382*x12388))+((x12387*x12394))+x12408+(((-1.0)*x12386*x12387))+(((-1.0)*x12386*x12389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12411=(cj2*sj1);
IkReal x12412=(cj5*r02);
IkReal x12413=(cj6*sj5);
IkReal x12414=((1.0)*r01);
IkReal x12415=(cj5*r12);
IkReal x12416=((1.0)*r00);
IkReal x12417=(sj5*sj6);
IkReal x12418=(sj2*x12417);
CheckValue<IkReal> x12419=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x12419.valid){
continue;
}
CheckValue<IkReal> x12420 = IKatan2WithCheck(IkReal(((((-1.0)*x12416*x12418))+(((-1.0)*sj2*x12413*x12414))+((sj2*x12412))+((x12411*x12415))+(((-1.0)*r11*x12411*x12413))+(((-1.0)*r10*x12411*x12417)))),IkReal((((r10*x12418))+(((-1.0)*sj2*x12415))+((x12411*x12412))+(((-1.0)*x12411*x12416*x12417))+(((-1.0)*x12411*x12413*x12414))+((r11*sj2*x12413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12420.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12419.value)))+(x12420.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12421=IKsin(j0);
IkReal x12422=IKcos(j0);
IkReal x12423=((0.01)*cj5);
IkReal x12424=(cj6*r11);
IkReal x12425=(cj5*r12);
IkReal x12426=(r10*sj6);
IkReal x12427=((0.37429)*sj5);
IkReal x12428=((0.36442)*cj1);
IkReal x12429=((1.0)*sj5);
IkReal x12430=(r00*sj6);
IkReal x12431=(cj6*r01);
IkReal x12432=(cj2*sj1);
IkReal x12433=(cj5*r02);
IkReal x12434=((0.01)*sj5);
IkReal x12435=((0.069)*x12421);
IkReal x12436=((0.069)*x12422);
IkReal x12437=((1.0)*x12421);
evalcond[0]=((((-1.0)*x12424*x12429))+x12425+(((-1.0)*x12432*x12437))+((sj2*x12422))+(((-1.0)*x12426*x12429)));
evalcond[1]=((((-1.0)*x12429*x12431))+(((-1.0)*x12429*x12430))+(((-1.0)*sj2*x12437))+x12433+(((-1.0)*x12422*x12432)));
evalcond[2]=(((x12423*x12430))+((x12423*x12431))+(((-1.0)*x12427*x12430))+(((-1.0)*x12427*x12431))+(((-1.0)*px))+((r02*x12434))+((x12422*x12428))+(((-1.0)*sj2*x12435))+x12436+(((-1.0)*x12432*x12436))+(((0.37429)*x12433)));
evalcond[3]=((((-1.0)*x12424*x12427))+((x12421*x12428))+(((-1.0)*py))+((r12*x12434))+x12435+(((-1.0)*x12432*x12435))+(((0.37429)*x12425))+((x12423*x12424))+((x12423*x12426))+((sj2*x12436))+(((-1.0)*x12426*x12427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12438=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x12438;
j4eval[1]=IKsign(x12438);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12439=((1.0)*sj5);
IkReal x12440=((((-1.0)*cj6*r01*x12439))+(((-1.0)*r00*sj6*x12439))+((cj5*r02)));
j4eval[0]=x12440;
j4eval[1]=IKsign(x12440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12441=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x12441;
j4eval[1]=IKsign(x12441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12442=(cj1*sj0);
IkReal x12443=(cj0*cj1);
IkReal x12444=(cj5*cj6);
IkReal x12445=((1.0)*sj6);
CheckValue<IkReal> x12446 = IKatan2WithCheck(IkReal((((r02*sj5*x12442))+(((-1.0)*cj5*r10*x12443*x12445))+((cj5*r00*sj6*x12442))+((r01*x12442*x12444))+(((-1.0)*r11*x12443*x12444))+(((-1.0)*r12*sj5*x12443)))),IkReal((((cj6*r10*x12443))+((r01*sj6*x12442))+(((-1.0)*cj6*r00*x12442))+(((-1.0)*r11*x12443*x12445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12446.valid){
continue;
}
CheckValue<IkReal> x12447=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x12447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12446.value)+(((1.5707963267949)*(x12447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12448=IKcos(j4);
IkReal x12449=IKsin(j4);
IkReal x12450=((1.0)*cj1);
IkReal x12451=(sj1*sj2);
IkReal x12452=(r10*sj6);
IkReal x12453=(r00*sj6);
IkReal x12454=((1.0)*sj6);
IkReal x12455=(r20*sj6);
IkReal x12456=(cj6*x12448);
IkReal x12457=(sj5*x12448);
IkReal x12458=(cj6*x12449);
IkReal x12459=(cj5*x12448);
IkReal x12460=(cj5*x12456);
IkReal x12461=((1.0)*sj5*x12449);
IkReal x12462=((1.0)*cj5*x12449);
evalcond[0]=(sj1+((x12455*x12459))+((r22*x12457))+((r20*x12458))+((r21*x12460))+(((-1.0)*r21*x12449*x12454)));
evalcond[1]=((((-1.0)*cj0*x12450))+((r02*x12457))+((r01*x12460))+((x12453*x12459))+(((-1.0)*r01*x12449*x12454))+((r00*x12458)));
evalcond[2]=((((-1.0)*sj0*x12450))+((r11*x12460))+((r12*x12457))+(((-1.0)*r11*x12449*x12454))+((x12452*x12459))+((r10*x12458)));
evalcond[3]=((((-1.0)*r22*x12461))+((cj1*sj2))+(((-1.0)*cj5*r21*x12458))+(((-1.0)*cj5*r20*x12449*x12454))+(((-1.0)*r21*x12448*x12454))+((r20*x12456)));
evalcond[4]=((((-1.0)*r11*x12448*x12454))+((cj0*cj2))+(((-1.0)*cj5*r11*x12458))+((sj0*x12451))+(((-1.0)*x12452*x12462))+((r10*x12456))+(((-1.0)*r12*x12461)));
evalcond[5]=((((-1.0)*r02*x12461))+(((-1.0)*cj5*r01*x12458))+(((-1.0)*cj2*sj0))+((cj0*x12451))+(((-1.0)*r01*x12448*x12454))+(((-1.0)*x12453*x12462))+((r00*x12456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12463=(sj1*sj6);
IkReal x12464=((1.0)*cj6);
IkReal x12465=(cj1*sj0);
IkReal x12466=(cj5*cj6);
IkReal x12467=(r20*x12465);
CheckValue<IkReal> x12468 = IKatan2WithCheck(IkReal((((r22*sj5*x12465))+((r11*sj1*x12466))+((cj5*sj6*x12467))+((r12*sj1*sj5))+((r21*x12465*x12466))+((cj5*r10*x12463)))),IkReal(((((-1.0)*x12464*x12467))+(((-1.0)*r10*sj1*x12464))+((r11*x12463))+((r21*sj6*x12465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12468.valid){
continue;
}
CheckValue<IkReal> x12469=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x12464))+(((-1.0)*r00*sj5*sj6))+((cj5*r02)))),-1);
if(!x12469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12468.value)+(((1.5707963267949)*(x12469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12470=IKcos(j4);
IkReal x12471=IKsin(j4);
IkReal x12472=((1.0)*cj1);
IkReal x12473=(sj1*sj2);
IkReal x12474=(r10*sj6);
IkReal x12475=(r00*sj6);
IkReal x12476=((1.0)*sj6);
IkReal x12477=(r20*sj6);
IkReal x12478=(cj6*x12470);
IkReal x12479=(sj5*x12470);
IkReal x12480=(cj6*x12471);
IkReal x12481=(cj5*x12470);
IkReal x12482=(cj5*x12478);
IkReal x12483=((1.0)*sj5*x12471);
IkReal x12484=((1.0)*cj5*x12471);
evalcond[0]=((((-1.0)*r21*x12471*x12476))+sj1+((x12477*x12481))+((r20*x12480))+((r22*x12479))+((r21*x12482)));
evalcond[1]=((((-1.0)*r01*x12471*x12476))+(((-1.0)*cj0*x12472))+((r00*x12480))+((r01*x12482))+((x12475*x12481))+((r02*x12479)));
evalcond[2]=((((-1.0)*r11*x12471*x12476))+((r12*x12479))+((r11*x12482))+(((-1.0)*sj0*x12472))+((x12474*x12481))+((r10*x12480)));
evalcond[3]=((((-1.0)*r22*x12483))+((cj1*sj2))+((r20*x12478))+(((-1.0)*cj5*r21*x12480))+(((-1.0)*r21*x12470*x12476))+(((-1.0)*cj5*r20*x12471*x12476)));
evalcond[4]=((((-1.0)*x12474*x12484))+(((-1.0)*r12*x12483))+((cj0*cj2))+(((-1.0)*r11*x12470*x12476))+(((-1.0)*cj5*r11*x12480))+((sj0*x12473))+((r10*x12478)));
evalcond[5]=((((-1.0)*cj5*r01*x12480))+((r00*x12478))+(((-1.0)*r01*x12470*x12476))+(((-1.0)*cj2*sj0))+((cj0*x12473))+(((-1.0)*r02*x12483))+(((-1.0)*x12475*x12484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12485=(cj0*cj1);
IkReal x12486=(cj5*cj6);
IkReal x12487=(cj5*sj6);
IkReal x12488=(r00*sj1);
IkReal x12489=((1.0)*cj6);
IkReal x12490=(r01*sj1);
CheckValue<IkReal> x12491 = IKatan2WithCheck(IkReal((((x12486*x12490))+((r22*sj5*x12485))+((r20*x12485*x12487))+((r21*x12485*x12486))+((x12487*x12488))+((r02*sj1*sj5)))),IkReal(((((-1.0)*x12488*x12489))+((sj6*x12490))+(((-1.0)*r20*x12485*x12489))+((r21*sj6*x12485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12491.valid){
continue;
}
CheckValue<IkReal> x12492=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x12492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12491.value)+(((1.5707963267949)*(x12492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12493=IKcos(j4);
IkReal x12494=IKsin(j4);
IkReal x12495=((1.0)*cj1);
IkReal x12496=(sj1*sj2);
IkReal x12497=(r10*sj6);
IkReal x12498=(r00*sj6);
IkReal x12499=((1.0)*sj6);
IkReal x12500=(r20*sj6);
IkReal x12501=(cj6*x12493);
IkReal x12502=(sj5*x12493);
IkReal x12503=(cj6*x12494);
IkReal x12504=(cj5*x12493);
IkReal x12505=(cj5*x12501);
IkReal x12506=((1.0)*sj5*x12494);
IkReal x12507=((1.0)*cj5*x12494);
evalcond[0]=(sj1+(((-1.0)*r21*x12494*x12499))+((r20*x12503))+((r21*x12505))+((r22*x12502))+((x12500*x12504)));
evalcond[1]=(((r01*x12505))+((r00*x12503))+((x12498*x12504))+(((-1.0)*cj0*x12495))+((r02*x12502))+(((-1.0)*r01*x12494*x12499)));
evalcond[2]=((((-1.0)*r11*x12494*x12499))+((r11*x12505))+(((-1.0)*sj0*x12495))+((r10*x12503))+((x12497*x12504))+((r12*x12502)));
evalcond[3]=((((-1.0)*r22*x12506))+((cj1*sj2))+((r20*x12501))+(((-1.0)*r21*x12493*x12499))+(((-1.0)*cj5*r21*x12503))+(((-1.0)*cj5*r20*x12494*x12499)));
evalcond[4]=(((sj0*x12496))+(((-1.0)*r11*x12493*x12499))+(((-1.0)*cj5*r11*x12503))+(((-1.0)*r12*x12506))+((cj0*cj2))+((r10*x12501))+(((-1.0)*x12497*x12507)));
evalcond[5]=((((-1.0)*x12498*x12507))+(((-1.0)*r02*x12506))+(((-1.0)*cj2*sj0))+((r00*x12501))+(((-1.0)*cj5*r01*x12503))+((cj0*x12496))+(((-1.0)*r01*x12493*x12499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x12508=((1.0)*cj6*sj5);
IkReal x12509=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x12508))+(((-1.0)*r10*x12509)))))+(IKabs(((((-1.0)*r01*x12508))+(((-1.0)*r00*x12509))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x12510=cj5*cj5;
IkReal x12511=cj6*cj6;
IkReal x12512=r22*r22;
IkReal x12513=r21*r21;
IkReal x12514=r20*r20;
IkReal x12515=(cj6*r21);
IkReal x12516=(r20*sj6);
IkReal x12517=(cj1*cj2);
IkReal x12518=(r22*sj5);
IkReal x12519=(cj6*r20);
IkReal x12520=((2.0)*cj5);
IkReal x12521=(cj1*sj2);
IkReal x12522=((1.0)*x12513);
IkReal x12523=((1.0)*x12514);
IkReal x12524=((1.0)*r21*sj6);
IkReal x12525=((1.0)*cj5*x12521);
IkReal x12526=(x12510*x12511);
IkReal x12527=((((2.0)*x12515*x12516))+((x12510*x12512))+(((-1.0)*x12522*x12526))+((x12511*x12513))+(((-1.0)*x12522))+(((-1.0)*x12516*x12518*x12520))+((x12514*x12526))+(((-1.0)*x12512))+(((-1.0)*x12511*x12523))+(((-1.0)*x12515*x12518*x12520))+(((-2.0)*x12510*x12515*x12516))+(((-1.0)*x12510*x12523)));
j4eval[0]=x12527;
j4eval[1]=((IKabs(((((-1.0)*x12521*x12524))+((x12517*x12518))+((cj5*x12515*x12517))+((x12519*x12521))+((cj5*x12516*x12517)))))+(IKabs((((x12517*x12519))+(((-1.0)*x12516*x12525))+(((-1.0)*x12515*x12525))+(((-1.0)*x12518*x12521))+(((-1.0)*x12517*x12524))))));
j4eval[2]=IKsign(x12527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(cj1+(((-1.0)*cj1*cj2*sj1))+(((5.28144927536232)*(cj1*cj1))));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((9522.0)+(((-9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12528=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*sj6*x12528))+((cj6*r20)))))+(IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*cj5*cj6*x12528))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12529=((1.0)*cj5);
j4eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x12529))+(((-1.0)*r22*sj5))+(((-1.0)*r20*sj6*x12529))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x12530=((1.0)*cj5);
CheckValue<IkReal> x12532 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r21*x12530))+(((-1.0)*r22*sj5))+(((-1.0)*r20*sj6*x12530)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12532.valid){
continue;
}
IkReal x12531=x12532.value;
j4array[0]=((-1.0)*x12531);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x12531)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x12533=IKsin(j4);
IkReal x12534=IKcos(j4);
IkReal x12535=((1.0)*x12533);
evalcond[0]=((((-1.0)*r21*sj6*x12534))+(((-1.0)*r22*sj5*x12535))+((cj6*r20*x12534))+(((-1.0)*cj5*r20*sj6*x12535))+(((-1.0)*cj5*cj6*r21*x12535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12536=(cj6*r10);
IkReal x12537=(sj2*sj4);
IkReal x12538=(r12*sj5);
IkReal x12539=(r01*sj6);
IkReal x12540=(cj2*r11);
IkReal x12541=(cj4*sj6);
IkReal x12542=((1.0)*cj6);
IkReal x12543=(cj4*r00);
IkReal x12544=(cj5*sj6);
IkReal x12545=(cj5*cj6);
IkReal x12546=(cj2*sj4);
IkReal x12547=(r02*sj5);
IkReal x12548=(cj4*sj2);
IkReal x12549=((1.0)*cj2*cj4);
if( IKabs(((((-1.0)*x12546*x12547))+((r11*sj2*x12541))+((r10*x12537*x12544))+(((-1.0)*x12536*x12548))+(((-1.0)*r00*x12544*x12546))+(((-1.0)*x12539*x12549))+((x12537*x12538))+((cj2*cj6*x12543))+((r11*x12537*x12545))+(((-1.0)*cj5*r01*x12542*x12546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x12537*x12547))+((x12539*x12548))+((r01*x12537*x12545))+(((-1.0)*x12536*x12549))+((r00*x12537*x12544))+((x12538*x12546))+(((-1.0)*sj2*x12542*x12543))+((x12540*x12541))+((sj4*x12540*x12545))+((r10*x12544*x12546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12546*x12547))+((r11*sj2*x12541))+((r10*x12537*x12544))+(((-1.0)*x12536*x12548))+(((-1.0)*r00*x12544*x12546))+(((-1.0)*x12539*x12549))+((x12537*x12538))+((cj2*cj6*x12543))+((r11*x12537*x12545))+(((-1.0)*cj5*r01*x12542*x12546))))+IKsqr((((x12537*x12547))+((x12539*x12548))+((r01*x12537*x12545))+(((-1.0)*x12536*x12549))+((r00*x12537*x12544))+((x12538*x12546))+(((-1.0)*sj2*x12542*x12543))+((x12540*x12541))+((sj4*x12540*x12545))+((r10*x12544*x12546))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x12546*x12547))+((r11*sj2*x12541))+((r10*x12537*x12544))+(((-1.0)*x12536*x12548))+(((-1.0)*r00*x12544*x12546))+(((-1.0)*x12539*x12549))+((x12537*x12538))+((cj2*cj6*x12543))+((r11*x12537*x12545))+(((-1.0)*cj5*r01*x12542*x12546))), (((x12537*x12547))+((x12539*x12548))+((r01*x12537*x12545))+(((-1.0)*x12536*x12549))+((r00*x12537*x12544))+((x12538*x12546))+(((-1.0)*sj2*x12542*x12543))+((x12540*x12541))+((sj4*x12540*x12545))+((r10*x12544*x12546))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12550=IKcos(j0);
IkReal x12551=IKsin(j0);
IkReal x12552=((1.0)*sj4);
IkReal x12553=((0.37429)*sj5);
IkReal x12554=(r10*sj6);
IkReal x12555=(cj6*r00);
IkReal x12556=((0.37429)*cj5);
IkReal x12557=(cj6*r01);
IkReal x12558=((0.01)*cj5);
IkReal x12559=((1.0)*cj4);
IkReal x12560=(r00*sj6);
IkReal x12561=(r02*sj5);
IkReal x12562=(r12*sj5);
IkReal x12563=(cj6*r10);
IkReal x12564=(r01*sj6);
IkReal x12565=(r11*sj6);
IkReal x12566=(sj2*x12550);
IkReal x12567=(cj5*cj6*r11);
IkReal x12568=((0.069)*x12551);
IkReal x12569=(cj2*x12550);
IkReal x12570=((0.069)*x12550);
IkReal x12571=(sj2*x12551);
IkReal x12572=((1.0)*cj2*x12551);
evalcond[0]=((((-1.0)*cj5*x12552*x12554))+(((-1.0)*x12552*x12567))+(((-1.0)*x12552*x12562))+((cj4*x12563))+(((-1.0)*x12559*x12565))+x12569+x12571);
evalcond[1]=((((-1.0)*cj5*x12552*x12560))+(((-1.0)*cj5*x12552*x12557))+(((-1.0)*x12572))+(((-1.0)*x12552*x12561))+(((-1.0)*x12559*x12564))+x12566+((cj4*x12555)));
evalcond[2]=((((-1.0)*cj5*x12554*x12559))+((sj4*x12565))+(((-1.0)*x12572))+(((-1.0)*x12552*x12563))+(((-1.0)*x12559*x12567))+(((-1.0)*x12559*x12562))+x12566);
evalcond[3]=(((sj4*x12564))+(((-1.0)*x12569))+(((-1.0)*x12571))+(((-1.0)*x12559*x12561))+(((-1.0)*x12552*x12555))+(((-1.0)*cj5*x12557*x12559))+(((-1.0)*cj5*x12559*x12560)));
evalcond[4]=((((-1.0)*x12553*x12560))+(((-0.069)*x12569))+((x12557*x12558))+((x12558*x12560))+(((-1.0)*x12553*x12557))+(((-1.0)*px))+((r02*x12556))+(((0.01)*x12561))+(((-1.0)*sj2*x12568))+x12570);
evalcond[5]=(((r12*x12556))+((x12554*x12558))+(((-1.0)*x12553*x12554))+(((-1.0)*cj2*x12568))+(((-1.0)*py))+(((0.01)*x12562))+(((0.069)*x12566))+x12568+(((-1.0)*cj6*r11*x12553))+((cj6*r11*x12558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x12573=((1.0)*cj5);
CheckValue<IkReal> x12575 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(((((-1.0)*r20*sj6*x12573))+(((-1.0)*cj6*r21*x12573))+(((-1.0)*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12575.valid){
continue;
}
IkReal x12574=x12575.value;
j4array[0]=((-1.0)*x12574);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x12574)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x12576=IKsin(j4);
IkReal x12577=IKcos(j4);
IkReal x12578=((1.0)*cj6);
IkReal x12579=(cj5*x12577);
evalcond[0]=((((-1.0)*r20*sj6*x12579))+(((-1.0)*r22*sj5*x12577))+(((-1.0)*r20*x12576*x12578))+(((-1.0)*r21*x12578*x12579))+((r21*sj6*x12576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12580=(cj6*r10);
IkReal x12581=(sj2*sj4);
IkReal x12582=(r12*sj5);
IkReal x12583=(r01*sj6);
IkReal x12584=(cj2*r11);
IkReal x12585=(cj4*sj6);
IkReal x12586=((1.0)*cj6);
IkReal x12587=(cj4*r00);
IkReal x12588=(cj5*sj6);
IkReal x12589=(cj5*cj6);
IkReal x12590=(cj2*sj4);
IkReal x12591=(r02*sj5);
IkReal x12592=(cj4*sj2);
IkReal x12593=((1.0)*cj2*cj4);
if( IKabs((((r10*x12581*x12588))+((cj2*cj6*x12587))+(((-1.0)*x12580*x12592))+(((-1.0)*cj5*r01*x12586*x12590))+((r11*sj2*x12585))+(((-1.0)*r00*x12588*x12590))+(((-1.0)*x12590*x12591))+((r11*x12581*x12589))+(((-1.0)*x12583*x12593))+((x12581*x12582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x12580*x12593))+((r10*x12588*x12590))+((r00*x12581*x12588))+((x12584*x12585))+(((-1.0)*sj2*x12586*x12587))+((x12582*x12590))+((x12583*x12592))+((sj4*x12584*x12589))+((r01*x12581*x12589))+((x12581*x12591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x12581*x12588))+((cj2*cj6*x12587))+(((-1.0)*x12580*x12592))+(((-1.0)*cj5*r01*x12586*x12590))+((r11*sj2*x12585))+(((-1.0)*r00*x12588*x12590))+(((-1.0)*x12590*x12591))+((r11*x12581*x12589))+(((-1.0)*x12583*x12593))+((x12581*x12582))))+IKsqr(((((-1.0)*x12580*x12593))+((r10*x12588*x12590))+((r00*x12581*x12588))+((x12584*x12585))+(((-1.0)*sj2*x12586*x12587))+((x12582*x12590))+((x12583*x12592))+((sj4*x12584*x12589))+((r01*x12581*x12589))+((x12581*x12591))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x12581*x12588))+((cj2*cj6*x12587))+(((-1.0)*x12580*x12592))+(((-1.0)*cj5*r01*x12586*x12590))+((r11*sj2*x12585))+(((-1.0)*r00*x12588*x12590))+(((-1.0)*x12590*x12591))+((r11*x12581*x12589))+(((-1.0)*x12583*x12593))+((x12581*x12582))), ((((-1.0)*x12580*x12593))+((r10*x12588*x12590))+((r00*x12581*x12588))+((x12584*x12585))+(((-1.0)*sj2*x12586*x12587))+((x12582*x12590))+((x12583*x12592))+((sj4*x12584*x12589))+((r01*x12581*x12589))+((x12581*x12591))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12594=IKcos(j0);
IkReal x12595=IKsin(j0);
IkReal x12596=((1.0)*sj4);
IkReal x12597=((0.37429)*sj5);
IkReal x12598=(r10*sj6);
IkReal x12599=(cj6*r00);
IkReal x12600=((0.37429)*cj5);
IkReal x12601=(cj6*r01);
IkReal x12602=((0.01)*cj5);
IkReal x12603=((1.0)*cj4);
IkReal x12604=(r00*sj6);
IkReal x12605=(r02*sj5);
IkReal x12606=(r12*sj5);
IkReal x12607=(cj6*r10);
IkReal x12608=(r01*sj6);
IkReal x12609=(r11*sj6);
IkReal x12610=(sj2*x12594);
IkReal x12611=(cj5*cj6*r11);
IkReal x12612=((0.069)*x12595);
IkReal x12613=(cj2*x12594);
IkReal x12614=((0.069)*x12594);
IkReal x12615=(sj2*x12595);
IkReal x12616=((1.0)*cj2*x12595);
evalcond[0]=((((-1.0)*cj5*x12596*x12598))+(((-1.0)*x12596*x12611))+((cj4*x12607))+x12615+x12613+(((-1.0)*x12596*x12606))+(((-1.0)*x12603*x12609)));
evalcond[1]=((((-1.0)*cj5*x12596*x12601))+(((-1.0)*cj5*x12596*x12604))+x12610+(((-1.0)*x12596*x12605))+((cj4*x12599))+(((-1.0)*x12603*x12608))+(((-1.0)*x12616)));
evalcond[2]=((((-1.0)*x12603*x12611))+((sj4*x12609))+(((-1.0)*cj5*x12598*x12603))+x12610+(((-1.0)*x12596*x12607))+(((-1.0)*x12603*x12606))+(((-1.0)*x12616)));
evalcond[3]=((((-1.0)*x12596*x12599))+(((-1.0)*cj5*x12601*x12603))+(((-1.0)*cj5*x12603*x12604))+((sj4*x12608))+(((-1.0)*x12613))+(((-1.0)*x12615))+(((-1.0)*x12603*x12605)));
evalcond[4]=(((x12602*x12604))+(((-0.069)*x12613))+(((0.01)*x12605))+(((-1.0)*px))+(((-1.0)*x12597*x12601))+(((-1.0)*x12597*x12604))+((x12601*x12602))+(((-1.0)*sj2*x12612))+((r02*x12600))+x12614);
evalcond[5]=((((-1.0)*x12597*x12598))+(((-1.0)*cj2*x12612))+(((0.069)*x12610))+((x12598*x12602))+(((0.01)*x12606))+((r12*x12600))+(((-1.0)*py))+x12612+(((-1.0)*cj6*r11*x12597))+((cj6*r11*x12602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12617=((690.0)*sj5);
IkReal x12618=(cj5*sj2);
IkReal x12619=((25826.01)*r02);
IkReal x12620=(cj6*r11);
IkReal x12621=((25826.01)*sj5);
IkReal x12622=(r00*sj6);
IkReal x12623=(r10*sj6);
IkReal x12624=((25826.01)*r12);
IkReal x12625=(cj6*r01);
IkReal x12626=((69000.0)*py);
IkReal x12627=((69000.0)*px);
IkReal x12628=((690.0)*cj5);
IkReal x12629=(cj2*cj5);
IkReal x12630=(cj2*x12628);
CheckValue<IkReal> x12631 = IKatan2WithCheck(IkReal((((x12618*x12619))+(((-1.0)*cj2*x12626))+(((-1.0)*r12*x12617))+(((-1.0)*x12620*x12628))+(((-1.0)*x12623*x12628))+(((-1.0)*cj2*x12620*x12621))+((x12621*x12623))+((x12620*x12621))+((x12623*x12630))+((x12620*x12630))+((r02*sj2*x12617))+(((-1.0)*sj2*x12621*x12622))+(((-1.0)*sj2*x12621*x12625))+((cj2*r12*x12617))+x12626+(((690.0)*x12618*x12622))+(((690.0)*x12618*x12625))+((x12624*x12629))+(((-1.0)*sj2*x12627))+(((-1.0)*cj5*x12624))+(((-1.0)*cj2*x12621*x12623)))),IkReal(((((-1.0)*x12622*x12628))+((sj2*x12621*x12623))+(((-1.0)*x12625*x12628))+(((-1.0)*cj2*x12627))+((x12619*x12629))+((x12625*x12630))+(((-1.0)*r02*x12617))+((x12621*x12625))+((x12621*x12622))+((cj2*r02*x12617))+((sj2*x12626))+(((-1.0)*cj5*x12619))+(((-1.0)*x12618*x12624))+((x12622*x12630))+x12627+(((-1.0)*r12*sj2*x12617))+(((-1.0)*cj2*x12621*x12622))+(((-1.0)*cj2*x12621*x12625))+((sj2*x12620*x12621))+(((-690.0)*x12618*x12623))+(((-690.0)*x12618*x12620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12631.valid){
continue;
}
CheckValue<IkReal> x12632=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-9522.0)*cj2)))),-1);
if(!x12632.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x12631.value)+(((1.5707963267949)*(x12632.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x12633=IKcos(j0);
IkReal x12634=IKsin(j0);
IkReal x12635=((0.01)*cj5);
IkReal x12636=(cj6*r01);
IkReal x12637=((0.37429)*sj5);
IkReal x12638=(cj6*r11);
IkReal x12639=(r00*sj6);
IkReal x12640=((0.01)*sj5);
IkReal x12641=((0.37429)*cj5);
IkReal x12642=(r10*sj6);
IkReal x12643=((0.069)*x12633);
IkReal x12644=((0.069)*x12634);
evalcond[0]=(((x12635*x12636))+((x12635*x12639))+(((-1.0)*x12636*x12637))+(((-1.0)*x12637*x12639))+(((-1.0)*sj2*x12644))+(((-1.0)*cj2*x12643))+(((-1.0)*px))+x12643+((r02*x12640))+((r02*x12641)));
evalcond[1]=(((x12635*x12638))+(((-1.0)*x12637*x12642))+((r12*x12640))+((r12*x12641))+(((-1.0)*x12637*x12638))+((sj2*x12643))+(((-1.0)*cj2*x12644))+(((-1.0)*py))+x12644+((x12635*x12642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12645=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x12645;
j4eval[1]=IKsign(x12645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12646=((1.0)*sj5);
IkReal x12647=(((cj5*r12))+(((-1.0)*cj6*r11*x12646))+(((-1.0)*r10*sj6*x12646)));
j4eval[0]=x12647;
j4eval[1]=IKsign(x12647);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12648=cj6*cj6;
IkReal x12649=cj5*cj5;
IkReal x12650=(cj5*sj5);
IkReal x12651=(cj6*r21);
IkReal x12652=((1.0)*r11);
IkReal x12653=(r10*r20);
IkReal x12654=(r10*sj6);
IkReal x12655=(r12*r22);
IkReal x12656=(r21*x12648);
IkReal x12657=(cj6*r20*sj6);
IkReal x12658=(r11*x12649);
IkReal x12659=((1.0)*x12649);
IkReal x12660=(((cj6*r11*r22*x12650))+(((-1.0)*x12652*x12657))+(((-1.0)*x12652*x12656))+((r12*r20*sj6*x12650))+((r11*r21))+(((-1.0)*x12651*x12654))+(((-1.0)*x12648*x12653*x12659))+((x12649*x12651*x12654))+((r22*x12650*x12654))+((x12657*x12658))+((x12648*x12653))+((x12649*x12653))+((x12656*x12658))+x12655+(((-1.0)*x12655*x12659))+((r12*x12650*x12651)));
j4eval[0]=x12660;
j4eval[1]=IKsign(x12660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12661=cj6*cj6;
IkReal x12662=cj5*cj5;
IkReal x12663=(r22*sj5);
IkReal x12664=(cj0*sj2);
IkReal x12665=(r12*r22);
IkReal x12666=(cj5*sj6);
IkReal x12667=((1.0)*r11);
IkReal x12668=(cj6*r21);
IkReal x12669=(cj6*r20);
IkReal x12670=(r12*sj5);
IkReal x12671=((1.0)*sj6);
IkReal x12672=((1.0)*cj2*sj0);
IkReal x12673=((1.0)*x12662);
IkReal x12674=(r21*x12661);
IkReal x12675=(r10*x12662);
IkReal x12676=(r11*x12662);
IkReal x12677=(r10*r20*x12661);
CheckValue<IkReal> x12678 = IKatan2WithCheck(IkReal(((((-1.0)*x12669*x12672))+((x12664*x12669))+((cj2*r21*sj0*sj6))+(((-1.0)*r21*x12664*x12671)))),IkReal((((r20*x12664*x12666))+(((-1.0)*cj5*x12668*x12672))+((x12663*x12664))+(((-1.0)*x12663*x12672))+(((-1.0)*r20*x12666*x12672))+((cj5*x12664*x12668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12678.valid){
continue;
}
CheckValue<IkReal> x12679=IKPowWithIntegerCheck(IKsign((((r20*x12675))+((r11*r21))+(((-1.0)*x12665*x12673))+(((-1.0)*x12667*x12674))+(((-1.0)*sj6*x12667*x12669))+(((-1.0)*r10*x12668*x12671))+((sj6*x12668*x12675))+((r20*x12666*x12670))+((sj6*x12669*x12676))+((x12674*x12676))+(((-1.0)*x12673*x12677))+((cj5*cj6*r11*x12663))+x12677+x12665+((cj5*x12668*x12670))+((r10*x12663*x12666)))),-1);
if(!x12679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12678.value)+(((1.5707963267949)*(x12679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12680=IKsin(j4);
IkReal x12681=IKcos(j4);
IkReal x12682=(cj0*sj2);
IkReal x12683=(cj5*cj6);
IkReal x12684=(cj0*cj2);
IkReal x12685=(r11*sj6);
IkReal x12686=(cj6*r20);
IkReal x12687=(cj5*sj6);
IkReal x12688=(cj6*r10);
IkReal x12689=(cj6*r00);
IkReal x12690=((1.0)*sj0);
IkReal x12691=(cj2*x12690);
IkReal x12692=((1.0)*x12681);
IkReal x12693=((1.0)*x12680);
IkReal x12694=(sj6*x12680);
IkReal x12695=(sj5*x12693);
evalcond[0]=((((-1.0)*r22*x12695))+(((-1.0)*r20*x12687*x12693))+(((-1.0)*r21*sj6*x12692))+((x12681*x12686))+(((-1.0)*r21*x12683*x12693)));
evalcond[1]=((((-1.0)*r22*sj5*x12692))+((r21*x12694))+(((-1.0)*r20*x12687*x12692))+(((-1.0)*x12686*x12693))+(((-1.0)*r21*x12683*x12692)));
evalcond[2]=((((-1.0)*r12*x12695))+(((-1.0)*r10*x12687*x12693))+((sj0*sj2))+x12684+(((-1.0)*r11*x12683*x12693))+((x12681*x12688))+(((-1.0)*x12685*x12692)));
evalcond[3]=((((-1.0)*r02*x12695))+(((-1.0)*x12691))+(((-1.0)*r01*sj6*x12692))+(((-1.0)*r01*x12683*x12693))+x12682+((x12681*x12689))+(((-1.0)*r00*x12687*x12693)));
evalcond[4]=((((-1.0)*x12691))+(((-1.0)*r10*x12687*x12692))+(((-1.0)*x12688*x12693))+x12682+((x12680*x12685))+(((-1.0)*r11*x12683*x12692))+(((-1.0)*r12*sj5*x12692)));
evalcond[5]=((((-1.0)*x12689*x12693))+(((-1.0)*sj2*x12690))+(((-1.0)*r01*x12683*x12692))+(((-1.0)*r02*sj5*x12692))+((r01*x12694))+(((-1.0)*x12684))+(((-1.0)*r00*x12687*x12692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12696=(cj0*sj2);
IkReal x12697=(cj6*r20);
IkReal x12698=(r22*sj5);
IkReal x12699=((1.0)*sj5);
IkReal x12700=(r21*sj6);
IkReal x12701=((1.0)*cj2*sj0);
IkReal x12702=(cj5*cj6*r21);
IkReal x12703=(cj5*r20*sj6);
CheckValue<IkReal> x12704=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r11*x12699))+((cj5*r12))+(((-1.0)*r10*sj6*x12699)))),-1);
if(!x12704.valid){
continue;
}
CheckValue<IkReal> x12705 = IKatan2WithCheck(IkReal((((x12696*x12697))+((cj2*sj0*x12700))+(((-1.0)*x12696*x12700))+(((-1.0)*x12697*x12701)))),IkReal((((x12696*x12698))+(((-1.0)*x12701*x12703))+(((-1.0)*x12701*x12702))+((x12696*x12703))+((x12696*x12702))+(((-1.0)*x12698*x12701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12704.value)))+(x12705.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12706=IKsin(j4);
IkReal x12707=IKcos(j4);
IkReal x12708=(cj0*sj2);
IkReal x12709=(cj5*cj6);
IkReal x12710=(cj0*cj2);
IkReal x12711=(r11*sj6);
IkReal x12712=(cj6*r20);
IkReal x12713=(cj5*sj6);
IkReal x12714=(cj6*r10);
IkReal x12715=(cj6*r00);
IkReal x12716=((1.0)*sj0);
IkReal x12717=(cj2*x12716);
IkReal x12718=((1.0)*x12707);
IkReal x12719=((1.0)*x12706);
IkReal x12720=(sj6*x12706);
IkReal x12721=(sj5*x12719);
evalcond[0]=((((-1.0)*r20*x12713*x12719))+(((-1.0)*r21*x12709*x12719))+(((-1.0)*r22*x12721))+((x12707*x12712))+(((-1.0)*r21*sj6*x12718)));
evalcond[1]=((((-1.0)*r22*sj5*x12718))+(((-1.0)*r20*x12713*x12718))+((r21*x12720))+(((-1.0)*r21*x12709*x12718))+(((-1.0)*x12712*x12719)));
evalcond[2]=((((-1.0)*r11*x12709*x12719))+((sj0*sj2))+(((-1.0)*r10*x12713*x12719))+x12710+((x12707*x12714))+(((-1.0)*r12*x12721))+(((-1.0)*x12711*x12718)));
evalcond[3]=((((-1.0)*r02*x12721))+(((-1.0)*x12717))+x12708+((x12707*x12715))+(((-1.0)*r00*x12713*x12719))+(((-1.0)*r01*x12709*x12719))+(((-1.0)*r01*sj6*x12718)));
evalcond[4]=((((-1.0)*r12*sj5*x12718))+(((-1.0)*x12717))+(((-1.0)*r11*x12709*x12718))+(((-1.0)*x12714*x12719))+(((-1.0)*r10*x12713*x12718))+x12708+((x12706*x12711)));
evalcond[5]=((((-1.0)*x12710))+(((-1.0)*x12715*x12719))+(((-1.0)*r02*sj5*x12718))+(((-1.0)*sj2*x12716))+(((-1.0)*r00*x12713*x12718))+((r01*x12720))+(((-1.0)*r01*x12709*x12718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12722=(sj0*sj2);
IkReal x12723=(cj0*cj2);
IkReal x12724=(cj6*r20);
IkReal x12725=(r22*sj5);
IkReal x12726=((1.0)*r21*sj6);
IkReal x12727=(cj5*cj6*r21);
IkReal x12728=(cj5*r20*sj6);
CheckValue<IkReal> x12729=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x12729.valid){
continue;
}
CheckValue<IkReal> x12730 = IKatan2WithCheck(IkReal((((x12723*x12724))+((x12722*x12724))+(((-1.0)*x12723*x12726))+(((-1.0)*x12722*x12726)))),IkReal((((x12723*x12728))+((x12723*x12725))+((x12723*x12727))+((x12722*x12728))+((x12722*x12725))+((x12722*x12727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12729.value)))+(x12730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12731=IKsin(j4);
IkReal x12732=IKcos(j4);
IkReal x12733=(cj0*sj2);
IkReal x12734=(cj5*cj6);
IkReal x12735=(cj0*cj2);
IkReal x12736=(r11*sj6);
IkReal x12737=(cj6*r20);
IkReal x12738=(cj5*sj6);
IkReal x12739=(cj6*r10);
IkReal x12740=(cj6*r00);
IkReal x12741=((1.0)*sj0);
IkReal x12742=(cj2*x12741);
IkReal x12743=((1.0)*x12732);
IkReal x12744=((1.0)*x12731);
IkReal x12745=(sj6*x12731);
IkReal x12746=(sj5*x12744);
evalcond[0]=((((-1.0)*r20*x12738*x12744))+(((-1.0)*r21*sj6*x12743))+((x12732*x12737))+(((-1.0)*r22*x12746))+(((-1.0)*r21*x12734*x12744)));
evalcond[1]=((((-1.0)*r20*x12738*x12743))+(((-1.0)*r22*sj5*x12743))+(((-1.0)*r21*x12734*x12743))+((r21*x12745))+(((-1.0)*x12737*x12744)));
evalcond[2]=(((x12732*x12739))+(((-1.0)*r12*x12746))+(((-1.0)*r11*x12734*x12744))+((sj0*sj2))+(((-1.0)*r10*x12738*x12744))+x12735+(((-1.0)*x12736*x12743)));
evalcond[3]=(((x12732*x12740))+(((-1.0)*r02*x12746))+(((-1.0)*r00*x12738*x12744))+(((-1.0)*x12742))+x12733+(((-1.0)*r01*sj6*x12743))+(((-1.0)*r01*x12734*x12744)));
evalcond[4]=((((-1.0)*r11*x12734*x12743))+((x12731*x12736))+(((-1.0)*x12742))+(((-1.0)*r10*x12738*x12743))+(((-1.0)*r12*sj5*x12743))+x12733+(((-1.0)*x12739*x12744)));
evalcond[5]=((((-1.0)*x12735))+(((-1.0)*x12740*x12744))+(((-1.0)*sj2*x12741))+(((-1.0)*r00*x12738*x12743))+((r01*x12745))+(((-1.0)*r01*x12734*x12743))+(((-1.0)*r02*sj5*x12743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((9522.0)+(((9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12747=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*sj6*x12747))+((cj6*r20)))))+(IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*cj5*cj6*x12747))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12748=((1.0)*cj5);
j4eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x12748))+(((-1.0)*r20*sj6*x12748))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x12749=((1.0)*cj5);
CheckValue<IkReal> x12751 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r21*x12749))+(((-1.0)*r20*sj6*x12749))+(((-1.0)*r22*sj5)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12751.valid){
continue;
}
IkReal x12750=x12751.value;
j4array[0]=((-1.0)*x12750);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x12750)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x12752=IKsin(j4);
IkReal x12753=IKcos(j4);
IkReal x12754=((1.0)*x12752);
evalcond[0]=((((-1.0)*cj5*r20*sj6*x12754))+(((-1.0)*r22*sj5*x12754))+((cj6*r20*x12753))+(((-1.0)*cj5*cj6*r21*x12754))+(((-1.0)*r21*sj6*x12753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12755=(cj5*cj6);
IkReal x12756=((1.0)*sj2);
IkReal x12757=(cj2*cj4);
IkReal x12758=(r12*sj5);
IkReal x12759=(cj4*sj2);
IkReal x12760=(r10*sj4);
IkReal x12761=(cj5*sj6);
IkReal x12762=(cj6*r10);
IkReal x12763=(r11*sj6);
IkReal x12764=(sj4*x12758);
IkReal x12765=(cj2*r11*sj4);
IkReal x12766=(r11*sj4*x12756);
IkReal x12767=(cj2*r10*x12761);
if( IKabs(((((-1.0)*cj4*x12756*x12763))+(((-1.0)*cj2*sj4*x12763))+((r10*x12757*x12761))+((x12759*x12762))+(((-1.0)*x12755*x12766))+(((-1.0)*x12756*x12760*x12761))+((r11*x12755*x12757))+((x12757*x12758))+(((-1.0)*x12756*x12764))+((cj2*cj6*x12760)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x12755*x12765))+((cj2*x12764))+((x12758*x12759))+(((-1.0)*sj4*x12756*x12763))+(((-1.0)*x12757*x12762))+((r10*x12759*x12761))+((cj6*sj2*x12760))+((x12757*x12763))+((r11*x12755*x12759))+((cj2*x12760*x12761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x12756*x12763))+(((-1.0)*cj2*sj4*x12763))+((r10*x12757*x12761))+((x12759*x12762))+(((-1.0)*x12755*x12766))+(((-1.0)*x12756*x12760*x12761))+((r11*x12755*x12757))+((x12757*x12758))+(((-1.0)*x12756*x12764))+((cj2*cj6*x12760))))+IKsqr((((x12755*x12765))+((cj2*x12764))+((x12758*x12759))+(((-1.0)*sj4*x12756*x12763))+(((-1.0)*x12757*x12762))+((r10*x12759*x12761))+((cj6*sj2*x12760))+((x12757*x12763))+((r11*x12755*x12759))+((cj2*x12760*x12761))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*x12756*x12763))+(((-1.0)*cj2*sj4*x12763))+((r10*x12757*x12761))+((x12759*x12762))+(((-1.0)*x12755*x12766))+(((-1.0)*x12756*x12760*x12761))+((r11*x12755*x12757))+((x12757*x12758))+(((-1.0)*x12756*x12764))+((cj2*cj6*x12760))), (((x12755*x12765))+((cj2*x12764))+((x12758*x12759))+(((-1.0)*sj4*x12756*x12763))+(((-1.0)*x12757*x12762))+((r10*x12759*x12761))+((cj6*sj2*x12760))+((x12757*x12763))+((r11*x12755*x12759))+((cj2*x12760*x12761))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12768=IKcos(j0);
IkReal x12769=IKsin(j0);
IkReal x12770=((1.0)*sj4);
IkReal x12771=((0.37429)*sj5);
IkReal x12772=(r10*sj6);
IkReal x12773=(cj6*r00);
IkReal x12774=((0.37429)*cj5);
IkReal x12775=(cj6*r01);
IkReal x12776=((0.01)*cj5);
IkReal x12777=(r12*sj5);
IkReal x12778=(r00*sj6);
IkReal x12779=(r02*sj5);
IkReal x12780=((1.0)*cj4);
IkReal x12781=(cj6*r10);
IkReal x12782=(r01*sj6);
IkReal x12783=(r11*sj6);
IkReal x12784=(cj2*x12768);
IkReal x12785=(cj5*cj6*r11);
IkReal x12786=((0.069)*x12769);
IkReal x12787=(sj2*x12768);
IkReal x12788=(cj2*x12769);
IkReal x12789=((1.0)*sj2*x12769);
evalcond[0]=(((sj4*x12783))+(((-1.0)*x12770*x12781))+(((-1.0)*cj5*x12772*x12780))+x12788+x12787+(((-1.0)*x12777*x12780))+(((-1.0)*x12780*x12785)));
evalcond[1]=(((cj4*x12781))+(((-1.0)*x12770*x12785))+(((-1.0)*cj5*x12770*x12772))+(((-1.0)*x12770*x12777))+x12784+(((-1.0)*x12780*x12783))+(((-1.0)*x12789)));
evalcond[2]=(((sj4*x12782))+(((-1.0)*x12779*x12780))+(((-1.0)*cj5*x12775*x12780))+(((-1.0)*cj5*x12778*x12780))+(((-1.0)*x12770*x12773))+x12784+(((-1.0)*x12789)));
evalcond[3]=((((-1.0)*cj5*x12770*x12778))+(((-1.0)*cj5*x12770*x12775))+(((-1.0)*x12770*x12779))+(((-1.0)*x12780*x12782))+((cj4*x12773))+(((-1.0)*x12787))+(((-1.0)*x12788)));
evalcond[4]=((((-1.0)*x12771*x12778))+(((-1.0)*x12771*x12775))+(((0.069)*x12784))+(((0.01)*x12779))+(((-1.0)*px))+(((0.069)*x12768))+((x12776*x12778))+(((-1.0)*sj2*x12786))+((r02*x12774))+((x12775*x12776)));
evalcond[5]=(((x12772*x12776))+(((-1.0)*x12771*x12772))+(((0.069)*x12787))+((cj6*r11*x12776))+(((-1.0)*cj6*r11*x12771))+(((0.01)*x12777))+(((-1.0)*py))+x12786+((r12*x12774))+((cj2*x12786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x12790=((1.0)*cj5);
CheckValue<IkReal> x12792 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(((((-1.0)*r22*sj5))+(((-1.0)*r20*sj6*x12790))+(((-1.0)*cj6*r21*x12790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12792.valid){
continue;
}
IkReal x12791=x12792.value;
j4array[0]=((-1.0)*x12791);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x12791)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x12793=IKsin(j4);
IkReal x12794=IKcos(j4);
IkReal x12795=((1.0)*cj6);
IkReal x12796=(cj5*x12794);
evalcond[0]=((((-1.0)*r22*sj5*x12794))+(((-1.0)*r20*x12793*x12795))+(((-1.0)*r20*sj6*x12796))+((r21*sj6*x12793))+(((-1.0)*r21*x12795*x12796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12797=(cj5*cj6);
IkReal x12798=((1.0)*sj2);
IkReal x12799=(cj2*cj4);
IkReal x12800=(r12*sj5);
IkReal x12801=(cj4*sj2);
IkReal x12802=(r10*sj4);
IkReal x12803=(cj5*sj6);
IkReal x12804=(cj6*r10);
IkReal x12805=(r11*sj6);
IkReal x12806=(sj4*x12800);
IkReal x12807=(cj2*r11*sj4);
IkReal x12808=(r11*sj4*x12798);
IkReal x12809=(cj2*r10*x12803);
if( IKabs((((r11*x12797*x12799))+((x12801*x12804))+(((-1.0)*cj4*x12798*x12805))+((x12799*x12800))+(((-1.0)*cj2*sj4*x12805))+((cj2*cj6*x12802))+(((-1.0)*x12797*x12808))+((r10*x12799*x12803))+(((-1.0)*x12798*x12802*x12803))+(((-1.0)*x12798*x12806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x12797*x12807))+((x12800*x12801))+((r11*x12797*x12801))+((x12799*x12805))+((cj2*x12806))+((cj2*x12802*x12803))+((cj6*sj2*x12802))+(((-1.0)*sj4*x12798*x12805))+((r10*x12801*x12803))+(((-1.0)*x12799*x12804)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x12797*x12799))+((x12801*x12804))+(((-1.0)*cj4*x12798*x12805))+((x12799*x12800))+(((-1.0)*cj2*sj4*x12805))+((cj2*cj6*x12802))+(((-1.0)*x12797*x12808))+((r10*x12799*x12803))+(((-1.0)*x12798*x12802*x12803))+(((-1.0)*x12798*x12806))))+IKsqr((((x12797*x12807))+((x12800*x12801))+((r11*x12797*x12801))+((x12799*x12805))+((cj2*x12806))+((cj2*x12802*x12803))+((cj6*sj2*x12802))+(((-1.0)*sj4*x12798*x12805))+((r10*x12801*x12803))+(((-1.0)*x12799*x12804))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x12797*x12799))+((x12801*x12804))+(((-1.0)*cj4*x12798*x12805))+((x12799*x12800))+(((-1.0)*cj2*sj4*x12805))+((cj2*cj6*x12802))+(((-1.0)*x12797*x12808))+((r10*x12799*x12803))+(((-1.0)*x12798*x12802*x12803))+(((-1.0)*x12798*x12806))), (((x12797*x12807))+((x12800*x12801))+((r11*x12797*x12801))+((x12799*x12805))+((cj2*x12806))+((cj2*x12802*x12803))+((cj6*sj2*x12802))+(((-1.0)*sj4*x12798*x12805))+((r10*x12801*x12803))+(((-1.0)*x12799*x12804))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12810=IKcos(j0);
IkReal x12811=IKsin(j0);
IkReal x12812=((1.0)*sj4);
IkReal x12813=((0.37429)*sj5);
IkReal x12814=(r10*sj6);
IkReal x12815=(cj6*r00);
IkReal x12816=((0.37429)*cj5);
IkReal x12817=(cj6*r01);
IkReal x12818=((0.01)*cj5);
IkReal x12819=(r12*sj5);
IkReal x12820=(r00*sj6);
IkReal x12821=(r02*sj5);
IkReal x12822=((1.0)*cj4);
IkReal x12823=(cj6*r10);
IkReal x12824=(r01*sj6);
IkReal x12825=(r11*sj6);
IkReal x12826=(cj2*x12810);
IkReal x12827=(cj5*cj6*r11);
IkReal x12828=((0.069)*x12811);
IkReal x12829=(sj2*x12810);
IkReal x12830=(cj2*x12811);
IkReal x12831=((1.0)*sj2*x12811);
evalcond[0]=(x12829+x12830+((sj4*x12825))+(((-1.0)*x12822*x12827))+(((-1.0)*cj5*x12814*x12822))+(((-1.0)*x12812*x12823))+(((-1.0)*x12819*x12822)));
evalcond[1]=(x12826+(((-1.0)*x12812*x12819))+(((-1.0)*x12822*x12825))+(((-1.0)*cj5*x12812*x12814))+((cj4*x12823))+(((-1.0)*x12831))+(((-1.0)*x12812*x12827)));
evalcond[2]=(x12826+(((-1.0)*cj5*x12817*x12822))+((sj4*x12824))+(((-1.0)*x12812*x12815))+(((-1.0)*cj5*x12820*x12822))+(((-1.0)*x12831))+(((-1.0)*x12821*x12822)));
evalcond[3]=((((-1.0)*cj5*x12812*x12820))+(((-1.0)*x12822*x12824))+(((-1.0)*cj5*x12812*x12817))+(((-1.0)*x12829))+(((-1.0)*x12830))+(((-1.0)*x12812*x12821))+((cj4*x12815)));
evalcond[4]=((((-1.0)*x12813*x12820))+((r02*x12816))+(((-1.0)*x12813*x12817))+((x12818*x12820))+(((0.069)*x12810))+(((0.069)*x12826))+(((-1.0)*px))+((x12817*x12818))+(((-1.0)*sj2*x12828))+(((0.01)*x12821)));
evalcond[5]=(((cj2*x12828))+x12828+((x12814*x12818))+(((0.01)*x12819))+((cj6*r11*x12818))+(((-1.0)*x12813*x12814))+((r12*x12816))+(((0.069)*x12829))+(((-1.0)*py))+(((-1.0)*cj6*r11*x12813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12832=((690.0)*sj5);
IkReal x12833=(cj5*sj2);
IkReal x12834=((25826.01)*r02);
IkReal x12835=(cj6*r11);
IkReal x12836=((25826.01)*sj5);
IkReal x12837=(r10*sj6);
IkReal x12838=((25826.01)*r12);
IkReal x12839=(cj6*r01);
IkReal x12840=((69000.0)*py);
IkReal x12841=((69000.0)*px);
IkReal x12842=((690.0)*cj5);
IkReal x12843=(cj2*cj5);
IkReal x12844=(r00*sj6);
IkReal x12845=(cj2*x12842);
IkReal x12846=((690.0)*x12844);
CheckValue<IkReal> x12847=IKPowWithIntegerCheck(IKsign(((9522.0)+(((9522.0)*cj2)))),-1);
if(!x12847.valid){
continue;
}
CheckValue<IkReal> x12848 = IKatan2WithCheck(IkReal((((r02*sj2*x12832))+(((690.0)*x12833*x12839))+x12840+(((-1.0)*x12838*x12843))+((x12833*x12846))+((x12836*x12837))+((cj2*x12835*x12836))+(((-1.0)*sj2*x12836*x12844))+(((-1.0)*x12835*x12842))+(((-1.0)*x12835*x12845))+((x12833*x12834))+(((-1.0)*sj2*x12841))+(((-1.0)*cj5*x12838))+(((-1.0)*x12837*x12842))+(((-1.0)*x12837*x12845))+(((-1.0)*r12*x12832))+((x12835*x12836))+(((-1.0)*sj2*x12836*x12839))+((cj2*x12836*x12837))+((cj2*x12840))+(((-1.0)*cj2*r12*x12832)))),IkReal((((cj2*x12836*x12844))+x12841+(((-1.0)*x12833*x12838))+((x12836*x12844))+(((-690.0)*x12833*x12837))+(((-690.0)*x12833*x12835))+((x12836*x12839))+((sj2*x12836*x12837))+(((-1.0)*cj2*r02*x12832))+(((-1.0)*x12844*x12845))+(((-1.0)*x12839*x12845))+(((-1.0)*x12839*x12842))+(((-1.0)*x12834*x12843))+((sj2*x12840))+(((-1.0)*r02*x12832))+(((-1.0)*x12842*x12844))+(((-1.0)*cj5*x12834))+((cj2*x12836*x12839))+((sj2*x12835*x12836))+((cj2*x12841))+(((-1.0)*r12*sj2*x12832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12848.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12847.value)))+(x12848.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x12849=IKcos(j0);
IkReal x12850=IKsin(j0);
IkReal x12851=((0.01)*cj5);
IkReal x12852=(cj6*r01);
IkReal x12853=((0.37429)*sj5);
IkReal x12854=(cj6*r11);
IkReal x12855=(r00*sj6);
IkReal x12856=((0.01)*sj5);
IkReal x12857=((0.37429)*cj5);
IkReal x12858=(r10*sj6);
IkReal x12859=((0.069)*x12849);
IkReal x12860=((0.069)*x12850);
evalcond[0]=(((cj2*x12859))+x12859+(((-1.0)*x12853*x12855))+(((-1.0)*sj2*x12860))+(((-1.0)*x12852*x12853))+(((-1.0)*px))+((r02*x12857))+((r02*x12856))+((x12851*x12855))+((x12851*x12852)));
evalcond[1]=(x12860+(((-1.0)*x12853*x12854))+(((-1.0)*x12853*x12858))+((cj2*x12860))+(((-1.0)*py))+((sj2*x12859))+((r12*x12857))+((r12*x12856))+((x12851*x12858))+((x12851*x12854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12861=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x12861;
j4eval[1]=IKsign(x12861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12862=cj6*cj6;
IkReal x12863=cj5*cj5;
IkReal x12864=(cj5*sj5);
IkReal x12865=(cj6*r21);
IkReal x12866=((1.0)*r11);
IkReal x12867=(r10*r20);
IkReal x12868=(r10*sj6);
IkReal x12869=(r12*r22);
IkReal x12870=(r21*x12862);
IkReal x12871=(cj6*r20*sj6);
IkReal x12872=(r11*x12863);
IkReal x12873=((1.0)*x12863);
IkReal x12874=(((x12870*x12872))+x12869+(((-1.0)*x12866*x12871))+(((-1.0)*x12866*x12870))+((x12871*x12872))+((r11*r21))+(((-1.0)*x12865*x12868))+((r22*x12864*x12868))+((r12*r20*sj6*x12864))+(((-1.0)*x12869*x12873))+((x12863*x12865*x12868))+((r12*x12864*x12865))+((cj6*r11*r22*x12864))+((x12863*x12867))+(((-1.0)*x12862*x12867*x12873))+((x12862*x12867)));
j4eval[0]=x12874;
j4eval[1]=IKsign(x12874);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12875=cj5*cj5;
IkReal x12876=cj6*cj6;
IkReal x12877=(r00*r20);
IkReal x12878=(r02*r22);
IkReal x12879=(cj5*sj5);
IkReal x12880=(cj6*r21);
IkReal x12881=(r00*sj6);
IkReal x12882=(r20*sj6);
IkReal x12883=(cj6*r01);
IkReal x12884=((1.0)*x12875);
IkReal x12885=(r01*r21*x12876);
IkReal x12886=(x12878+(((-1.0)*x12885))+((x12875*x12882*x12883))+(((-1.0)*x12878*x12884))+((r01*r21))+((x12875*x12885))+((r02*x12879*x12882))+((r02*x12879*x12880))+((r22*x12879*x12883))+((r22*x12879*x12881))+(((-1.0)*x12880*x12881))+((x12876*x12877))+((x12875*x12877))+((x12875*x12880*x12881))+(((-1.0)*x12882*x12883))+(((-1.0)*x12876*x12877*x12884)));
j4eval[0]=x12886;
j4eval[1]=IKsign(x12886);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12887=cj5*cj5;
IkReal x12888=cj6*cj6;
IkReal x12889=(cj6*r21);
IkReal x12890=(cj6*r20);
IkReal x12891=(cj0*cj2);
IkReal x12892=(r20*sj6);
IkReal x12893=((1.0)*sj6);
IkReal x12894=(sj0*sj2);
IkReal x12895=((1.0)*cj5);
IkReal x12896=(r02*r22);
IkReal x12897=(r22*sj5);
IkReal x12898=(r00*sj6);
IkReal x12899=(cj5*r02*sj5);
IkReal x12900=(r01*x12887);
IkReal x12901=(r21*x12888);
IkReal x12902=(r00*r20*x12887);
CheckValue<IkReal> x12903 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x12891*x12893))+((x12890*x12891))+(((-1.0)*x12890*x12894))+((r21*sj6*x12894)))),IkReal(((((-1.0)*x12894*x12897))+(((-1.0)*x12892*x12894*x12895))+(((-1.0)*x12889*x12894*x12895))+((cj5*x12889*x12891))+((x12891*x12897))+((cj5*x12891*x12892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12903.valid){
continue;
}
CheckValue<IkReal> x12904=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12890*x12893))+x12902+(((-1.0)*x12887*x12896))+x12896+(((-1.0)*x12888*x12902))+(((-1.0)*r00*x12889*x12893))+((sj6*x12890*x12900))+((r01*r21))+((r00*r20*x12888))+(((-1.0)*r01*x12901))+((cj5*cj6*r01*x12897))+((x12889*x12899))+((x12887*x12889*x12898))+((x12900*x12901))+((cj5*x12897*x12898))+((x12892*x12899)))),-1);
if(!x12904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12903.value)+(((1.5707963267949)*(x12904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12905=IKsin(j4);
IkReal x12906=IKcos(j4);
IkReal x12907=(cj0*cj2);
IkReal x12908=(cj5*cj6);
IkReal x12909=(r11*sj6);
IkReal x12910=(cj6*r20);
IkReal x12911=(cj5*sj6);
IkReal x12912=(cj6*r10);
IkReal x12913=(r01*sj6);
IkReal x12914=(cj0*sj2);
IkReal x12915=(r21*sj6);
IkReal x12916=(cj6*r00);
IkReal x12917=((1.0)*sj0);
IkReal x12918=(sj2*x12917);
IkReal x12919=((1.0)*x12906);
IkReal x12920=((1.0)*x12905);
IkReal x12921=(sj5*x12920);
evalcond[0]=((((-1.0)*x12915*x12919))+(((-1.0)*r21*x12908*x12920))+((x12906*x12910))+(((-1.0)*r22*x12921))+(((-1.0)*r20*x12911*x12920)));
evalcond[1]=((((-1.0)*r22*sj5*x12919))+(((-1.0)*r20*x12911*x12919))+(((-1.0)*r21*x12908*x12919))+(((-1.0)*x12910*x12920))+((x12905*x12915)));
evalcond[2]=(x12914+((cj2*sj0))+(((-1.0)*r10*x12911*x12919))+(((-1.0)*r12*sj5*x12919))+(((-1.0)*x12912*x12920))+((x12905*x12909))+(((-1.0)*r11*x12908*x12919)));
evalcond[3]=(x12907+(((-1.0)*x12909*x12919))+(((-1.0)*x12918))+(((-1.0)*r12*x12921))+(((-1.0)*r10*x12911*x12920))+(((-1.0)*r11*x12908*x12920))+((x12906*x12912)));
evalcond[4]=(x12907+(((-1.0)*r00*x12911*x12919))+(((-1.0)*r02*sj5*x12919))+(((-1.0)*r01*x12908*x12919))+(((-1.0)*x12918))+((x12905*x12913))+(((-1.0)*x12916*x12920)));
evalcond[5]=((((-1.0)*r02*x12921))+(((-1.0)*r00*x12911*x12920))+(((-1.0)*x12914))+(((-1.0)*r01*x12908*x12920))+(((-1.0)*x12913*x12919))+(((-1.0)*cj2*x12917))+((x12906*x12916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12922=cj6*cj6;
IkReal x12923=cj5*cj5;
IkReal x12924=((1.0)*r11);
IkReal x12925=(r22*sj5);
IkReal x12926=(cj0*sj2);
IkReal x12927=(cj5*sj6);
IkReal x12928=(cj6*r20);
IkReal x12929=(cj2*sj0);
IkReal x12930=(r21*sj6);
IkReal x12931=(cj6*r10);
IkReal x12932=(r12*r22);
IkReal x12933=(r12*sj5);
IkReal x12934=(r21*x12922);
IkReal x12935=(r20*x12929);
IkReal x12936=(cj5*cj6*r21);
IkReal x12937=(r11*x12923);
IkReal x12938=(r10*r20*x12923);
CheckValue<IkReal> x12939 = IKatan2WithCheck(IkReal((((x12928*x12929))+((x12926*x12928))+(((-1.0)*x12926*x12930))+(((-1.0)*x12929*x12930)))),IkReal((((x12925*x12926))+((x12925*x12929))+((x12927*x12935))+((r20*x12926*x12927))+((x12929*x12936))+((x12926*x12936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12939.valid){
continue;
}
CheckValue<IkReal> x12940=IKPowWithIntegerCheck(IKsign((x12932+x12938+(((-1.0)*x12924*x12934))+((cj5*cj6*r11*x12925))+((r11*r21))+(((-1.0)*x12923*x12932))+((r10*x12925*x12927))+((x12933*x12936))+(((-1.0)*sj6*x12924*x12928))+((r20*x12927*x12933))+((r10*r20*x12922))+((sj6*x12928*x12937))+(((-1.0)*x12922*x12938))+((x12923*x12930*x12931))+((x12934*x12937))+(((-1.0)*x12930*x12931)))),-1);
if(!x12940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12939.value)+(((1.5707963267949)*(x12940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12941=IKsin(j4);
IkReal x12942=IKcos(j4);
IkReal x12943=(cj0*cj2);
IkReal x12944=(cj5*cj6);
IkReal x12945=(r11*sj6);
IkReal x12946=(cj6*r20);
IkReal x12947=(cj5*sj6);
IkReal x12948=(cj6*r10);
IkReal x12949=(r01*sj6);
IkReal x12950=(cj0*sj2);
IkReal x12951=(r21*sj6);
IkReal x12952=(cj6*r00);
IkReal x12953=((1.0)*sj0);
IkReal x12954=(sj2*x12953);
IkReal x12955=((1.0)*x12942);
IkReal x12956=((1.0)*x12941);
IkReal x12957=(sj5*x12956);
evalcond[0]=((((-1.0)*r20*x12947*x12956))+(((-1.0)*x12951*x12955))+(((-1.0)*r22*x12957))+((x12942*x12946))+(((-1.0)*r21*x12944*x12956)));
evalcond[1]=(((x12941*x12951))+(((-1.0)*r20*x12947*x12955))+(((-1.0)*x12946*x12956))+(((-1.0)*r22*sj5*x12955))+(((-1.0)*r21*x12944*x12955)));
evalcond[2]=(x12950+((x12941*x12945))+((cj2*sj0))+(((-1.0)*x12948*x12956))+(((-1.0)*r10*x12947*x12955))+(((-1.0)*r12*sj5*x12955))+(((-1.0)*r11*x12944*x12955)));
evalcond[3]=(x12943+(((-1.0)*r12*x12957))+(((-1.0)*x12954))+(((-1.0)*x12945*x12955))+(((-1.0)*r10*x12947*x12956))+((x12942*x12948))+(((-1.0)*r11*x12944*x12956)));
evalcond[4]=(x12943+((x12941*x12949))+(((-1.0)*x12952*x12956))+(((-1.0)*r00*x12947*x12955))+(((-1.0)*x12954))+(((-1.0)*r01*x12944*x12955))+(((-1.0)*r02*sj5*x12955)));
evalcond[5]=((((-1.0)*r00*x12947*x12956))+(((-1.0)*cj2*x12953))+(((-1.0)*r02*x12957))+(((-1.0)*x12950))+(((-1.0)*r01*x12944*x12956))+((x12942*x12952))+(((-1.0)*x12949*x12955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12958=(cj0*cj2);
IkReal x12959=(cj6*r20);
IkReal x12960=(r21*sj6);
IkReal x12961=(sj0*sj2);
IkReal x12962=(r22*sj5);
IkReal x12963=(cj5*r20*sj6);
IkReal x12964=(cj5*cj6*r21);
CheckValue<IkReal> x12965=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x12965.valid){
continue;
}
CheckValue<IkReal> x12966 = IKatan2WithCheck(IkReal((((x12960*x12961))+(((-1.0)*x12958*x12960))+(((-1.0)*x12959*x12961))+((x12958*x12959)))),IkReal(((((-1.0)*x12961*x12962))+(((-1.0)*x12961*x12963))+(((-1.0)*x12961*x12964))+((x12958*x12963))+((x12958*x12964))+((x12958*x12962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12965.value)))+(x12966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12967=IKsin(j4);
IkReal x12968=IKcos(j4);
IkReal x12969=(cj0*cj2);
IkReal x12970=(cj5*cj6);
IkReal x12971=(r11*sj6);
IkReal x12972=(cj6*r20);
IkReal x12973=(cj5*sj6);
IkReal x12974=(cj6*r10);
IkReal x12975=(r01*sj6);
IkReal x12976=(cj0*sj2);
IkReal x12977=(r21*sj6);
IkReal x12978=(cj6*r00);
IkReal x12979=((1.0)*sj0);
IkReal x12980=(sj2*x12979);
IkReal x12981=((1.0)*x12968);
IkReal x12982=((1.0)*x12967);
IkReal x12983=(sj5*x12982);
evalcond[0]=((((-1.0)*r21*x12970*x12982))+(((-1.0)*r20*x12973*x12982))+(((-1.0)*r22*x12983))+(((-1.0)*x12977*x12981))+((x12968*x12972)));
evalcond[1]=((((-1.0)*r21*x12970*x12981))+(((-1.0)*r20*x12973*x12981))+(((-1.0)*r22*sj5*x12981))+(((-1.0)*x12972*x12982))+((x12967*x12977)));
evalcond[2]=(x12976+(((-1.0)*x12974*x12982))+((cj2*sj0))+(((-1.0)*r10*x12973*x12981))+(((-1.0)*r11*x12970*x12981))+((x12967*x12971))+(((-1.0)*r12*sj5*x12981)));
evalcond[3]=(x12969+(((-1.0)*r10*x12973*x12982))+(((-1.0)*x12971*x12981))+(((-1.0)*r11*x12970*x12982))+(((-1.0)*x12980))+(((-1.0)*r12*x12983))+((x12968*x12974)));
evalcond[4]=(x12969+(((-1.0)*r01*x12970*x12981))+(((-1.0)*x12980))+(((-1.0)*r00*x12973*x12981))+((x12967*x12975))+(((-1.0)*x12978*x12982))+(((-1.0)*r02*sj5*x12981)));
evalcond[5]=((((-1.0)*x12975*x12981))+(((-1.0)*r01*x12970*x12982))+(((-1.0)*r00*x12973*x12982))+(((-1.0)*x12976))+(((-1.0)*r02*x12983))+(((-1.0)*cj2*x12979))+((x12968*x12978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12984=(cj1*r12);
IkReal x12985=(r00*sj6);
IkReal x12986=((69.0)*cj1);
IkReal x12987=(cj6*r01);
IkReal x12988=((1.0)*sj5);
IkReal x12989=(cj5*r02);
IkReal x12990=(cj6*r11);
IkReal x12991=(r10*sj6);
IkReal x12992=((69.0)*sj2*sj5);
IkReal x12993=((374.29)*cj1*sj5);
IkReal x12994=((10.0)*cj1*cj5);
CheckValue<IkReal> x12995=IKPowWithIntegerCheck((x12986+(((364.42)*(cj1*cj1)))+(((-1.0)*cj2*sj1*x12986))),-1);
if(!x12995.valid){
continue;
}
CheckValue<IkReal> x12996=IKPowWithIntegerCheck(cj1,-1);
if(!x12996.valid){
continue;
}
if( IKabs(((x12995.value)*(((((1000.0)*cj1*py))+((x12991*x12993))+(((-10.0)*sj5*x12984))+((x12990*x12993))+(((-69.0)*sj2*x12989))+(((-374.29)*cj5*x12984))+((x12987*x12992))+((x12985*x12992))+(((-1.0)*x12991*x12994))+(((-1.0)*x12990*x12994)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12996.value)*((x12989+(((-1.0)*x12987*x12988))+(((-1.0)*x12985*x12988)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12995.value)*(((((1000.0)*cj1*py))+((x12991*x12993))+(((-10.0)*sj5*x12984))+((x12990*x12993))+(((-69.0)*sj2*x12989))+(((-374.29)*cj5*x12984))+((x12987*x12992))+((x12985*x12992))+(((-1.0)*x12991*x12994))+(((-1.0)*x12990*x12994))))))+IKsqr(((x12996.value)*((x12989+(((-1.0)*x12987*x12988))+(((-1.0)*x12985*x12988))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12995.value)*(((((1000.0)*cj1*py))+((x12991*x12993))+(((-10.0)*sj5*x12984))+((x12990*x12993))+(((-69.0)*sj2*x12989))+(((-374.29)*cj5*x12984))+((x12987*x12992))+((x12985*x12992))+(((-1.0)*x12991*x12994))+(((-1.0)*x12990*x12994))))), ((x12996.value)*((x12989+(((-1.0)*x12987*x12988))+(((-1.0)*x12985*x12988))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12997=IKcos(j0);
IkReal x12998=IKsin(j0);
IkReal x12999=((0.01)*cj5);
IkReal x13000=(cj6*r11);
IkReal x13001=(cj5*r12);
IkReal x13002=(r10*sj6);
IkReal x13003=((0.37429)*sj5);
IkReal x13004=(r00*sj6);
IkReal x13005=((1.0)*sj5);
IkReal x13006=(cj6*r01);
IkReal x13007=(cj5*r02);
IkReal x13008=(cj2*sj1);
IkReal x13009=((0.01)*sj5);
IkReal x13010=(cj1*x12998);
IkReal x13011=((0.069)*x12998);
IkReal x13012=((0.069)*x12997);
IkReal x13013=(cj1*x12997);
evalcond[0]=((((-1.0)*x13005*x13006))+(((-1.0)*x13004*x13005))+(((-1.0)*x13013))+x13007);
evalcond[1]=((((-1.0)*x13002*x13005))+(((-1.0)*x13010))+x13001+(((-1.0)*x13000*x13005)));
evalcond[2]=((((-1.0)*x13003*x13004))+(((-1.0)*x13003*x13006))+(((0.36442)*x13013))+(((-1.0)*x13008*x13012))+(((-1.0)*sj2*x13011))+(((0.37429)*x13007))+((r02*x13009))+(((-1.0)*px))+((x12999*x13006))+((x12999*x13004))+x13012);
evalcond[3]=((((-1.0)*x13002*x13003))+(((0.36442)*x13010))+(((-1.0)*x13008*x13011))+(((0.37429)*x13001))+(((-1.0)*py))+((x12999*x13002))+((x12999*x13000))+((r12*x13009))+x13011+(((-1.0)*x13000*x13003))+((sj2*x13012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13014=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x13014;
j4eval[1]=IKsign(x13014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13015=((1.0)*sj5);
IkReal x13016=((((-1.0)*r00*sj6*x13015))+(((-1.0)*cj6*r01*x13015))+((cj5*r02)));
j4eval[0]=x13016;
j4eval[1]=IKsign(x13016);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13017=cj5*cj5;
IkReal x13018=cj6*cj6;
IkReal x13019=r22*r22;
IkReal x13020=r21*r21;
IkReal x13021=r20*r20;
IkReal x13022=(cj6*r21);
IkReal x13023=(r20*sj6);
IkReal x13024=(cj1*cj2);
IkReal x13025=(r22*sj5);
IkReal x13026=(cj6*r20);
IkReal x13027=((2.0)*cj5);
IkReal x13028=(cj1*sj2);
IkReal x13029=((1.0)*x13020);
IkReal x13030=((1.0)*x13021);
IkReal x13031=((1.0)*r21*sj6);
IkReal x13032=((1.0)*cj5*x13028);
IkReal x13033=(x13017*x13018);
IkReal x13034=(((x13017*x13019))+(((2.0)*x13022*x13023))+(((-1.0)*x13029))+((x13021*x13033))+(((-1.0)*x13029*x13033))+(((-1.0)*x13017*x13030))+(((-1.0)*x13018*x13030))+(((-1.0)*x13019))+(((-1.0)*x13022*x13025*x13027))+((x13018*x13020))+(((-2.0)*x13017*x13022*x13023))+(((-1.0)*x13023*x13025*x13027)));
j4eval[0]=x13034;
j4eval[1]=((IKabs(((((-1.0)*x13028*x13031))+((cj5*x13022*x13024))+((cj5*x13023*x13024))+((x13024*x13025))+((x13026*x13028)))))+(IKabs(((((-1.0)*x13022*x13032))+(((-1.0)*x13025*x13028))+(((-1.0)*x13023*x13032))+((x13024*x13026))+(((-1.0)*x13024*x13031))))));
j4eval[2]=IKsign(x13034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13035=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13035;
j4eval[1]=IKsign(x13035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13036=((1.0)*sj5);
IkReal x13037=(((cj5*r12))+(((-1.0)*cj6*r11*x13036))+(((-1.0)*r10*sj6*x13036)));
j4eval[0]=x13037;
j4eval[1]=IKsign(x13037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13038=cj6*cj6;
IkReal x13039=cj5*cj5;
IkReal x13040=(cj5*sj5);
IkReal x13041=(cj6*r21);
IkReal x13042=((1.0)*r11);
IkReal x13043=(r10*r20);
IkReal x13044=(r10*sj6);
IkReal x13045=(r12*r22);
IkReal x13046=(r21*x13038);
IkReal x13047=(cj6*r20*sj6);
IkReal x13048=(r11*x13039);
IkReal x13049=((1.0)*x13039);
IkReal x13050=(((r11*r21))+((cj6*r11*r22*x13040))+(((-1.0)*x13045*x13049))+((x13047*x13048))+(((-1.0)*x13038*x13043*x13049))+(((-1.0)*x13041*x13044))+((x13039*x13043))+((x13038*x13043))+((x13046*x13048))+((x13039*x13041*x13044))+((r22*x13040*x13044))+x13045+((r12*r20*sj6*x13040))+(((-1.0)*x13042*x13047))+(((-1.0)*x13042*x13046))+((r12*x13040*x13041)));
j4eval[0]=x13050;
j4eval[1]=IKsign(x13050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13051=cj6*cj6;
IkReal x13052=cj5*cj5;
IkReal x13053=(r22*sj5);
IkReal x13054=(cj0*sj2);
IkReal x13055=(r12*r22);
IkReal x13056=(cj5*sj6);
IkReal x13057=((1.0)*r11);
IkReal x13058=(cj6*r21);
IkReal x13059=(cj6*r20);
IkReal x13060=(r12*sj5);
IkReal x13061=((1.0)*sj6);
IkReal x13062=((1.0)*cj2*sj0);
IkReal x13063=((1.0)*x13052);
IkReal x13064=(r21*x13051);
IkReal x13065=(r10*x13052);
IkReal x13066=(r11*x13052);
IkReal x13067=(r10*r20*x13051);
CheckValue<IkReal> x13068 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x13054*x13061))+((x13054*x13059))+((cj2*r21*sj0*sj6))+(((-1.0)*x13059*x13062)))),IkReal(((((-1.0)*r20*x13056*x13062))+((r20*x13054*x13056))+(((-1.0)*cj5*x13058*x13062))+((x13053*x13054))+((cj5*x13054*x13058))+(((-1.0)*x13053*x13062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13068.valid){
continue;
}
CheckValue<IkReal> x13069=IKPowWithIntegerCheck(IKsign((((r20*x13065))+((cj5*x13058*x13060))+(((-1.0)*x13057*x13064))+((sj6*x13059*x13066))+((r11*r21))+((r10*x13053*x13056))+((r20*x13056*x13060))+((sj6*x13058*x13065))+(((-1.0)*x13063*x13067))+((cj5*cj6*r11*x13053))+(((-1.0)*x13055*x13063))+((x13064*x13066))+x13055+x13067+(((-1.0)*r10*x13058*x13061))+(((-1.0)*sj6*x13057*x13059)))),-1);
if(!x13069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13068.value)+(((1.5707963267949)*(x13069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13070=IKsin(j4);
IkReal x13071=IKcos(j4);
IkReal x13072=(cj0*sj2);
IkReal x13073=(cj5*cj6);
IkReal x13074=(cj0*cj2);
IkReal x13075=(r11*sj6);
IkReal x13076=(cj6*r20);
IkReal x13077=(cj5*sj6);
IkReal x13078=(cj6*r10);
IkReal x13079=(cj6*r00);
IkReal x13080=((1.0)*sj0);
IkReal x13081=(cj2*x13080);
IkReal x13082=((1.0)*x13071);
IkReal x13083=((1.0)*x13070);
IkReal x13084=(sj6*x13070);
IkReal x13085=(sj5*x13083);
evalcond[0]=((((-1.0)*r21*x13073*x13083))+(((-1.0)*r21*sj6*x13082))+(((-1.0)*r22*x13085))+(((-1.0)*r20*x13077*x13083))+((x13071*x13076)));
evalcond[1]=((((-1.0)*r21*x13073*x13082))+(((-1.0)*x13076*x13083))+(((-1.0)*r22*sj5*x13082))+(((-1.0)*r20*x13077*x13082))+((r21*x13084)));
evalcond[2]=((((-1.0)*r10*x13077*x13083))+((sj0*sj2))+(((-1.0)*x13075*x13082))+x13074+(((-1.0)*r11*x13073*x13083))+((x13071*x13078))+(((-1.0)*r12*x13085)));
evalcond[3]=((((-1.0)*x13081))+(((-1.0)*r01*sj6*x13082))+(((-1.0)*r02*x13085))+(((-1.0)*r01*x13073*x13083))+(((-1.0)*r00*x13077*x13083))+x13072+((x13071*x13079)));
evalcond[4]=((((-1.0)*x13081))+(((-1.0)*r10*x13077*x13082))+(((-1.0)*r12*sj5*x13082))+x13072+((x13070*x13075))+(((-1.0)*r11*x13073*x13082))+(((-1.0)*x13078*x13083)));
evalcond[5]=((((-1.0)*r02*sj5*x13082))+(((-1.0)*r01*x13073*x13082))+(((-1.0)*r00*x13077*x13082))+(((-1.0)*x13074))+(((-1.0)*x13079*x13083))+((r01*x13084))+(((-1.0)*sj2*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13086=(cj0*sj2);
IkReal x13087=(cj6*r20);
IkReal x13088=(r22*sj5);
IkReal x13089=((1.0)*sj5);
IkReal x13090=(r21*sj6);
IkReal x13091=((1.0)*cj2*sj0);
IkReal x13092=(cj5*cj6*r21);
IkReal x13093=(cj5*r20*sj6);
CheckValue<IkReal> x13094=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x13089))+(((-1.0)*r10*sj6*x13089)))),-1);
if(!x13094.valid){
continue;
}
CheckValue<IkReal> x13095 = IKatan2WithCheck(IkReal((((cj2*sj0*x13090))+(((-1.0)*x13087*x13091))+((x13086*x13087))+(((-1.0)*x13086*x13090)))),IkReal((((x13086*x13088))+((x13086*x13092))+((x13086*x13093))+(((-1.0)*x13091*x13092))+(((-1.0)*x13091*x13093))+(((-1.0)*x13088*x13091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13094.value)))+(x13095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13096=IKsin(j4);
IkReal x13097=IKcos(j4);
IkReal x13098=(cj0*sj2);
IkReal x13099=(cj5*cj6);
IkReal x13100=(cj0*cj2);
IkReal x13101=(r11*sj6);
IkReal x13102=(cj6*r20);
IkReal x13103=(cj5*sj6);
IkReal x13104=(cj6*r10);
IkReal x13105=(cj6*r00);
IkReal x13106=((1.0)*sj0);
IkReal x13107=(cj2*x13106);
IkReal x13108=((1.0)*x13097);
IkReal x13109=((1.0)*x13096);
IkReal x13110=(sj6*x13096);
IkReal x13111=(sj5*x13109);
evalcond[0]=((((-1.0)*r20*x13103*x13109))+((x13097*x13102))+(((-1.0)*r21*x13099*x13109))+(((-1.0)*r21*sj6*x13108))+(((-1.0)*r22*x13111)));
evalcond[1]=((((-1.0)*r20*x13103*x13108))+(((-1.0)*r21*x13099*x13108))+((r21*x13110))+(((-1.0)*x13102*x13109))+(((-1.0)*r22*sj5*x13108)));
evalcond[2]=((((-1.0)*r11*x13099*x13109))+(((-1.0)*r12*x13111))+(((-1.0)*r10*x13103*x13109))+((x13097*x13104))+(((-1.0)*x13101*x13108))+((sj0*sj2))+x13100);
evalcond[3]=(((x13097*x13105))+(((-1.0)*r00*x13103*x13109))+(((-1.0)*r02*x13111))+(((-1.0)*x13107))+x13098+(((-1.0)*r01*sj6*x13108))+(((-1.0)*r01*x13099*x13109)));
evalcond[4]=((((-1.0)*r11*x13099*x13108))+((x13096*x13101))+(((-1.0)*r10*x13103*x13108))+(((-1.0)*x13107))+(((-1.0)*x13104*x13109))+x13098+(((-1.0)*r12*sj5*x13108)));
evalcond[5]=((((-1.0)*r00*x13103*x13108))+(((-1.0)*sj2*x13106))+(((-1.0)*x13100))+(((-1.0)*x13105*x13109))+(((-1.0)*r02*sj5*x13108))+(((-1.0)*r01*x13099*x13108))+((r01*x13110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13112=(sj0*sj2);
IkReal x13113=(cj0*cj2);
IkReal x13114=(cj6*r20);
IkReal x13115=(r22*sj5);
IkReal x13116=((1.0)*r21*sj6);
IkReal x13117=(cj5*cj6*r21);
IkReal x13118=(cj5*r20*sj6);
CheckValue<IkReal> x13119 = IKatan2WithCheck(IkReal(((((-1.0)*x13112*x13116))+((x13113*x13114))+((x13112*x13114))+(((-1.0)*x13113*x13116)))),IkReal((((x13113*x13118))+((x13113*x13115))+((x13113*x13117))+((x13112*x13117))+((x13112*x13115))+((x13112*x13118)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13119.valid){
continue;
}
CheckValue<IkReal> x13120=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13119.value)+(((1.5707963267949)*(x13120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13121=IKsin(j4);
IkReal x13122=IKcos(j4);
IkReal x13123=(cj0*sj2);
IkReal x13124=(cj5*cj6);
IkReal x13125=(cj0*cj2);
IkReal x13126=(r11*sj6);
IkReal x13127=(cj6*r20);
IkReal x13128=(cj5*sj6);
IkReal x13129=(cj6*r10);
IkReal x13130=(cj6*r00);
IkReal x13131=((1.0)*sj0);
IkReal x13132=(cj2*x13131);
IkReal x13133=((1.0)*x13122);
IkReal x13134=((1.0)*x13121);
IkReal x13135=(sj6*x13121);
IkReal x13136=(sj5*x13134);
evalcond[0]=((((-1.0)*r21*x13124*x13134))+((x13122*x13127))+(((-1.0)*r22*x13136))+(((-1.0)*r21*sj6*x13133))+(((-1.0)*r20*x13128*x13134)));
evalcond[1]=((((-1.0)*r21*x13124*x13133))+(((-1.0)*r22*sj5*x13133))+((r21*x13135))+(((-1.0)*x13127*x13134))+(((-1.0)*r20*x13128*x13133)));
evalcond[2]=((((-1.0)*r11*x13124*x13134))+(((-1.0)*r10*x13128*x13134))+((x13122*x13129))+((sj0*sj2))+x13125+(((-1.0)*r12*x13136))+(((-1.0)*x13126*x13133)));
evalcond[3]=((((-1.0)*r01*x13124*x13134))+((x13122*x13130))+(((-1.0)*r00*x13128*x13134))+(((-1.0)*r01*sj6*x13133))+(((-1.0)*x13132))+x13123+(((-1.0)*r02*x13136)));
evalcond[4]=((((-1.0)*r11*x13124*x13133))+(((-1.0)*r12*sj5*x13133))+(((-1.0)*x13129*x13134))+((x13121*x13126))+(((-1.0)*r10*x13128*x13133))+(((-1.0)*x13132))+x13123);
evalcond[5]=(((r01*x13135))+(((-1.0)*r01*x13124*x13133))+(((-1.0)*r02*sj5*x13133))+(((-1.0)*sj2*x13131))+(((-1.0)*r00*x13128*x13133))+(((-1.0)*x13130*x13134))+(((-1.0)*x13125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13137=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13137;
j4eval[1]=IKsign(x13137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13138=cj6*cj6;
IkReal x13139=cj5*cj5;
IkReal x13140=(cj5*sj5);
IkReal x13141=(cj6*r21);
IkReal x13142=((1.0)*r11);
IkReal x13143=(r10*r20);
IkReal x13144=(r10*sj6);
IkReal x13145=(r12*r22);
IkReal x13146=(r21*x13138);
IkReal x13147=(cj6*r20*sj6);
IkReal x13148=(r11*x13139);
IkReal x13149=((1.0)*x13139);
IkReal x13150=((((-1.0)*x13142*x13147))+(((-1.0)*x13142*x13146))+((x13146*x13148))+((r11*r21))+((r22*x13140*x13144))+((x13147*x13148))+((x13139*x13143))+((x13138*x13143))+((r12*r20*sj6*x13140))+(((-1.0)*x13145*x13149))+((r12*x13140*x13141))+(((-1.0)*x13138*x13143*x13149))+x13145+(((-1.0)*x13141*x13144))+((x13139*x13141*x13144))+((cj6*r11*r22*x13140)));
j4eval[0]=x13150;
j4eval[1]=IKsign(x13150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13151=cj5*cj5;
IkReal x13152=cj6*cj6;
IkReal x13153=(r00*r20);
IkReal x13154=(r02*r22);
IkReal x13155=(cj5*sj5);
IkReal x13156=(cj6*r21);
IkReal x13157=(r00*sj6);
IkReal x13158=(r20*sj6);
IkReal x13159=(cj6*r01);
IkReal x13160=((1.0)*x13151);
IkReal x13161=(r01*r21*x13152);
IkReal x13162=(((x13151*x13156*x13157))+((x13151*x13161))+((x13152*x13153))+((r02*x13155*x13156))+((r02*x13155*x13158))+(((-1.0)*x13154*x13160))+(((-1.0)*x13156*x13157))+((r22*x13155*x13159))+((r22*x13155*x13157))+((x13151*x13158*x13159))+((x13151*x13153))+((r01*r21))+(((-1.0)*x13152*x13153*x13160))+(((-1.0)*x13161))+(((-1.0)*x13158*x13159))+x13154);
j4eval[0]=x13162;
j4eval[1]=IKsign(x13162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13163=cj5*cj5;
IkReal x13164=cj6*cj6;
IkReal x13165=(cj6*r21);
IkReal x13166=(cj6*r20);
IkReal x13167=(cj0*cj2);
IkReal x13168=(r20*sj6);
IkReal x13169=((1.0)*sj6);
IkReal x13170=(sj0*sj2);
IkReal x13171=((1.0)*cj5);
IkReal x13172=(r02*r22);
IkReal x13173=(r22*sj5);
IkReal x13174=(r00*sj6);
IkReal x13175=(cj5*r02*sj5);
IkReal x13176=(r01*x13163);
IkReal x13177=(r21*x13164);
IkReal x13178=(r00*r20*x13163);
CheckValue<IkReal> x13179=IKPowWithIntegerCheck(IKsign((((cj5*x13173*x13174))+((x13165*x13175))+((r00*r20*x13164))+((r01*r21))+((x13176*x13177))+(((-1.0)*x13163*x13172))+(((-1.0)*r01*x13166*x13169))+((cj5*cj6*r01*x13173))+(((-1.0)*r01*x13177))+(((-1.0)*r00*x13165*x13169))+x13178+x13172+((x13168*x13175))+((x13163*x13165*x13174))+(((-1.0)*x13164*x13178))+((sj6*x13166*x13176)))),-1);
if(!x13179.valid){
continue;
}
CheckValue<IkReal> x13180 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x13167*x13169))+((r21*sj6*x13170))+(((-1.0)*x13166*x13170))+((x13166*x13167)))),IkReal((((cj5*x13165*x13167))+(((-1.0)*x13170*x13173))+((cj5*x13167*x13168))+(((-1.0)*x13165*x13170*x13171))+((x13167*x13173))+(((-1.0)*x13168*x13170*x13171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13179.value)))+(x13180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13181=IKsin(j4);
IkReal x13182=IKcos(j4);
IkReal x13183=(cj0*cj2);
IkReal x13184=(cj5*cj6);
IkReal x13185=(r11*sj6);
IkReal x13186=(cj6*r20);
IkReal x13187=(cj5*sj6);
IkReal x13188=(cj6*r10);
IkReal x13189=(r01*sj6);
IkReal x13190=(cj0*sj2);
IkReal x13191=(r21*sj6);
IkReal x13192=(cj6*r00);
IkReal x13193=((1.0)*sj0);
IkReal x13194=(sj2*x13193);
IkReal x13195=((1.0)*x13182);
IkReal x13196=((1.0)*x13181);
IkReal x13197=(sj5*x13196);
evalcond[0]=(((x13182*x13186))+(((-1.0)*r20*x13187*x13196))+(((-1.0)*r22*x13197))+(((-1.0)*x13191*x13195))+(((-1.0)*r21*x13184*x13196)));
evalcond[1]=((((-1.0)*r22*sj5*x13195))+(((-1.0)*r20*x13187*x13195))+(((-1.0)*r21*x13184*x13195))+(((-1.0)*x13186*x13196))+((x13181*x13191)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r10*x13187*x13195))+(((-1.0)*x13188*x13196))+(((-1.0)*r12*sj5*x13195))+(((-1.0)*r11*x13184*x13195))+x13190+((x13181*x13185)));
evalcond[3]=((((-1.0)*x13194))+(((-1.0)*r10*x13187*x13196))+(((-1.0)*r12*x13197))+((x13182*x13188))+(((-1.0)*x13185*x13195))+(((-1.0)*r11*x13184*x13196))+x13183);
evalcond[4]=((((-1.0)*x13194))+(((-1.0)*r02*sj5*x13195))+(((-1.0)*r00*x13187*x13195))+(((-1.0)*x13192*x13196))+x13183+(((-1.0)*r01*x13184*x13195))+((x13181*x13189)));
evalcond[5]=(((x13182*x13192))+(((-1.0)*x13190))+(((-1.0)*r02*x13197))+(((-1.0)*r00*x13187*x13196))+(((-1.0)*x13189*x13195))+(((-1.0)*r01*x13184*x13196))+(((-1.0)*cj2*x13193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13198=cj6*cj6;
IkReal x13199=cj5*cj5;
IkReal x13200=((1.0)*r11);
IkReal x13201=(r22*sj5);
IkReal x13202=(cj0*sj2);
IkReal x13203=(cj5*sj6);
IkReal x13204=(cj6*r20);
IkReal x13205=(cj2*sj0);
IkReal x13206=(r21*sj6);
IkReal x13207=(cj6*r10);
IkReal x13208=(r12*r22);
IkReal x13209=(r12*sj5);
IkReal x13210=(r21*x13198);
IkReal x13211=(r20*x13205);
IkReal x13212=(cj5*cj6*r21);
IkReal x13213=(r11*x13199);
IkReal x13214=(r10*r20*x13199);
CheckValue<IkReal> x13215 = IKatan2WithCheck(IkReal((((x13202*x13204))+((x13204*x13205))+(((-1.0)*x13205*x13206))+(((-1.0)*x13202*x13206)))),IkReal((((x13205*x13212))+((x13203*x13211))+((x13201*x13205))+((x13201*x13202))+((x13202*x13212))+((r20*x13202*x13203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13215.valid){
continue;
}
CheckValue<IkReal> x13216=IKPowWithIntegerCheck(IKsign((((sj6*x13204*x13213))+((x13210*x13213))+((x13199*x13206*x13207))+(((-1.0)*x13198*x13214))+((r10*r20*x13198))+((r11*r21))+((r10*x13201*x13203))+((r20*x13203*x13209))+(((-1.0)*x13200*x13210))+((cj5*cj6*r11*x13201))+(((-1.0)*x13206*x13207))+((x13209*x13212))+x13208+x13214+(((-1.0)*sj6*x13200*x13204))+(((-1.0)*x13199*x13208)))),-1);
if(!x13216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13215.value)+(((1.5707963267949)*(x13216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13217=IKsin(j4);
IkReal x13218=IKcos(j4);
IkReal x13219=(cj0*cj2);
IkReal x13220=(cj5*cj6);
IkReal x13221=(r11*sj6);
IkReal x13222=(cj6*r20);
IkReal x13223=(cj5*sj6);
IkReal x13224=(cj6*r10);
IkReal x13225=(r01*sj6);
IkReal x13226=(cj0*sj2);
IkReal x13227=(r21*sj6);
IkReal x13228=(cj6*r00);
IkReal x13229=((1.0)*sj0);
IkReal x13230=(sj2*x13229);
IkReal x13231=((1.0)*x13218);
IkReal x13232=((1.0)*x13217);
IkReal x13233=(sj5*x13232);
evalcond[0]=(((x13218*x13222))+(((-1.0)*r21*x13220*x13232))+(((-1.0)*x13227*x13231))+(((-1.0)*r20*x13223*x13232))+(((-1.0)*r22*x13233)));
evalcond[1]=((((-1.0)*r21*x13220*x13231))+((x13217*x13227))+(((-1.0)*r22*sj5*x13231))+(((-1.0)*x13222*x13232))+(((-1.0)*r20*x13223*x13231)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r10*x13223*x13231))+((x13217*x13221))+(((-1.0)*r12*sj5*x13231))+(((-1.0)*x13224*x13232))+x13226+(((-1.0)*r11*x13220*x13231)));
evalcond[3]=(((x13218*x13224))+(((-1.0)*r10*x13223*x13232))+(((-1.0)*r12*x13233))+x13219+(((-1.0)*x13221*x13231))+(((-1.0)*x13230))+(((-1.0)*r11*x13220*x13232)));
evalcond[4]=((((-1.0)*x13228*x13232))+(((-1.0)*r01*x13220*x13231))+((x13217*x13225))+(((-1.0)*r00*x13223*x13231))+(((-1.0)*r02*sj5*x13231))+x13219+(((-1.0)*x13230)));
evalcond[5]=(((x13218*x13228))+(((-1.0)*x13226))+(((-1.0)*r01*x13220*x13232))+(((-1.0)*x13225*x13231))+(((-1.0)*r02*x13233))+(((-1.0)*r00*x13223*x13232))+(((-1.0)*cj2*x13229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13234=(cj0*cj2);
IkReal x13235=(cj6*r20);
IkReal x13236=(r21*sj6);
IkReal x13237=(sj0*sj2);
IkReal x13238=(r22*sj5);
IkReal x13239=(cj5*r20*sj6);
IkReal x13240=(cj5*cj6*r21);
CheckValue<IkReal> x13241 = IKatan2WithCheck(IkReal(((((-1.0)*x13234*x13236))+((x13236*x13237))+((x13234*x13235))+(((-1.0)*x13235*x13237)))),IkReal(((((-1.0)*x13237*x13239))+(((-1.0)*x13237*x13238))+((x13234*x13239))+((x13234*x13238))+((x13234*x13240))+(((-1.0)*x13237*x13240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13241.valid){
continue;
}
CheckValue<IkReal> x13242=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13241.value)+(((1.5707963267949)*(x13242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13243=IKsin(j4);
IkReal x13244=IKcos(j4);
IkReal x13245=(cj0*cj2);
IkReal x13246=(cj5*cj6);
IkReal x13247=(r11*sj6);
IkReal x13248=(cj6*r20);
IkReal x13249=(cj5*sj6);
IkReal x13250=(cj6*r10);
IkReal x13251=(r01*sj6);
IkReal x13252=(cj0*sj2);
IkReal x13253=(r21*sj6);
IkReal x13254=(cj6*r00);
IkReal x13255=((1.0)*sj0);
IkReal x13256=(sj2*x13255);
IkReal x13257=((1.0)*x13244);
IkReal x13258=((1.0)*x13243);
IkReal x13259=(sj5*x13258);
evalcond[0]=((((-1.0)*r21*x13246*x13258))+(((-1.0)*r22*x13259))+(((-1.0)*r20*x13249*x13258))+((x13244*x13248))+(((-1.0)*x13253*x13257)));
evalcond[1]=((((-1.0)*r21*x13246*x13257))+((x13243*x13253))+(((-1.0)*r20*x13249*x13257))+(((-1.0)*r22*sj5*x13257))+(((-1.0)*x13248*x13258)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r11*x13246*x13257))+((x13243*x13247))+(((-1.0)*r10*x13249*x13257))+(((-1.0)*r12*sj5*x13257))+x13252+(((-1.0)*x13250*x13258)));
evalcond[3]=((((-1.0)*r11*x13246*x13258))+(((-1.0)*x13247*x13257))+((x13244*x13250))+(((-1.0)*r10*x13249*x13258))+(((-1.0)*r12*x13259))+(((-1.0)*x13256))+x13245);
evalcond[4]=(((x13243*x13251))+(((-1.0)*r02*sj5*x13257))+(((-1.0)*x13254*x13258))+(((-1.0)*r01*x13246*x13257))+(((-1.0)*x13256))+x13245+(((-1.0)*r00*x13249*x13257)));
evalcond[5]=((((-1.0)*x13252))+(((-1.0)*r02*x13259))+((x13244*x13254))+(((-1.0)*r01*x13246*x13258))+(((-1.0)*x13251*x13257))+(((-1.0)*cj2*x13255))+(((-1.0)*r00*x13249*x13258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13260=cj5*cj5;
IkReal x13261=cj6*cj6;
IkReal x13262=r22*r22;
IkReal x13263=r21*r21;
IkReal x13264=r20*r20;
IkReal x13265=(cj6*r21);
IkReal x13266=(r20*sj6);
IkReal x13267=(cj1*cj5);
IkReal x13268=((1.0)*sj2);
IkReal x13269=(cj1*cj2);
IkReal x13270=(cj6*r20);
IkReal x13271=(r22*sj5);
IkReal x13272=(r21*sj6);
IkReal x13273=((2.0)*cj5);
IkReal x13274=((1.0)*x13263);
IkReal x13275=((1.0)*x13264);
IkReal x13276=(x13260*x13261);
CheckValue<IkReal> x13277=IKPowWithIntegerCheck(IKsign((((x13264*x13276))+(((-1.0)*x13265*x13271*x13273))+(((2.0)*x13265*x13266))+((x13260*x13262))+(((-1.0)*x13274))+(((-1.0)*x13262))+(((-1.0)*x13274*x13276))+(((-1.0)*x13266*x13271*x13273))+(((-1.0)*x13261*x13275))+(((-1.0)*x13260*x13275))+(((-2.0)*x13260*x13265*x13266))+((x13261*x13263)))),-1);
if(!x13277.valid){
continue;
}
CheckValue<IkReal> x13278 = IKatan2WithCheck(IkReal(((((-1.0)*x13266*x13267*x13268))+(((-1.0)*x13269*x13272))+(((-1.0)*x13265*x13267*x13268))+(((-1.0)*cj1*x13268*x13271))+((x13269*x13270)))),IkReal((((cj2*x13266*x13267))+((cj1*sj2*x13270))+((cj2*x13265*x13267))+(((-1.0)*cj1*x13268*x13272))+((x13269*x13271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13277.value)))+(x13278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13279=IKsin(j4);
IkReal x13280=IKcos(j4);
IkReal x13281=(cj5*cj6);
IkReal x13282=(cj0*sj1);
IkReal x13283=(r11*sj6);
IkReal x13284=(cj6*r20);
IkReal x13285=(cj5*sj6);
IkReal x13286=(cj6*r10);
IkReal x13287=((1.0)*cj2);
IkReal x13288=(r21*sj6);
IkReal x13289=(cj6*r00);
IkReal x13290=(sj0*sj1);
IkReal x13291=(r01*sj6);
IkReal x13292=((1.0)*x13280);
IkReal x13293=((1.0)*x13279);
IkReal x13294=(sj5*x13293);
evalcond[0]=((((-1.0)*r21*x13281*x13293))+((cj1*sj2))+((x13280*x13284))+(((-1.0)*r20*x13285*x13293))+(((-1.0)*r22*x13294))+(((-1.0)*x13288*x13292)));
evalcond[1]=((((-1.0)*r21*x13281*x13292))+(((-1.0)*cj1*x13287))+(((-1.0)*r22*sj5*x13292))+(((-1.0)*r20*x13285*x13292))+((x13279*x13288))+(((-1.0)*x13284*x13293)));
evalcond[2]=(((sj2*x13290))+(((-1.0)*r11*x13281*x13293))+((cj0*cj2))+((x13280*x13286))+(((-1.0)*r12*x13294))+(((-1.0)*r10*x13285*x13293))+(((-1.0)*x13283*x13292)));
evalcond[3]=((((-1.0)*r01*x13281*x13293))+((sj2*x13282))+((x13280*x13289))+(((-1.0)*r00*x13285*x13293))+(((-1.0)*sj0*x13287))+(((-1.0)*x13291*x13292))+(((-1.0)*r02*x13294)));
evalcond[4]=((((-1.0)*x13287*x13290))+(((-1.0)*r12*sj5*x13292))+(((-1.0)*r11*x13281*x13292))+((x13279*x13283))+(((-1.0)*x13286*x13293))+(((-1.0)*r10*x13285*x13292))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r01*x13281*x13292))+((x13279*x13291))+(((-1.0)*r00*x13285*x13292))+(((-1.0)*sj0*sj2))+(((-1.0)*x13282*x13287))+(((-1.0)*r02*sj5*x13292))+(((-1.0)*x13289*x13293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13295=(cj6*r21);
IkReal x13296=(r20*sj6);
IkReal x13297=(cj1*sj2);
IkReal x13298=((1.0)*cj6);
IkReal x13299=((1.0)*sj5);
IkReal x13300=(cj0*cj2);
IkReal x13301=(r21*sj6);
IkReal x13302=(sj0*sj1*sj2);
IkReal x13303=((1.0)*cj5*x13300);
IkReal x13304=((1.0)*cj5*x13302);
CheckValue<IkReal> x13305 = IKatan2WithCheck(IkReal((((cj6*r10*x13297))+(((-1.0)*r11*sj6*x13297))+(((-1.0)*r20*x13298*x13300))+(((-1.0)*r20*x13298*x13302))+((x13301*x13302))+((x13300*x13301)))),IkReal(((((-1.0)*x13295*x13304))+(((-1.0)*x13295*x13303))+(((-1.0)*x13296*x13303))+(((-1.0)*x13296*x13304))+((r12*sj5*x13297))+((cj5*cj6*r11*x13297))+(((-1.0)*r22*x13299*x13300))+(((-1.0)*r22*x13299*x13302))+((cj5*r10*sj6*x13297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13305.valid){
continue;
}
CheckValue<IkReal> x13306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x13299))+(((-1.0)*r01*sj5*x13298))+((cj5*r02)))),-1);
if(!x13306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13305.value)+(((1.5707963267949)*(x13306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13307=IKsin(j4);
IkReal x13308=IKcos(j4);
IkReal x13309=(cj5*cj6);
IkReal x13310=(cj0*sj1);
IkReal x13311=(r11*sj6);
IkReal x13312=(cj6*r20);
IkReal x13313=(cj5*sj6);
IkReal x13314=(cj6*r10);
IkReal x13315=((1.0)*cj2);
IkReal x13316=(r21*sj6);
IkReal x13317=(cj6*r00);
IkReal x13318=(sj0*sj1);
IkReal x13319=(r01*sj6);
IkReal x13320=((1.0)*x13308);
IkReal x13321=((1.0)*x13307);
IkReal x13322=(sj5*x13321);
evalcond[0]=((((-1.0)*x13316*x13320))+(((-1.0)*r22*x13322))+(((-1.0)*r21*x13309*x13321))+((cj1*sj2))+((x13308*x13312))+(((-1.0)*r20*x13313*x13321)));
evalcond[1]=((((-1.0)*x13312*x13321))+(((-1.0)*cj1*x13315))+(((-1.0)*r21*x13309*x13320))+(((-1.0)*r22*sj5*x13320))+(((-1.0)*r20*x13313*x13320))+((x13307*x13316)));
evalcond[2]=((((-1.0)*r12*x13322))+(((-1.0)*r11*x13309*x13321))+((cj0*cj2))+((x13308*x13314))+((sj2*x13318))+(((-1.0)*r10*x13313*x13321))+(((-1.0)*x13311*x13320)));
evalcond[3]=((((-1.0)*r02*x13322))+(((-1.0)*r00*x13313*x13321))+(((-1.0)*x13319*x13320))+((x13308*x13317))+((sj2*x13310))+(((-1.0)*sj0*x13315))+(((-1.0)*r01*x13309*x13321)));
evalcond[4]=((((-1.0)*x13315*x13318))+(((-1.0)*x13314*x13321))+(((-1.0)*r11*x13309*x13320))+(((-1.0)*r12*sj5*x13320))+(((-1.0)*r10*x13313*x13320))+((x13307*x13311))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r00*x13313*x13320))+(((-1.0)*x13317*x13321))+(((-1.0)*x13310*x13315))+(((-1.0)*r02*sj5*x13320))+(((-1.0)*sj0*sj2))+((x13307*x13319))+(((-1.0)*r01*x13309*x13320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13323=(cj6*r20);
IkReal x13324=(cj2*sj0);
IkReal x13325=((1.0)*sj2);
IkReal x13326=(cj0*sj1);
IkReal x13327=(cj1*r01);
IkReal x13328=(r22*sj5);
IkReal x13329=(cj5*cj6);
IkReal x13330=(cj1*sj2);
IkReal x13331=(r21*sj6);
IkReal x13332=(cj5*r20*sj6);
CheckValue<IkReal> x13333 = IKatan2WithCheck(IkReal(((((-1.0)*x13324*x13331))+(((-1.0)*sj6*x13325*x13327))+((sj2*x13326*x13331))+((cj6*r00*x13330))+((x13323*x13324))+(((-1.0)*x13323*x13325*x13326)))),IkReal((((cj5*r00*sj6*x13330))+((sj2*x13327*x13329))+(((-1.0)*x13325*x13326*x13328))+((r21*x13324*x13329))+(((-1.0)*x13325*x13326*x13332))+((x13324*x13332))+((r02*sj5*x13330))+(((-1.0)*r21*x13325*x13326*x13329))+((x13324*x13328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13333.valid){
continue;
}
CheckValue<IkReal> x13334=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x13334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13333.value)+(((1.5707963267949)*(x13334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13335=IKsin(j4);
IkReal x13336=IKcos(j4);
IkReal x13337=(cj5*cj6);
IkReal x13338=(cj0*sj1);
IkReal x13339=(r11*sj6);
IkReal x13340=(cj6*r20);
IkReal x13341=(cj5*sj6);
IkReal x13342=(cj6*r10);
IkReal x13343=((1.0)*cj2);
IkReal x13344=(r21*sj6);
IkReal x13345=(cj6*r00);
IkReal x13346=(sj0*sj1);
IkReal x13347=(r01*sj6);
IkReal x13348=((1.0)*x13336);
IkReal x13349=((1.0)*x13335);
IkReal x13350=(sj5*x13349);
evalcond[0]=((((-1.0)*r22*x13350))+(((-1.0)*r20*x13341*x13349))+((cj1*sj2))+((x13336*x13340))+(((-1.0)*r21*x13337*x13349))+(((-1.0)*x13344*x13348)));
evalcond[1]=(((x13335*x13344))+(((-1.0)*x13340*x13349))+(((-1.0)*r20*x13341*x13348))+(((-1.0)*r21*x13337*x13348))+(((-1.0)*r22*sj5*x13348))+(((-1.0)*cj1*x13343)));
evalcond[2]=(((sj2*x13346))+(((-1.0)*r10*x13341*x13349))+(((-1.0)*r12*x13350))+((cj0*cj2))+((x13336*x13342))+(((-1.0)*x13339*x13348))+(((-1.0)*r11*x13337*x13349)));
evalcond[3]=((((-1.0)*sj0*x13343))+(((-1.0)*r02*x13350))+(((-1.0)*r01*x13337*x13349))+(((-1.0)*r00*x13341*x13349))+((x13336*x13345))+((sj2*x13338))+(((-1.0)*x13347*x13348)));
evalcond[4]=((((-1.0)*r10*x13341*x13348))+((x13335*x13339))+(((-1.0)*x13342*x13349))+(((-1.0)*x13343*x13346))+(((-1.0)*r12*sj5*x13348))+(((-1.0)*r11*x13337*x13348))+((cj0*sj2)));
evalcond[5]=(((x13335*x13347))+(((-1.0)*r01*x13337*x13348))+(((-1.0)*r02*sj5*x13348))+(((-1.0)*r00*x13341*x13348))+(((-1.0)*x13345*x13349))+(((-1.0)*sj0*sj2))+(((-1.0)*x13338*x13343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13351=cj5*cj5;
IkReal x13352=cj6*cj6;
IkReal x13353=r22*r22;
IkReal x13354=r21*r21;
IkReal x13355=r20*r20;
IkReal x13356=(cj6*r21);
IkReal x13357=(r20*sj6);
IkReal x13358=(cj1*cj5);
IkReal x13359=((1.0)*sj2);
IkReal x13360=(cj1*cj2);
IkReal x13361=(cj6*r20);
IkReal x13362=(r22*sj5);
IkReal x13363=(r21*sj6);
IkReal x13364=((2.0)*cj5);
IkReal x13365=((1.0)*x13354);
IkReal x13366=((1.0)*x13355);
IkReal x13367=(x13351*x13352);
CheckValue<IkReal> x13368=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13357*x13362*x13364))+(((-1.0)*x13352*x13366))+(((-2.0)*x13351*x13356*x13357))+(((-1.0)*x13365*x13367))+((x13352*x13354))+(((-1.0)*x13351*x13366))+((x13355*x13367))+(((-1.0)*x13356*x13362*x13364))+(((-1.0)*x13353))+(((-1.0)*x13365))+((x13351*x13353))+(((2.0)*x13356*x13357)))),-1);
if(!x13368.valid){
continue;
}
CheckValue<IkReal> x13369 = IKatan2WithCheck(IkReal(((((-1.0)*x13360*x13363))+(((-1.0)*x13357*x13358*x13359))+((x13360*x13361))+(((-1.0)*x13356*x13358*x13359))+(((-1.0)*cj1*x13359*x13362)))),IkReal((((cj2*x13357*x13358))+((cj2*x13356*x13358))+((x13360*x13362))+((cj1*sj2*x13361))+(((-1.0)*cj1*x13359*x13363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13368.value)))+(x13369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x13370=IKsin(j4);
IkReal x13371=IKcos(j4);
IkReal x13372=((1.0)*r21);
IkReal x13373=(r22*sj5);
IkReal x13374=(cj5*cj6);
IkReal x13375=(cj6*r20);
IkReal x13376=(cj5*r20);
IkReal x13377=(sj6*x13371);
IkReal x13378=((1.0)*x13370);
evalcond[0]=(((x13371*x13375))+(((-1.0)*x13370*x13372*x13374))+(((-1.0)*x13373*x13378))+(((-1.0)*x13372*x13377))+((cj1*sj2))+(((-1.0)*sj6*x13376*x13378)));
evalcond[1]=(((r21*sj6*x13370))+(((-1.0)*cj1*cj2))+(((-1.0)*x13376*x13377))+(((-1.0)*x13371*x13372*x13374))+(((-1.0)*x13375*x13378))+(((-1.0)*x13371*x13373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13379=((1.0)*cj6*sj5);
IkReal x13380=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r11*x13379))+((cj5*r12))+(((-1.0)*r10*x13380)))))+(IKabs(((((-1.0)*r01*x13379))+(((-1.0)*r00*x13380))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=sj1;
j0eval[2]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13381=(cj6*r10);
IkReal x13382=(sj2*sj4);
IkReal x13383=(r12*sj5);
IkReal x13384=(r01*sj6);
IkReal x13385=(cj2*r11);
IkReal x13386=(cj4*sj6);
IkReal x13387=((1.0)*cj6);
IkReal x13388=(cj4*r00);
IkReal x13389=(cj5*sj6);
IkReal x13390=(cj5*cj6);
IkReal x13391=(cj2*sj4);
IkReal x13392=(r02*sj5);
IkReal x13393=(cj4*sj2);
IkReal x13394=((1.0)*cj2*cj4);
if( IKabs(((((-1.0)*r00*x13389*x13391))+(((-1.0)*x13384*x13394))+(((-1.0)*cj5*r01*x13387*x13391))+((cj2*cj6*x13388))+((r10*x13382*x13389))+((x13382*x13383))+(((-1.0)*x13391*x13392))+((r11*x13382*x13390))+((r11*sj2*x13386))+(((-1.0)*x13381*x13393)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x13385*x13390))+((r01*x13382*x13390))+((x13385*x13386))+((x13382*x13392))+(((-1.0)*sj2*x13387*x13388))+((x13383*x13391))+(((-1.0)*x13381*x13394))+((x13384*x13393))+((r10*x13389*x13391))+((r00*x13382*x13389)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x13389*x13391))+(((-1.0)*x13384*x13394))+(((-1.0)*cj5*r01*x13387*x13391))+((cj2*cj6*x13388))+((r10*x13382*x13389))+((x13382*x13383))+(((-1.0)*x13391*x13392))+((r11*x13382*x13390))+((r11*sj2*x13386))+(((-1.0)*x13381*x13393))))+IKsqr((((sj4*x13385*x13390))+((r01*x13382*x13390))+((x13385*x13386))+((x13382*x13392))+(((-1.0)*sj2*x13387*x13388))+((x13383*x13391))+(((-1.0)*x13381*x13394))+((x13384*x13393))+((r10*x13389*x13391))+((r00*x13382*x13389))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x13389*x13391))+(((-1.0)*x13384*x13394))+(((-1.0)*cj5*r01*x13387*x13391))+((cj2*cj6*x13388))+((r10*x13382*x13389))+((x13382*x13383))+(((-1.0)*x13391*x13392))+((r11*x13382*x13390))+((r11*sj2*x13386))+(((-1.0)*x13381*x13393))), (((sj4*x13385*x13390))+((r01*x13382*x13390))+((x13385*x13386))+((x13382*x13392))+(((-1.0)*sj2*x13387*x13388))+((x13383*x13391))+(((-1.0)*x13381*x13394))+((x13384*x13393))+((r10*x13389*x13391))+((r00*x13382*x13389))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13395=IKcos(j0);
IkReal x13396=IKsin(j0);
IkReal x13397=((1.0)*sj4);
IkReal x13398=((0.37429)*sj5);
IkReal x13399=(r10*sj6);
IkReal x13400=(cj6*r00);
IkReal x13401=((0.37429)*cj5);
IkReal x13402=(cj6*r01);
IkReal x13403=((0.01)*cj5);
IkReal x13404=((1.0)*cj4);
IkReal x13405=(r00*sj6);
IkReal x13406=(r02*sj5);
IkReal x13407=(r12*sj5);
IkReal x13408=(cj6*r10);
IkReal x13409=(r01*sj6);
IkReal x13410=(r11*sj6);
IkReal x13411=(sj2*x13395);
IkReal x13412=(cj5*cj6*r11);
IkReal x13413=((0.069)*x13396);
IkReal x13414=(cj2*x13395);
IkReal x13415=((0.069)*x13395);
IkReal x13416=(sj2*x13396);
IkReal x13417=((1.0)*cj2*x13396);
evalcond[0]=(x13414+x13416+(((-1.0)*x13397*x13407))+(((-1.0)*cj5*x13397*x13399))+((cj4*x13408))+(((-1.0)*x13404*x13410))+(((-1.0)*x13397*x13412)));
evalcond[1]=(x13411+(((-1.0)*x13397*x13406))+(((-1.0)*cj5*x13397*x13402))+(((-1.0)*cj5*x13397*x13405))+((cj4*x13400))+(((-1.0)*x13404*x13409))+(((-1.0)*x13417)));
evalcond[2]=(x13411+((sj4*x13410))+(((-1.0)*x13397*x13408))+(((-1.0)*cj5*x13399*x13404))+(((-1.0)*x13404*x13412))+(((-1.0)*x13404*x13407))+(((-1.0)*x13417)));
evalcond[3]=((((-1.0)*x13414))+(((-1.0)*x13416))+(((-1.0)*x13397*x13400))+((sj4*x13409))+(((-1.0)*cj5*x13402*x13404))+(((-1.0)*x13404*x13406))+(((-1.0)*cj5*x13404*x13405)));
evalcond[4]=(x13415+(((-1.0)*sj2*x13413))+((x13402*x13403))+(((-1.0)*px))+((x13403*x13405))+((r02*x13401))+(((-0.069)*x13414))+(((-1.0)*x13398*x13405))+(((-1.0)*x13398*x13402))+(((0.01)*x13406)));
evalcond[5]=(x13413+((x13399*x13403))+(((-1.0)*cj2*x13413))+((r12*x13401))+((cj6*r11*x13403))+(((-1.0)*py))+(((-1.0)*cj6*r11*x13398))+(((0.069)*x13411))+(((-1.0)*x13398*x13399))+(((0.01)*x13407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13418=(cj5*cj6);
IkReal x13419=((1.0)*sj2);
IkReal x13420=(cj2*cj4);
IkReal x13421=(r12*sj5);
IkReal x13422=(cj4*sj2);
IkReal x13423=(r10*sj4);
IkReal x13424=(cj5*sj6);
IkReal x13425=(cj6*r10);
IkReal x13426=(r11*sj6);
IkReal x13427=(sj4*x13421);
IkReal x13428=(cj2*r11*sj4);
IkReal x13429=(r11*sj4*x13419);
IkReal x13430=(cj2*r10*x13424);
if( IKabs((((cj2*cj6*x13423))+((x13420*x13421))+(((-1.0)*cj2*sj4*x13426))+((r10*x13420*x13424))+(((-1.0)*x13419*x13423*x13424))+(((-1.0)*x13419*x13427))+((r11*x13418*x13420))+(((-1.0)*x13418*x13429))+((x13422*x13425))+(((-1.0)*cj4*x13419*x13426)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x13422*x13424))+((cj2*x13427))+(((-1.0)*x13420*x13425))+((x13420*x13426))+(((-1.0)*sj4*x13419*x13426))+((x13418*x13428))+((x13421*x13422))+((r11*x13418*x13422))+((cj6*sj2*x13423))+((cj2*x13423*x13424)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*cj6*x13423))+((x13420*x13421))+(((-1.0)*cj2*sj4*x13426))+((r10*x13420*x13424))+(((-1.0)*x13419*x13423*x13424))+(((-1.0)*x13419*x13427))+((r11*x13418*x13420))+(((-1.0)*x13418*x13429))+((x13422*x13425))+(((-1.0)*cj4*x13419*x13426))))+IKsqr((((r10*x13422*x13424))+((cj2*x13427))+(((-1.0)*x13420*x13425))+((x13420*x13426))+(((-1.0)*sj4*x13419*x13426))+((x13418*x13428))+((x13421*x13422))+((r11*x13418*x13422))+((cj6*sj2*x13423))+((cj2*x13423*x13424))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj2*cj6*x13423))+((x13420*x13421))+(((-1.0)*cj2*sj4*x13426))+((r10*x13420*x13424))+(((-1.0)*x13419*x13423*x13424))+(((-1.0)*x13419*x13427))+((r11*x13418*x13420))+(((-1.0)*x13418*x13429))+((x13422*x13425))+(((-1.0)*cj4*x13419*x13426))), (((r10*x13422*x13424))+((cj2*x13427))+(((-1.0)*x13420*x13425))+((x13420*x13426))+(((-1.0)*sj4*x13419*x13426))+((x13418*x13428))+((x13421*x13422))+((r11*x13418*x13422))+((cj6*sj2*x13423))+((cj2*x13423*x13424))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13431=IKcos(j0);
IkReal x13432=IKsin(j0);
IkReal x13433=((1.0)*sj4);
IkReal x13434=((0.37429)*sj5);
IkReal x13435=(r10*sj6);
IkReal x13436=(cj6*r00);
IkReal x13437=((0.37429)*cj5);
IkReal x13438=(cj6*r01);
IkReal x13439=((0.01)*cj5);
IkReal x13440=(r12*sj5);
IkReal x13441=(r00*sj6);
IkReal x13442=(r02*sj5);
IkReal x13443=((1.0)*cj4);
IkReal x13444=(cj6*r10);
IkReal x13445=(r01*sj6);
IkReal x13446=(r11*sj6);
IkReal x13447=(cj2*x13431);
IkReal x13448=(cj5*cj6*r11);
IkReal x13449=((0.069)*x13432);
IkReal x13450=(sj2*x13431);
IkReal x13451=(cj2*x13432);
IkReal x13452=((1.0)*sj2*x13432);
evalcond[0]=(x13450+x13451+((sj4*x13446))+(((-1.0)*x13433*x13444))+(((-1.0)*x13440*x13443))+(((-1.0)*cj5*x13435*x13443))+(((-1.0)*x13443*x13448)));
evalcond[1]=(x13447+(((-1.0)*cj5*x13433*x13435))+(((-1.0)*x13433*x13440))+(((-1.0)*x13433*x13448))+(((-1.0)*x13452))+(((-1.0)*x13443*x13446))+((cj4*x13444)));
evalcond[2]=((((-1.0)*cj5*x13438*x13443))+x13447+((sj4*x13445))+(((-1.0)*x13452))+(((-1.0)*x13433*x13436))+(((-1.0)*cj5*x13441*x13443))+(((-1.0)*x13442*x13443)));
evalcond[3]=((((-1.0)*cj5*x13433*x13438))+(((-1.0)*x13433*x13442))+(((-1.0)*x13450))+(((-1.0)*x13451))+((cj4*x13436))+(((-1.0)*cj5*x13433*x13441))+(((-1.0)*x13443*x13445)));
evalcond[4]=(((x13438*x13439))+(((-1.0)*x13434*x13438))+(((0.069)*x13447))+(((0.01)*x13442))+((r02*x13437))+(((-1.0)*px))+(((0.069)*x13431))+((x13439*x13441))+(((-1.0)*x13434*x13441))+(((-1.0)*sj2*x13449)));
evalcond[5]=(x13449+(((-1.0)*x13434*x13435))+(((0.01)*x13440))+(((-1.0)*py))+((cj6*r11*x13439))+(((0.069)*x13450))+((cj2*x13449))+(((-1.0)*cj6*r11*x13434))+((r12*x13437))+((x13435*x13439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13453=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x13453))+(((-1.0)*cj6*r11*x13453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x13453))+(((-1.0)*cj6*r01*x13453))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x13453))+(((-1.0)*cj6*r11*x13453))))+IKsqr(((((-1.0)*r00*sj6*x13453))+(((-1.0)*cj6*r01*x13453))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x13453))+(((-1.0)*cj6*r11*x13453))), ((((-1.0)*r00*sj6*x13453))+(((-1.0)*cj6*r01*x13453))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13454=IKcos(j0);
IkReal x13455=IKsin(j0);
IkReal x13456=((1.0)*cj5);
IkReal x13457=(cj6*sj4);
IkReal x13458=(cj4*sj6);
IkReal x13459=(cj5*r12);
IkReal x13460=((0.37429)*sj5);
IkReal x13461=(r10*sj6);
IkReal x13462=((1.0)*r00);
IkReal x13463=((0.069)*sj2);
IkReal x13464=(cj6*r01);
IkReal x13465=((0.01)*cj5);
IkReal x13466=(r00*sj6);
IkReal x13467=((1.0)*sj5);
IkReal x13468=(cj6*r11);
IkReal x13469=(cj4*cj6);
IkReal x13470=(cj5*r02);
IkReal x13471=((0.01)*sj5);
IkReal x13472=(sj4*sj6);
IkReal x13473=((1.0)*x13455);
evalcond[0]=(x13470+(((-1.0)*sj5*sj6*x13462))+(((-1.0)*x13454))+(((-1.0)*x13464*x13467)));
evalcond[1]=(x13459+(((-1.0)*x13461*x13467))+(((-1.0)*x13473))+(((-1.0)*x13467*x13468)));
evalcond[2]=(((r10*x13469))+(((-1.0)*r11*x13458))+(((-1.0)*r11*x13456*x13457))+(((-1.0)*r12*sj4*x13467))+(((-1.0)*sj4*x13456*x13461))+((cj2*x13454)));
evalcond[3]=(((sj2*x13454))+((r11*x13472))+(((-1.0)*cj4*r12*x13467))+(((-1.0)*r10*x13456*x13458))+(((-1.0)*r10*x13457))+(((-1.0)*cj4*x13456*x13468)));
evalcond[4]=((((-1.0)*r02*sj4*x13467))+(((-1.0)*r01*x13456*x13457))+(((-1.0)*r01*x13458))+(((-1.0)*sj4*x13456*x13466))+((r00*x13469))+(((-1.0)*cj2*x13473)));
evalcond[5]=((((-1.0)*cj4*r02*x13467))+((r01*x13472))+(((-1.0)*sj2*x13473))+(((-1.0)*r00*x13456*x13458))+(((-1.0)*x13457*x13462))+(((-1.0)*cj4*x13456*x13464)));
evalcond[6]=((((0.37429)*x13470))+((x13464*x13465))+(((-1.0)*x13460*x13466))+(((-1.0)*x13460*x13464))+((x13465*x13466))+(((-1.0)*px))+(((0.43342)*x13454))+(((-1.0)*x13455*x13463))+((r02*x13471)));
evalcond[7]=((((0.37429)*x13459))+(((-1.0)*x13460*x13468))+(((-1.0)*x13460*x13461))+((r12*x13471))+((x13465*x13468))+(((-1.0)*py))+(((0.43342)*x13455))+((x13461*x13465))+((x13454*x13463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13474=(cj6*sj5);
IkReal x13475=(sj5*sj6);
IkReal x13476=((1.0)*cj5);
if( IKabs((((r11*x13474))+((r10*x13475))+(((-1.0)*r12*x13476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x13475))+((r01*x13474))+(((-1.0)*r02*x13476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x13474))+((r10*x13475))+(((-1.0)*r12*x13476))))+IKsqr((((r00*x13475))+((r01*x13474))+(((-1.0)*r02*x13476))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x13474))+((r10*x13475))+(((-1.0)*r12*x13476))), (((r00*x13475))+((r01*x13474))+(((-1.0)*r02*x13476))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13477=IKcos(j0);
IkReal x13478=IKsin(j0);
IkReal x13479=((1.0)*cj5);
IkReal x13480=(cj6*sj4);
IkReal x13481=(cj4*sj6);
IkReal x13482=(cj5*r12);
IkReal x13483=((0.37429)*sj5);
IkReal x13484=(r10*sj6);
IkReal x13485=((1.0)*r00);
IkReal x13486=((0.069)*sj2);
IkReal x13487=(cj6*r01);
IkReal x13488=((0.01)*cj5);
IkReal x13489=(r00*sj6);
IkReal x13490=((1.0)*sj5);
IkReal x13491=(cj6*r11);
IkReal x13492=((0.01)*sj5);
IkReal x13493=(cj4*cj6);
IkReal x13494=(cj5*r02);
IkReal x13495=(sj4*sj6);
IkReal x13496=((1.0)*x13478);
evalcond[0]=(x13494+x13477+(((-1.0)*sj5*sj6*x13485))+(((-1.0)*x13487*x13490)));
evalcond[1]=(x13482+x13478+(((-1.0)*x13490*x13491))+(((-1.0)*x13484*x13490)));
evalcond[2]=((((-1.0)*sj4*x13479*x13484))+(((-1.0)*r11*x13481))+((cj2*x13477))+((r10*x13493))+(((-1.0)*r11*x13479*x13480))+(((-1.0)*r12*sj4*x13490)));
evalcond[3]=(((sj2*x13477))+(((-1.0)*r10*x13480))+(((-1.0)*r10*x13479*x13481))+(((-1.0)*cj4*x13479*x13491))+(((-1.0)*cj4*r12*x13490))+((r11*x13495)));
evalcond[4]=((((-1.0)*r01*x13481))+(((-1.0)*cj2*x13496))+(((-1.0)*sj4*x13479*x13489))+((r00*x13493))+(((-1.0)*r01*x13479*x13480))+(((-1.0)*r02*sj4*x13490)));
evalcond[5]=((((-1.0)*sj2*x13496))+(((-1.0)*cj4*x13479*x13487))+(((-1.0)*r00*x13479*x13481))+((r01*x13495))+(((-1.0)*x13480*x13485))+(((-1.0)*cj4*r02*x13490)));
evalcond[6]=(((r02*x13492))+(((-1.0)*x13483*x13487))+(((-1.0)*x13483*x13489))+((x13488*x13489))+((x13487*x13488))+(((0.37429)*x13494))+(((-1.0)*px))+(((-1.0)*x13478*x13486))+(((-0.29542)*x13477)));
evalcond[7]=((((-1.0)*x13483*x13484))+((x13477*x13486))+(((-1.0)*x13483*x13491))+((x13488*x13491))+(((-1.0)*py))+(((0.37429)*x13482))+((x13484*x13488))+(((-0.29542)*x13478))+((r12*x13492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x13497=((1.0)*cj6*sj5);
IkReal x13498=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x13497))+(((-1.0)*r10*x13498)))))+(IKabs(((((-1.0)*r01*x13497))+(((-1.0)*r00*x13498))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13499=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x13499))+(((-1.0)*r10*sj6*x13499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x13499))+(((-1.0)*cj6*r01*x13499))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x13499))+(((-1.0)*r10*sj6*x13499))))+IKsqr(((((-1.0)*r00*sj6*x13499))+(((-1.0)*cj6*r01*x13499))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x13499))+(((-1.0)*r10*sj6*x13499))), ((((-1.0)*r00*sj6*x13499))+(((-1.0)*cj6*r01*x13499))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13500=IKcos(j0);
IkReal x13501=IKsin(j0);
IkReal x13502=((1.0)*sj4);
IkReal x13503=(cj5*r12);
IkReal x13504=(r10*sj6);
IkReal x13505=((0.37429)*sj5);
IkReal x13506=(cj6*r01);
IkReal x13507=((0.01)*cj5);
IkReal x13508=(r12*sj5);
IkReal x13509=(r00*sj6);
IkReal x13510=((1.0)*sj5);
IkReal x13511=(r02*sj5);
IkReal x13512=(cj6*r11);
IkReal x13513=(cj4*cj6);
IkReal x13514=(cj5*r02);
IkReal x13515=((1.0)*x13501);
IkReal x13516=(cj5*x13512);
IkReal x13517=((1.0)*cj4*sj6);
evalcond[0]=(x13514+(((-1.0)*x13506*x13510))+(((-1.0)*x13500))+(((-1.0)*x13509*x13510)));
evalcond[1]=(x13503+(((-1.0)*x13515))+(((-1.0)*x13510*x13512))+(((-1.0)*x13504*x13510)));
evalcond[2]=(x13500+(((-1.0)*r11*x13517))+(((-1.0)*cj5*x13502*x13504))+(((-1.0)*x13502*x13508))+(((-1.0)*x13502*x13516))+((r10*x13513)));
evalcond[3]=((((-1.0)*cj5*x13502*x13509))+(((-1.0)*cj5*x13502*x13506))+(((-1.0)*x13502*x13511))+(((-1.0)*x13515))+(((-1.0)*r01*x13517))+((r00*x13513)));
evalcond[4]=((((0.43342)*x13500))+(((0.37429)*x13514))+((x13507*x13509))+(((-1.0)*px))+(((0.01)*x13511))+((x13506*x13507))+(((-1.0)*x13505*x13509))+(((-1.0)*x13505*x13506)));
evalcond[5]=((((0.37429)*x13503))+(((0.43342)*x13501))+((x13507*x13512))+(((-1.0)*py))+(((0.01)*x13508))+(((-1.0)*x13505*x13512))+(((-1.0)*x13504*x13505))+((x13504*x13507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13518=(cj6*sj5);
IkReal x13519=(sj5*sj6);
IkReal x13520=((1.0)*cj5);
if( IKabs(((((-1.0)*r12*x13520))+((r11*x13518))+((r10*x13519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x13519))+(((-1.0)*r02*x13520))+((r01*x13518)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x13520))+((r11*x13518))+((r10*x13519))))+IKsqr((((r00*x13519))+(((-1.0)*r02*x13520))+((r01*x13518))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x13520))+((r11*x13518))+((r10*x13519))), (((r00*x13519))+(((-1.0)*r02*x13520))+((r01*x13518))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13521=IKcos(j0);
IkReal x13522=IKsin(j0);
IkReal x13523=((1.0)*sj4);
IkReal x13524=(cj5*r12);
IkReal x13525=(r10*sj6);
IkReal x13526=((0.37429)*sj5);
IkReal x13527=(cj6*r01);
IkReal x13528=((0.01)*cj5);
IkReal x13529=(r12*sj5);
IkReal x13530=(r00*sj6);
IkReal x13531=((1.0)*sj5);
IkReal x13532=(r02*sj5);
IkReal x13533=(cj6*r11);
IkReal x13534=(cj4*cj6);
IkReal x13535=(cj5*r02);
IkReal x13536=(cj5*x13533);
IkReal x13537=((1.0)*cj4*sj6);
evalcond[0]=(x13535+x13521+(((-1.0)*x13530*x13531))+(((-1.0)*x13527*x13531)));
evalcond[1]=(x13522+x13524+(((-1.0)*x13531*x13533))+(((-1.0)*x13525*x13531)));
evalcond[2]=(x13521+(((-1.0)*cj5*x13523*x13525))+(((-1.0)*r11*x13537))+(((-1.0)*x13523*x13536))+(((-1.0)*x13523*x13529))+((r10*x13534)));
evalcond[3]=((((-1.0)*cj5*x13523*x13530))+(((-1.0)*cj5*x13523*x13527))+(((-1.0)*x13522))+(((-1.0)*x13523*x13532))+(((-1.0)*r01*x13537))+((r00*x13534)));
evalcond[4]=((((-0.29542)*x13521))+(((0.37429)*x13535))+((x13528*x13530))+((x13527*x13528))+(((-1.0)*px))+(((-1.0)*x13526*x13527))+(((-1.0)*x13526*x13530))+(((0.01)*x13532)));
evalcond[5]=((((-0.29542)*x13522))+(((0.37429)*x13524))+((x13525*x13528))+((x13528*x13533))+(((-1.0)*py))+(((-1.0)*x13525*x13526))+(((0.01)*x13529))+(((-1.0)*x13526*x13533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13538=(cj4*sj6);
IkReal x13539=((1.0)*r01);
IkReal x13540=(cj5*sj4);
IkReal x13541=(sj4*sj5);
IkReal x13542=(cj4*cj6);
if( IKabs(((((-1.0)*x13538*x13539))+((r00*x13542))+(((-1.0)*cj6*x13539*x13540))+(((-1.0)*r00*sj6*x13540))+(((-1.0)*r02*x13541)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r11*x13540))+((r12*x13541))+((r10*sj6*x13540))+((r11*x13538))+(((-1.0)*r10*x13542)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x13538*x13539))+((r00*x13542))+(((-1.0)*cj6*x13539*x13540))+(((-1.0)*r00*sj6*x13540))+(((-1.0)*r02*x13541))))+IKsqr((((cj6*r11*x13540))+((r12*x13541))+((r10*sj6*x13540))+((r11*x13538))+(((-1.0)*r10*x13542))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x13538*x13539))+((r00*x13542))+(((-1.0)*cj6*x13539*x13540))+(((-1.0)*r00*sj6*x13540))+(((-1.0)*r02*x13541))), (((cj6*r11*x13540))+((r12*x13541))+((r10*sj6*x13540))+((r11*x13538))+(((-1.0)*r10*x13542))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x13543=IKcos(j0);
IkReal x13544=(cj5*r11);
IkReal x13545=(cj5*r01);
IkReal x13546=(cj4*cj6);
IkReal x13547=((1.0)*cj4);
IkReal x13548=(r01*sj6);
IkReal x13549=(r11*sj6);
IkReal x13550=((1.0)*(IKsin(j0)));
IkReal x13551=((1.0)*cj6*sj4);
IkReal x13552=((1.0)*sj4*sj5);
IkReal x13553=(cj5*r00*sj6);
IkReal x13554=((1.0)*cj5*r10*sj6);
evalcond[0]=(x13543+(((-1.0)*sj4*x13554))+(((-1.0)*x13547*x13549))+(((-1.0)*x13544*x13551))+((r10*x13546))+(((-1.0)*r12*x13552)));
evalcond[1]=((((-1.0)*x13547*x13548))+(((-1.0)*x13550))+((r00*x13546))+(((-1.0)*r02*x13552))+(((-1.0)*sj4*x13553))+(((-1.0)*x13545*x13551)));
evalcond[2]=(((sj4*x13549))+(((-1.0)*x13550))+(((-1.0)*r12*sj5*x13547))+(((-1.0)*x13544*x13546))+(((-1.0)*r10*x13551))+(((-1.0)*cj5*r10*sj6*x13547)));
evalcond[3]=(((sj4*x13548))+(((-1.0)*x13547*x13553))+(((-1.0)*r00*x13551))+(((-1.0)*x13545*x13546))+(((-1.0)*x13543))+(((-1.0)*r02*sj5*x13547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13555=(r11*sj6);
IkReal x13556=(cj6*r10);
IkReal x13557=(r12*sj5);
IkReal x13558=(cj5*cj6*r11);
IkReal x13559=(cj5*r10*sj6);
if( IKabs((((sj4*x13556))+(((-1.0)*sj4*x13555))+((cj4*x13557))+((cj4*x13558))+((cj4*x13559)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x13557))+((sj4*x13558))+((sj4*x13559))+(((-1.0)*cj4*x13556))+((cj4*x13555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x13556))+(((-1.0)*sj4*x13555))+((cj4*x13557))+((cj4*x13558))+((cj4*x13559))))+IKsqr((((sj4*x13557))+((sj4*x13558))+((sj4*x13559))+(((-1.0)*cj4*x13556))+((cj4*x13555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x13556))+(((-1.0)*sj4*x13555))+((cj4*x13557))+((cj4*x13558))+((cj4*x13559))), (((sj4*x13557))+((sj4*x13558))+((sj4*x13559))+(((-1.0)*cj4*x13556))+((cj4*x13555))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13560=IKcos(j0);
IkReal x13561=IKsin(j0);
IkReal x13562=((1.0)*sj4);
IkReal x13563=(r10*sj6);
IkReal x13564=((0.37429)*sj5);
IkReal x13565=(cj6*r00);
IkReal x13566=((0.01)*cj5);
IkReal x13567=((1.0)*cj4);
IkReal x13568=(r00*sj6);
IkReal x13569=(r02*sj5);
IkReal x13570=(sj4*sj6);
IkReal x13571=(r12*sj5);
IkReal x13572=((0.37429)*cj5);
IkReal x13573=(cj6*r10);
IkReal x13574=(cj5*cj6*r11);
IkReal x13575=(cj5*cj6*r01);
evalcond[0]=(((cj4*x13573))+x13560+(((-1.0)*x13562*x13571))+(((-1.0)*x13562*x13574))+(((-1.0)*cj5*x13562*x13563))+(((-1.0)*r11*sj6*x13567)));
evalcond[1]=(x13561+(((-1.0)*x13562*x13573))+(((-1.0)*x13567*x13571))+(((-1.0)*x13567*x13574))+(((-1.0)*cj5*x13563*x13567))+((r11*x13570)));
evalcond[2]=((((-1.0)*x13562*x13565))+x13560+(((-1.0)*x13567*x13569))+(((-1.0)*x13567*x13575))+(((-1.0)*cj5*x13567*x13568))+((r01*x13570)));
evalcond[3]=((((-1.0)*x13562*x13569))+(((-1.0)*x13562*x13575))+(((-1.0)*cj5*x13562*x13568))+(((-1.0)*r01*sj6*x13567))+(((-1.0)*x13561))+((cj4*x13565)));
evalcond[4]=((((-1.0)*cj6*r01*x13564))+(((0.138)*x13560))+((x13566*x13568))+((r02*x13572))+(((-1.0)*x13564*x13568))+(((-1.0)*px))+((cj6*r01*x13566))+(((0.01)*x13569)));
evalcond[5]=((((0.01)*x13571))+((cj6*r11*x13566))+(((-1.0)*x13563*x13564))+((r12*x13572))+(((-1.0)*cj6*r11*x13564))+(((0.138)*x13561))+(((-1.0)*py))+((x13563*x13566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13576=((1.0)*cj6);
IkReal x13577=((1.0)*sj5);
IkReal x13578=(cj4*cj5);
CheckValue<IkReal> x13579=IKPowWithIntegerCheck(sj1,-1);
if(!x13579.valid){
continue;
}
CheckValue<IkReal> x13580=IKPowWithIntegerCheck(cj1,-1);
if(!x13580.valid){
continue;
}
if( IKabs(((x13579.value)*(((((-1.0)*r11*x13576*x13578))+(((-1.0)*r10*sj4*x13576))+((r11*sj4*sj6))+(((-1.0)*r10*sj6*x13578))+(((-1.0)*cj4*r12*x13577)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13580.value)*(((((-1.0)*r00*sj6*x13577))+(((-1.0)*r01*sj5*x13576))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13579.value)*(((((-1.0)*r11*x13576*x13578))+(((-1.0)*r10*sj4*x13576))+((r11*sj4*sj6))+(((-1.0)*r10*sj6*x13578))+(((-1.0)*cj4*r12*x13577))))))+IKsqr(((x13580.value)*(((((-1.0)*r00*sj6*x13577))+(((-1.0)*r01*sj5*x13576))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13579.value)*(((((-1.0)*r11*x13576*x13578))+(((-1.0)*r10*sj4*x13576))+((r11*sj4*sj6))+(((-1.0)*r10*sj6*x13578))+(((-1.0)*cj4*r12*x13577))))), ((x13580.value)*(((((-1.0)*r00*sj6*x13577))+(((-1.0)*r01*sj5*x13576))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13581=IKcos(j0);
IkReal x13582=IKsin(j0);
IkReal x13583=((1.0)*cj5);
IkReal x13584=(cj6*sj4);
IkReal x13585=(r00*sj6);
IkReal x13586=(cj5*r12);
IkReal x13587=((0.37429)*sj5);
IkReal x13588=(r10*sj6);
IkReal x13589=((0.36442)*cj1);
IkReal x13590=(cj6*r01);
IkReal x13591=((0.01)*cj5);
IkReal x13592=((1.0)*sj5);
IkReal x13593=(cj6*r11);
IkReal x13594=(cj4*cj6);
IkReal x13595=(cj5*r02);
IkReal x13596=(r01*sj6);
IkReal x13597=((1.0)*cj4);
IkReal x13598=((0.01)*sj5);
IkReal x13599=(r11*sj6);
IkReal x13600=((0.069)*x13582);
IkReal x13601=((1.0)*x13582);
IkReal x13602=((1.0)*x13581);
IkReal x13603=((0.069)*x13581);
evalcond[0]=(x13595+(((-1.0)*x13585*x13592))+(((-1.0)*cj1*x13602))+(((-1.0)*x13590*x13592)));
evalcond[1]=(x13586+(((-1.0)*x13592*x13593))+(((-1.0)*cj1*x13601))+(((-1.0)*x13588*x13592)));
evalcond[2]=(x13581+(((-1.0)*x13597*x13599))+((r10*x13594))+(((-1.0)*r11*x13583*x13584))+(((-1.0)*r12*sj4*x13592))+(((-1.0)*sj4*x13583*x13588)));
evalcond[3]=((((-1.0)*x13596*x13597))+((r00*x13594))+(((-1.0)*r01*x13583*x13584))+(((-1.0)*x13601))+(((-1.0)*r02*sj4*x13592))+(((-1.0)*sj4*x13583*x13585)));
evalcond[4]=((((-1.0)*cj4*x13583*x13593))+((sj4*x13599))+(((-1.0)*cj4*r12*x13592))+(((-1.0)*sj1*x13601))+(((-1.0)*r10*x13584))+(((-1.0)*cj4*x13583*x13588)));
evalcond[5]=((((-1.0)*cj4*x13583*x13590))+((sj4*x13596))+(((-1.0)*sj1*x13602))+(((-1.0)*cj4*x13583*x13585))+(((-1.0)*r00*x13584))+(((-1.0)*cj4*r02*x13592)));
evalcond[6]=(x13603+(((-1.0)*x13585*x13587))+(((-1.0)*sj1*x13603))+(((-1.0)*x13587*x13590))+(((-1.0)*px))+(((0.37429)*x13595))+((x13581*x13589))+((r02*x13598))+((x13585*x13591))+((x13590*x13591)));
evalcond[7]=(x13600+((x13588*x13591))+((x13591*x13593))+((x13582*x13589))+(((-1.0)*x13587*x13588))+(((-1.0)*sj1*x13600))+(((-1.0)*x13587*x13593))+(((0.37429)*x13586))+(((-1.0)*py))+((r12*x13598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13604=(cj5*sj4);
IkReal x13605=(cj6*r11);
IkReal x13606=((1.0)*r10);
CheckValue<IkReal> x13607=IKPowWithIntegerCheck(cj1,-1);
if(!x13607.valid){
continue;
}
if( IKabs(((x13607.value)*((((cj5*r12))+(((-1.0)*sj5*sj6*x13606))+(((-1.0)*sj5*x13605)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*cj6*x13606))+((x13604*x13605))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x13604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13607.value)*((((cj5*r12))+(((-1.0)*sj5*sj6*x13606))+(((-1.0)*sj5*x13605))))))+IKsqr(((((-1.0)*cj4*cj6*x13606))+((x13604*x13605))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x13604))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13607.value)*((((cj5*r12))+(((-1.0)*sj5*sj6*x13606))+(((-1.0)*sj5*x13605))))), ((((-1.0)*cj4*cj6*x13606))+((x13604*x13605))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x13604))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13608=IKcos(j0);
IkReal x13609=IKsin(j0);
IkReal x13610=((1.0)*cj5);
IkReal x13611=(cj6*sj4);
IkReal x13612=(r00*sj6);
IkReal x13613=(cj5*r12);
IkReal x13614=((0.37429)*sj5);
IkReal x13615=(r10*sj6);
IkReal x13616=((0.36442)*cj1);
IkReal x13617=(cj6*r01);
IkReal x13618=((0.01)*cj5);
IkReal x13619=((1.0)*sj5);
IkReal x13620=(cj6*r11);
IkReal x13621=(cj4*cj6);
IkReal x13622=(cj5*r02);
IkReal x13623=(r01*sj6);
IkReal x13624=((1.0)*cj4);
IkReal x13625=((0.01)*sj5);
IkReal x13626=(r11*sj6);
IkReal x13627=((0.069)*x13609);
IkReal x13628=((1.0)*x13609);
IkReal x13629=((1.0)*x13608);
IkReal x13630=((0.069)*x13608);
evalcond[0]=(x13622+(((-1.0)*cj1*x13629))+(((-1.0)*x13612*x13619))+(((-1.0)*x13617*x13619)));
evalcond[1]=(x13613+(((-1.0)*cj1*x13628))+(((-1.0)*x13615*x13619))+(((-1.0)*x13619*x13620)));
evalcond[2]=(((r10*x13621))+x13608+(((-1.0)*x13624*x13626))+(((-1.0)*r12*sj4*x13619))+(((-1.0)*r11*x13610*x13611))+(((-1.0)*sj4*x13610*x13615)));
evalcond[3]=((((-1.0)*x13623*x13624))+(((-1.0)*r02*sj4*x13619))+(((-1.0)*x13628))+((r00*x13621))+(((-1.0)*sj4*x13610*x13612))+(((-1.0)*r01*x13610*x13611)));
evalcond[4]=((((-1.0)*cj4*x13610*x13615))+((sj4*x13626))+(((-1.0)*sj1*x13628))+(((-1.0)*cj4*r12*x13619))+(((-1.0)*cj4*x13610*x13620))+(((-1.0)*r10*x13611)));
evalcond[5]=((((-1.0)*cj4*x13610*x13612))+(((-1.0)*cj4*x13610*x13617))+(((-1.0)*cj4*r02*x13619))+((sj4*x13623))+(((-1.0)*sj1*x13629))+(((-1.0)*r00*x13611)));
evalcond[6]=((((0.37429)*x13622))+((x13608*x13616))+x13630+((x13612*x13618))+(((-1.0)*x13612*x13614))+(((-1.0)*sj1*x13630))+(((-1.0)*px))+(((-1.0)*x13614*x13617))+((r02*x13625))+((x13617*x13618)));
evalcond[7]=(((r12*x13625))+((x13609*x13616))+x13627+(((0.37429)*x13613))+((x13615*x13618))+(((-1.0)*sj1*x13627))+(((-1.0)*py))+(((-1.0)*x13614*x13615))+((x13618*x13620))+(((-1.0)*x13614*x13620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13631=((1.0)*cj6*sj5);
IkReal x13632=((1.0)*sj5*sj6);
CheckValue<IkReal> x13633=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x13633.valid){
continue;
}
CheckValue<IkReal> x13634 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x13631))+(((-1.0)*r10*x13632)))),IkReal(((((-1.0)*r00*x13632))+(((-1.0)*r01*x13631))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13634.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13633.value)))+(x13634.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13635=IKcos(j0);
IkReal x13636=IKsin(j0);
IkReal x13637=((1.0)*cj5);
IkReal x13638=(cj6*sj4);
IkReal x13639=(r00*sj6);
IkReal x13640=(cj5*r12);
IkReal x13641=((0.37429)*sj5);
IkReal x13642=(r10*sj6);
IkReal x13643=((0.36442)*cj1);
IkReal x13644=(cj6*r01);
IkReal x13645=((0.01)*cj5);
IkReal x13646=((1.0)*sj5);
IkReal x13647=(cj6*r11);
IkReal x13648=(cj4*cj6);
IkReal x13649=(cj5*r02);
IkReal x13650=(r01*sj6);
IkReal x13651=((1.0)*cj4);
IkReal x13652=((0.01)*sj5);
IkReal x13653=(r11*sj6);
IkReal x13654=((0.069)*x13636);
IkReal x13655=((1.0)*x13636);
IkReal x13656=((1.0)*x13635);
IkReal x13657=((0.069)*x13635);
evalcond[0]=(x13649+(((-1.0)*x13639*x13646))+(((-1.0)*cj1*x13656))+(((-1.0)*x13644*x13646)));
evalcond[1]=(x13640+(((-1.0)*x13646*x13647))+(((-1.0)*cj1*x13655))+(((-1.0)*x13642*x13646)));
evalcond[2]=(x13635+(((-1.0)*r11*x13637*x13638))+(((-1.0)*x13651*x13653))+(((-1.0)*sj4*x13637*x13642))+((r10*x13648))+(((-1.0)*r12*sj4*x13646)));
evalcond[3]=((((-1.0)*sj4*x13637*x13639))+((r00*x13648))+(((-1.0)*r02*sj4*x13646))+(((-1.0)*x13650*x13651))+(((-1.0)*x13655))+(((-1.0)*r01*x13637*x13638)));
evalcond[4]=((((-1.0)*r10*x13638))+((sj4*x13653))+(((-1.0)*cj4*r12*x13646))+(((-1.0)*cj4*x13637*x13647))+(((-1.0)*cj4*x13637*x13642))+(((-1.0)*sj1*x13655)));
evalcond[5]=((((-1.0)*r00*x13638))+((sj4*x13650))+(((-1.0)*cj4*x13637*x13644))+(((-1.0)*sj1*x13656))+(((-1.0)*cj4*x13637*x13639))+(((-1.0)*cj4*r02*x13646)));
evalcond[6]=(x13657+((x13639*x13645))+(((-1.0)*x13641*x13644))+((x13644*x13645))+(((-1.0)*x13639*x13641))+(((-1.0)*px))+((r02*x13652))+(((0.37429)*x13649))+(((-1.0)*sj1*x13657))+((x13635*x13643)));
evalcond[7]=(((r12*x13652))+x13654+(((-1.0)*x13641*x13642))+(((-1.0)*x13641*x13647))+((x13636*x13643))+(((-1.0)*py))+(((0.37429)*x13640))+(((-1.0)*sj1*x13654))+((x13642*x13645))+((x13645*x13647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x13658=((1.0)*cj6*sj5);
IkReal x13659=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x13658))+(((-1.0)*r10*x13659)))))+(IKabs(((((-1.0)*r00*x13659))+(((-1.0)*r01*x13658))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13660=(cj4*cj5);
IkReal x13661=((1.0)*sj5);
CheckValue<IkReal> x13662=IKPowWithIntegerCheck(sj1,-1);
if(!x13662.valid){
continue;
}
CheckValue<IkReal> x13663=IKPowWithIntegerCheck(cj1,-1);
if(!x13663.valid){
continue;
}
if( IKabs(((x13662.value)*((((cj6*r10*sj4))+((cj6*r11*x13660))+((r10*sj6*x13660))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13663.value)*(((((-1.0)*r00*sj6*x13661))+(((-1.0)*cj6*r01*x13661))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13662.value)*((((cj6*r10*sj4))+((cj6*r11*x13660))+((r10*sj6*x13660))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))))+IKsqr(((x13663.value)*(((((-1.0)*r00*sj6*x13661))+(((-1.0)*cj6*r01*x13661))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13662.value)*((((cj6*r10*sj4))+((cj6*r11*x13660))+((r10*sj6*x13660))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))), ((x13663.value)*(((((-1.0)*r00*sj6*x13661))+(((-1.0)*cj6*r01*x13661))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13664=IKsin(j0);
IkReal x13665=IKcos(j0);
IkReal x13666=((1.0)*cj5);
IkReal x13667=(cj6*sj4);
IkReal x13668=(r00*sj6);
IkReal x13669=(cj5*r12);
IkReal x13670=((0.37429)*sj5);
IkReal x13671=(r10*sj6);
IkReal x13672=((0.36442)*cj1);
IkReal x13673=(cj6*r01);
IkReal x13674=((0.01)*cj5);
IkReal x13675=((1.0)*sj5);
IkReal x13676=(cj6*r11);
IkReal x13677=(cj4*cj6);
IkReal x13678=(cj5*r02);
IkReal x13679=(r01*sj6);
IkReal x13680=((1.0)*cj4);
IkReal x13681=((0.01)*sj5);
IkReal x13682=(r11*sj6);
IkReal x13683=(sj1*x13664);
IkReal x13684=((1.0)*x13665);
IkReal x13685=((0.069)*x13665);
evalcond[0]=((((-1.0)*x13668*x13675))+(((-1.0)*cj1*x13684))+x13678+(((-1.0)*x13673*x13675)));
evalcond[1]=(x13669+(((-1.0)*x13675*x13676))+(((-1.0)*x13671*x13675))+(((-1.0)*cj1*x13664)));
evalcond[2]=(x13664+(((-1.0)*x13679*x13680))+(((-1.0)*r01*x13666*x13667))+((r00*x13677))+(((-1.0)*sj4*x13666*x13668))+(((-1.0)*r02*sj4*x13675)));
evalcond[3]=((((-1.0)*sj4*x13666*x13671))+(((-1.0)*r11*x13666*x13667))+(((-1.0)*x13684))+((r10*x13677))+(((-1.0)*r12*sj4*x13675))+(((-1.0)*x13680*x13682)));
evalcond[4]=(x13683+((sj4*x13682))+(((-1.0)*r10*x13667))+(((-1.0)*cj4*r12*x13675))+(((-1.0)*cj4*x13666*x13671))+(((-1.0)*cj4*x13666*x13676)));
evalcond[5]=(((sj4*x13679))+((sj1*x13665))+(((-1.0)*cj4*x13666*x13673))+(((-1.0)*r00*x13667))+(((-1.0)*cj4*x13666*x13668))+(((-1.0)*cj4*r02*x13675)));
evalcond[6]=((((-1.0)*x13668*x13670))+x13685+((r02*x13681))+(((-1.0)*px))+(((-1.0)*x13670*x13673))+((x13668*x13674))+((x13665*x13672))+((sj1*x13685))+(((0.37429)*x13678))+((x13673*x13674)));
evalcond[7]=(((r12*x13681))+((x13664*x13672))+(((-1.0)*py))+(((-1.0)*x13670*x13676))+(((-1.0)*x13670*x13671))+((x13671*x13674))+(((0.069)*x13664))+((x13674*x13676))+(((0.069)*x13683))+(((0.37429)*x13669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13686=((1.0)*r00);
IkReal x13687=(cj6*r01);
IkReal x13688=(cj5*sj4);
CheckValue<IkReal> x13689=IKPowWithIntegerCheck(cj1,-1);
if(!x13689.valid){
continue;
}
if( IKabs((((x13687*x13688))+(((-1.0)*cj4*cj6*x13686))+((r00*sj6*x13688))+((cj4*r01*sj6))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13689.value)*(((((-1.0)*sj5*x13687))+(((-1.0)*sj5*sj6*x13686))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x13687*x13688))+(((-1.0)*cj4*cj6*x13686))+((r00*sj6*x13688))+((cj4*r01*sj6))+((r02*sj4*sj5))))+IKsqr(((x13689.value)*(((((-1.0)*sj5*x13687))+(((-1.0)*sj5*sj6*x13686))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x13687*x13688))+(((-1.0)*cj4*cj6*x13686))+((r00*sj6*x13688))+((cj4*r01*sj6))+((r02*sj4*sj5))), ((x13689.value)*(((((-1.0)*sj5*x13687))+(((-1.0)*sj5*sj6*x13686))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13690=IKsin(j0);
IkReal x13691=IKcos(j0);
IkReal x13692=((1.0)*cj5);
IkReal x13693=(cj6*sj4);
IkReal x13694=(r00*sj6);
IkReal x13695=(cj5*r12);
IkReal x13696=((0.37429)*sj5);
IkReal x13697=(r10*sj6);
IkReal x13698=((0.36442)*cj1);
IkReal x13699=(cj6*r01);
IkReal x13700=((0.01)*cj5);
IkReal x13701=((1.0)*sj5);
IkReal x13702=(cj6*r11);
IkReal x13703=(cj4*cj6);
IkReal x13704=(cj5*r02);
IkReal x13705=(r01*sj6);
IkReal x13706=((1.0)*cj4);
IkReal x13707=((0.01)*sj5);
IkReal x13708=(r11*sj6);
IkReal x13709=(sj1*x13690);
IkReal x13710=((1.0)*x13691);
IkReal x13711=((0.069)*x13691);
evalcond[0]=(x13704+(((-1.0)*cj1*x13710))+(((-1.0)*x13699*x13701))+(((-1.0)*x13694*x13701)));
evalcond[1]=(x13695+(((-1.0)*x13701*x13702))+(((-1.0)*cj1*x13690))+(((-1.0)*x13697*x13701)));
evalcond[2]=((((-1.0)*sj4*x13692*x13694))+x13690+(((-1.0)*x13705*x13706))+((r00*x13703))+(((-1.0)*r02*sj4*x13701))+(((-1.0)*r01*x13692*x13693)));
evalcond[3]=((((-1.0)*r11*x13692*x13693))+(((-1.0)*sj4*x13692*x13697))+(((-1.0)*r12*sj4*x13701))+(((-1.0)*x13706*x13708))+((r10*x13703))+(((-1.0)*x13710)));
evalcond[4]=((((-1.0)*cj4*x13692*x13697))+x13709+(((-1.0)*cj4*r12*x13701))+((sj4*x13708))+(((-1.0)*r10*x13693))+(((-1.0)*cj4*x13692*x13702)));
evalcond[5]=((((-1.0)*cj4*x13692*x13699))+(((-1.0)*cj4*x13692*x13694))+(((-1.0)*cj4*r02*x13701))+((sj1*x13691))+(((-1.0)*r00*x13693))+((sj4*x13705)));
evalcond[6]=(((sj1*x13711))+x13711+((x13694*x13700))+(((-1.0)*px))+(((-1.0)*x13694*x13696))+((x13691*x13698))+(((-1.0)*x13696*x13699))+(((0.37429)*x13704))+((r02*x13707))+((x13699*x13700)));
evalcond[7]=(((r12*x13707))+(((0.37429)*x13695))+((x13697*x13700))+((x13700*x13702))+(((0.069)*x13690))+(((-1.0)*py))+((x13690*x13698))+(((0.069)*x13709))+(((-1.0)*x13696*x13697))+(((-1.0)*x13696*x13702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13712=((1.0)*cj6*sj5);
IkReal x13713=((1.0)*sj5*sj6);
CheckValue<IkReal> x13714 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x13712))+(((-1.0)*r10*x13713)))),IkReal(((((-1.0)*r00*x13713))+(((-1.0)*r01*x13712))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13714.valid){
continue;
}
CheckValue<IkReal> x13715=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x13715.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x13714.value)+(((1.5707963267949)*(x13715.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13716=IKsin(j0);
IkReal x13717=IKcos(j0);
IkReal x13718=((1.0)*cj5);
IkReal x13719=(cj6*sj4);
IkReal x13720=(r00*sj6);
IkReal x13721=(cj5*r12);
IkReal x13722=((0.37429)*sj5);
IkReal x13723=(r10*sj6);
IkReal x13724=((0.36442)*cj1);
IkReal x13725=(cj6*r01);
IkReal x13726=((0.01)*cj5);
IkReal x13727=((1.0)*sj5);
IkReal x13728=(cj6*r11);
IkReal x13729=(cj4*cj6);
IkReal x13730=(cj5*r02);
IkReal x13731=(r01*sj6);
IkReal x13732=((1.0)*cj4);
IkReal x13733=((0.01)*sj5);
IkReal x13734=(r11*sj6);
IkReal x13735=(sj1*x13716);
IkReal x13736=((1.0)*x13717);
IkReal x13737=((0.069)*x13717);
evalcond[0]=((((-1.0)*x13725*x13727))+x13730+(((-1.0)*x13720*x13727))+(((-1.0)*cj1*x13736)));
evalcond[1]=(x13721+(((-1.0)*cj1*x13716))+(((-1.0)*x13723*x13727))+(((-1.0)*x13727*x13728)));
evalcond[2]=(((r00*x13729))+x13716+(((-1.0)*r01*x13718*x13719))+(((-1.0)*x13731*x13732))+(((-1.0)*sj4*x13718*x13720))+(((-1.0)*r02*sj4*x13727)));
evalcond[3]=((((-1.0)*r12*sj4*x13727))+(((-1.0)*x13736))+((r10*x13729))+(((-1.0)*sj4*x13718*x13723))+(((-1.0)*r11*x13718*x13719))+(((-1.0)*x13732*x13734)));
evalcond[4]=((((-1.0)*cj4*x13718*x13723))+(((-1.0)*cj4*x13718*x13728))+x13735+(((-1.0)*r10*x13719))+(((-1.0)*cj4*r12*x13727))+((sj4*x13734)));
evalcond[5]=(((sj1*x13717))+(((-1.0)*cj4*r02*x13727))+(((-1.0)*cj4*x13718*x13720))+(((-1.0)*cj4*x13718*x13725))+(((-1.0)*r00*x13719))+((sj4*x13731)));
evalcond[6]=((((-1.0)*x13722*x13725))+x13737+((x13725*x13726))+(((-1.0)*x13720*x13722))+(((0.37429)*x13730))+((r02*x13733))+((sj1*x13737))+((x13720*x13726))+(((-1.0)*px))+((x13717*x13724)));
evalcond[7]=(((x13716*x13724))+(((-1.0)*x13722*x13723))+(((-1.0)*x13722*x13728))+((x13726*x13728))+(((0.069)*x13735))+((x13723*x13726))+(((-1.0)*py))+((r12*x13733))+(((0.37429)*x13721))+(((0.069)*x13716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x13738=((1.0)*cj6*sj5);
IkReal x13739=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r01*x13738))+(((-1.0)*r00*x13739))+((cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r10*x13739))+(((-1.0)*r11*x13738))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13740=(cj5*sj4);
IkReal x13741=((1.0)*cj6);
CheckValue<IkReal> x13742=IKPowWithIntegerCheck(sj1,-1);
if(!x13742.valid){
continue;
}
CheckValue<IkReal> x13743=IKPowWithIntegerCheck(cj1,-1);
if(!x13743.valid){
continue;
}
if( IKabs(((x13742.value)*((((r10*sj6*x13740))+((cj4*r11*sj6))+((cj6*r11*x13740))+(((-1.0)*cj4*r10*x13741))+((r12*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13743.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x13741))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13742.value)*((((r10*sj6*x13740))+((cj4*r11*sj6))+((cj6*r11*x13740))+(((-1.0)*cj4*r10*x13741))+((r12*sj4*sj5))))))+IKsqr(((x13743.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x13741))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13742.value)*((((r10*sj6*x13740))+((cj4*r11*sj6))+((cj6*r11*x13740))+(((-1.0)*cj4*r10*x13741))+((r12*sj4*sj5))))), ((x13743.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x13741))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13744=IKcos(j0);
IkReal x13745=IKsin(j0);
IkReal x13746=((1.0)*cj5);
IkReal x13747=(cj6*sj4);
IkReal x13748=(r00*sj6);
IkReal x13749=(cj5*r12);
IkReal x13750=((0.37429)*sj5);
IkReal x13751=(r10*sj6);
IkReal x13752=((0.36442)*cj1);
IkReal x13753=(cj6*r01);
IkReal x13754=((0.01)*cj5);
IkReal x13755=((1.0)*sj5);
IkReal x13756=(cj6*r11);
IkReal x13757=(sj4*sj6);
IkReal x13758=(cj4*cj6);
IkReal x13759=(cj5*r02);
IkReal x13760=((0.01)*sj5);
IkReal x13761=((0.069)*x13745);
IkReal x13762=((0.069)*x13744);
IkReal x13763=((1.0)*x13745);
IkReal x13764=((1.0)*cj4*sj6);
evalcond[0]=(x13759+(((-1.0)*x13748*x13755))+(((-1.0)*x13753*x13755))+(((-1.0)*cj1*x13744)));
evalcond[1]=((((-1.0)*cj1*x13763))+(((-1.0)*x13751*x13755))+x13749+(((-1.0)*x13755*x13756)));
evalcond[2]=(((r11*x13757))+(((-1.0)*r10*x13747))+x13744+(((-1.0)*cj4*x13746*x13751))+(((-1.0)*cj4*x13746*x13756))+(((-1.0)*cj4*r12*x13755)));
evalcond[3]=((((-1.0)*r12*sj4*x13755))+(((-1.0)*sj4*x13746*x13751))+((sj1*x13745))+(((-1.0)*r11*x13764))+((r10*x13758))+(((-1.0)*r11*x13746*x13747)));
evalcond[4]=((((-1.0)*r01*x13764))+((sj1*x13744))+(((-1.0)*r02*sj4*x13755))+(((-1.0)*sj4*x13746*x13748))+((r00*x13758))+(((-1.0)*r01*x13746*x13747)));
evalcond[5]=((((-1.0)*cj4*r02*x13755))+(((-1.0)*cj4*x13746*x13753))+(((-1.0)*r00*x13747))+(((-1.0)*cj4*x13746*x13748))+((r01*x13757))+(((-1.0)*x13763)));
evalcond[6]=(x13762+(((-1.0)*x13750*x13753))+(((-1.0)*x13748*x13750))+(((0.37429)*x13759))+(((-1.0)*px))+((x13753*x13754))+((x13744*x13752))+((x13748*x13754))+((r02*x13760))+(((-1.0)*x13761)));
evalcond[7]=(((x13754*x13756))+x13762+x13761+(((-1.0)*x13750*x13756))+(((-1.0)*x13750*x13751))+(((-1.0)*py))+((x13751*x13754))+(((0.37429)*x13749))+((r12*x13760))+((x13745*x13752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13765=(cj4*cj5);
IkReal x13766=(cj6*r11);
IkReal x13767=(r10*sj6);
IkReal x13768=((1.0)*sj5);
CheckValue<IkReal> x13769=IKPowWithIntegerCheck(cj1,-1);
if(!x13769.valid){
continue;
}
if( IKabs(((x13769.value)*((((cj5*r12))+(((-1.0)*x13766*x13768))+(((-1.0)*x13767*x13768)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj4))+((x13765*x13766))+((x13765*x13767))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13769.value)*((((cj5*r12))+(((-1.0)*x13766*x13768))+(((-1.0)*x13767*x13768))))))+IKsqr((((cj6*r10*sj4))+((x13765*x13766))+((x13765*x13767))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13769.value)*((((cj5*r12))+(((-1.0)*x13766*x13768))+(((-1.0)*x13767*x13768))))), (((cj6*r10*sj4))+((x13765*x13766))+((x13765*x13767))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13770=IKcos(j0);
IkReal x13771=IKsin(j0);
IkReal x13772=((1.0)*cj5);
IkReal x13773=(cj6*sj4);
IkReal x13774=(r00*sj6);
IkReal x13775=(cj5*r12);
IkReal x13776=((0.37429)*sj5);
IkReal x13777=(r10*sj6);
IkReal x13778=((0.36442)*cj1);
IkReal x13779=(cj6*r01);
IkReal x13780=((0.01)*cj5);
IkReal x13781=((1.0)*sj5);
IkReal x13782=(cj6*r11);
IkReal x13783=(sj4*sj6);
IkReal x13784=(cj4*cj6);
IkReal x13785=(cj5*r02);
IkReal x13786=((0.01)*sj5);
IkReal x13787=((0.069)*x13771);
IkReal x13788=((0.069)*x13770);
IkReal x13789=((1.0)*x13771);
IkReal x13790=((1.0)*cj4*sj6);
evalcond[0]=(x13785+(((-1.0)*cj1*x13770))+(((-1.0)*x13774*x13781))+(((-1.0)*x13779*x13781)));
evalcond[1]=(x13775+(((-1.0)*cj1*x13789))+(((-1.0)*x13781*x13782))+(((-1.0)*x13777*x13781)));
evalcond[2]=((((-1.0)*cj4*x13772*x13782))+(((-1.0)*r10*x13773))+(((-1.0)*cj4*r12*x13781))+x13770+(((-1.0)*cj4*x13772*x13777))+((r11*x13783)));
evalcond[3]=((((-1.0)*r11*x13772*x13773))+(((-1.0)*r12*sj4*x13781))+(((-1.0)*sj4*x13772*x13777))+((sj1*x13771))+((r10*x13784))+(((-1.0)*r11*x13790)));
evalcond[4]=(((r00*x13784))+(((-1.0)*r01*x13790))+(((-1.0)*sj4*x13772*x13774))+((sj1*x13770))+(((-1.0)*r02*sj4*x13781))+(((-1.0)*r01*x13772*x13773)));
evalcond[5]=(((r01*x13783))+(((-1.0)*cj4*r02*x13781))+(((-1.0)*cj4*x13772*x13779))+(((-1.0)*cj4*x13772*x13774))+(((-1.0)*x13789))+(((-1.0)*r00*x13773)));
evalcond[6]=(((x13779*x13780))+x13788+(((0.37429)*x13785))+(((-1.0)*px))+((r02*x13786))+(((-1.0)*x13774*x13776))+(((-1.0)*x13787))+(((-1.0)*x13776*x13779))+((x13774*x13780))+((x13770*x13778)));
evalcond[7]=(((x13777*x13780))+x13787+x13788+(((-1.0)*py))+((x13780*x13782))+(((-1.0)*x13776*x13777))+(((-1.0)*x13776*x13782))+((x13771*x13778))+((r12*x13786))+(((0.37429)*x13775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13791=((1.0)*cj6*sj5);
IkReal x13792=((1.0)*sj5*sj6);
CheckValue<IkReal> x13793=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x13793.valid){
continue;
}
CheckValue<IkReal> x13794 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*x13792))+(((-1.0)*r11*x13791)))),IkReal(((((-1.0)*r01*x13791))+(((-1.0)*r00*x13792))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13794.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13793.value)))+(x13794.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13795=IKcos(j0);
IkReal x13796=IKsin(j0);
IkReal x13797=((1.0)*cj5);
IkReal x13798=(cj6*sj4);
IkReal x13799=(r00*sj6);
IkReal x13800=(cj5*r12);
IkReal x13801=((0.37429)*sj5);
IkReal x13802=(r10*sj6);
IkReal x13803=((0.36442)*cj1);
IkReal x13804=(cj6*r01);
IkReal x13805=((0.01)*cj5);
IkReal x13806=((1.0)*sj5);
IkReal x13807=(cj6*r11);
IkReal x13808=(sj4*sj6);
IkReal x13809=(cj4*cj6);
IkReal x13810=(cj5*r02);
IkReal x13811=((0.01)*sj5);
IkReal x13812=((0.069)*x13796);
IkReal x13813=((0.069)*x13795);
IkReal x13814=((1.0)*x13796);
IkReal x13815=((1.0)*cj4*sj6);
evalcond[0]=(x13810+(((-1.0)*x13799*x13806))+(((-1.0)*x13804*x13806))+(((-1.0)*cj1*x13795)));
evalcond[1]=((((-1.0)*x13806*x13807))+x13800+(((-1.0)*cj1*x13814))+(((-1.0)*x13802*x13806)));
evalcond[2]=(x13795+((r11*x13808))+(((-1.0)*r10*x13798))+(((-1.0)*cj4*x13797*x13807))+(((-1.0)*cj4*x13797*x13802))+(((-1.0)*cj4*r12*x13806)));
evalcond[3]=((((-1.0)*r11*x13797*x13798))+(((-1.0)*r12*sj4*x13806))+(((-1.0)*r11*x13815))+(((-1.0)*sj4*x13797*x13802))+((sj1*x13796))+((r10*x13809)));
evalcond[4]=(((r00*x13809))+(((-1.0)*sj4*x13797*x13799))+((sj1*x13795))+(((-1.0)*r01*x13797*x13798))+(((-1.0)*r02*sj4*x13806))+(((-1.0)*r01*x13815)));
evalcond[5]=(((r01*x13808))+(((-1.0)*x13814))+(((-1.0)*cj4*x13797*x13804))+(((-1.0)*cj4*r02*x13806))+(((-1.0)*cj4*x13797*x13799))+(((-1.0)*r00*x13798)));
evalcond[6]=((((-1.0)*x13812))+((x13804*x13805))+x13813+(((0.37429)*x13810))+((x13799*x13805))+((x13795*x13803))+(((-1.0)*px))+(((-1.0)*x13799*x13801))+(((-1.0)*x13801*x13804))+((r02*x13811)));
evalcond[7]=(((r12*x13811))+x13812+x13813+(((0.37429)*x13800))+((x13796*x13803))+(((-1.0)*py))+((x13802*x13805))+((x13805*x13807))+(((-1.0)*x13801*x13802))+(((-1.0)*x13801*x13807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x13816=((1.0)*cj6*sj5);
IkReal x13817=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r00*x13817))+(((-1.0)*r01*x13816))+((cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r10*x13817))+(((-1.0)*r11*x13816))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13818=((1.0)*cj6);
IkReal x13819=(cj5*sj4);
IkReal x13820=((1.0)*sj6);
CheckValue<IkReal> x13821=IKPowWithIntegerCheck(sj1,-1);
if(!x13821.valid){
continue;
}
CheckValue<IkReal> x13822=IKPowWithIntegerCheck(cj1,-1);
if(!x13822.valid){
continue;
}
if( IKabs(((x13821.value)*(((((-1.0)*r10*x13819*x13820))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*x13820))+((cj4*cj6*r10))+(((-1.0)*r11*x13818*x13819)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13822.value)*(((((-1.0)*r00*sj5*x13820))+(((-1.0)*r01*sj5*x13818))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13821.value)*(((((-1.0)*r10*x13819*x13820))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*x13820))+((cj4*cj6*r10))+(((-1.0)*r11*x13818*x13819))))))+IKsqr(((x13822.value)*(((((-1.0)*r00*sj5*x13820))+(((-1.0)*r01*sj5*x13818))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13821.value)*(((((-1.0)*r10*x13819*x13820))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*x13820))+((cj4*cj6*r10))+(((-1.0)*r11*x13818*x13819))))), ((x13822.value)*(((((-1.0)*r00*sj5*x13820))+(((-1.0)*r01*sj5*x13818))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13823=IKsin(j0);
IkReal x13824=IKcos(j0);
IkReal x13825=(cj5*r11);
IkReal x13826=(sj5*sj6);
IkReal x13827=((1.0)*r00);
IkReal x13828=(cj5*r12);
IkReal x13829=((0.36442)*cj1);
IkReal x13830=(cj5*r01);
IkReal x13831=((1.0)*cj6);
IkReal x13832=(r11*sj5);
IkReal x13833=((1.0)*cj4);
IkReal x13834=((0.01)*cj6);
IkReal x13835=(cj4*cj6);
IkReal x13836=(cj5*r02);
IkReal x13837=(r12*sj5);
IkReal x13838=(cj5*sj6);
IkReal x13839=(r01*sj6);
IkReal x13840=(r02*sj5);
IkReal x13841=(r11*sj6);
IkReal x13842=((0.069)*x13823);
IkReal x13843=((0.069)*x13824);
IkReal x13844=(sj4*x13831);
IkReal x13845=(cj6*r01*sj5);
IkReal x13846=(r10*x13838);
IkReal x13847=((1.0)*sj4*sj5);
IkReal x13848=((1.0)*x13824);
IkReal x13849=((1.0)*x13823);
evalcond[0]=(x13836+(((-1.0)*cj1*x13848))+(((-1.0)*r01*sj5*x13831))+(((-1.0)*x13826*x13827)));
evalcond[1]=((((-1.0)*r10*x13826))+x13828+(((-1.0)*cj1*x13849))+(((-1.0)*x13831*x13832)));
evalcond[2]=(((sj4*x13839))+x13823+(((-1.0)*cj4*x13830*x13831))+(((-1.0)*x13833*x13840))+(((-1.0)*cj6*sj4*x13827))+(((-1.0)*cj4*x13827*x13838)));
evalcond[3]=((((-1.0)*x13848))+((sj4*x13841))+(((-1.0)*r10*x13844))+(((-1.0)*x13833*x13846))+(((-1.0)*x13833*x13837))+(((-1.0)*cj4*x13825*x13831)));
evalcond[4]=((((-1.0)*sj1*x13849))+(((-1.0)*x13833*x13841))+(((-1.0)*x13825*x13844))+((r10*x13835))+(((-1.0)*sj4*x13837))+(((-1.0)*sj4*x13846)));
evalcond[5]=((((-1.0)*sj4*x13827*x13838))+(((-1.0)*x13830*x13844))+(((-1.0)*sj1*x13848))+(((-1.0)*x13833*x13839))+(((-1.0)*sj4*x13840))+((r00*x13835)));
evalcond[6]=((((-0.37429)*x13845))+(((0.37429)*x13836))+x13843+x13842+((x13830*x13834))+(((-0.37429)*r00*x13826))+(((-1.0)*px))+(((0.01)*x13840))+((x13824*x13829))+(((0.01)*r00*x13838)));
evalcond[7]=((((-0.37429)*r10*x13826))+(((-1.0)*x13843))+((x13823*x13829))+((x13825*x13834))+(((0.37429)*x13828))+x13842+(((-0.37429)*cj6*x13832))+(((0.01)*x13837))+(((-1.0)*py))+(((0.01)*x13846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13850=((1.0)*sj6);
IkReal x13851=(cj4*cj5);
IkReal x13852=(cj6*r01);
CheckValue<IkReal> x13853=IKPowWithIntegerCheck(cj1,-1);
if(!x13853.valid){
continue;
}
if( IKabs((((cj6*r00*sj4))+(((-1.0)*r01*sj4*x13850))+((x13851*x13852))+((r00*sj6*x13851))+((cj4*r02*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13853.value)*(((((-1.0)*sj5*x13852))+(((-1.0)*r00*sj5*x13850))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj4))+(((-1.0)*r01*sj4*x13850))+((x13851*x13852))+((r00*sj6*x13851))+((cj4*r02*sj5))))+IKsqr(((x13853.value)*(((((-1.0)*sj5*x13852))+(((-1.0)*r00*sj5*x13850))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj6*r00*sj4))+(((-1.0)*r01*sj4*x13850))+((x13851*x13852))+((r00*sj6*x13851))+((cj4*r02*sj5))), ((x13853.value)*(((((-1.0)*sj5*x13852))+(((-1.0)*r00*sj5*x13850))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13854=IKsin(j0);
IkReal x13855=IKcos(j0);
IkReal x13856=(cj5*r11);
IkReal x13857=(sj5*sj6);
IkReal x13858=((1.0)*r00);
IkReal x13859=(cj5*r12);
IkReal x13860=((0.36442)*cj1);
IkReal x13861=(cj5*r01);
IkReal x13862=((1.0)*cj6);
IkReal x13863=(r11*sj5);
IkReal x13864=((1.0)*cj4);
IkReal x13865=((0.01)*cj6);
IkReal x13866=(cj4*cj6);
IkReal x13867=(cj5*r02);
IkReal x13868=(r12*sj5);
IkReal x13869=(cj5*sj6);
IkReal x13870=(r01*sj6);
IkReal x13871=(r02*sj5);
IkReal x13872=(r11*sj6);
IkReal x13873=((0.069)*x13854);
IkReal x13874=((0.069)*x13855);
IkReal x13875=(sj4*x13862);
IkReal x13876=(cj6*r01*sj5);
IkReal x13877=(r10*x13869);
IkReal x13878=((1.0)*sj4*sj5);
IkReal x13879=((1.0)*x13855);
IkReal x13880=((1.0)*x13854);
evalcond[0]=(x13867+(((-1.0)*cj1*x13879))+(((-1.0)*x13857*x13858))+(((-1.0)*r01*sj5*x13862)));
evalcond[1]=((((-1.0)*x13862*x13863))+(((-1.0)*cj1*x13880))+x13859+(((-1.0)*r10*x13857)));
evalcond[2]=((((-1.0)*cj6*sj4*x13858))+(((-1.0)*cj4*x13861*x13862))+x13854+((sj4*x13870))+(((-1.0)*x13864*x13871))+(((-1.0)*cj4*x13858*x13869)));
evalcond[3]=((((-1.0)*x13879))+((sj4*x13872))+(((-1.0)*x13864*x13868))+(((-1.0)*x13864*x13877))+(((-1.0)*r10*x13875))+(((-1.0)*cj4*x13856*x13862)));
evalcond[4]=((((-1.0)*x13856*x13875))+(((-1.0)*sj1*x13880))+(((-1.0)*x13864*x13872))+(((-1.0)*sj4*x13868))+(((-1.0)*sj4*x13877))+((r10*x13866)));
evalcond[5]=(((r00*x13866))+(((-1.0)*sj1*x13879))+(((-1.0)*x13864*x13870))+(((-1.0)*sj4*x13858*x13869))+(((-1.0)*x13861*x13875))+(((-1.0)*sj4*x13871)));
evalcond[6]=(((x13861*x13865))+x13873+x13874+(((-0.37429)*r00*x13857))+(((-1.0)*px))+(((-0.37429)*x13876))+((x13855*x13860))+(((0.01)*x13871))+(((0.01)*r00*x13869))+(((0.37429)*x13867)));
evalcond[7]=((((0.37429)*x13859))+x13873+(((-1.0)*x13874))+((x13854*x13860))+(((0.01)*x13868))+(((-1.0)*py))+(((-0.37429)*cj6*x13863))+((x13856*x13865))+(((0.01)*x13877))+(((-0.37429)*r10*x13857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13881=((1.0)*cj6*sj5);
IkReal x13882=((1.0)*sj5*sj6);
CheckValue<IkReal> x13883=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x13883.valid){
continue;
}
CheckValue<IkReal> x13884 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x13881))+((cj5*r12))+(((-1.0)*r10*x13882)))),IkReal(((((-1.0)*r00*x13882))+(((-1.0)*r01*x13881))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13884.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13883.value)))+(x13884.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13885=IKsin(j0);
IkReal x13886=IKcos(j0);
IkReal x13887=(cj5*r11);
IkReal x13888=(sj5*sj6);
IkReal x13889=((1.0)*r00);
IkReal x13890=(cj5*r12);
IkReal x13891=((0.36442)*cj1);
IkReal x13892=(cj5*r01);
IkReal x13893=((1.0)*cj6);
IkReal x13894=(r11*sj5);
IkReal x13895=((1.0)*cj4);
IkReal x13896=((0.01)*cj6);
IkReal x13897=(cj4*cj6);
IkReal x13898=(cj5*r02);
IkReal x13899=(r12*sj5);
IkReal x13900=(cj5*sj6);
IkReal x13901=(r01*sj6);
IkReal x13902=(r02*sj5);
IkReal x13903=(r11*sj6);
IkReal x13904=((0.069)*x13885);
IkReal x13905=((0.069)*x13886);
IkReal x13906=(sj4*x13893);
IkReal x13907=(cj6*r01*sj5);
IkReal x13908=(r10*x13900);
IkReal x13909=((1.0)*sj4*sj5);
IkReal x13910=((1.0)*x13886);
IkReal x13911=((1.0)*x13885);
evalcond[0]=((((-1.0)*r01*sj5*x13893))+(((-1.0)*x13888*x13889))+x13898+(((-1.0)*cj1*x13910)));
evalcond[1]=(x13890+(((-1.0)*x13893*x13894))+(((-1.0)*r10*x13888))+(((-1.0)*cj1*x13911)));
evalcond[2]=((((-1.0)*cj4*x13889*x13900))+((sj4*x13901))+x13885+(((-1.0)*cj6*sj4*x13889))+(((-1.0)*cj4*x13892*x13893))+(((-1.0)*x13895*x13902)));
evalcond[3]=(((sj4*x13903))+(((-1.0)*cj4*x13887*x13893))+(((-1.0)*x13895*x13899))+(((-1.0)*x13910))+(((-1.0)*r10*x13906))+(((-1.0)*x13895*x13908)));
evalcond[4]=((((-1.0)*sj4*x13908))+(((-1.0)*sj4*x13899))+(((-1.0)*sj1*x13911))+(((-1.0)*x13887*x13906))+((r10*x13897))+(((-1.0)*x13895*x13903)));
evalcond[5]=((((-1.0)*sj4*x13902))+(((-1.0)*sj4*x13889*x13900))+(((-1.0)*sj1*x13910))+(((-1.0)*x13892*x13906))+((r00*x13897))+(((-1.0)*x13895*x13901)));
evalcond[6]=(((x13892*x13896))+(((0.01)*r00*x13900))+(((0.01)*x13902))+(((-0.37429)*x13907))+x13904+x13905+(((-1.0)*px))+(((0.37429)*x13898))+((x13886*x13891))+(((-0.37429)*r00*x13888)));
evalcond[7]=((((-0.37429)*cj6*x13894))+(((0.01)*x13908))+(((0.01)*x13899))+x13904+((x13885*x13891))+(((-1.0)*py))+(((-0.37429)*r10*x13888))+(((0.37429)*x13890))+((x13887*x13896))+(((-1.0)*x13905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x13918=IKPowWithIntegerCheck(cj1,-1);
if(!x13918.valid){
continue;
}
IkReal x13912=x13918.value;
IkReal x13913=(cj5*r02);
IkReal x13914=(cj1*sj6);
IkReal x13915=(cj1*sj4);
IkReal x13916=(cj6*r01*sj5);
IkReal x13917=(r00*sj5*sj6);
CheckValue<IkReal> x13919=IKPowWithIntegerCheck(sj1,-1);
if(!x13919.valid){
continue;
}
CheckValue<IkReal> x13920=IKPowWithIntegerCheck(sj2,-1);
if(!x13920.valid){
continue;
}
if( IKabs((x13912*(x13919.value)*(x13920.value)*((((r12*sj5*x13915))+(((-1.0)*cj1*cj4*cj6*r10))+((cj5*r10*sj4*x13914))+((cj5*cj6*r11*x13915))+((cj4*r11*x13914))+((cj2*x13917))+((cj2*x13916))+(((-1.0)*cj2*x13913)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13912*(((((-1.0)*x13917))+(((-1.0)*x13916))+x13913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13912*(x13919.value)*(x13920.value)*((((r12*sj5*x13915))+(((-1.0)*cj1*cj4*cj6*r10))+((cj5*r10*sj4*x13914))+((cj5*cj6*r11*x13915))+((cj4*r11*x13914))+((cj2*x13917))+((cj2*x13916))+(((-1.0)*cj2*x13913))))))+IKsqr((x13912*(((((-1.0)*x13917))+(((-1.0)*x13916))+x13913))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x13912*(x13919.value)*(x13920.value)*((((r12*sj5*x13915))+(((-1.0)*cj1*cj4*cj6*r10))+((cj5*r10*sj4*x13914))+((cj5*cj6*r11*x13915))+((cj4*r11*x13914))+((cj2*x13917))+((cj2*x13916))+(((-1.0)*cj2*x13913))))), (x13912*(((((-1.0)*x13917))+(((-1.0)*x13916))+x13913))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13921=IKsin(j0);
IkReal x13922=IKcos(j0);
IkReal x13923=((1.0)*cj5);
IkReal x13924=(cj6*sj4);
IkReal x13925=(r00*sj6);
IkReal x13926=(cj5*r12);
IkReal x13927=((0.37429)*sj5);
IkReal x13928=(r10*sj6);
IkReal x13929=(cj2*sj1);
IkReal x13930=((0.36442)*cj1);
IkReal x13931=(cj6*r01);
IkReal x13932=((0.01)*cj5);
IkReal x13933=((1.0)*sj5);
IkReal x13934=(cj6*r11);
IkReal x13935=(sj4*sj6);
IkReal x13936=((0.01)*sj5);
IkReal x13937=(cj4*cj6);
IkReal x13938=(cj5*r02);
IkReal x13939=((0.069)*x13921);
IkReal x13940=((1.0)*x13922);
IkReal x13941=(sj2*x13922);
IkReal x13942=((0.069)*x13922);
IkReal x13943=((1.0)*x13921);
IkReal x13944=((1.0)*cj4*sj6);
evalcond[0]=(x13938+(((-1.0)*cj1*x13940))+(((-1.0)*x13931*x13933))+(((-1.0)*x13925*x13933)));
evalcond[1]=(x13926+(((-1.0)*x13928*x13933))+(((-1.0)*x13933*x13934))+(((-1.0)*cj1*x13943)));
evalcond[2]=((((-1.0)*r11*x13944))+(((-1.0)*sj4*x13923*x13928))+((r10*x13937))+(((-1.0)*r12*sj4*x13933))+(((-1.0)*r11*x13923*x13924))+((cj2*x13922))+((sj1*sj2*x13921)));
evalcond[3]=(((r00*x13937))+(((-1.0)*sj4*x13923*x13925))+(((-1.0)*r01*x13944))+(((-1.0)*r02*sj4*x13933))+(((-1.0)*r01*x13923*x13924))+(((-1.0)*cj2*x13943))+((sj1*x13941)));
evalcond[4]=(((r11*x13935))+x13941+(((-1.0)*x13929*x13943))+(((-1.0)*r10*x13924))+(((-1.0)*cj4*x13923*x13934))+(((-1.0)*cj4*x13923*x13928))+(((-1.0)*cj4*r12*x13933)));
evalcond[5]=(((r01*x13935))+(((-1.0)*sj2*x13943))+(((-1.0)*x13929*x13940))+(((-1.0)*cj4*r02*x13933))+(((-1.0)*cj4*x13923*x13931))+(((-1.0)*cj4*x13923*x13925))+(((-1.0)*r00*x13924)));
evalcond[6]=(((x13925*x13932))+(((-1.0)*sj2*x13939))+(((-1.0)*x13927*x13931))+(((0.37429)*x13938))+(((-1.0)*x13925*x13927))+x13942+(((-1.0)*x13929*x13942))+((x13931*x13932))+(((-1.0)*px))+((r02*x13936))+((x13922*x13930)));
evalcond[7]=((((-1.0)*x13927*x13928))+(((-1.0)*x13927*x13934))+(((0.37429)*x13926))+x13939+((x13932*x13934))+(((-1.0)*x13929*x13939))+(((-1.0)*py))+((x13928*x13932))+((x13921*x13930))+(((0.069)*x13941))+((r12*x13936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x13953=IKPowWithIntegerCheck(cj1,-1);
if(!x13953.valid){
continue;
}
IkReal x13945=x13953.value;
IkReal x13946=(cj6*r11);
IkReal x13947=(cj1*sj6);
IkReal x13948=(cj5*r12);
IkReal x13949=(cj5*sj4);
IkReal x13950=(r10*sj6);
IkReal x13951=((1.0)*sj5);
IkReal x13952=(sj1*sj2*sj5);
CheckValue<IkReal> x13954=IKPowWithIntegerCheck(cj2,-1);
if(!x13954.valid){
continue;
}
if( IKabs((x13945*(((((-1.0)*x13946*x13951))+x13948+(((-1.0)*x13950*x13951)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13945*(x13954.value)*((((cj1*r12*sj4*sj5))+((r10*x13947*x13949))+((cj4*r11*x13947))+(((-1.0)*sj1*sj2*x13948))+((cj1*x13946*x13949))+(((-1.0)*cj1*cj4*cj6*r10))+((x13950*x13952))+((x13946*x13952)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13945*(((((-1.0)*x13946*x13951))+x13948+(((-1.0)*x13950*x13951))))))+IKsqr((x13945*(x13954.value)*((((cj1*r12*sj4*sj5))+((r10*x13947*x13949))+((cj4*r11*x13947))+(((-1.0)*sj1*sj2*x13948))+((cj1*x13946*x13949))+(((-1.0)*cj1*cj4*cj6*r10))+((x13950*x13952))+((x13946*x13952))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x13945*(((((-1.0)*x13946*x13951))+x13948+(((-1.0)*x13950*x13951))))), (x13945*(x13954.value)*((((cj1*r12*sj4*sj5))+((r10*x13947*x13949))+((cj4*r11*x13947))+(((-1.0)*sj1*sj2*x13948))+((cj1*x13946*x13949))+(((-1.0)*cj1*cj4*cj6*r10))+((x13950*x13952))+((x13946*x13952))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13955=IKsin(j0);
IkReal x13956=IKcos(j0);
IkReal x13957=((1.0)*cj5);
IkReal x13958=(cj6*sj4);
IkReal x13959=(r00*sj6);
IkReal x13960=(cj5*r12);
IkReal x13961=((0.37429)*sj5);
IkReal x13962=(r10*sj6);
IkReal x13963=(cj2*sj1);
IkReal x13964=((0.36442)*cj1);
IkReal x13965=(cj6*r01);
IkReal x13966=((0.01)*cj5);
IkReal x13967=((1.0)*sj5);
IkReal x13968=(cj6*r11);
IkReal x13969=(sj4*sj6);
IkReal x13970=((0.01)*sj5);
IkReal x13971=(cj4*cj6);
IkReal x13972=(cj5*r02);
IkReal x13973=((0.069)*x13955);
IkReal x13974=((1.0)*x13956);
IkReal x13975=(sj2*x13956);
IkReal x13976=((0.069)*x13956);
IkReal x13977=((1.0)*x13955);
IkReal x13978=((1.0)*cj4*sj6);
evalcond[0]=(x13972+(((-1.0)*x13959*x13967))+(((-1.0)*x13965*x13967))+(((-1.0)*cj1*x13974)));
evalcond[1]=(x13960+(((-1.0)*x13962*x13967))+(((-1.0)*cj1*x13977))+(((-1.0)*x13967*x13968)));
evalcond[2]=((((-1.0)*sj4*x13957*x13962))+((cj2*x13956))+((sj1*sj2*x13955))+((r10*x13971))+(((-1.0)*r11*x13978))+(((-1.0)*r12*sj4*x13967))+(((-1.0)*r11*x13957*x13958)));
evalcond[3]=((((-1.0)*r01*x13957*x13958))+(((-1.0)*r01*x13978))+(((-1.0)*r02*sj4*x13967))+(((-1.0)*sj4*x13957*x13959))+((r00*x13971))+(((-1.0)*cj2*x13977))+((sj1*x13975)));
evalcond[4]=((((-1.0)*cj4*r12*x13967))+x13975+((r11*x13969))+(((-1.0)*cj4*x13957*x13962))+(((-1.0)*cj4*x13957*x13968))+(((-1.0)*r10*x13958))+(((-1.0)*x13963*x13977)));
evalcond[5]=((((-1.0)*sj2*x13977))+(((-1.0)*cj4*x13957*x13959))+(((-1.0)*r00*x13958))+(((-1.0)*cj4*r02*x13967))+(((-1.0)*cj4*x13957*x13965))+((r01*x13969))+(((-1.0)*x13963*x13974)));
evalcond[6]=(((r02*x13970))+(((-1.0)*sj2*x13973))+((x13959*x13966))+x13976+(((-1.0)*px))+(((0.37429)*x13972))+(((-1.0)*x13959*x13961))+((x13956*x13964))+(((-1.0)*x13963*x13976))+((x13965*x13966))+(((-1.0)*x13961*x13965)));
evalcond[7]=(((x13955*x13964))+((x13962*x13966))+x13973+(((0.37429)*x13960))+(((-1.0)*py))+(((0.069)*x13975))+((r12*x13970))+((x13966*x13968))+(((-1.0)*x13963*x13973))+(((-1.0)*x13961*x13962))+(((-1.0)*x13961*x13968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13979=((1.0)*cj6*sj5);
IkReal x13980=((1.0)*sj5*sj6);
CheckValue<IkReal> x13981 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x13979))+(((-1.0)*r10*x13980)))),IkReal(((((-1.0)*r01*x13979))+(((-1.0)*r00*x13980))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13981.valid){
continue;
}
CheckValue<IkReal> x13982=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x13982.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x13981.value)+(((1.5707963267949)*(x13982.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13983=IKsin(j0);
IkReal x13984=IKcos(j0);
IkReal x13985=((1.0)*cj5);
IkReal x13986=(cj6*sj4);
IkReal x13987=(r00*sj6);
IkReal x13988=(cj5*r12);
IkReal x13989=((0.37429)*sj5);
IkReal x13990=(r10*sj6);
IkReal x13991=(cj2*sj1);
IkReal x13992=((0.36442)*cj1);
IkReal x13993=(cj6*r01);
IkReal x13994=((0.01)*cj5);
IkReal x13995=((1.0)*sj5);
IkReal x13996=(cj6*r11);
IkReal x13997=(sj4*sj6);
IkReal x13998=((0.01)*sj5);
IkReal x13999=(cj4*cj6);
IkReal x14000=(cj5*r02);
IkReal x14001=((0.069)*x13983);
IkReal x14002=((1.0)*x13984);
IkReal x14003=(sj2*x13984);
IkReal x14004=((0.069)*x13984);
IkReal x14005=((1.0)*x13983);
IkReal x14006=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x13993*x13995))+(((-1.0)*x13987*x13995))+x14000+(((-1.0)*cj1*x14002)));
evalcond[1]=(x13988+(((-1.0)*x13990*x13995))+(((-1.0)*cj1*x14005))+(((-1.0)*x13995*x13996)));
evalcond[2]=((((-1.0)*r11*x13985*x13986))+(((-1.0)*sj4*x13985*x13990))+((cj2*x13984))+(((-1.0)*r12*sj4*x13995))+((sj1*sj2*x13983))+((r10*x13999))+(((-1.0)*r11*x14006)));
evalcond[3]=((((-1.0)*r02*sj4*x13995))+(((-1.0)*cj2*x14005))+(((-1.0)*sj4*x13985*x13987))+(((-1.0)*r01*x13985*x13986))+(((-1.0)*r01*x14006))+((sj1*x14003))+((r00*x13999)));
evalcond[4]=(((r11*x13997))+(((-1.0)*cj4*x13985*x13996))+(((-1.0)*cj4*x13985*x13990))+(((-1.0)*r10*x13986))+(((-1.0)*cj4*r12*x13995))+x14003+(((-1.0)*x13991*x14005)));
evalcond[5]=((((-1.0)*cj4*r02*x13995))+(((-1.0)*sj2*x14005))+(((-1.0)*cj4*x13985*x13993))+(((-1.0)*r00*x13986))+(((-1.0)*cj4*x13985*x13987))+((r01*x13997))+(((-1.0)*x13991*x14002)));
evalcond[6]=((((-1.0)*x13987*x13989))+(((-1.0)*sj2*x14001))+((r02*x13998))+(((-1.0)*px))+(((-1.0)*x13989*x13993))+(((0.37429)*x14000))+((x13993*x13994))+x14004+(((-1.0)*x13991*x14004))+((x13987*x13994))+((x13984*x13992)));
evalcond[7]=((((0.37429)*x13988))+((x13983*x13992))+((r12*x13998))+((x13994*x13996))+(((0.069)*x14003))+(((-1.0)*py))+(((-1.0)*x13989*x13996))+(((-1.0)*x13989*x13990))+x14001+((x13990*x13994))+(((-1.0)*x13991*x14001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14007=((1.0)*cj6*sj5);
IkReal x14008=((1.0)*sj5*sj6);
CheckValue<IkReal> x14009 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x14007))+(((-1.0)*r10*x14008)))),IkReal(((((-1.0)*r00*x14008))+(((-1.0)*r01*x14007))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14009.valid){
continue;
}
CheckValue<IkReal> x14010=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14010.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x14009.value)+(((1.5707963267949)*(x14010.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x14011=IKcos(j0);
IkReal x14012=IKsin(j0);
IkReal x14013=((0.01)*cj5);
IkReal x14014=(cj6*r11);
IkReal x14015=(cj5*r12);
IkReal x14016=(r10*sj6);
IkReal x14017=((0.37429)*sj5);
IkReal x14018=(r00*sj6);
IkReal x14019=((1.0)*sj5);
IkReal x14020=(cj6*r01);
IkReal x14021=(cj5*r02);
IkReal x14022=(cj2*sj1);
IkReal x14023=((0.01)*sj5);
IkReal x14024=(cj1*x14012);
IkReal x14025=((0.069)*x14012);
IkReal x14026=((0.069)*x14011);
IkReal x14027=(cj1*x14011);
evalcond[0]=((((-1.0)*x14018*x14019))+(((-1.0)*x14027))+(((-1.0)*x14019*x14020))+x14021);
evalcond[1]=((((-1.0)*x14014*x14019))+(((-1.0)*x14024))+(((-1.0)*x14016*x14019))+x14015);
evalcond[2]=(((x14013*x14020))+(((0.37429)*x14021))+(((-1.0)*px))+(((-1.0)*x14017*x14018))+((x14013*x14018))+(((-1.0)*x14022*x14026))+(((0.36442)*x14027))+x14026+((r02*x14023))+(((-1.0)*sj2*x14025))+(((-1.0)*x14017*x14020)));
evalcond[3]=((((-1.0)*x14014*x14017))+((sj2*x14026))+(((-1.0)*py))+((x14013*x14016))+((x14013*x14014))+(((0.37429)*x14015))+(((-1.0)*x14022*x14025))+(((0.36442)*x14024))+(((-1.0)*x14016*x14017))+x14025+((r12*x14023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x14028=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x14028;
j4eval[1]=IKsign(x14028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x14029=((1.0)*sj5);
IkReal x14030=((((-1.0)*r00*sj6*x14029))+(((-1.0)*cj6*r01*x14029))+((cj5*r02)));
j4eval[0]=x14030;
j4eval[1]=IKsign(x14030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x14031=cj5*cj5;
IkReal x14032=cj6*cj6;
IkReal x14033=r22*r22;
IkReal x14034=r21*r21;
IkReal x14035=r20*r20;
IkReal x14036=(cj6*r21);
IkReal x14037=(r20*sj6);
IkReal x14038=(cj1*cj2);
IkReal x14039=(r22*sj5);
IkReal x14040=(cj6*r20);
IkReal x14041=((2.0)*cj5);
IkReal x14042=(cj1*sj2);
IkReal x14043=((1.0)*x14034);
IkReal x14044=((1.0)*x14035);
IkReal x14045=((1.0)*r21*sj6);
IkReal x14046=((1.0)*cj5*x14042);
IkReal x14047=(x14031*x14032);
IkReal x14048=((((-1.0)*x14043*x14047))+(((-1.0)*x14036*x14039*x14041))+(((-1.0)*x14031*x14044))+(((-2.0)*x14031*x14036*x14037))+(((-1.0)*x14033))+((x14031*x14033))+(((-1.0)*x14032*x14044))+((x14032*x14034))+(((-1.0)*x14037*x14039*x14041))+(((-1.0)*x14043))+(((2.0)*x14036*x14037))+((x14035*x14047)));
j4eval[0]=x14048;
j4eval[1]=((IKabs(((((-1.0)*x14042*x14045))+((cj5*x14036*x14038))+((cj5*x14037*x14038))+((x14038*x14039))+((x14040*x14042)))))+(IKabs(((((-1.0)*x14037*x14046))+(((-1.0)*x14038*x14045))+(((-1.0)*x14036*x14046))+(((-1.0)*x14039*x14042))+((x14038*x14040))))));
j4eval[2]=IKsign(x14048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14049=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14049;
j4eval[1]=IKsign(x14049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14050=((1.0)*sj5);
IkReal x14051=(((cj5*r12))+(((-1.0)*r10*sj6*x14050))+(((-1.0)*cj6*r11*x14050)));
j4eval[0]=x14051;
j4eval[1]=IKsign(x14051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14052=cj6*cj6;
IkReal x14053=cj5*cj5;
IkReal x14054=(cj5*sj5);
IkReal x14055=(cj6*r21);
IkReal x14056=((1.0)*r11);
IkReal x14057=(r10*r20);
IkReal x14058=(r10*sj6);
IkReal x14059=(r12*r22);
IkReal x14060=(r21*x14052);
IkReal x14061=(cj6*r20*sj6);
IkReal x14062=(r11*x14053);
IkReal x14063=((1.0)*x14053);
IkReal x14064=(((r12*r20*sj6*x14054))+((x14060*x14062))+((x14053*x14057))+(((-1.0)*x14059*x14063))+((x14053*x14055*x14058))+((cj6*r11*r22*x14054))+(((-1.0)*x14052*x14057*x14063))+((r11*r21))+(((-1.0)*x14056*x14060))+(((-1.0)*x14056*x14061))+(((-1.0)*x14055*x14058))+((x14052*x14057))+((r22*x14054*x14058))+x14059+((x14061*x14062))+((r12*x14054*x14055)));
j4eval[0]=x14064;
j4eval[1]=IKsign(x14064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14065=cj6*cj6;
IkReal x14066=cj5*cj5;
IkReal x14067=(r22*sj5);
IkReal x14068=(cj0*sj2);
IkReal x14069=(r12*r22);
IkReal x14070=(cj5*sj6);
IkReal x14071=((1.0)*r11);
IkReal x14072=(cj6*r21);
IkReal x14073=(cj6*r20);
IkReal x14074=(r12*sj5);
IkReal x14075=((1.0)*sj6);
IkReal x14076=((1.0)*cj2*sj0);
IkReal x14077=((1.0)*x14066);
IkReal x14078=(r21*x14065);
IkReal x14079=(r10*x14066);
IkReal x14080=(r11*x14066);
IkReal x14081=(r10*r20*x14065);
CheckValue<IkReal> x14082=IKPowWithIntegerCheck(IKsign((((r10*x14067*x14070))+((cj5*cj6*r11*x14067))+((cj5*x14072*x14074))+(((-1.0)*x14077*x14081))+(((-1.0)*sj6*x14071*x14073))+((r11*r21))+((sj6*x14073*x14080))+(((-1.0)*r10*x14072*x14075))+((x14078*x14080))+((r20*x14079))+((sj6*x14072*x14079))+x14081+x14069+(((-1.0)*x14071*x14078))+(((-1.0)*x14069*x14077))+((r20*x14070*x14074)))),-1);
if(!x14082.valid){
continue;
}
CheckValue<IkReal> x14083 = IKatan2WithCheck(IkReal((((cj2*r21*sj0*sj6))+(((-1.0)*x14073*x14076))+((x14068*x14073))+(((-1.0)*r21*x14068*x14075)))),IkReal(((((-1.0)*cj5*x14072*x14076))+((x14067*x14068))+((r20*x14068*x14070))+((cj5*x14068*x14072))+(((-1.0)*x14067*x14076))+(((-1.0)*r20*x14070*x14076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14082.value)))+(x14083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14084=IKsin(j4);
IkReal x14085=IKcos(j4);
IkReal x14086=(cj0*sj2);
IkReal x14087=(cj5*cj6);
IkReal x14088=(cj0*cj2);
IkReal x14089=(r11*sj6);
IkReal x14090=(cj6*r20);
IkReal x14091=(cj5*sj6);
IkReal x14092=(cj6*r10);
IkReal x14093=(cj6*r00);
IkReal x14094=((1.0)*sj0);
IkReal x14095=(cj2*x14094);
IkReal x14096=((1.0)*x14085);
IkReal x14097=((1.0)*x14084);
IkReal x14098=(sj6*x14084);
IkReal x14099=(sj5*x14097);
evalcond[0]=((((-1.0)*r21*sj6*x14096))+(((-1.0)*r21*x14087*x14097))+(((-1.0)*r22*x14099))+((x14085*x14090))+(((-1.0)*r20*x14091*x14097)));
evalcond[1]=((((-1.0)*r21*x14087*x14096))+(((-1.0)*r22*sj5*x14096))+((r21*x14098))+(((-1.0)*x14090*x14097))+(((-1.0)*r20*x14091*x14096)));
evalcond[2]=((((-1.0)*x14089*x14096))+(((-1.0)*r12*x14099))+(((-1.0)*r11*x14087*x14097))+((sj0*sj2))+((x14085*x14092))+x14088+(((-1.0)*r10*x14091*x14097)));
evalcond[3]=((((-1.0)*r00*x14091*x14097))+(((-1.0)*r02*x14099))+(((-1.0)*x14095))+(((-1.0)*r01*sj6*x14096))+(((-1.0)*r01*x14087*x14097))+((x14085*x14093))+x14086);
evalcond[4]=((((-1.0)*x14092*x14097))+((x14084*x14089))+(((-1.0)*r11*x14087*x14096))+(((-1.0)*x14095))+(((-1.0)*r12*sj5*x14096))+x14086+(((-1.0)*r10*x14091*x14096)));
evalcond[5]=((((-1.0)*r00*x14091*x14096))+(((-1.0)*x14093*x14097))+(((-1.0)*sj2*x14094))+(((-1.0)*x14088))+(((-1.0)*r02*sj5*x14096))+(((-1.0)*r01*x14087*x14096))+((r01*x14098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14100=(cj0*sj2);
IkReal x14101=(cj6*r20);
IkReal x14102=(r22*sj5);
IkReal x14103=((1.0)*sj5);
IkReal x14104=(r21*sj6);
IkReal x14105=((1.0)*cj2*sj0);
IkReal x14106=(cj5*cj6*r21);
IkReal x14107=(cj5*r20*sj6);
CheckValue<IkReal> x14108=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x14103))+(((-1.0)*cj6*r11*x14103)))),-1);
if(!x14108.valid){
continue;
}
CheckValue<IkReal> x14109 = IKatan2WithCheck(IkReal(((((-1.0)*x14100*x14104))+(((-1.0)*x14101*x14105))+((cj2*sj0*x14104))+((x14100*x14101)))),IkReal(((((-1.0)*x14105*x14106))+(((-1.0)*x14105*x14107))+((x14100*x14106))+((x14100*x14107))+((x14100*x14102))+(((-1.0)*x14102*x14105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14108.value)))+(x14109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14110=IKsin(j4);
IkReal x14111=IKcos(j4);
IkReal x14112=(cj0*sj2);
IkReal x14113=(cj5*cj6);
IkReal x14114=(cj0*cj2);
IkReal x14115=(r11*sj6);
IkReal x14116=(cj6*r20);
IkReal x14117=(cj5*sj6);
IkReal x14118=(cj6*r10);
IkReal x14119=(cj6*r00);
IkReal x14120=((1.0)*sj0);
IkReal x14121=(cj2*x14120);
IkReal x14122=((1.0)*x14111);
IkReal x14123=((1.0)*x14110);
IkReal x14124=(sj6*x14110);
IkReal x14125=(sj5*x14123);
evalcond[0]=((((-1.0)*r20*x14117*x14123))+((x14111*x14116))+(((-1.0)*r22*x14125))+(((-1.0)*r21*sj6*x14122))+(((-1.0)*r21*x14113*x14123)));
evalcond[1]=((((-1.0)*r20*x14117*x14122))+((r21*x14124))+(((-1.0)*r22*sj5*x14122))+(((-1.0)*r21*x14113*x14122))+(((-1.0)*x14116*x14123)));
evalcond[2]=(((x14111*x14118))+(((-1.0)*r12*x14125))+(((-1.0)*x14115*x14122))+((sj0*sj2))+(((-1.0)*r11*x14113*x14123))+x14114+(((-1.0)*r10*x14117*x14123)));
evalcond[3]=((((-1.0)*r00*x14117*x14123))+((x14111*x14119))+(((-1.0)*x14121))+(((-1.0)*r01*x14113*x14123))+(((-1.0)*r01*sj6*x14122))+x14112+(((-1.0)*r02*x14125)));
evalcond[4]=(((x14110*x14115))+(((-1.0)*x14121))+(((-1.0)*r11*x14113*x14122))+(((-1.0)*x14118*x14123))+x14112+(((-1.0)*r12*sj5*x14122))+(((-1.0)*r10*x14117*x14122)));
evalcond[5]=((((-1.0)*r00*x14117*x14122))+(((-1.0)*r01*x14113*x14122))+(((-1.0)*sj2*x14120))+((r01*x14124))+(((-1.0)*r02*sj5*x14122))+(((-1.0)*x14114))+(((-1.0)*x14119*x14123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14126=(sj0*sj2);
IkReal x14127=(cj0*cj2);
IkReal x14128=(cj6*r20);
IkReal x14129=(r22*sj5);
IkReal x14130=((1.0)*r21*sj6);
IkReal x14131=(cj5*cj6*r21);
IkReal x14132=(cj5*r20*sj6);
CheckValue<IkReal> x14133=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x14133.valid){
continue;
}
CheckValue<IkReal> x14134 = IKatan2WithCheck(IkReal((((x14126*x14128))+((x14127*x14128))+(((-1.0)*x14126*x14130))+(((-1.0)*x14127*x14130)))),IkReal((((x14126*x14132))+((x14126*x14131))+((x14127*x14132))+((x14127*x14131))+((x14126*x14129))+((x14127*x14129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14133.value)))+(x14134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14135=IKsin(j4);
IkReal x14136=IKcos(j4);
IkReal x14137=(cj0*sj2);
IkReal x14138=(cj5*cj6);
IkReal x14139=(cj0*cj2);
IkReal x14140=(r11*sj6);
IkReal x14141=(cj6*r20);
IkReal x14142=(cj5*sj6);
IkReal x14143=(cj6*r10);
IkReal x14144=(cj6*r00);
IkReal x14145=((1.0)*sj0);
IkReal x14146=(cj2*x14145);
IkReal x14147=((1.0)*x14136);
IkReal x14148=((1.0)*x14135);
IkReal x14149=(sj6*x14135);
IkReal x14150=(sj5*x14148);
evalcond[0]=((((-1.0)*r22*x14150))+(((-1.0)*r21*x14138*x14148))+(((-1.0)*r20*x14142*x14148))+((x14136*x14141))+(((-1.0)*r21*sj6*x14147)));
evalcond[1]=((((-1.0)*r21*x14138*x14147))+(((-1.0)*r20*x14142*x14147))+((r21*x14149))+(((-1.0)*x14141*x14148))+(((-1.0)*r22*sj5*x14147)));
evalcond[2]=((((-1.0)*r11*x14138*x14148))+((x14136*x14143))+((sj0*sj2))+(((-1.0)*r12*x14150))+x14139+(((-1.0)*x14140*x14147))+(((-1.0)*r10*x14142*x14148)));
evalcond[3]=((((-1.0)*r02*x14150))+(((-1.0)*r01*x14138*x14148))+(((-1.0)*r01*sj6*x14147))+((x14136*x14144))+(((-1.0)*r00*x14142*x14148))+(((-1.0)*x14146))+x14137);
evalcond[4]=((((-1.0)*r11*x14138*x14147))+(((-1.0)*x14146))+(((-1.0)*x14143*x14148))+x14137+((x14135*x14140))+(((-1.0)*r10*x14142*x14147))+(((-1.0)*r12*sj5*x14147)));
evalcond[5]=((((-1.0)*r01*x14138*x14147))+(((-1.0)*x14144*x14148))+(((-1.0)*x14139))+(((-1.0)*r02*sj5*x14147))+((r01*x14149))+(((-1.0)*r00*x14142*x14147))+(((-1.0)*sj2*x14145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14151=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14151;
j4eval[1]=IKsign(x14151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14152=cj6*cj6;
IkReal x14153=cj5*cj5;
IkReal x14154=(cj5*sj5);
IkReal x14155=(cj6*r21);
IkReal x14156=((1.0)*r11);
IkReal x14157=(r10*r20);
IkReal x14158=(r10*sj6);
IkReal x14159=(r12*r22);
IkReal x14160=(r21*x14152);
IkReal x14161=(cj6*r20*sj6);
IkReal x14162=(r11*x14153);
IkReal x14163=((1.0)*x14153);
IkReal x14164=(((x14153*x14157))+((x14160*x14162))+((x14161*x14162))+((r12*r20*sj6*x14154))+(((-1.0)*x14156*x14161))+(((-1.0)*x14156*x14160))+((r22*x14154*x14158))+((r12*x14154*x14155))+((r11*r21))+(((-1.0)*x14155*x14158))+((cj6*r11*r22*x14154))+x14159+(((-1.0)*x14152*x14157*x14163))+(((-1.0)*x14159*x14163))+((x14152*x14157))+((x14153*x14155*x14158)));
j4eval[0]=x14164;
j4eval[1]=IKsign(x14164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14165=cj5*cj5;
IkReal x14166=cj6*cj6;
IkReal x14167=(r00*r20);
IkReal x14168=(r02*r22);
IkReal x14169=(cj5*sj5);
IkReal x14170=(cj6*r21);
IkReal x14171=(r00*sj6);
IkReal x14172=(r20*sj6);
IkReal x14173=(cj6*r01);
IkReal x14174=((1.0)*x14165);
IkReal x14175=(r01*r21*x14166);
IkReal x14176=(((r02*x14169*x14172))+((r02*x14169*x14170))+(((-1.0)*x14168*x14174))+((r01*r21))+((x14165*x14167))+(((-1.0)*x14166*x14167*x14174))+((x14165*x14172*x14173))+(((-1.0)*x14175))+((x14166*x14167))+(((-1.0)*x14172*x14173))+((x14165*x14170*x14171))+((x14165*x14175))+x14168+(((-1.0)*x14170*x14171))+((r22*x14169*x14173))+((r22*x14169*x14171)));
j4eval[0]=x14176;
j4eval[1]=IKsign(x14176);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14177=cj5*cj5;
IkReal x14178=cj6*cj6;
IkReal x14179=(cj6*r21);
IkReal x14180=(cj6*r20);
IkReal x14181=(cj0*cj2);
IkReal x14182=(r20*sj6);
IkReal x14183=((1.0)*sj6);
IkReal x14184=(sj0*sj2);
IkReal x14185=((1.0)*cj5);
IkReal x14186=(r02*r22);
IkReal x14187=(r22*sj5);
IkReal x14188=(r00*sj6);
IkReal x14189=(cj5*r02*sj5);
IkReal x14190=(r01*x14177);
IkReal x14191=(r21*x14178);
IkReal x14192=(r00*r20*x14177);
CheckValue<IkReal> x14193 = IKatan2WithCheck(IkReal(((((-1.0)*x14180*x14184))+(((-1.0)*r21*x14181*x14183))+((r21*sj6*x14184))+((x14180*x14181)))),IkReal((((cj5*x14181*x14182))+(((-1.0)*x14179*x14184*x14185))+(((-1.0)*x14182*x14184*x14185))+(((-1.0)*x14184*x14187))+((x14181*x14187))+((cj5*x14179*x14181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14193.valid){
continue;
}
CheckValue<IkReal> x14194=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14178*x14192))+((x14182*x14189))+((r00*r20*x14178))+((r01*r21))+((x14179*x14189))+((x14190*x14191))+(((-1.0)*r01*x14191))+((cj5*x14187*x14188))+((x14177*x14179*x14188))+x14186+x14192+(((-1.0)*x14177*x14186))+(((-1.0)*r01*x14180*x14183))+(((-1.0)*r00*x14179*x14183))+((cj5*cj6*r01*x14187))+((sj6*x14180*x14190)))),-1);
if(!x14194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14193.value)+(((1.5707963267949)*(x14194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14195=IKsin(j4);
IkReal x14196=IKcos(j4);
IkReal x14197=(cj0*cj2);
IkReal x14198=(cj5*cj6);
IkReal x14199=(r11*sj6);
IkReal x14200=(cj6*r20);
IkReal x14201=(cj5*sj6);
IkReal x14202=(cj6*r10);
IkReal x14203=(r01*sj6);
IkReal x14204=(cj0*sj2);
IkReal x14205=(r21*sj6);
IkReal x14206=(cj6*r00);
IkReal x14207=((1.0)*sj0);
IkReal x14208=(sj2*x14207);
IkReal x14209=((1.0)*x14196);
IkReal x14210=((1.0)*x14195);
IkReal x14211=(sj5*x14210);
evalcond[0]=((((-1.0)*r21*x14198*x14210))+(((-1.0)*x14205*x14209))+((x14196*x14200))+(((-1.0)*r22*x14211))+(((-1.0)*r20*x14201*x14210)));
evalcond[1]=((((-1.0)*r22*sj5*x14209))+(((-1.0)*r21*x14198*x14209))+((x14195*x14205))+(((-1.0)*r20*x14201*x14209))+(((-1.0)*x14200*x14210)));
evalcond[2]=((((-1.0)*r10*x14201*x14209))+((cj2*sj0))+(((-1.0)*r12*sj5*x14209))+(((-1.0)*r11*x14198*x14209))+((x14195*x14199))+x14204+(((-1.0)*x14202*x14210)));
evalcond[3]=((((-1.0)*r12*x14211))+(((-1.0)*x14208))+(((-1.0)*x14199*x14209))+((x14196*x14202))+(((-1.0)*r11*x14198*x14210))+x14197+(((-1.0)*r10*x14201*x14210)));
evalcond[4]=((((-1.0)*r01*x14198*x14209))+(((-1.0)*x14208))+(((-1.0)*x14206*x14210))+(((-1.0)*r00*x14201*x14209))+((x14195*x14203))+x14197+(((-1.0)*r02*sj5*x14209)));
evalcond[5]=((((-1.0)*cj2*x14207))+(((-1.0)*r02*x14211))+((x14196*x14206))+(((-1.0)*x14204))+(((-1.0)*x14203*x14209))+(((-1.0)*r00*x14201*x14210))+(((-1.0)*r01*x14198*x14210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14212=cj6*cj6;
IkReal x14213=cj5*cj5;
IkReal x14214=((1.0)*r11);
IkReal x14215=(r22*sj5);
IkReal x14216=(cj0*sj2);
IkReal x14217=(cj5*sj6);
IkReal x14218=(cj6*r20);
IkReal x14219=(cj2*sj0);
IkReal x14220=(r21*sj6);
IkReal x14221=(cj6*r10);
IkReal x14222=(r12*r22);
IkReal x14223=(r12*sj5);
IkReal x14224=(r21*x14212);
IkReal x14225=(r20*x14219);
IkReal x14226=(cj5*cj6*r21);
IkReal x14227=(r11*x14213);
IkReal x14228=(r10*r20*x14213);
CheckValue<IkReal> x14229=IKPowWithIntegerCheck(IKsign((((r20*x14217*x14223))+((x14224*x14227))+((r11*r21))+((x14213*x14220*x14221))+(((-1.0)*sj6*x14214*x14218))+((r10*r20*x14212))+(((-1.0)*x14213*x14222))+((sj6*x14218*x14227))+(((-1.0)*x14214*x14224))+(((-1.0)*x14220*x14221))+(((-1.0)*x14212*x14228))+((x14223*x14226))+x14222+x14228+((r10*x14215*x14217))+((cj5*cj6*r11*x14215)))),-1);
if(!x14229.valid){
continue;
}
CheckValue<IkReal> x14230 = IKatan2WithCheck(IkReal(((((-1.0)*x14216*x14220))+(((-1.0)*x14219*x14220))+((x14216*x14218))+((x14218*x14219)))),IkReal((((x14219*x14226))+((r20*x14216*x14217))+((x14215*x14219))+((x14215*x14216))+((x14217*x14225))+((x14216*x14226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14229.value)))+(x14230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14231=IKsin(j4);
IkReal x14232=IKcos(j4);
IkReal x14233=(cj0*cj2);
IkReal x14234=(cj5*cj6);
IkReal x14235=(r11*sj6);
IkReal x14236=(cj6*r20);
IkReal x14237=(cj5*sj6);
IkReal x14238=(cj6*r10);
IkReal x14239=(r01*sj6);
IkReal x14240=(cj0*sj2);
IkReal x14241=(r21*sj6);
IkReal x14242=(cj6*r00);
IkReal x14243=((1.0)*sj0);
IkReal x14244=(sj2*x14243);
IkReal x14245=((1.0)*x14232);
IkReal x14246=((1.0)*x14231);
IkReal x14247=(sj5*x14246);
evalcond[0]=((((-1.0)*r22*x14247))+(((-1.0)*r21*x14234*x14246))+(((-1.0)*r20*x14237*x14246))+(((-1.0)*x14241*x14245))+((x14232*x14236)));
evalcond[1]=(((x14231*x14241))+(((-1.0)*r21*x14234*x14245))+(((-1.0)*r20*x14237*x14245))+(((-1.0)*x14236*x14246))+(((-1.0)*r22*sj5*x14245)));
evalcond[2]=(((x14231*x14235))+((cj2*sj0))+(((-1.0)*x14238*x14246))+(((-1.0)*r11*x14234*x14245))+(((-1.0)*r12*sj5*x14245))+x14240+(((-1.0)*r10*x14237*x14245)));
evalcond[3]=((((-1.0)*x14244))+(((-1.0)*r11*x14234*x14246))+(((-1.0)*x14235*x14245))+(((-1.0)*r12*x14247))+x14233+(((-1.0)*r10*x14237*x14246))+((x14232*x14238)));
evalcond[4]=(((x14231*x14239))+(((-1.0)*r00*x14237*x14245))+(((-1.0)*r01*x14234*x14245))+(((-1.0)*r02*sj5*x14245))+(((-1.0)*x14244))+(((-1.0)*x14242*x14246))+x14233);
evalcond[5]=((((-1.0)*x14240))+(((-1.0)*x14239*x14245))+(((-1.0)*r00*x14237*x14246))+(((-1.0)*r01*x14234*x14246))+(((-1.0)*cj2*x14243))+((x14232*x14242))+(((-1.0)*r02*x14247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14248=(cj0*cj2);
IkReal x14249=(cj6*r20);
IkReal x14250=(r21*sj6);
IkReal x14251=(sj0*sj2);
IkReal x14252=(r22*sj5);
IkReal x14253=(cj5*r20*sj6);
IkReal x14254=(cj5*cj6*r21);
CheckValue<IkReal> x14255 = IKatan2WithCheck(IkReal((((x14248*x14249))+(((-1.0)*x14248*x14250))+((x14250*x14251))+(((-1.0)*x14249*x14251)))),IkReal((((x14248*x14254))+((x14248*x14253))+((x14248*x14252))+(((-1.0)*x14251*x14254))+(((-1.0)*x14251*x14253))+(((-1.0)*x14251*x14252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14255.valid){
continue;
}
CheckValue<IkReal> x14256=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x14256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14255.value)+(((1.5707963267949)*(x14256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14257=IKsin(j4);
IkReal x14258=IKcos(j4);
IkReal x14259=(cj0*cj2);
IkReal x14260=(cj5*cj6);
IkReal x14261=(r11*sj6);
IkReal x14262=(cj6*r20);
IkReal x14263=(cj5*sj6);
IkReal x14264=(cj6*r10);
IkReal x14265=(r01*sj6);
IkReal x14266=(cj0*sj2);
IkReal x14267=(r21*sj6);
IkReal x14268=(cj6*r00);
IkReal x14269=((1.0)*sj0);
IkReal x14270=(sj2*x14269);
IkReal x14271=((1.0)*x14258);
IkReal x14272=((1.0)*x14257);
IkReal x14273=(sj5*x14272);
evalcond[0]=((((-1.0)*r22*x14273))+((x14258*x14262))+(((-1.0)*r20*x14263*x14272))+(((-1.0)*r21*x14260*x14272))+(((-1.0)*x14267*x14271)));
evalcond[1]=((((-1.0)*x14262*x14272))+((x14257*x14267))+(((-1.0)*r20*x14263*x14271))+(((-1.0)*r21*x14260*x14271))+(((-1.0)*r22*sj5*x14271)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r10*x14263*x14271))+(((-1.0)*r11*x14260*x14271))+(((-1.0)*x14264*x14272))+((x14257*x14261))+(((-1.0)*r12*sj5*x14271))+x14266);
evalcond[3]=((((-1.0)*x14261*x14271))+(((-1.0)*x14270))+(((-1.0)*r10*x14263*x14272))+(((-1.0)*r11*x14260*x14272))+(((-1.0)*r12*x14273))+((x14258*x14264))+x14259);
evalcond[4]=((((-1.0)*x14268*x14272))+(((-1.0)*x14270))+(((-1.0)*r02*sj5*x14271))+((x14257*x14265))+(((-1.0)*r01*x14260*x14271))+(((-1.0)*r00*x14263*x14271))+x14259);
evalcond[5]=((((-1.0)*r02*x14273))+(((-1.0)*x14265*x14271))+(((-1.0)*x14266))+(((-1.0)*cj2*x14269))+((x14258*x14268))+(((-1.0)*r01*x14260*x14272))+(((-1.0)*r00*x14263*x14272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14274=cj5*cj5;
IkReal x14275=cj6*cj6;
IkReal x14276=r22*r22;
IkReal x14277=r21*r21;
IkReal x14278=r20*r20;
IkReal x14279=(cj6*r21);
IkReal x14280=(r20*sj6);
IkReal x14281=(cj1*cj5);
IkReal x14282=((1.0)*sj2);
IkReal x14283=(cj1*cj2);
IkReal x14284=(cj6*r20);
IkReal x14285=(r22*sj5);
IkReal x14286=(r21*sj6);
IkReal x14287=((2.0)*cj5);
IkReal x14288=((1.0)*x14277);
IkReal x14289=((1.0)*x14278);
IkReal x14290=(x14274*x14275);
CheckValue<IkReal> x14291=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14288*x14290))+(((-1.0)*x14274*x14289))+(((-1.0)*x14276))+(((-1.0)*x14279*x14285*x14287))+(((-2.0)*x14274*x14279*x14280))+(((2.0)*x14279*x14280))+(((-1.0)*x14288))+((x14278*x14290))+(((-1.0)*x14280*x14285*x14287))+((x14274*x14276))+((x14275*x14277))+(((-1.0)*x14275*x14289)))),-1);
if(!x14291.valid){
continue;
}
CheckValue<IkReal> x14292 = IKatan2WithCheck(IkReal(((((-1.0)*x14280*x14281*x14282))+((x14283*x14284))+(((-1.0)*cj1*x14282*x14285))+(((-1.0)*x14279*x14281*x14282))+(((-1.0)*x14283*x14286)))),IkReal((((cj2*x14279*x14281))+((cj2*x14280*x14281))+((x14283*x14285))+(((-1.0)*cj1*x14282*x14286))+((cj1*sj2*x14284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14291.value)))+(x14292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14293=IKsin(j4);
IkReal x14294=IKcos(j4);
IkReal x14295=(cj5*cj6);
IkReal x14296=(cj0*sj1);
IkReal x14297=(r11*sj6);
IkReal x14298=(cj6*r20);
IkReal x14299=(cj5*sj6);
IkReal x14300=(cj6*r10);
IkReal x14301=((1.0)*cj2);
IkReal x14302=(r21*sj6);
IkReal x14303=(cj6*r00);
IkReal x14304=(sj0*sj1);
IkReal x14305=(r01*sj6);
IkReal x14306=((1.0)*x14294);
IkReal x14307=((1.0)*x14293);
IkReal x14308=(sj5*x14307);
evalcond[0]=((((-1.0)*r22*x14308))+(((-1.0)*x14302*x14306))+((cj1*sj2))+(((-1.0)*r21*x14295*x14307))+((x14294*x14298))+(((-1.0)*r20*x14299*x14307)));
evalcond[1]=((((-1.0)*x14298*x14307))+(((-1.0)*cj1*x14301))+((x14293*x14302))+(((-1.0)*r21*x14295*x14306))+(((-1.0)*r20*x14299*x14306))+(((-1.0)*r22*sj5*x14306)));
evalcond[2]=((((-1.0)*x14297*x14306))+(((-1.0)*r12*x14308))+((cj0*cj2))+(((-1.0)*r10*x14299*x14307))+((sj2*x14304))+((x14294*x14300))+(((-1.0)*r11*x14295*x14307)));
evalcond[3]=((((-1.0)*r01*x14295*x14307))+(((-1.0)*r02*x14308))+(((-1.0)*x14305*x14306))+(((-1.0)*r00*x14299*x14307))+((sj2*x14296))+(((-1.0)*sj0*x14301))+((x14294*x14303)));
evalcond[4]=((((-1.0)*r10*x14299*x14306))+(((-1.0)*x14300*x14307))+(((-1.0)*r12*sj5*x14306))+((x14293*x14297))+(((-1.0)*x14301*x14304))+((cj0*sj2))+(((-1.0)*r11*x14295*x14306)));
evalcond[5]=((((-1.0)*r01*x14295*x14306))+(((-1.0)*x14303*x14307))+(((-1.0)*x14296*x14301))+((x14293*x14305))+(((-1.0)*r00*x14299*x14306))+(((-1.0)*sj0*sj2))+(((-1.0)*r02*sj5*x14306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14309=(cj6*r21);
IkReal x14310=(r20*sj6);
IkReal x14311=(cj1*sj2);
IkReal x14312=((1.0)*cj6);
IkReal x14313=((1.0)*sj5);
IkReal x14314=(cj0*cj2);
IkReal x14315=(r21*sj6);
IkReal x14316=(sj0*sj1*sj2);
IkReal x14317=((1.0)*cj5*x14314);
IkReal x14318=((1.0)*cj5*x14316);
CheckValue<IkReal> x14319=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x14313))+(((-1.0)*r01*sj5*x14312))+((cj5*r02)))),-1);
if(!x14319.valid){
continue;
}
CheckValue<IkReal> x14320 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6*x14311))+((x14314*x14315))+((x14315*x14316))+((cj6*r10*x14311))+(((-1.0)*r20*x14312*x14314))+(((-1.0)*r20*x14312*x14316)))),IkReal(((((-1.0)*x14309*x14318))+(((-1.0)*x14309*x14317))+((cj5*r10*sj6*x14311))+(((-1.0)*x14310*x14317))+(((-1.0)*x14310*x14318))+((cj5*cj6*r11*x14311))+(((-1.0)*r22*x14313*x14314))+(((-1.0)*r22*x14313*x14316))+((r12*sj5*x14311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14319.value)))+(x14320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14321=IKsin(j4);
IkReal x14322=IKcos(j4);
IkReal x14323=(cj5*cj6);
IkReal x14324=(cj0*sj1);
IkReal x14325=(r11*sj6);
IkReal x14326=(cj6*r20);
IkReal x14327=(cj5*sj6);
IkReal x14328=(cj6*r10);
IkReal x14329=((1.0)*cj2);
IkReal x14330=(r21*sj6);
IkReal x14331=(cj6*r00);
IkReal x14332=(sj0*sj1);
IkReal x14333=(r01*sj6);
IkReal x14334=((1.0)*x14322);
IkReal x14335=((1.0)*x14321);
IkReal x14336=(sj5*x14335);
evalcond[0]=((((-1.0)*r20*x14327*x14335))+(((-1.0)*r22*x14336))+((cj1*sj2))+((x14322*x14326))+(((-1.0)*r21*x14323*x14335))+(((-1.0)*x14330*x14334)));
evalcond[1]=((((-1.0)*r20*x14327*x14334))+((x14321*x14330))+(((-1.0)*x14326*x14335))+(((-1.0)*r21*x14323*x14334))+(((-1.0)*cj1*x14329))+(((-1.0)*r22*sj5*x14334)));
evalcond[2]=((((-1.0)*r12*x14336))+((cj0*cj2))+((x14322*x14328))+(((-1.0)*x14325*x14334))+(((-1.0)*r10*x14327*x14335))+(((-1.0)*r11*x14323*x14335))+((sj2*x14332)));
evalcond[3]=((((-1.0)*r00*x14327*x14335))+(((-1.0)*r02*x14336))+(((-1.0)*sj0*x14329))+((sj2*x14324))+((x14322*x14331))+(((-1.0)*x14333*x14334))+(((-1.0)*r01*x14323*x14335)));
evalcond[4]=(((x14321*x14325))+(((-1.0)*x14329*x14332))+(((-1.0)*x14328*x14335))+(((-1.0)*r12*sj5*x14334))+(((-1.0)*r10*x14327*x14334))+(((-1.0)*r11*x14323*x14334))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r02*sj5*x14334))+(((-1.0)*r00*x14327*x14334))+((x14321*x14333))+(((-1.0)*x14331*x14335))+(((-1.0)*sj0*sj2))+(((-1.0)*x14324*x14329))+(((-1.0)*r01*x14323*x14334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14337=(cj6*r20);
IkReal x14338=(cj2*sj0);
IkReal x14339=((1.0)*sj2);
IkReal x14340=(cj0*sj1);
IkReal x14341=(cj1*r01);
IkReal x14342=(r22*sj5);
IkReal x14343=(cj5*cj6);
IkReal x14344=(cj1*sj2);
IkReal x14345=(r21*sj6);
IkReal x14346=(cj5*r20*sj6);
CheckValue<IkReal> x14347 = IKatan2WithCheck(IkReal((((x14337*x14338))+((sj2*x14340*x14345))+(((-1.0)*x14338*x14345))+((cj6*r00*x14344))+(((-1.0)*sj6*x14339*x14341))+(((-1.0)*x14337*x14339*x14340)))),IkReal((((x14338*x14342))+((x14338*x14346))+((r02*sj5*x14344))+(((-1.0)*r21*x14339*x14340*x14343))+((sj2*x14341*x14343))+(((-1.0)*x14339*x14340*x14346))+(((-1.0)*x14339*x14340*x14342))+((cj5*r00*sj6*x14344))+((r21*x14338*x14343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14347.valid){
continue;
}
CheckValue<IkReal> x14348=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x14348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14347.value)+(((1.5707963267949)*(x14348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14349=IKsin(j4);
IkReal x14350=IKcos(j4);
IkReal x14351=(cj5*cj6);
IkReal x14352=(cj0*sj1);
IkReal x14353=(r11*sj6);
IkReal x14354=(cj6*r20);
IkReal x14355=(cj5*sj6);
IkReal x14356=(cj6*r10);
IkReal x14357=((1.0)*cj2);
IkReal x14358=(r21*sj6);
IkReal x14359=(cj6*r00);
IkReal x14360=(sj0*sj1);
IkReal x14361=(r01*sj6);
IkReal x14362=((1.0)*x14350);
IkReal x14363=((1.0)*x14349);
IkReal x14364=(sj5*x14363);
evalcond[0]=((((-1.0)*r22*x14364))+(((-1.0)*r21*x14351*x14363))+((cj1*sj2))+(((-1.0)*r20*x14355*x14363))+((x14350*x14354))+(((-1.0)*x14358*x14362)));
evalcond[1]=((((-1.0)*r22*sj5*x14362))+(((-1.0)*r21*x14351*x14362))+(((-1.0)*r20*x14355*x14362))+(((-1.0)*x14354*x14363))+((x14349*x14358))+(((-1.0)*cj1*x14357)));
evalcond[2]=(((sj2*x14360))+((cj0*cj2))+(((-1.0)*x14353*x14362))+(((-1.0)*r11*x14351*x14363))+(((-1.0)*r10*x14355*x14363))+((x14350*x14356))+(((-1.0)*r12*x14364)));
evalcond[3]=(((sj2*x14352))+(((-1.0)*x14361*x14362))+(((-1.0)*r02*x14364))+(((-1.0)*r01*x14351*x14363))+(((-1.0)*sj0*x14357))+((x14350*x14359))+(((-1.0)*r00*x14355*x14363)));
evalcond[4]=((((-1.0)*x14356*x14363))+(((-1.0)*x14357*x14360))+(((-1.0)*r12*sj5*x14362))+(((-1.0)*r11*x14351*x14362))+(((-1.0)*r10*x14355*x14362))+((x14349*x14353))+((cj0*sj2)));
evalcond[5]=(((x14349*x14361))+(((-1.0)*r01*x14351*x14362))+(((-1.0)*sj0*sj2))+(((-1.0)*x14352*x14357))+(((-1.0)*r02*sj5*x14362))+(((-1.0)*r00*x14355*x14362))+(((-1.0)*x14359*x14363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14365=(cj6*sj5);
IkReal x14366=(sj5*sj6);
IkReal x14367=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r10*x14366))+((r11*x14365))+(((-1.0)*r12*x14367)))))+(IKabs(((((-1.0)*r02*x14367))+((r01*x14365))+((r00*x14366))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14368=cj5*cj5;
IkReal x14369=cj6*cj6;
IkReal x14370=r22*r22;
IkReal x14371=r21*r21;
IkReal x14372=r20*r20;
IkReal x14373=((1.0)*cj5);
IkReal x14374=(cj6*r21);
IkReal x14375=(r20*sj6);
IkReal x14376=(cj1*cj2);
IkReal x14377=(cj1*sj2);
IkReal x14378=(r22*sj5);
IkReal x14379=(cj6*r20);
IkReal x14380=((2.0)*cj5);
IkReal x14381=(sj6*x14376);
IkReal x14382=((1.0)*x14371);
IkReal x14383=(x14369*x14372);
IkReal x14384=((((-1.0)*x14382))+(((-1.0)*x14375*x14378*x14380))+(((-1.0)*x14383))+(((-1.0)*x14370))+(((-1.0)*x14368*x14369*x14382))+((x14368*x14370))+(((-2.0)*x14368*x14374*x14375))+((x14369*x14371))+(((-1.0)*x14374*x14378*x14380))+((x14368*x14383))+(((-1.0)*x14368*x14372))+(((2.0)*x14374*x14375)));
j4eval[0]=x14384;
j4eval[1]=IKsign(x14384);
j4eval[2]=((IKabs(((((-1.0)*x14373*x14375*x14376))+((x14377*x14379))+(((-1.0)*r21*sj6*x14377))+(((-1.0)*x14373*x14374*x14376))+(((-1.0)*x14376*x14378)))))+(IKabs(((((-1.0)*x14373*x14375*x14377))+((r21*x14381))+(((-1.0)*x14377*x14378))+(((-1.0)*x14373*x14374*x14377))+(((-1.0)*x14376*x14379))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(cj1+(((-1.0)*cj1*cj2*sj1))+(((5.28144927536232)*(cj1*cj1))));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((9522.0)+(((-9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j4eval[0]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14385=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*cj5*cj6*x14385))+(((-1.0)*r22*sj5)))))+(IKabs(((((-1.0)*sj6*x14385))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x14386=((1.0)*cj5);
CheckValue<IkReal> x14388 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(((((-1.0)*cj6*r21*x14386))+(((-1.0)*r20*sj6*x14386))+(((-1.0)*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14388.valid){
continue;
}
IkReal x14387=x14388.value;
j4array[0]=((-1.0)*x14387);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x14387)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x14389=IKcos(j4);
IkReal x14390=IKsin(j4);
IkReal x14391=(cj5*x14389);
evalcond[0]=((((-1.0)*r21*sj6*x14390))+((r20*sj6*x14391))+((cj6*r21*x14391))+((r22*sj5*x14389))+((cj6*r20*x14390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14392=(cj2*cj4);
IkReal x14393=(r02*sj5);
IkReal x14394=(cj4*sj2);
IkReal x14395=(r12*sj5);
IkReal x14396=((1.0)*r01);
IkReal x14397=(cj5*cj6*r11);
IkReal x14398=(cj5*r00*sj6);
IkReal x14399=(cj5*r10*sj6);
IkReal x14400=(cj6*r00*sj4);
IkReal x14401=(sj2*sj4*sj6);
IkReal x14402=(cj6*r10*sj4);
IkReal x14403=(cj2*sj4*sj6);
IkReal x14404=(cj5*cj6*r01);
if( IKabs((((x14393*x14394))+(((-1.0)*x14396*x14401))+((sj2*x14400))+((x14394*x14404))+((x14394*x14398))+(((-1.0)*r11*x14403))+((cj2*x14402))+((x14392*x14395))+((x14392*x14397))+((x14392*x14399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14396*x14403))+((r11*x14401))+((cj2*x14400))+(((-1.0)*sj2*x14402))+((x14392*x14404))+(((-1.0)*x14394*x14399))+(((-1.0)*x14394*x14395))+(((-1.0)*x14394*x14397))+((x14392*x14393))+((x14392*x14398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x14393*x14394))+(((-1.0)*x14396*x14401))+((sj2*x14400))+((x14394*x14404))+((x14394*x14398))+(((-1.0)*r11*x14403))+((cj2*x14402))+((x14392*x14395))+((x14392*x14397))+((x14392*x14399))))+IKsqr(((((-1.0)*x14396*x14403))+((r11*x14401))+((cj2*x14400))+(((-1.0)*sj2*x14402))+((x14392*x14404))+(((-1.0)*x14394*x14399))+(((-1.0)*x14394*x14395))+(((-1.0)*x14394*x14397))+((x14392*x14393))+((x14392*x14398))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x14393*x14394))+(((-1.0)*x14396*x14401))+((sj2*x14400))+((x14394*x14404))+((x14394*x14398))+(((-1.0)*r11*x14403))+((cj2*x14402))+((x14392*x14395))+((x14392*x14397))+((x14392*x14399))), ((((-1.0)*x14396*x14403))+((r11*x14401))+((cj2*x14400))+(((-1.0)*sj2*x14402))+((x14392*x14404))+(((-1.0)*x14394*x14399))+(((-1.0)*x14394*x14395))+(((-1.0)*x14394*x14397))+((x14392*x14393))+((x14392*x14398))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14405=IKcos(j0);
IkReal x14406=IKsin(j0);
IkReal x14407=((1.0)*sj4);
IkReal x14408=(cj6*sj4);
IkReal x14409=((0.37429)*sj5);
IkReal x14410=(r10*sj6);
IkReal x14411=(r01*sj6);
IkReal x14412=((0.37429)*cj5);
IkReal x14413=((0.069)*sj2);
IkReal x14414=(cj6*r01);
IkReal x14415=((0.01)*cj5);
IkReal x14416=(r12*sj5);
IkReal x14417=(r00*sj6);
IkReal x14418=(r02*sj5);
IkReal x14419=(cj4*cj6);
IkReal x14420=(cj4*cj5);
IkReal x14421=((1.0)*cj4);
IkReal x14422=(r11*sj6);
IkReal x14423=(sj2*x14405);
IkReal x14424=(cj5*cj6*r11);
IkReal x14425=(cj2*x14405);
IkReal x14426=((0.069)*x14406);
IkReal x14427=(sj2*x14406);
IkReal x14428=((1.0)*cj2*x14406);
evalcond[0]=(((r10*x14408))+((cj4*x14416))+((cj5*r11*x14419))+(((-1.0)*x14407*x14422))+((x14410*x14420))+x14423+(((-1.0)*x14428)));
evalcond[1]=(((cj4*x14418))+((x14414*x14420))+(((-1.0)*x14407*x14411))+((r00*x14408))+(((-1.0)*x14425))+(((-1.0)*x14427))+((x14417*x14420)));
evalcond[2]=((((-1.0)*x14421*x14422))+(((-1.0)*x14407*x14424))+(((-1.0)*x14407*x14416))+x14425+x14427+(((-1.0)*cj5*x14407*x14410))+((r10*x14419)));
evalcond[3]=((((-1.0)*x14407*x14418))+((r00*x14419))+x14423+(((-1.0)*cj5*x14407*x14414))+(((-1.0)*cj5*x14407*x14417))+(((-1.0)*x14411*x14421))+(((-1.0)*x14428)));
evalcond[4]=((((0.01)*x14418))+(((-0.069)*x14425))+((r02*x14412))+(((-1.0)*x14406*x14413))+(((-1.0)*px))+((x14415*x14417))+((x14414*x14415))+(((0.069)*x14405))+(((-1.0)*x14409*x14417))+(((-1.0)*x14409*x14414)));
evalcond[5]=((((0.01)*x14416))+((x14405*x14413))+((r12*x14412))+(((-1.0)*cj6*r11*x14409))+((cj6*r11*x14415))+(((-1.0)*py))+x14426+(((-1.0)*cj2*x14426))+((x14410*x14415))+(((-1.0)*x14409*x14410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14430 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14430.valid){
continue;
}
IkReal x14429=x14430.value;
j4array[0]=((-1.0)*x14429);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x14429)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x14431=IKsin(j4);
IkReal x14432=IKcos(j4);
IkReal x14433=((1.0)*x14431);
evalcond[0]=((((-1.0)*cj5*r20*sj6*x14433))+(((-1.0)*r21*sj6*x14432))+(((-1.0)*r22*sj5*x14433))+(((-1.0)*cj5*cj6*r21*x14433))+((cj6*r20*x14432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14434=(cj2*cj4);
IkReal x14435=(r02*sj5);
IkReal x14436=(cj4*sj2);
IkReal x14437=(r12*sj5);
IkReal x14438=((1.0)*r01);
IkReal x14439=(cj5*cj6*r11);
IkReal x14440=(cj5*r00*sj6);
IkReal x14441=(cj5*r10*sj6);
IkReal x14442=(cj6*r00*sj4);
IkReal x14443=(sj2*sj4*sj6);
IkReal x14444=(cj6*r10*sj4);
IkReal x14445=(cj2*sj4*sj6);
IkReal x14446=(cj5*cj6*r01);
if( IKabs(((((-1.0)*x14438*x14443))+((x14434*x14441))+((x14434*x14439))+((x14434*x14437))+((sj2*x14442))+((x14436*x14446))+((x14436*x14440))+((x14435*x14436))+((cj2*x14444))+(((-1.0)*r11*x14445)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14438*x14445))+(((-1.0)*x14436*x14441))+((r11*x14443))+(((-1.0)*x14436*x14437))+(((-1.0)*x14436*x14439))+((x14434*x14440))+((x14434*x14446))+((x14434*x14435))+(((-1.0)*sj2*x14444))+((cj2*x14442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14438*x14443))+((x14434*x14441))+((x14434*x14439))+((x14434*x14437))+((sj2*x14442))+((x14436*x14446))+((x14436*x14440))+((x14435*x14436))+((cj2*x14444))+(((-1.0)*r11*x14445))))+IKsqr(((((-1.0)*x14438*x14445))+(((-1.0)*x14436*x14441))+((r11*x14443))+(((-1.0)*x14436*x14437))+(((-1.0)*x14436*x14439))+((x14434*x14440))+((x14434*x14446))+((x14434*x14435))+(((-1.0)*sj2*x14444))+((cj2*x14442))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x14438*x14443))+((x14434*x14441))+((x14434*x14439))+((x14434*x14437))+((sj2*x14442))+((x14436*x14446))+((x14436*x14440))+((x14435*x14436))+((cj2*x14444))+(((-1.0)*r11*x14445))), ((((-1.0)*x14438*x14445))+(((-1.0)*x14436*x14441))+((r11*x14443))+(((-1.0)*x14436*x14437))+(((-1.0)*x14436*x14439))+((x14434*x14440))+((x14434*x14446))+((x14434*x14435))+(((-1.0)*sj2*x14444))+((cj2*x14442))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14447=IKcos(j0);
IkReal x14448=IKsin(j0);
IkReal x14449=((1.0)*sj4);
IkReal x14450=(cj6*sj4);
IkReal x14451=((0.37429)*sj5);
IkReal x14452=(r10*sj6);
IkReal x14453=(r01*sj6);
IkReal x14454=((0.37429)*cj5);
IkReal x14455=((0.069)*sj2);
IkReal x14456=(cj6*r01);
IkReal x14457=((0.01)*cj5);
IkReal x14458=(r12*sj5);
IkReal x14459=(r00*sj6);
IkReal x14460=(r02*sj5);
IkReal x14461=(cj4*cj6);
IkReal x14462=(cj4*cj5);
IkReal x14463=((1.0)*cj4);
IkReal x14464=(r11*sj6);
IkReal x14465=(sj2*x14447);
IkReal x14466=(cj5*cj6*r11);
IkReal x14467=(cj2*x14447);
IkReal x14468=((0.069)*x14448);
IkReal x14469=(sj2*x14448);
IkReal x14470=((1.0)*cj2*x14448);
evalcond[0]=((((-1.0)*x14449*x14464))+((x14452*x14462))+((r10*x14450))+((cj4*x14458))+x14465+((cj5*r11*x14461))+(((-1.0)*x14470)));
evalcond[1]=(((x14456*x14462))+(((-1.0)*x14449*x14453))+((r00*x14450))+((cj4*x14460))+(((-1.0)*x14467))+(((-1.0)*x14469))+((x14459*x14462)));
evalcond[2]=((((-1.0)*x14449*x14466))+(((-1.0)*x14463*x14464))+(((-1.0)*x14449*x14458))+((r10*x14461))+x14469+x14467+(((-1.0)*cj5*x14449*x14452)));
evalcond[3]=((((-1.0)*x14449*x14460))+(((-1.0)*x14453*x14463))+((r00*x14461))+x14465+(((-1.0)*cj5*x14449*x14459))+(((-1.0)*cj5*x14449*x14456))+(((-1.0)*x14470)));
evalcond[4]=((((-1.0)*x14448*x14455))+((x14457*x14459))+(((-1.0)*px))+((x14456*x14457))+(((0.069)*x14447))+(((-1.0)*x14451*x14459))+(((-1.0)*x14451*x14456))+(((-0.069)*x14467))+((r02*x14454))+(((0.01)*x14460)));
evalcond[5]=((((-1.0)*cj6*r11*x14451))+((r12*x14454))+(((0.01)*x14458))+((x14452*x14457))+(((-1.0)*py))+x14468+((x14447*x14455))+(((-1.0)*x14451*x14452))+((cj6*r11*x14457))+(((-1.0)*cj2*x14468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14471=((690.0)*sj5);
IkReal x14472=(cj5*sj2);
IkReal x14473=((25826.01)*r02);
IkReal x14474=(cj6*r11);
IkReal x14475=((25826.01)*sj5);
IkReal x14476=(r00*sj6);
IkReal x14477=(r10*sj6);
IkReal x14478=((25826.01)*r12);
IkReal x14479=(cj6*r01);
IkReal x14480=((69000.0)*py);
IkReal x14481=((69000.0)*px);
IkReal x14482=((690.0)*cj5);
IkReal x14483=(cj2*cj5);
IkReal x14484=(cj2*x14482);
CheckValue<IkReal> x14485=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-9522.0)*cj2)))),-1);
if(!x14485.valid){
continue;
}
CheckValue<IkReal> x14486 = IKatan2WithCheck(IkReal(((((-1.0)*x14477*x14482))+(((-1.0)*cj2*x14475*x14477))+((cj2*r12*x14471))+((r02*sj2*x14471))+(((-1.0)*cj2*x14474*x14475))+(((-1.0)*cj5*x14478))+((x14472*x14473))+(((-1.0)*r12*x14471))+(((-1.0)*x14474*x14482))+((x14474*x14484))+x14480+(((690.0)*x14472*x14476))+(((690.0)*x14472*x14479))+((x14477*x14484))+(((-1.0)*sj2*x14481))+((x14475*x14477))+(((-1.0)*sj2*x14475*x14476))+(((-1.0)*sj2*x14475*x14479))+(((-1.0)*cj2*x14480))+((x14474*x14475))+((x14478*x14483)))),IkReal((((sj2*x14480))+((sj2*x14475*x14477))+(((-1.0)*cj2*x14475*x14479))+(((-1.0)*cj2*x14475*x14476))+(((-1.0)*x14479*x14482))+(((-1.0)*r12*sj2*x14471))+(((-1.0)*cj5*x14473))+((x14479*x14484))+(((-1.0)*r02*x14471))+x14481+(((-1.0)*x14472*x14478))+(((-690.0)*x14472*x14477))+(((-690.0)*x14472*x14474))+((cj2*r02*x14471))+((x14476*x14484))+((x14475*x14476))+((x14475*x14479))+((sj2*x14474*x14475))+(((-1.0)*cj2*x14481))+((x14473*x14483))+(((-1.0)*x14476*x14482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14486.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14485.value)))+(x14486.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x14487=IKcos(j0);
IkReal x14488=IKsin(j0);
IkReal x14489=((0.01)*cj5);
IkReal x14490=(cj6*r01);
IkReal x14491=((0.37429)*sj5);
IkReal x14492=(cj6*r11);
IkReal x14493=(r00*sj6);
IkReal x14494=((0.01)*sj5);
IkReal x14495=((0.37429)*cj5);
IkReal x14496=(r10*sj6);
IkReal x14497=((0.069)*x14487);
IkReal x14498=((0.069)*x14488);
evalcond[0]=((((-1.0)*x14490*x14491))+(((-1.0)*x14491*x14493))+((r02*x14494))+((r02*x14495))+(((-1.0)*px))+x14497+(((-1.0)*cj2*x14497))+((x14489*x14493))+((x14489*x14490))+(((-1.0)*sj2*x14498)));
evalcond[1]=(((r12*x14495))+((r12*x14494))+(((-1.0)*x14491*x14496))+(((-1.0)*x14491*x14492))+((sj2*x14497))+(((-1.0)*py))+x14498+(((-1.0)*cj2*x14498))+((x14489*x14492))+((x14489*x14496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14499=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14499;
j4eval[1]=IKsign(x14499);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14500=((1.0)*sj5);
IkReal x14501=(((cj5*r12))+(((-1.0)*r10*sj6*x14500))+(((-1.0)*cj6*r11*x14500)));
j4eval[0]=x14501;
j4eval[1]=IKsign(x14501);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14502=cj6*cj6;
IkReal x14503=cj5*cj5;
IkReal x14504=(cj5*sj5);
IkReal x14505=(cj6*r21);
IkReal x14506=((1.0)*r11);
IkReal x14507=(r10*r20);
IkReal x14508=(r10*sj6);
IkReal x14509=(r12*r22);
IkReal x14510=(r21*x14502);
IkReal x14511=(cj6*r20*sj6);
IkReal x14512=(r11*x14503);
IkReal x14513=((1.0)*x14503);
IkReal x14514=((((-1.0)*x14502*x14507*x14513))+((r11*r21))+(((-1.0)*x14505*x14508))+((r12*x14504*x14505))+(((-1.0)*x14509*x14513))+((x14511*x14512))+((r12*r20*sj6*x14504))+x14509+((r22*x14504*x14508))+((x14503*x14507))+((x14503*x14505*x14508))+((cj6*r11*r22*x14504))+(((-1.0)*x14506*x14511))+(((-1.0)*x14506*x14510))+((x14502*x14507))+((x14510*x14512)));
j4eval[0]=x14514;
j4eval[1]=IKsign(x14514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14515=cj6*cj6;
IkReal x14516=cj5*cj5;
IkReal x14517=((1.0)*r11);
IkReal x14518=(cj6*r20);
IkReal x14519=(cj0*cj2);
IkReal x14520=(cj5*r20);
IkReal x14521=(r12*r22);
IkReal x14522=(cj6*r21);
IkReal x14523=(sj0*sj2);
IkReal x14524=(r22*sj5);
IkReal x14525=(r12*sj5);
IkReal x14526=(r10*sj6);
IkReal x14527=(r21*x14515);
IkReal x14528=(sj6*x14523);
IkReal x14529=((1.0)*x14516);
IkReal x14530=(r10*x14516);
IkReal x14531=(r11*x14516);
IkReal x14532=(r10*r20*x14515);
CheckValue<IkReal> x14533=IKPowWithIntegerCheck(IKsign((((cj5*x14522*x14525))+(((-1.0)*x14517*x14527))+((r11*r21))+((cj5*cj6*r11*x14524))+(((-1.0)*x14522*x14526))+(((-1.0)*x14521*x14529))+((cj5*x14524*x14526))+x14521+x14532+(((-1.0)*x14529*x14532))+((sj6*x14520*x14525))+((x14516*x14522*x14526))+((r20*x14530))+((sj6*x14518*x14531))+(((-1.0)*sj6*x14517*x14518))+((x14527*x14531)))),-1);
if(!x14533.valid){
continue;
}
CheckValue<IkReal> x14534 = IKatan2WithCheck(IkReal((((cj5*x14522*x14523))+((x14520*x14528))+((x14523*x14524))+((x14519*x14524))+((cj5*x14519*x14522))+((sj6*x14519*x14520)))),IkReal(((((-1.0)*x14518*x14523))+(((-1.0)*x14518*x14519))+((r21*sj6*x14519))+((r21*x14528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14533.value)))+(x14534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14535=IKcos(j4);
IkReal x14536=IKsin(j4);
IkReal x14537=(cj0*sj2);
IkReal x14538=(cj0*cj2);
IkReal x14539=(cj5*sj6);
IkReal x14540=(cj5*r01);
IkReal x14541=(cj5*r21);
IkReal x14542=((1.0)*sj0);
IkReal x14543=(cj2*x14542);
IkReal x14544=(cj5*cj6*r11);
IkReal x14545=((1.0)*x14536);
IkReal x14546=(cj6*x14535);
IkReal x14547=(sj5*x14535);
IkReal x14548=(cj6*x14536);
IkReal x14549=(sj5*x14545);
IkReal x14550=((1.0)*sj6*x14535);
evalcond[0]=(((r20*x14535*x14539))+(((-1.0)*r21*sj6*x14545))+((x14541*x14546))+((r22*x14547))+((r20*x14548)));
evalcond[1]=((((-1.0)*cj6*x14541*x14545))+(((-1.0)*r21*x14550))+((r20*x14546))+(((-1.0)*r22*x14549))+(((-1.0)*r20*x14539*x14545)));
evalcond[2]=(((r12*x14547))+((r10*x14548))+x14537+((r10*x14535*x14539))+((x14535*x14544))+(((-1.0)*x14543))+(((-1.0)*r11*sj6*x14545)));
evalcond[3]=(((r02*x14547))+(((-1.0)*x14538))+(((-1.0)*sj2*x14542))+((r00*x14548))+((x14540*x14546))+((r00*x14535*x14539))+(((-1.0)*r01*sj6*x14545)));
evalcond[4]=(((r10*x14546))+(((-1.0)*r12*x14549))+((sj0*sj2))+x14538+(((-1.0)*r10*x14539*x14545))+(((-1.0)*r11*x14550))+(((-1.0)*x14544*x14545)));
evalcond[5]=((((-1.0)*r00*x14539*x14545))+((r00*x14546))+(((-1.0)*r01*x14550))+(((-1.0)*cj6*x14540*x14545))+x14537+(((-1.0)*r02*x14549))+(((-1.0)*x14543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14551=((1.0)*r21);
IkReal x14552=(sj0*sj2);
IkReal x14553=(cj0*cj2);
IkReal x14554=((1.0)*sj5);
IkReal x14555=(cj6*x14553);
IkReal x14556=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x14557 = IKatan2WithCheck(IkReal(((((-1.0)*x14553*x14556))+(((-1.0)*x14552*x14556))+(((-1.0)*cj5*cj6*x14551*x14552))+(((-1.0)*r22*x14552*x14554))+(((-1.0)*cj5*x14551*x14555))+(((-1.0)*r22*x14553*x14554)))),IkReal((((r20*x14555))+(((-1.0)*sj6*x14551*x14552))+(((-1.0)*sj6*x14551*x14553))+((cj6*r20*x14552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14557.valid){
continue;
}
CheckValue<IkReal> x14558=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x14554))+(((-1.0)*cj6*r11*x14554)))),-1);
if(!x14558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14557.value)+(((1.5707963267949)*(x14558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14559=IKcos(j4);
IkReal x14560=IKsin(j4);
IkReal x14561=(cj0*sj2);
IkReal x14562=(cj0*cj2);
IkReal x14563=(cj5*sj6);
IkReal x14564=(cj5*r01);
IkReal x14565=(cj5*r21);
IkReal x14566=((1.0)*sj0);
IkReal x14567=(cj2*x14566);
IkReal x14568=(cj5*cj6*r11);
IkReal x14569=((1.0)*x14560);
IkReal x14570=(cj6*x14559);
IkReal x14571=(sj5*x14559);
IkReal x14572=(cj6*x14560);
IkReal x14573=(sj5*x14569);
IkReal x14574=((1.0)*sj6*x14559);
evalcond[0]=(((r20*x14572))+((r20*x14559*x14563))+(((-1.0)*r21*sj6*x14569))+((r22*x14571))+((x14565*x14570)));
evalcond[1]=(((r20*x14570))+(((-1.0)*r22*x14573))+(((-1.0)*cj6*x14565*x14569))+(((-1.0)*r20*x14563*x14569))+(((-1.0)*r21*x14574)));
evalcond[2]=(((r10*x14559*x14563))+(((-1.0)*r11*sj6*x14569))+(((-1.0)*x14567))+x14561+((x14559*x14568))+((r10*x14572))+((r12*x14571)));
evalcond[3]=(((r00*x14559*x14563))+((r02*x14571))+(((-1.0)*r01*sj6*x14569))+(((-1.0)*sj2*x14566))+(((-1.0)*x14562))+((x14564*x14570))+((r00*x14572)));
evalcond[4]=((((-1.0)*r10*x14563*x14569))+(((-1.0)*r11*x14574))+((sj0*sj2))+(((-1.0)*r12*x14573))+x14562+((r10*x14570))+(((-1.0)*x14568*x14569)));
evalcond[5]=((((-1.0)*cj6*x14564*x14569))+(((-1.0)*r02*x14573))+(((-1.0)*x14567))+(((-1.0)*r01*x14574))+x14561+(((-1.0)*r00*x14563*x14569))+((r00*x14570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14575=(r22*sj5);
IkReal x14576=(cj6*r20);
IkReal x14577=(cj0*sj2);
IkReal x14578=(r21*sj6);
IkReal x14579=((1.0)*cj2*sj0);
IkReal x14580=(cj5*cj6*r21);
IkReal x14581=(cj5*r20*sj6);
CheckValue<IkReal> x14582=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x14582.valid){
continue;
}
CheckValue<IkReal> x14583 = IKatan2WithCheck(IkReal((((x14575*x14577))+(((-1.0)*x14575*x14579))+((x14577*x14580))+((x14577*x14581))+(((-1.0)*x14579*x14581))+(((-1.0)*x14579*x14580)))),IkReal((((cj2*sj0*x14576))+(((-1.0)*x14578*x14579))+(((-1.0)*x14576*x14577))+((x14577*x14578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14582.value)))+(x14583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14584=IKcos(j4);
IkReal x14585=IKsin(j4);
IkReal x14586=(cj0*sj2);
IkReal x14587=(cj0*cj2);
IkReal x14588=(cj5*sj6);
IkReal x14589=(cj5*r01);
IkReal x14590=(cj5*r21);
IkReal x14591=((1.0)*sj0);
IkReal x14592=(cj2*x14591);
IkReal x14593=(cj5*cj6*r11);
IkReal x14594=((1.0)*x14585);
IkReal x14595=(cj6*x14584);
IkReal x14596=(sj5*x14584);
IkReal x14597=(cj6*x14585);
IkReal x14598=(sj5*x14594);
IkReal x14599=((1.0)*sj6*x14584);
evalcond[0]=(((r20*x14597))+((x14590*x14595))+((r22*x14596))+((r20*x14584*x14588))+(((-1.0)*r21*sj6*x14594)));
evalcond[1]=(((r20*x14595))+(((-1.0)*r21*x14599))+(((-1.0)*r22*x14598))+(((-1.0)*cj6*x14590*x14594))+(((-1.0)*r20*x14588*x14594)));
evalcond[2]=((((-1.0)*x14592))+((r10*x14584*x14588))+x14586+((r10*x14597))+((r12*x14596))+(((-1.0)*r11*sj6*x14594))+((x14584*x14593)));
evalcond[3]=(((x14589*x14595))+(((-1.0)*r01*sj6*x14594))+((r00*x14584*x14588))+(((-1.0)*sj2*x14591))+(((-1.0)*x14587))+((r00*x14597))+((r02*x14596)));
evalcond[4]=((((-1.0)*r11*x14599))+(((-1.0)*r12*x14598))+(((-1.0)*x14593*x14594))+((sj0*sj2))+(((-1.0)*r10*x14588*x14594))+x14587+((r10*x14595)));
evalcond[5]=((((-1.0)*r02*x14598))+(((-1.0)*x14592))+(((-1.0)*r00*x14588*x14594))+(((-1.0)*cj6*x14589*x14594))+x14586+(((-1.0)*r01*x14599))+((r00*x14595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((9522.0)+(((9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14600=((1.0)*r21);
j4eval[0]=((IKabs((((cj6*r20))+(((-1.0)*sj6*x14600)))))+(IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*cj5*cj6*x14600))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x14601=((1.0)*cj5);
CheckValue<IkReal> x14603 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(((((-1.0)*r20*sj6*x14601))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x14601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14603.valid){
continue;
}
IkReal x14602=x14603.value;
j4array[0]=((-1.0)*x14602);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x14602)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x14604=IKcos(j4);
IkReal x14605=IKsin(j4);
IkReal x14606=(cj5*x14604);
evalcond[0]=(((r20*sj6*x14606))+((cj6*r20*x14605))+((r22*sj5*x14604))+((cj6*r21*x14606))+(((-1.0)*r21*sj6*x14605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14607=(r02*sj5);
IkReal x14608=(cj5*sj6);
IkReal x14609=(r00*sj2);
IkReal x14610=(cj6*sj4);
IkReal x14611=((1.0)*cj2);
IkReal x14612=(r12*sj5);
IkReal x14613=(cj4*sj2);
IkReal x14614=(cj4*x14611);
IkReal x14615=(cj5*cj6*r11);
IkReal x14616=((1.0)*x14613);
IkReal x14617=(cj5*cj6*r01);
IkReal x14618=(sj2*sj4*sj6);
IkReal x14619=(cj2*sj4*sj6);
if( IKabs(((((-1.0)*x14612*x14614))+(((-1.0)*r10*x14608*x14614))+((cj4*x14608*x14609))+((x14607*x14613))+(((-1.0)*r01*x14618))+((x14613*x14617))+(((-1.0)*x14614*x14615))+((x14609*x14610))+((r11*x14619))+(((-1.0)*r10*x14610*x14611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14612*x14616))+(((-1.0)*r10*x14608*x14616))+(((-1.0)*r00*x14608*x14614))+(((-1.0)*x14615*x14616))+(((-1.0)*r00*x14610*x14611))+((r01*x14619))+(((-1.0)*x14607*x14614))+(((-1.0)*x14614*x14617))+((r11*x14618))+(((-1.0)*r10*sj2*x14610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14612*x14614))+(((-1.0)*r10*x14608*x14614))+((cj4*x14608*x14609))+((x14607*x14613))+(((-1.0)*r01*x14618))+((x14613*x14617))+(((-1.0)*x14614*x14615))+((x14609*x14610))+((r11*x14619))+(((-1.0)*r10*x14610*x14611))))+IKsqr(((((-1.0)*x14612*x14616))+(((-1.0)*r10*x14608*x14616))+(((-1.0)*r00*x14608*x14614))+(((-1.0)*x14615*x14616))+(((-1.0)*r00*x14610*x14611))+((r01*x14619))+(((-1.0)*x14607*x14614))+(((-1.0)*x14614*x14617))+((r11*x14618))+(((-1.0)*r10*sj2*x14610))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x14612*x14614))+(((-1.0)*r10*x14608*x14614))+((cj4*x14608*x14609))+((x14607*x14613))+(((-1.0)*r01*x14618))+((x14613*x14617))+(((-1.0)*x14614*x14615))+((x14609*x14610))+((r11*x14619))+(((-1.0)*r10*x14610*x14611))), ((((-1.0)*x14612*x14616))+(((-1.0)*r10*x14608*x14616))+(((-1.0)*r00*x14608*x14614))+(((-1.0)*x14615*x14616))+(((-1.0)*r00*x14610*x14611))+((r01*x14619))+(((-1.0)*x14607*x14614))+(((-1.0)*x14614*x14617))+((r11*x14618))+(((-1.0)*r10*sj2*x14610))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14620=IKcos(j0);
IkReal x14621=IKsin(j0);
IkReal x14622=((1.0)*sj4);
IkReal x14623=(cj6*sj4);
IkReal x14624=((0.37429)*sj5);
IkReal x14625=(r10*sj6);
IkReal x14626=((0.069)*sj2);
IkReal x14627=(r01*sj6);
IkReal x14628=((0.37429)*cj5);
IkReal x14629=(cj6*r01);
IkReal x14630=((0.01)*cj5);
IkReal x14631=(r12*sj5);
IkReal x14632=(r00*sj6);
IkReal x14633=(r02*sj5);
IkReal x14634=(cj4*cj6);
IkReal x14635=(cj4*cj5);
IkReal x14636=((1.0)*cj4);
IkReal x14637=(r11*sj6);
IkReal x14638=(cj2*x14620);
IkReal x14639=(cj5*cj6*r11);
IkReal x14640=((0.069)*x14621);
IkReal x14641=(sj2*x14620);
IkReal x14642=(cj2*x14621);
IkReal x14643=((1.0)*sj2*x14621);
evalcond[0]=(((cj4*x14631))+(((-1.0)*x14622*x14637))+((cj5*r11*x14634))+((r10*x14623))+((x14625*x14635))+x14641+x14642);
evalcond[1]=(((cj4*x14633))+((x14629*x14635))+(((-1.0)*x14622*x14627))+x14638+(((-1.0)*x14643))+((r00*x14623))+((x14632*x14635)));
evalcond[2]=((((-1.0)*x14622*x14631))+(((-1.0)*x14622*x14639))+(((-1.0)*x14636*x14637))+((r10*x14634))+(((-1.0)*cj5*x14622*x14625))+x14638+(((-1.0)*x14643)));
evalcond[3]=((((-1.0)*x14627*x14636))+(((-1.0)*x14641))+(((-1.0)*x14642))+(((-1.0)*x14622*x14633))+(((-1.0)*cj5*x14622*x14632))+(((-1.0)*cj5*x14622*x14629))+((r00*x14634)));
evalcond[4]=((((-1.0)*x14624*x14632))+(((0.01)*x14633))+((x14629*x14630))+(((0.069)*x14620))+(((-1.0)*x14621*x14626))+((r02*x14628))+((x14630*x14632))+(((-1.0)*px))+(((0.069)*x14638))+(((-1.0)*x14624*x14629)));
evalcond[5]=(((x14620*x14626))+((cj6*r11*x14630))+(((0.01)*x14631))+(((-1.0)*cj6*r11*x14624))+(((-1.0)*py))+((x14625*x14630))+((r12*x14628))+x14640+((cj2*x14640))+(((-1.0)*x14624*x14625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14645 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14645.valid){
continue;
}
IkReal x14644=x14645.value;
j4array[0]=((-1.0)*x14644);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x14644)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x14646=IKsin(j4);
IkReal x14647=IKcos(j4);
IkReal x14648=((1.0)*x14646);
evalcond[0]=(((cj6*r20*x14647))+(((-1.0)*cj5*cj6*r21*x14648))+(((-1.0)*r22*sj5*x14648))+(((-1.0)*cj5*r20*sj6*x14648))+(((-1.0)*r21*sj6*x14647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14649=(r02*sj5);
IkReal x14650=(cj5*sj6);
IkReal x14651=(r00*sj2);
IkReal x14652=(cj6*sj4);
IkReal x14653=((1.0)*cj2);
IkReal x14654=(r12*sj5);
IkReal x14655=(cj4*sj2);
IkReal x14656=(cj4*x14653);
IkReal x14657=(cj5*cj6*r11);
IkReal x14658=((1.0)*x14655);
IkReal x14659=(cj5*cj6*r01);
IkReal x14660=(sj2*sj4*sj6);
IkReal x14661=(cj2*sj4*sj6);
if( IKabs(((((-1.0)*r10*x14652*x14653))+(((-1.0)*x14656*x14657))+(((-1.0)*x14654*x14656))+((x14655*x14659))+(((-1.0)*r01*x14660))+((cj4*x14650*x14651))+((r11*x14661))+((x14649*x14655))+((x14651*x14652))+(((-1.0)*r10*x14650*x14656)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14656*x14659))+(((-1.0)*x14654*x14658))+(((-1.0)*r00*x14650*x14656))+(((-1.0)*r10*sj2*x14652))+((r01*x14661))+(((-1.0)*r00*x14652*x14653))+(((-1.0)*x14649*x14656))+((r11*x14660))+(((-1.0)*x14657*x14658))+(((-1.0)*r10*x14650*x14658)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x14652*x14653))+(((-1.0)*x14656*x14657))+(((-1.0)*x14654*x14656))+((x14655*x14659))+(((-1.0)*r01*x14660))+((cj4*x14650*x14651))+((r11*x14661))+((x14649*x14655))+((x14651*x14652))+(((-1.0)*r10*x14650*x14656))))+IKsqr(((((-1.0)*x14656*x14659))+(((-1.0)*x14654*x14658))+(((-1.0)*r00*x14650*x14656))+(((-1.0)*r10*sj2*x14652))+((r01*x14661))+(((-1.0)*r00*x14652*x14653))+(((-1.0)*x14649*x14656))+((r11*x14660))+(((-1.0)*x14657*x14658))+(((-1.0)*r10*x14650*x14658))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x14652*x14653))+(((-1.0)*x14656*x14657))+(((-1.0)*x14654*x14656))+((x14655*x14659))+(((-1.0)*r01*x14660))+((cj4*x14650*x14651))+((r11*x14661))+((x14649*x14655))+((x14651*x14652))+(((-1.0)*r10*x14650*x14656))), ((((-1.0)*x14656*x14659))+(((-1.0)*x14654*x14658))+(((-1.0)*r00*x14650*x14656))+(((-1.0)*r10*sj2*x14652))+((r01*x14661))+(((-1.0)*r00*x14652*x14653))+(((-1.0)*x14649*x14656))+((r11*x14660))+(((-1.0)*x14657*x14658))+(((-1.0)*r10*x14650*x14658))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14662=IKcos(j0);
IkReal x14663=IKsin(j0);
IkReal x14664=((1.0)*sj4);
IkReal x14665=(cj6*sj4);
IkReal x14666=((0.37429)*sj5);
IkReal x14667=(r10*sj6);
IkReal x14668=((0.069)*sj2);
IkReal x14669=(r01*sj6);
IkReal x14670=((0.37429)*cj5);
IkReal x14671=(cj6*r01);
IkReal x14672=((0.01)*cj5);
IkReal x14673=(r12*sj5);
IkReal x14674=(r00*sj6);
IkReal x14675=(r02*sj5);
IkReal x14676=(cj4*cj6);
IkReal x14677=(cj4*cj5);
IkReal x14678=((1.0)*cj4);
IkReal x14679=(r11*sj6);
IkReal x14680=(cj2*x14662);
IkReal x14681=(cj5*cj6*r11);
IkReal x14682=((0.069)*x14663);
IkReal x14683=(sj2*x14662);
IkReal x14684=(cj2*x14663);
IkReal x14685=((1.0)*sj2*x14663);
evalcond[0]=(((r10*x14665))+((cj4*x14673))+((x14667*x14677))+x14684+x14683+(((-1.0)*x14664*x14679))+((cj5*r11*x14676)));
evalcond[1]=((((-1.0)*x14664*x14669))+((cj4*x14675))+((r00*x14665))+(((-1.0)*x14685))+((x14671*x14677))+x14680+((x14674*x14677)));
evalcond[2]=(((r10*x14676))+(((-1.0)*x14664*x14681))+(((-1.0)*x14685))+(((-1.0)*cj5*x14664*x14667))+x14680+(((-1.0)*x14678*x14679))+(((-1.0)*x14664*x14673)));
evalcond[3]=((((-1.0)*x14669*x14678))+((r00*x14676))+(((-1.0)*cj5*x14664*x14674))+(((-1.0)*cj5*x14664*x14671))+(((-1.0)*x14664*x14675))+(((-1.0)*x14683))+(((-1.0)*x14684)));
evalcond[4]=((((0.069)*x14680))+((r02*x14670))+((x14672*x14674))+(((-1.0)*x14666*x14671))+(((-1.0)*x14666*x14674))+(((-1.0)*x14663*x14668))+(((-1.0)*px))+((x14671*x14672))+(((0.069)*x14662))+(((0.01)*x14675)));
evalcond[5]=((((-1.0)*cj6*r11*x14666))+((cj2*x14682))+((x14662*x14668))+((cj6*r11*x14672))+(((-1.0)*x14666*x14667))+(((-1.0)*py))+((x14667*x14672))+x14682+((r12*x14670))+(((0.01)*x14673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14686=((690.0)*sj5);
IkReal x14687=(cj5*sj2);
IkReal x14688=((25826.01)*r02);
IkReal x14689=(cj6*r11);
IkReal x14690=((25826.01)*sj5);
IkReal x14691=(r10*sj6);
IkReal x14692=((25826.01)*r12);
IkReal x14693=(cj6*r01);
IkReal x14694=((69000.0)*py);
IkReal x14695=((69000.0)*px);
IkReal x14696=((690.0)*cj5);
IkReal x14697=(cj2*cj5);
IkReal x14698=(r00*sj6);
IkReal x14699=(cj2*x14696);
IkReal x14700=((690.0)*x14698);
CheckValue<IkReal> x14701=IKPowWithIntegerCheck(IKsign(((9522.0)+(((9522.0)*cj2)))),-1);
if(!x14701.valid){
continue;
}
CheckValue<IkReal> x14702 = IKatan2WithCheck(IkReal((((cj2*x14690*x14691))+((cj2*x14694))+(((-1.0)*cj5*x14692))+(((-1.0)*sj2*x14690*x14698))+(((-1.0)*sj2*x14690*x14693))+((x14690*x14691))+((r02*sj2*x14686))+((cj2*x14689*x14690))+(((-1.0)*sj2*x14695))+x14694+(((-1.0)*cj2*r12*x14686))+((x14689*x14690))+((x14687*x14688))+(((690.0)*x14687*x14693))+((x14687*x14700))+(((-1.0)*r12*x14686))+(((-1.0)*x14691*x14699))+(((-1.0)*x14691*x14696))+(((-1.0)*x14692*x14697))+(((-1.0)*x14689*x14696))+(((-1.0)*x14689*x14699)))),IkReal(((((-1.0)*r12*sj2*x14686))+((cj2*x14690*x14693))+((cj2*x14690*x14698))+(((-1.0)*cj5*x14688))+((cj2*x14695))+(((-1.0)*x14696*x14698))+((sj2*x14694))+(((-1.0)*r02*x14686))+(((-690.0)*x14687*x14691))+(((-690.0)*x14687*x14689))+((sj2*x14690*x14691))+(((-1.0)*cj2*r02*x14686))+((x14690*x14693))+((x14690*x14698))+x14695+(((-1.0)*x14693*x14699))+(((-1.0)*x14693*x14696))+(((-1.0)*x14698*x14699))+(((-1.0)*x14688*x14697))+(((-1.0)*x14687*x14692))+((sj2*x14689*x14690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14702.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14701.value)))+(x14702.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x14703=IKcos(j0);
IkReal x14704=IKsin(j0);
IkReal x14705=((0.01)*cj5);
IkReal x14706=(cj6*r01);
IkReal x14707=((0.37429)*sj5);
IkReal x14708=(cj6*r11);
IkReal x14709=(r00*sj6);
IkReal x14710=((0.01)*sj5);
IkReal x14711=((0.37429)*cj5);
IkReal x14712=(r10*sj6);
IkReal x14713=((0.069)*x14703);
IkReal x14714=((0.069)*x14704);
evalcond[0]=((((-1.0)*x14706*x14707))+((cj2*x14713))+((r02*x14710))+((r02*x14711))+((x14705*x14709))+((x14705*x14706))+(((-1.0)*px))+x14713+(((-1.0)*x14707*x14709))+(((-1.0)*sj2*x14714)));
evalcond[1]=(((r12*x14710))+((r12*x14711))+((cj2*x14714))+((x14705*x14708))+(((-1.0)*x14707*x14712))+((sj2*x14713))+(((-1.0)*py))+x14714+((x14705*x14712))+(((-1.0)*x14707*x14708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14715=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14715;
j4eval[1]=IKsign(x14715);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14716=((1.0)*sj5);
IkReal x14717=(((cj5*r12))+(((-1.0)*r10*sj6*x14716))+(((-1.0)*cj6*r11*x14716)));
j4eval[0]=x14717;
j4eval[1]=IKsign(x14717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14718=cj6*cj6;
IkReal x14719=cj5*cj5;
IkReal x14720=(cj5*sj5);
IkReal x14721=(cj6*r21);
IkReal x14722=((1.0)*r11);
IkReal x14723=(r10*r20);
IkReal x14724=(r10*sj6);
IkReal x14725=(r12*r22);
IkReal x14726=(r21*x14718);
IkReal x14727=(cj6*r20*sj6);
IkReal x14728=(r11*x14719);
IkReal x14729=((1.0)*x14719);
IkReal x14730=((((-1.0)*x14722*x14726))+(((-1.0)*x14722*x14727))+((x14719*x14723))+((r11*r21))+((r12*x14720*x14721))+((r12*r20*sj6*x14720))+((x14727*x14728))+((x14726*x14728))+((x14718*x14723))+((x14719*x14721*x14724))+((r22*x14720*x14724))+((cj6*r11*r22*x14720))+x14725+(((-1.0)*x14718*x14723*x14729))+(((-1.0)*x14725*x14729))+(((-1.0)*x14721*x14724)));
j4eval[0]=x14730;
j4eval[1]=IKsign(x14730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14731=cj6*cj6;
IkReal x14732=cj5*cj5;
IkReal x14733=((1.0)*r11);
IkReal x14734=((1.0)*r20);
IkReal x14735=(cj0*cj2);
IkReal x14736=(r12*r22);
IkReal x14737=(cj6*sj6);
IkReal x14738=((1.0)*r21);
IkReal x14739=(r22*sj5);
IkReal x14740=(sj0*sj2);
IkReal x14741=(r12*sj5);
IkReal x14742=(cj5*sj6);
IkReal x14743=(r21*x14731);
IkReal x14744=(cj5*x14740);
IkReal x14745=(r10*x14732);
IkReal x14746=(r11*x14732);
IkReal x14747=(cj5*cj6*r21);
CheckValue<IkReal> x14748 = IKatan2WithCheck(IkReal(((((-1.0)*x14734*x14740*x14742))+((x14735*x14747))+((x14735*x14739))+((r20*x14735*x14742))+(((-1.0)*cj6*x14738*x14744))+(((-1.0)*x14739*x14740)))),IkReal(((((-1.0)*cj6*x14734*x14735))+((r21*sj6*x14735))+((cj6*r20*x14740))+(((-1.0)*sj6*x14738*x14740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14748.valid){
continue;
}
CheckValue<IkReal> x14749=IKPowWithIntegerCheck(IKsign((((r20*x14737*x14746))+((r11*r21))+(((-1.0)*x14731*x14734*x14745))+((r20*x14741*x14742))+((x14743*x14746))+((x14741*x14747))+(((-1.0)*x14733*x14743))+((r10*r20*x14731))+((r21*x14737*x14745))+((r10*x14739*x14742))+(((-1.0)*x14732*x14736))+x14736+((r20*x14745))+((cj5*cj6*r11*x14739))+(((-1.0)*r10*x14737*x14738))+(((-1.0)*r20*x14733*x14737)))),-1);
if(!x14749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14748.value)+(((1.5707963267949)*(x14749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14750=IKcos(j4);
IkReal x14751=IKsin(j4);
IkReal x14752=(cj0*cj2);
IkReal x14753=(cj5*sj6);
IkReal x14754=(cj5*r01);
IkReal x14755=(cj0*sj2);
IkReal x14756=(cj5*r21);
IkReal x14757=((1.0)*sj0);
IkReal x14758=(sj2*x14757);
IkReal x14759=(cj5*cj6*r11);
IkReal x14760=((1.0)*x14751);
IkReal x14761=(cj6*x14750);
IkReal x14762=(sj5*x14750);
IkReal x14763=(cj6*x14751);
IkReal x14764=(sj5*x14760);
IkReal x14765=((1.0)*sj6*x14750);
evalcond[0]=(((r20*x14763))+(((-1.0)*r21*sj6*x14760))+((r22*x14762))+((x14756*x14761))+((r20*x14750*x14753)));
evalcond[1]=((((-1.0)*r20*x14753*x14760))+((r20*x14761))+(((-1.0)*r21*x14765))+(((-1.0)*cj6*x14756*x14760))+(((-1.0)*r22*x14764)));
evalcond[2]=(((cj2*sj0))+((r10*x14763))+((r12*x14762))+x14755+(((-1.0)*r11*sj6*x14760))+((r10*x14750*x14753))+((x14750*x14759)));
evalcond[3]=(((r00*x14750*x14753))+((r00*x14763))+(((-1.0)*r01*sj6*x14760))+((r02*x14762))+x14752+((x14754*x14761))+(((-1.0)*x14758)));
evalcond[4]=(((r10*x14761))+(((-1.0)*x14759*x14760))+(((-1.0)*r11*x14765))+(((-1.0)*r12*x14764))+(((-1.0)*r10*x14753*x14760))+x14752+(((-1.0)*x14758)));
evalcond[5]=((((-1.0)*r01*x14765))+(((-1.0)*r02*x14764))+(((-1.0)*r00*x14753*x14760))+((r00*x14761))+(((-1.0)*cj2*x14757))+(((-1.0)*cj6*x14754*x14760))+(((-1.0)*x14755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14766=(r21*sj6);
IkReal x14767=(sj0*sj2);
IkReal x14768=((1.0)*cj6);
IkReal x14769=(cj5*sj6);
IkReal x14770=(cj0*cj2);
IkReal x14771=(cj5*r21);
IkReal x14772=((1.0)*sj5);
IkReal x14773=(r20*x14770);
CheckValue<IkReal> x14774 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x14767*x14769))+(((-1.0)*r22*x14767*x14772))+((x14769*x14773))+((cj6*x14770*x14771))+(((-1.0)*x14767*x14768*x14771))+((r22*sj5*x14770)))),IkReal(((((-1.0)*x14768*x14773))+((cj6*r20*x14767))+(((-1.0)*x14766*x14767))+((x14766*x14770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14774.valid){
continue;
}
CheckValue<IkReal> x14775=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x14772))+(((-1.0)*r11*sj5*x14768)))),-1);
if(!x14775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14774.value)+(((1.5707963267949)*(x14775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14776=IKcos(j4);
IkReal x14777=IKsin(j4);
IkReal x14778=(cj0*cj2);
IkReal x14779=(cj5*sj6);
IkReal x14780=(cj5*r01);
IkReal x14781=(cj0*sj2);
IkReal x14782=(cj5*r21);
IkReal x14783=((1.0)*sj0);
IkReal x14784=(sj2*x14783);
IkReal x14785=(cj5*cj6*r11);
IkReal x14786=((1.0)*x14777);
IkReal x14787=(cj6*x14776);
IkReal x14788=(sj5*x14776);
IkReal x14789=(cj6*x14777);
IkReal x14790=(sj5*x14786);
IkReal x14791=((1.0)*sj6*x14776);
evalcond[0]=(((x14782*x14787))+(((-1.0)*r21*sj6*x14786))+((r20*x14789))+((r20*x14776*x14779))+((r22*x14788)));
evalcond[1]=((((-1.0)*r20*x14779*x14786))+((r20*x14787))+(((-1.0)*r21*x14791))+(((-1.0)*r22*x14790))+(((-1.0)*cj6*x14782*x14786)));
evalcond[2]=(((cj2*sj0))+((r10*x14789))+((r10*x14776*x14779))+((r12*x14788))+(((-1.0)*r11*sj6*x14786))+x14781+((x14776*x14785)));
evalcond[3]=(((x14780*x14787))+((r00*x14789))+(((-1.0)*r01*sj6*x14786))+((r02*x14788))+x14778+((r00*x14776*x14779))+(((-1.0)*x14784)));
evalcond[4]=(((r10*x14787))+(((-1.0)*r10*x14779*x14786))+(((-1.0)*x14785*x14786))+(((-1.0)*r12*x14790))+(((-1.0)*r11*x14791))+x14778+(((-1.0)*x14784)));
evalcond[5]=((((-1.0)*r00*x14779*x14786))+(((-1.0)*r01*x14791))+(((-1.0)*r02*x14790))+((r00*x14787))+(((-1.0)*x14781))+(((-1.0)*cj2*x14783))+(((-1.0)*cj6*x14780*x14786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14792=(cj5*r21);
IkReal x14793=(cj0*sj2);
IkReal x14794=(r22*sj5);
IkReal x14795=((1.0)*r20);
IkReal x14796=(cj5*r20);
IkReal x14797=(cj2*cj6*sj0);
IkReal x14798=(cj2*sj0*sj6);
CheckValue<IkReal> x14799 = IKatan2WithCheck(IkReal((((x14796*x14798))+((x14792*x14797))+((x14793*x14794))+((cj2*sj0*x14794))+((cj6*x14792*x14793))+((sj6*x14793*x14796)))),IkReal(((((-1.0)*cj6*x14793*x14795))+((r21*sj6*x14793))+(((-1.0)*x14795*x14797))+((r21*x14798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14799.valid){
continue;
}
CheckValue<IkReal> x14800=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x14800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14799.value)+(((1.5707963267949)*(x14800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14801=IKcos(j4);
IkReal x14802=IKsin(j4);
IkReal x14803=(cj0*cj2);
IkReal x14804=(cj5*sj6);
IkReal x14805=(cj5*r01);
IkReal x14806=(cj0*sj2);
IkReal x14807=(cj5*r21);
IkReal x14808=((1.0)*sj0);
IkReal x14809=(sj2*x14808);
IkReal x14810=(cj5*cj6*r11);
IkReal x14811=((1.0)*x14802);
IkReal x14812=(cj6*x14801);
IkReal x14813=(sj5*x14801);
IkReal x14814=(cj6*x14802);
IkReal x14815=(sj5*x14811);
IkReal x14816=((1.0)*sj6*x14801);
evalcond[0]=(((r22*x14813))+(((-1.0)*r21*sj6*x14811))+((x14807*x14812))+((r20*x14814))+((r20*x14801*x14804)));
evalcond[1]=((((-1.0)*r20*x14804*x14811))+(((-1.0)*r21*x14816))+(((-1.0)*r22*x14815))+(((-1.0)*cj6*x14807*x14811))+((r20*x14812)));
evalcond[2]=(((cj2*sj0))+x14806+((r10*x14814))+((r10*x14801*x14804))+(((-1.0)*r11*sj6*x14811))+((x14801*x14810))+((r12*x14813)));
evalcond[3]=(((r00*x14801*x14804))+x14803+(((-1.0)*x14809))+(((-1.0)*r01*sj6*x14811))+((r00*x14814))+((x14805*x14812))+((r02*x14813)));
evalcond[4]=(x14803+((r10*x14812))+(((-1.0)*x14809))+(((-1.0)*r12*x14815))+(((-1.0)*r11*x14816))+(((-1.0)*r10*x14804*x14811))+(((-1.0)*x14810*x14811)));
evalcond[5]=((((-1.0)*r02*x14815))+(((-1.0)*r01*x14816))+(((-1.0)*r00*x14804*x14811))+(((-1.0)*cj2*x14808))+((r00*x14812))+(((-1.0)*cj6*x14805*x14811))+(((-1.0)*x14806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14817=(cj1*r12);
IkReal x14818=(cj5*r02);
IkReal x14819=((69.0)*sj2);
IkReal x14820=((69.0)*cj1);
IkReal x14821=(cj6*r11);
IkReal x14822=(r10*sj6);
IkReal x14823=(cj6*r01*sj5);
IkReal x14824=(r00*sj5*sj6);
IkReal x14825=((374.29)*cj1*sj5);
IkReal x14826=((10.0)*cj1*cj5);
CheckValue<IkReal> x14827=IKPowWithIntegerCheck(((((364.42)*(cj1*cj1)))+x14820+(((-1.0)*cj2*sj1*x14820))),-1);
if(!x14827.valid){
continue;
}
CheckValue<IkReal> x14828=IKPowWithIntegerCheck(cj1,-1);
if(!x14828.valid){
continue;
}
if( IKabs(((x14827.value)*(((((-10.0)*sj5*x14817))+((x14822*x14825))+(((1000.0)*cj1*py))+((x14821*x14825))+(((-1.0)*x14821*x14826))+(((-1.0)*x14822*x14826))+(((-1.0)*x14819*x14823))+(((-1.0)*x14819*x14824))+(((-374.29)*cj5*x14817))+((x14818*x14819)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14828.value)*((x14823+x14824+(((-1.0)*x14818)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14827.value)*(((((-10.0)*sj5*x14817))+((x14822*x14825))+(((1000.0)*cj1*py))+((x14821*x14825))+(((-1.0)*x14821*x14826))+(((-1.0)*x14822*x14826))+(((-1.0)*x14819*x14823))+(((-1.0)*x14819*x14824))+(((-374.29)*cj5*x14817))+((x14818*x14819))))))+IKsqr(((x14828.value)*((x14823+x14824+(((-1.0)*x14818))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14827.value)*(((((-10.0)*sj5*x14817))+((x14822*x14825))+(((1000.0)*cj1*py))+((x14821*x14825))+(((-1.0)*x14821*x14826))+(((-1.0)*x14822*x14826))+(((-1.0)*x14819*x14823))+(((-1.0)*x14819*x14824))+(((-374.29)*cj5*x14817))+((x14818*x14819))))), ((x14828.value)*((x14823+x14824+(((-1.0)*x14818))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x14829=IKcos(j0);
IkReal x14830=IKsin(j0);
IkReal x14831=((0.01)*cj5);
IkReal x14832=(cj6*r11);
IkReal x14833=(r10*sj6);
IkReal x14834=((0.37429)*sj5);
IkReal x14835=(cj5*r12);
IkReal x14836=((1.0)*cj1);
IkReal x14837=((0.36442)*cj1);
IkReal x14838=(r00*sj6);
IkReal x14839=(cj6*r01);
IkReal x14840=(cj5*r02);
IkReal x14841=(cj2*sj1);
IkReal x14842=((0.01)*sj5);
IkReal x14843=((0.069)*x14830);
IkReal x14844=((0.069)*x14829);
evalcond[0]=((((-1.0)*x14829*x14836))+(((-1.0)*x14840))+((sj5*x14838))+((sj5*x14839)));
evalcond[1]=((((-1.0)*x14830*x14836))+(((-1.0)*x14835))+((sj5*x14833))+((sj5*x14832)));
evalcond[2]=(((r02*x14842))+(((0.37429)*x14840))+(((-1.0)*sj2*x14843))+x14844+((x14831*x14838))+((x14831*x14839))+(((-1.0)*x14834*x14839))+(((-1.0)*x14834*x14838))+(((-1.0)*px))+(((-1.0)*x14841*x14844))+((x14829*x14837)));
evalcond[3]=((((-1.0)*x14833*x14834))+((x14830*x14837))+x14843+((sj2*x14844))+((x14831*x14833))+((x14831*x14832))+(((-1.0)*py))+(((0.37429)*x14835))+((r12*x14842))+(((-1.0)*x14841*x14843))+(((-1.0)*x14832*x14834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14845=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14845;
j4eval[1]=IKsign(x14845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14846=((1.0)*sj5);
IkReal x14847=(((cj5*r12))+(((-1.0)*cj6*r11*x14846))+(((-1.0)*r10*sj6*x14846)));
j4eval[0]=x14847;
j4eval[1]=IKsign(x14847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14848=cj5*cj5;
IkReal x14849=cj6*cj6;
IkReal x14850=r22*r22;
IkReal x14851=r21*r21;
IkReal x14852=r20*r20;
IkReal x14853=((1.0)*cj5);
IkReal x14854=(cj6*r21);
IkReal x14855=(r20*sj6);
IkReal x14856=(cj1*cj2);
IkReal x14857=(cj1*sj2);
IkReal x14858=(r22*sj5);
IkReal x14859=(cj6*r20);
IkReal x14860=((2.0)*cj5);
IkReal x14861=(sj6*x14856);
IkReal x14862=((1.0)*x14851);
IkReal x14863=(x14849*x14852);
IkReal x14864=((((-1.0)*x14848*x14852))+(((-2.0)*x14848*x14854*x14855))+((x14848*x14863))+((x14848*x14850))+(((2.0)*x14854*x14855))+((x14849*x14851))+(((-1.0)*x14862))+(((-1.0)*x14854*x14858*x14860))+(((-1.0)*x14848*x14849*x14862))+(((-1.0)*x14863))+(((-1.0)*x14855*x14858*x14860))+(((-1.0)*x14850)));
j4eval[0]=x14864;
j4eval[1]=IKsign(x14864);
j4eval[2]=((IKabs(((((-1.0)*x14856*x14858))+(((-1.0)*x14853*x14855*x14856))+((x14857*x14859))+(((-1.0)*x14853*x14854*x14856))+(((-1.0)*r21*sj6*x14857)))))+(IKabs(((((-1.0)*x14856*x14859))+(((-1.0)*x14857*x14858))+(((-1.0)*x14853*x14855*x14857))+(((-1.0)*x14853*x14854*x14857))+((r21*x14861))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14865=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14865;
j4eval[1]=IKsign(x14865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14866=((1.0)*sj5);
IkReal x14867=(((cj5*r12))+(((-1.0)*r10*sj6*x14866))+(((-1.0)*cj6*r11*x14866)));
j4eval[0]=x14867;
j4eval[1]=IKsign(x14867);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14868=cj6*cj6;
IkReal x14869=cj5*cj5;
IkReal x14870=(cj5*sj5);
IkReal x14871=(cj6*r21);
IkReal x14872=((1.0)*r11);
IkReal x14873=(r10*r20);
IkReal x14874=(r10*sj6);
IkReal x14875=(r12*r22);
IkReal x14876=(r21*x14868);
IkReal x14877=(cj6*r20*sj6);
IkReal x14878=(r11*x14869);
IkReal x14879=((1.0)*x14869);
IkReal x14880=(((x14868*x14873))+(((-1.0)*x14875*x14879))+((x14869*x14871*x14874))+(((-1.0)*x14872*x14877))+(((-1.0)*x14872*x14876))+((r12*r20*sj6*x14870))+(((-1.0)*x14871*x14874))+((r11*r21))+((r12*x14870*x14871))+x14875+((x14877*x14878))+((x14876*x14878))+(((-1.0)*x14868*x14873*x14879))+((cj6*r11*r22*x14870))+((x14869*x14873))+((r22*x14870*x14874)));
j4eval[0]=x14880;
j4eval[1]=IKsign(x14880);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14881=cj6*cj6;
IkReal x14882=cj5*cj5;
IkReal x14883=((1.0)*r11);
IkReal x14884=(cj6*r20);
IkReal x14885=(cj0*cj2);
IkReal x14886=(cj5*r20);
IkReal x14887=(r12*r22);
IkReal x14888=(cj6*r21);
IkReal x14889=(sj0*sj2);
IkReal x14890=(r22*sj5);
IkReal x14891=(r12*sj5);
IkReal x14892=(r10*sj6);
IkReal x14893=(r21*x14881);
IkReal x14894=(sj6*x14889);
IkReal x14895=((1.0)*x14882);
IkReal x14896=(r10*x14882);
IkReal x14897=(r11*x14882);
IkReal x14898=(r10*r20*x14881);
CheckValue<IkReal> x14899=IKPowWithIntegerCheck(IKsign((((x14882*x14888*x14892))+(((-1.0)*sj6*x14883*x14884))+((r11*r21))+((cj5*x14888*x14891))+((x14893*x14897))+x14898+x14887+(((-1.0)*x14888*x14892))+(((-1.0)*x14895*x14898))+((cj5*cj6*r11*x14890))+((cj5*x14890*x14892))+(((-1.0)*x14883*x14893))+((sj6*x14886*x14891))+(((-1.0)*x14887*x14895))+((sj6*x14884*x14897))+((r20*x14896)))),-1);
if(!x14899.valid){
continue;
}
CheckValue<IkReal> x14900 = IKatan2WithCheck(IkReal((((x14886*x14894))+((x14885*x14890))+((x14889*x14890))+((cj5*x14888*x14889))+((sj6*x14885*x14886))+((cj5*x14885*x14888)))),IkReal((((r21*x14894))+(((-1.0)*x14884*x14889))+(((-1.0)*x14884*x14885))+((r21*sj6*x14885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14899.value)))+(x14900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14901=IKcos(j4);
IkReal x14902=IKsin(j4);
IkReal x14903=(cj0*sj2);
IkReal x14904=(cj0*cj2);
IkReal x14905=(cj5*sj6);
IkReal x14906=(cj5*r01);
IkReal x14907=(cj5*r21);
IkReal x14908=((1.0)*sj0);
IkReal x14909=(cj2*x14908);
IkReal x14910=(cj5*cj6*r11);
IkReal x14911=((1.0)*x14902);
IkReal x14912=(cj6*x14901);
IkReal x14913=(sj5*x14901);
IkReal x14914=(cj6*x14902);
IkReal x14915=(sj5*x14911);
IkReal x14916=((1.0)*sj6*x14901);
evalcond[0]=(((r22*x14913))+((r20*x14901*x14905))+(((-1.0)*r21*sj6*x14911))+((r20*x14914))+((x14907*x14912)));
evalcond[1]=((((-1.0)*r22*x14915))+(((-1.0)*cj6*x14907*x14911))+(((-1.0)*r20*x14905*x14911))+((r20*x14912))+(((-1.0)*r21*x14916)));
evalcond[2]=(((r10*x14914))+(((-1.0)*r11*sj6*x14911))+x14903+(((-1.0)*x14909))+((x14901*x14910))+((r12*x14913))+((r10*x14901*x14905)));
evalcond[3]=(((x14906*x14912))+((r00*x14914))+(((-1.0)*x14904))+((r02*x14913))+((r00*x14901*x14905))+(((-1.0)*r01*sj6*x14911))+(((-1.0)*sj2*x14908)));
evalcond[4]=(((r10*x14912))+(((-1.0)*r10*x14905*x14911))+(((-1.0)*r11*x14916))+(((-1.0)*r12*x14915))+x14904+(((-1.0)*x14910*x14911))+((sj0*sj2)));
evalcond[5]=(((r00*x14912))+(((-1.0)*r02*x14915))+x14903+(((-1.0)*x14909))+(((-1.0)*cj6*x14906*x14911))+(((-1.0)*r01*x14916))+(((-1.0)*r00*x14905*x14911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14917=((1.0)*r21);
IkReal x14918=(sj0*sj2);
IkReal x14919=(cj0*cj2);
IkReal x14920=((1.0)*sj5);
IkReal x14921=(cj6*x14919);
IkReal x14922=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x14923 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x14917*x14921))+(((-1.0)*x14918*x14922))+(((-1.0)*cj5*cj6*x14917*x14918))+(((-1.0)*r22*x14918*x14920))+(((-1.0)*x14919*x14922))+(((-1.0)*r22*x14919*x14920)))),IkReal(((((-1.0)*sj6*x14917*x14918))+(((-1.0)*sj6*x14917*x14919))+((cj6*r20*x14918))+((r20*x14921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14923.valid){
continue;
}
CheckValue<IkReal> x14924=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x14920))+(((-1.0)*cj6*r11*x14920)))),-1);
if(!x14924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14923.value)+(((1.5707963267949)*(x14924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14925=IKcos(j4);
IkReal x14926=IKsin(j4);
IkReal x14927=(cj0*sj2);
IkReal x14928=(cj0*cj2);
IkReal x14929=(cj5*sj6);
IkReal x14930=(cj5*r01);
IkReal x14931=(cj5*r21);
IkReal x14932=((1.0)*sj0);
IkReal x14933=(cj2*x14932);
IkReal x14934=(cj5*cj6*r11);
IkReal x14935=((1.0)*x14926);
IkReal x14936=(cj6*x14925);
IkReal x14937=(sj5*x14925);
IkReal x14938=(cj6*x14926);
IkReal x14939=(sj5*x14935);
IkReal x14940=((1.0)*sj6*x14925);
evalcond[0]=((((-1.0)*r21*sj6*x14935))+((x14931*x14936))+((r20*x14925*x14929))+((r22*x14937))+((r20*x14938)));
evalcond[1]=((((-1.0)*cj6*x14931*x14935))+(((-1.0)*r21*x14940))+(((-1.0)*r22*x14939))+(((-1.0)*r20*x14929*x14935))+((r20*x14936)));
evalcond[2]=((((-1.0)*r11*sj6*x14935))+x14927+((r10*x14938))+(((-1.0)*x14933))+((r10*x14925*x14929))+((r12*x14937))+((x14925*x14934)));
evalcond[3]=((((-1.0)*x14928))+((r00*x14925*x14929))+((x14930*x14936))+((r00*x14938))+(((-1.0)*sj2*x14932))+(((-1.0)*r01*sj6*x14935))+((r02*x14937)));
evalcond[4]=(x14928+(((-1.0)*r10*x14929*x14935))+(((-1.0)*x14934*x14935))+((r10*x14936))+((sj0*sj2))+(((-1.0)*r11*x14940))+(((-1.0)*r12*x14939)));
evalcond[5]=(x14927+(((-1.0)*r01*x14940))+(((-1.0)*r00*x14929*x14935))+((r00*x14936))+(((-1.0)*r02*x14939))+(((-1.0)*x14933))+(((-1.0)*cj6*x14930*x14935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14941=(r22*sj5);
IkReal x14942=(cj6*r20);
IkReal x14943=(cj0*sj2);
IkReal x14944=(r21*sj6);
IkReal x14945=((1.0)*cj2*sj0);
IkReal x14946=(cj5*cj6*r21);
IkReal x14947=(cj5*r20*sj6);
CheckValue<IkReal> x14948 = IKatan2WithCheck(IkReal(((((-1.0)*x14945*x14947))+(((-1.0)*x14945*x14946))+(((-1.0)*x14941*x14945))+((x14941*x14943))+((x14943*x14946))+((x14943*x14947)))),IkReal(((((-1.0)*x14942*x14943))+((cj2*sj0*x14942))+((x14943*x14944))+(((-1.0)*x14944*x14945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14948.valid){
continue;
}
CheckValue<IkReal> x14949=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x14949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14948.value)+(((1.5707963267949)*(x14949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14950=IKcos(j4);
IkReal x14951=IKsin(j4);
IkReal x14952=(cj0*sj2);
IkReal x14953=(cj0*cj2);
IkReal x14954=(cj5*sj6);
IkReal x14955=(cj5*r01);
IkReal x14956=(cj5*r21);
IkReal x14957=((1.0)*sj0);
IkReal x14958=(cj2*x14957);
IkReal x14959=(cj5*cj6*r11);
IkReal x14960=((1.0)*x14951);
IkReal x14961=(cj6*x14950);
IkReal x14962=(sj5*x14950);
IkReal x14963=(cj6*x14951);
IkReal x14964=(sj5*x14960);
IkReal x14965=((1.0)*sj6*x14950);
evalcond[0]=(((r22*x14962))+((r20*x14950*x14954))+((x14956*x14961))+(((-1.0)*r21*sj6*x14960))+((r20*x14963)));
evalcond[1]=((((-1.0)*r20*x14954*x14960))+(((-1.0)*cj6*x14956*x14960))+(((-1.0)*r22*x14964))+(((-1.0)*r21*x14965))+((r20*x14961)));
evalcond[2]=((((-1.0)*r11*sj6*x14960))+x14952+((r12*x14962))+((r10*x14950*x14954))+(((-1.0)*x14958))+((x14950*x14959))+((r10*x14963)));
evalcond[3]=((((-1.0)*r01*sj6*x14960))+((x14955*x14961))+(((-1.0)*sj2*x14957))+((r02*x14962))+((r00*x14950*x14954))+(((-1.0)*x14953))+((r00*x14963)));
evalcond[4]=(x14953+(((-1.0)*r12*x14964))+(((-1.0)*r11*x14965))+((sj0*sj2))+(((-1.0)*r10*x14954*x14960))+((r10*x14961))+(((-1.0)*x14959*x14960)));
evalcond[5]=((((-1.0)*r00*x14954*x14960))+(((-1.0)*r02*x14964))+x14952+(((-1.0)*cj6*x14955*x14960))+(((-1.0)*x14958))+(((-1.0)*r01*x14965))+((r00*x14961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14966=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14966;
j4eval[1]=IKsign(x14966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14967=((1.0)*sj5);
IkReal x14968=(((cj5*r12))+(((-1.0)*cj6*r11*x14967))+(((-1.0)*r10*sj6*x14967)));
j4eval[0]=x14968;
j4eval[1]=IKsign(x14968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14969=cj6*cj6;
IkReal x14970=cj5*cj5;
IkReal x14971=(cj5*sj5);
IkReal x14972=(cj6*r21);
IkReal x14973=((1.0)*r11);
IkReal x14974=(r10*r20);
IkReal x14975=(r10*sj6);
IkReal x14976=(r12*r22);
IkReal x14977=(r21*x14969);
IkReal x14978=(cj6*r20*sj6);
IkReal x14979=(r11*x14970);
IkReal x14980=((1.0)*x14970);
IkReal x14981=(x14976+((r11*r21))+((x14969*x14974))+((x14978*x14979))+((r22*x14971*x14975))+((x14970*x14972*x14975))+(((-1.0)*x14976*x14980))+((r12*r20*sj6*x14971))+(((-1.0)*x14972*x14975))+(((-1.0)*x14969*x14974*x14980))+((cj6*r11*r22*x14971))+((x14970*x14974))+(((-1.0)*x14973*x14977))+(((-1.0)*x14973*x14978))+((x14977*x14979))+((r12*x14971*x14972)));
j4eval[0]=x14981;
j4eval[1]=IKsign(x14981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14982=cj6*cj6;
IkReal x14983=cj5*cj5;
IkReal x14984=((1.0)*r11);
IkReal x14985=((1.0)*r20);
IkReal x14986=(cj0*cj2);
IkReal x14987=(r12*r22);
IkReal x14988=(cj6*sj6);
IkReal x14989=((1.0)*r21);
IkReal x14990=(r22*sj5);
IkReal x14991=(sj0*sj2);
IkReal x14992=(r12*sj5);
IkReal x14993=(cj5*sj6);
IkReal x14994=(r21*x14982);
IkReal x14995=(cj5*x14991);
IkReal x14996=(r10*x14983);
IkReal x14997=(r11*x14983);
IkReal x14998=(cj5*cj6*r21);
CheckValue<IkReal> x14999 = IKatan2WithCheck(IkReal((((x14986*x14998))+((x14986*x14990))+((r20*x14986*x14993))+(((-1.0)*x14990*x14991))+(((-1.0)*x14985*x14991*x14993))+(((-1.0)*cj6*x14989*x14995)))),IkReal(((((-1.0)*cj6*x14985*x14986))+((cj6*r20*x14991))+(((-1.0)*sj6*x14989*x14991))+((r21*sj6*x14986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14999.valid){
continue;
}
CheckValue<IkReal> x15000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x14988*x14989))+((cj5*cj6*r11*x14990))+((r20*x14992*x14993))+x14987+((r11*r21))+((r10*x14990*x14993))+((r21*x14988*x14996))+((x14994*x14997))+((r20*x14996))+(((-1.0)*r20*x14984*x14988))+((r20*x14988*x14997))+((r10*r20*x14982))+(((-1.0)*x14983*x14987))+(((-1.0)*x14984*x14994))+(((-1.0)*x14982*x14985*x14996))+((x14992*x14998)))),-1);
if(!x15000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14999.value)+(((1.5707963267949)*(x15000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15001=IKcos(j4);
IkReal x15002=IKsin(j4);
IkReal x15003=(cj0*cj2);
IkReal x15004=(cj5*sj6);
IkReal x15005=(cj5*r01);
IkReal x15006=(cj0*sj2);
IkReal x15007=(cj5*r21);
IkReal x15008=((1.0)*sj0);
IkReal x15009=(sj2*x15008);
IkReal x15010=(cj5*cj6*r11);
IkReal x15011=((1.0)*x15002);
IkReal x15012=(cj6*x15001);
IkReal x15013=(sj5*x15001);
IkReal x15014=(cj6*x15002);
IkReal x15015=(sj5*x15011);
IkReal x15016=((1.0)*sj6*x15001);
evalcond[0]=(((r22*x15013))+(((-1.0)*r21*sj6*x15011))+((r20*x15001*x15004))+((r20*x15014))+((x15007*x15012)));
evalcond[1]=((((-1.0)*r21*x15016))+(((-1.0)*r20*x15004*x15011))+(((-1.0)*cj6*x15007*x15011))+(((-1.0)*r22*x15015))+((r20*x15012)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r11*sj6*x15011))+((r10*x15001*x15004))+((r10*x15014))+x15006+((x15001*x15010))+((r12*x15013)));
evalcond[3]=((((-1.0)*r01*sj6*x15011))+((x15005*x15012))+x15003+((r00*x15014))+((r00*x15001*x15004))+((r02*x15013))+(((-1.0)*x15009)));
evalcond[4]=((((-1.0)*r12*x15015))+(((-1.0)*r11*x15016))+(((-1.0)*x15010*x15011))+((r10*x15012))+x15003+(((-1.0)*r10*x15004*x15011))+(((-1.0)*x15009)));
evalcond[5]=((((-1.0)*r01*x15016))+(((-1.0)*x15006))+((r00*x15012))+(((-1.0)*r00*x15004*x15011))+(((-1.0)*r02*x15015))+(((-1.0)*cj2*x15008))+(((-1.0)*cj6*x15005*x15011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15017=(r21*sj6);
IkReal x15018=(sj0*sj2);
IkReal x15019=((1.0)*cj6);
IkReal x15020=(cj5*sj6);
IkReal x15021=(cj0*cj2);
IkReal x15022=(cj5*r21);
IkReal x15023=((1.0)*sj5);
IkReal x15024=(r20*x15021);
CheckValue<IkReal> x15025 = IKatan2WithCheck(IkReal((((cj6*x15021*x15022))+((r22*sj5*x15021))+(((-1.0)*x15018*x15019*x15022))+(((-1.0)*r22*x15018*x15023))+(((-1.0)*r20*x15018*x15020))+((x15020*x15024)))),IkReal(((((-1.0)*x15019*x15024))+((cj6*r20*x15018))+(((-1.0)*x15017*x15018))+((x15017*x15021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15025.valid){
continue;
}
CheckValue<IkReal> x15026=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x15023))+(((-1.0)*r11*sj5*x15019)))),-1);
if(!x15026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15025.value)+(((1.5707963267949)*(x15026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15027=IKcos(j4);
IkReal x15028=IKsin(j4);
IkReal x15029=(cj0*cj2);
IkReal x15030=(cj5*sj6);
IkReal x15031=(cj5*r01);
IkReal x15032=(cj0*sj2);
IkReal x15033=(cj5*r21);
IkReal x15034=((1.0)*sj0);
IkReal x15035=(sj2*x15034);
IkReal x15036=(cj5*cj6*r11);
IkReal x15037=((1.0)*x15028);
IkReal x15038=(cj6*x15027);
IkReal x15039=(sj5*x15027);
IkReal x15040=(cj6*x15028);
IkReal x15041=(sj5*x15037);
IkReal x15042=((1.0)*sj6*x15027);
evalcond[0]=(((r20*x15027*x15030))+((r20*x15040))+((x15033*x15038))+(((-1.0)*r21*sj6*x15037))+((r22*x15039)));
evalcond[1]=((((-1.0)*r21*x15042))+(((-1.0)*r22*x15041))+((r20*x15038))+(((-1.0)*cj6*x15033*x15037))+(((-1.0)*r20*x15030*x15037)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r11*sj6*x15037))+((r10*x15027*x15030))+x15032+((r12*x15039))+((r10*x15040))+((x15027*x15036)));
evalcond[3]=(((r00*x15027*x15030))+(((-1.0)*x15035))+((r00*x15040))+x15029+((x15031*x15038))+(((-1.0)*r01*sj6*x15037))+((r02*x15039)));
evalcond[4]=((((-1.0)*x15035))+(((-1.0)*x15036*x15037))+(((-1.0)*r10*x15030*x15037))+x15029+((r10*x15038))+(((-1.0)*r12*x15041))+(((-1.0)*r11*x15042)));
evalcond[5]=((((-1.0)*cj2*x15034))+((r00*x15038))+(((-1.0)*r01*x15042))+(((-1.0)*cj6*x15031*x15037))+(((-1.0)*r00*x15030*x15037))+(((-1.0)*x15032))+(((-1.0)*r02*x15041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15043=(cj5*r21);
IkReal x15044=(cj0*sj2);
IkReal x15045=(r22*sj5);
IkReal x15046=((1.0)*r20);
IkReal x15047=(cj5*r20);
IkReal x15048=(cj2*cj6*sj0);
IkReal x15049=(cj2*sj0*sj6);
CheckValue<IkReal> x15050 = IKatan2WithCheck(IkReal((((x15043*x15048))+((sj6*x15044*x15047))+((x15044*x15045))+((cj2*sj0*x15045))+((x15047*x15049))+((cj6*x15043*x15044)))),IkReal(((((-1.0)*x15046*x15048))+((r21*sj6*x15044))+(((-1.0)*cj6*x15044*x15046))+((r21*x15049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15050.valid){
continue;
}
CheckValue<IkReal> x15051=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15050.value)+(((1.5707963267949)*(x15051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15052=IKcos(j4);
IkReal x15053=IKsin(j4);
IkReal x15054=(cj0*cj2);
IkReal x15055=(cj5*sj6);
IkReal x15056=(cj5*r01);
IkReal x15057=(cj0*sj2);
IkReal x15058=(cj5*r21);
IkReal x15059=((1.0)*sj0);
IkReal x15060=(sj2*x15059);
IkReal x15061=(cj5*cj6*r11);
IkReal x15062=((1.0)*x15053);
IkReal x15063=(cj6*x15052);
IkReal x15064=(sj5*x15052);
IkReal x15065=(cj6*x15053);
IkReal x15066=(sj5*x15062);
IkReal x15067=((1.0)*sj6*x15052);
evalcond[0]=(((r20*x15065))+((r20*x15052*x15055))+((x15058*x15063))+(((-1.0)*r21*sj6*x15062))+((r22*x15064)));
evalcond[1]=(((r20*x15063))+(((-1.0)*r20*x15055*x15062))+(((-1.0)*cj6*x15058*x15062))+(((-1.0)*r22*x15066))+(((-1.0)*r21*x15067)));
evalcond[2]=(((cj2*sj0))+((x15052*x15061))+x15057+(((-1.0)*r11*sj6*x15062))+((r12*x15064))+((r10*x15065))+((r10*x15052*x15055)));
evalcond[3]=(((r00*x15065))+x15054+((x15056*x15063))+((r02*x15064))+((r00*x15052*x15055))+(((-1.0)*r01*sj6*x15062))+(((-1.0)*x15060)));
evalcond[4]=(x15054+(((-1.0)*x15061*x15062))+(((-1.0)*r10*x15055*x15062))+(((-1.0)*r11*x15067))+((r10*x15063))+(((-1.0)*r12*x15066))+(((-1.0)*x15060)));
evalcond[5]=((((-1.0)*r01*x15067))+(((-1.0)*x15057))+(((-1.0)*cj2*x15059))+(((-1.0)*r00*x15055*x15062))+((r00*x15063))+(((-1.0)*cj6*x15056*x15062))+(((-1.0)*r02*x15066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15068=cj5*cj5;
IkReal x15069=cj6*cj6;
IkReal x15070=r22*r22;
IkReal x15071=r21*r21;
IkReal x15072=r20*r20;
IkReal x15073=((1.0)*cj5);
IkReal x15074=(cj6*r21);
IkReal x15075=(r20*sj6);
IkReal x15076=(cj1*cj2);
IkReal x15077=(cj1*sj2);
IkReal x15078=(r22*sj5);
IkReal x15079=(cj6*r20);
IkReal x15080=((2.0)*cj5);
IkReal x15081=(sj6*x15076);
IkReal x15082=((1.0)*x15071);
IkReal x15083=(x15069*x15072);
CheckValue<IkReal> x15084 = IKatan2WithCheck(IkReal(((((-1.0)*x15073*x15074*x15077))+(((-1.0)*x15077*x15078))+((r21*x15081))+(((-1.0)*x15073*x15075*x15077))+(((-1.0)*x15076*x15079)))),IkReal(((((-1.0)*x15073*x15074*x15076))+(((-1.0)*x15073*x15075*x15076))+(((-1.0)*x15076*x15078))+((x15077*x15079))+(((-1.0)*r21*sj6*x15077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15084.valid){
continue;
}
CheckValue<IkReal> x15085=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15068*x15069*x15082))+(((-1.0)*x15082))+((x15068*x15070))+(((-1.0)*x15068*x15072))+((x15069*x15071))+(((-1.0)*x15075*x15078*x15080))+(((-1.0)*x15070))+(((2.0)*x15074*x15075))+(((-2.0)*x15068*x15074*x15075))+(((-1.0)*x15074*x15078*x15080))+((x15068*x15083))+(((-1.0)*x15083)))),-1);
if(!x15085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15084.value)+(((1.5707963267949)*(x15085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15086=IKcos(j4);
IkReal x15087=IKsin(j4);
IkReal x15088=(cj0*sj1);
IkReal x15089=((1.0)*cj2);
IkReal x15090=(cj5*sj6);
IkReal x15091=(sj0*sj1);
IkReal x15092=((1.0)*sj6);
IkReal x15093=(cj5*cj6);
IkReal x15094=(r11*x15093);
IkReal x15095=((1.0)*x15087);
IkReal x15096=(sj5*x15086);
IkReal x15097=(r01*x15086);
IkReal x15098=(cj6*x15086);
IkReal x15099=(cj6*x15087);
IkReal x15100=(sj5*x15095);
evalcond[0]=(((r21*x15086*x15093))+(((-1.0)*r21*x15087*x15092))+(((-1.0)*cj1*x15089))+((r20*x15099))+((r20*x15086*x15090))+((r22*x15096)));
evalcond[1]=((((-1.0)*r21*x15086*x15092))+((r20*x15098))+((cj1*sj2))+(((-1.0)*r22*x15100))+(((-1.0)*r20*x15090*x15095))+(((-1.0)*r21*x15093*x15095)));
evalcond[2]=(((x15086*x15094))+((r10*x15099))+(((-1.0)*x15089*x15091))+((r12*x15096))+(((-1.0)*r11*x15087*x15092))+((cj0*sj2))+((r10*x15086*x15090)));
evalcond[3]=(((r00*x15086*x15090))+(((-1.0)*r01*x15087*x15092))+((r00*x15099))+(((-1.0)*x15088*x15089))+(((-1.0)*sj0*sj2))+((r02*x15096))+((x15093*x15097)));
evalcond[4]=((((-1.0)*r12*x15100))+((sj2*x15091))+(((-1.0)*r10*x15090*x15095))+((cj0*cj2))+(((-1.0)*x15094*x15095))+((r10*x15098))+(((-1.0)*r11*x15086*x15092)));
evalcond[5]=((((-1.0)*r00*x15090*x15095))+((r00*x15098))+(((-1.0)*sj0*x15089))+(((-1.0)*x15092*x15097))+((sj2*x15088))+(((-1.0)*r01*x15093*x15095))+(((-1.0)*r02*x15100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15101=(sj0*sj2);
IkReal x15102=((1.0)*r21);
IkReal x15103=((1.0)*sj5);
IkReal x15104=(cj6*r20);
IkReal x15105=(cj5*cj6);
IkReal x15106=(cj1*cj2);
IkReal x15107=(sj6*x15106);
IkReal x15108=(cj0*cj2*sj1);
IkReal x15109=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x15110 = IKatan2WithCheck(IkReal((((r01*x15105*x15106))+(((-1.0)*x15101*x15102*x15105))+((r02*sj5*x15106))+(((-1.0)*r22*x15101*x15103))+(((-1.0)*x15101*x15109))+((cj5*r00*x15107))+(((-1.0)*x15102*x15105*x15108))+(((-1.0)*r22*x15103*x15108))+(((-1.0)*x15108*x15109)))),IkReal(((((-1.0)*sj6*x15101*x15102))+((r01*x15107))+(((-1.0)*cj6*r00*x15106))+((x15104*x15108))+(((-1.0)*sj6*x15102*x15108))+((x15101*x15104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15110.valid){
continue;
}
CheckValue<IkReal> x15111=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x15103))+(((-1.0)*r10*sj6*x15103)))),-1);
if(!x15111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15110.value)+(((1.5707963267949)*(x15111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15112=IKcos(j4);
IkReal x15113=IKsin(j4);
IkReal x15114=(cj0*sj1);
IkReal x15115=((1.0)*cj2);
IkReal x15116=(cj5*sj6);
IkReal x15117=(sj0*sj1);
IkReal x15118=((1.0)*sj6);
IkReal x15119=(cj5*cj6);
IkReal x15120=(r11*x15119);
IkReal x15121=((1.0)*x15113);
IkReal x15122=(sj5*x15112);
IkReal x15123=(r01*x15112);
IkReal x15124=(cj6*x15112);
IkReal x15125=(cj6*x15113);
IkReal x15126=(sj5*x15121);
evalcond[0]=(((r20*x15125))+((r20*x15112*x15116))+((r22*x15122))+(((-1.0)*cj1*x15115))+(((-1.0)*r21*x15113*x15118))+((r21*x15112*x15119)));
evalcond[1]=(((r20*x15124))+(((-1.0)*r21*x15119*x15121))+(((-1.0)*r21*x15112*x15118))+((cj1*sj2))+(((-1.0)*r22*x15126))+(((-1.0)*r20*x15116*x15121)));
evalcond[2]=((((-1.0)*r11*x15113*x15118))+((x15112*x15120))+(((-1.0)*x15115*x15117))+((r10*x15112*x15116))+((r12*x15122))+((r10*x15125))+((cj0*sj2)));
evalcond[3]=((((-1.0)*r01*x15113*x15118))+(((-1.0)*x15114*x15115))+((r00*x15125))+((x15119*x15123))+(((-1.0)*sj0*sj2))+((r00*x15112*x15116))+((r02*x15122)));
evalcond[4]=((((-1.0)*r10*x15116*x15121))+((cj0*cj2))+((sj2*x15117))+(((-1.0)*r12*x15126))+((r10*x15124))+(((-1.0)*r11*x15112*x15118))+(((-1.0)*x15120*x15121)));
evalcond[5]=((((-1.0)*r02*x15126))+((r00*x15124))+((sj2*x15114))+(((-1.0)*x15118*x15123))+(((-1.0)*r00*x15116*x15121))+(((-1.0)*r01*x15119*x15121))+(((-1.0)*sj0*x15115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15127=(cj6*r20);
IkReal x15128=(cj0*sj2);
IkReal x15129=((1.0)*sj6);
IkReal x15130=(cj1*cj2);
IkReal x15131=(cj5*cj6);
IkReal x15132=(cj5*r20);
IkReal x15133=(r22*sj5);
IkReal x15134=(cj2*sj0*sj1);
CheckValue<IkReal> x15135 = IKatan2WithCheck(IkReal((((cj5*r10*sj6*x15130))+((x15128*x15133))+(((-1.0)*r21*x15131*x15134))+(((-1.0)*x15133*x15134))+((r11*x15130*x15131))+((r21*x15128*x15131))+((r12*sj5*x15130))+((sj6*x15128*x15132))+(((-1.0)*x15129*x15132*x15134)))),IkReal(((((-1.0)*x15127*x15128))+((x15127*x15134))+(((-1.0)*r21*x15129*x15134))+(((-1.0)*cj6*r10*x15130))+((r21*sj6*x15128))+((r11*sj6*x15130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15135.valid){
continue;
}
CheckValue<IkReal> x15136=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15135.value)+(((1.5707963267949)*(x15136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15137=IKcos(j4);
IkReal x15138=IKsin(j4);
IkReal x15139=(cj0*sj1);
IkReal x15140=((1.0)*cj2);
IkReal x15141=(cj5*sj6);
IkReal x15142=(sj0*sj1);
IkReal x15143=((1.0)*sj6);
IkReal x15144=(cj5*cj6);
IkReal x15145=(r11*x15144);
IkReal x15146=((1.0)*x15138);
IkReal x15147=(sj5*x15137);
IkReal x15148=(r01*x15137);
IkReal x15149=(cj6*x15137);
IkReal x15150=(cj6*x15138);
IkReal x15151=(sj5*x15146);
evalcond[0]=(((r22*x15147))+((r20*x15137*x15141))+((r21*x15137*x15144))+(((-1.0)*cj1*x15140))+(((-1.0)*r21*x15138*x15143))+((r20*x15150)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r21*x15137*x15143))+((r20*x15149))+(((-1.0)*r22*x15151))+(((-1.0)*r20*x15141*x15146))+(((-1.0)*r21*x15144*x15146)));
evalcond[2]=(((x15137*x15145))+((r12*x15147))+(((-1.0)*x15140*x15142))+((r10*x15150))+((r10*x15137*x15141))+(((-1.0)*r11*x15138*x15143))+((cj0*sj2)));
evalcond[3]=(((r00*x15137*x15141))+(((-1.0)*x15139*x15140))+((r00*x15150))+((r02*x15147))+(((-1.0)*r01*x15138*x15143))+((x15144*x15148))+(((-1.0)*sj0*sj2)));
evalcond[4]=(((r10*x15149))+(((-1.0)*r10*x15141*x15146))+((cj0*cj2))+(((-1.0)*r12*x15151))+(((-1.0)*x15145*x15146))+(((-1.0)*r11*x15137*x15143))+((sj2*x15142)));
evalcond[5]=((((-1.0)*r02*x15151))+((sj2*x15139))+(((-1.0)*sj0*x15140))+(((-1.0)*x15143*x15148))+((r00*x15149))+(((-1.0)*r01*x15144*x15146))+(((-1.0)*r00*x15141*x15146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15152=cj5*cj5;
IkReal x15153=cj6*cj6;
IkReal x15154=r22*r22;
IkReal x15155=r21*r21;
IkReal x15156=r20*r20;
IkReal x15157=((1.0)*cj5);
IkReal x15158=(cj6*r21);
IkReal x15159=(r20*sj6);
IkReal x15160=(cj1*cj2);
IkReal x15161=(cj1*sj2);
IkReal x15162=(r22*sj5);
IkReal x15163=(cj6*r20);
IkReal x15164=((2.0)*cj5);
IkReal x15165=(sj6*x15160);
IkReal x15166=((1.0)*x15155);
IkReal x15167=(x15153*x15156);
CheckValue<IkReal> x15168 = IKatan2WithCheck(IkReal(((((-1.0)*x15161*x15162))+(((-1.0)*x15157*x15159*x15161))+((r21*x15165))+(((-1.0)*x15160*x15163))+(((-1.0)*x15157*x15158*x15161)))),IkReal((((x15161*x15163))+(((-1.0)*x15157*x15159*x15160))+(((-1.0)*r21*sj6*x15161))+(((-1.0)*x15160*x15162))+(((-1.0)*x15157*x15158*x15160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15168.valid){
continue;
}
CheckValue<IkReal> x15169=IKPowWithIntegerCheck(IKsign((((x15152*x15154))+((x15153*x15155))+(((-1.0)*x15158*x15162*x15164))+(((-1.0)*x15152*x15153*x15166))+(((-1.0)*x15166))+((x15152*x15167))+(((-1.0)*x15167))+(((-1.0)*x15152*x15156))+(((-2.0)*x15152*x15158*x15159))+(((-1.0)*x15154))+(((-1.0)*x15159*x15162*x15164))+(((2.0)*x15158*x15159)))),-1);
if(!x15169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15168.value)+(((1.5707963267949)*(x15169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x15170=IKcos(j4);
IkReal x15171=IKsin(j4);
IkReal x15172=(r22*sj5);
IkReal x15173=(cj6*r20);
IkReal x15174=((1.0)*r21*sj6);
IkReal x15175=((1.0)*x15171);
IkReal x15176=(cj5*cj6*r21);
IkReal x15177=(cj5*r20*sj6);
evalcond[0]=(((x15171*x15173))+(((-1.0)*cj1*cj2))+((x15170*x15176))+((x15170*x15177))+((x15170*x15172))+(((-1.0)*x15171*x15174)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*x15170*x15174))+((x15170*x15173))+(((-1.0)*x15175*x15177))+(((-1.0)*x15175*x15176))+(((-1.0)*x15172*x15175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15178=(cj6*sj5);
IkReal x15179=(sj5*sj6);
IkReal x15180=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r11*x15178))+((r10*x15179))+(((-1.0)*r12*x15180)))))+(IKabs(((((-1.0)*r02*x15180))+((r00*x15179))+((r01*x15178))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15181=(cj2*cj4);
IkReal x15182=(r02*sj5);
IkReal x15183=(cj4*sj2);
IkReal x15184=(r12*sj5);
IkReal x15185=((1.0)*r01);
IkReal x15186=(cj5*cj6*r11);
IkReal x15187=(cj5*r00*sj6);
IkReal x15188=(cj5*r10*sj6);
IkReal x15189=(cj6*r00*sj4);
IkReal x15190=(sj2*sj4*sj6);
IkReal x15191=(cj6*r10*sj4);
IkReal x15192=(cj2*sj4*sj6);
IkReal x15193=(cj5*cj6*r01);
if( IKabs((((cj2*x15191))+((x15181*x15184))+((x15181*x15188))+((x15181*x15186))+((x15183*x15187))+((sj2*x15189))+(((-1.0)*r11*x15192))+((x15182*x15183))+(((-1.0)*x15185*x15190))+((x15183*x15193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x15190))+(((-1.0)*sj2*x15191))+((x15181*x15182))+((x15181*x15187))+(((-1.0)*x15183*x15184))+(((-1.0)*x15183*x15186))+(((-1.0)*x15183*x15188))+((cj2*x15189))+(((-1.0)*x15185*x15192))+((x15181*x15193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*x15191))+((x15181*x15184))+((x15181*x15188))+((x15181*x15186))+((x15183*x15187))+((sj2*x15189))+(((-1.0)*r11*x15192))+((x15182*x15183))+(((-1.0)*x15185*x15190))+((x15183*x15193))))+IKsqr((((r11*x15190))+(((-1.0)*sj2*x15191))+((x15181*x15182))+((x15181*x15187))+(((-1.0)*x15183*x15184))+(((-1.0)*x15183*x15186))+(((-1.0)*x15183*x15188))+((cj2*x15189))+(((-1.0)*x15185*x15192))+((x15181*x15193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj2*x15191))+((x15181*x15184))+((x15181*x15188))+((x15181*x15186))+((x15183*x15187))+((sj2*x15189))+(((-1.0)*r11*x15192))+((x15182*x15183))+(((-1.0)*x15185*x15190))+((x15183*x15193))), (((r11*x15190))+(((-1.0)*sj2*x15191))+((x15181*x15182))+((x15181*x15187))+(((-1.0)*x15183*x15184))+(((-1.0)*x15183*x15186))+(((-1.0)*x15183*x15188))+((cj2*x15189))+(((-1.0)*x15185*x15192))+((x15181*x15193))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15194=IKcos(j0);
IkReal x15195=IKsin(j0);
IkReal x15196=((1.0)*sj4);
IkReal x15197=(cj6*sj4);
IkReal x15198=((0.37429)*sj5);
IkReal x15199=(r10*sj6);
IkReal x15200=(r01*sj6);
IkReal x15201=((0.37429)*cj5);
IkReal x15202=((0.069)*sj2);
IkReal x15203=(cj6*r01);
IkReal x15204=((0.01)*cj5);
IkReal x15205=(r12*sj5);
IkReal x15206=(r00*sj6);
IkReal x15207=(r02*sj5);
IkReal x15208=(cj4*cj6);
IkReal x15209=(cj4*cj5);
IkReal x15210=((1.0)*cj4);
IkReal x15211=(r11*sj6);
IkReal x15212=(sj2*x15194);
IkReal x15213=(cj5*cj6*r11);
IkReal x15214=(cj2*x15194);
IkReal x15215=((0.069)*x15195);
IkReal x15216=(sj2*x15195);
IkReal x15217=((1.0)*cj2*x15195);
evalcond[0]=(((r10*x15197))+((cj4*x15205))+x15212+(((-1.0)*x15196*x15211))+((x15199*x15209))+(((-1.0)*x15217))+((cj5*r11*x15208)));
evalcond[1]=(((r00*x15197))+(((-1.0)*x15216))+(((-1.0)*x15214))+((x15203*x15209))+((cj4*x15207))+((x15206*x15209))+(((-1.0)*x15196*x15200)));
evalcond[2]=(((r10*x15208))+(((-1.0)*x15210*x15211))+x15214+x15216+(((-1.0)*x15196*x15213))+(((-1.0)*x15196*x15205))+(((-1.0)*cj5*x15196*x15199)));
evalcond[3]=((((-1.0)*cj5*x15196*x15206))+(((-1.0)*cj5*x15196*x15203))+x15212+(((-1.0)*x15196*x15207))+((r00*x15208))+(((-1.0)*x15217))+(((-1.0)*x15200*x15210)));
evalcond[4]=((((-0.069)*x15214))+(((-1.0)*x15198*x15203))+(((-1.0)*x15198*x15206))+((x15204*x15206))+((x15203*x15204))+(((0.069)*x15194))+(((-1.0)*px))+(((-1.0)*x15195*x15202))+(((0.01)*x15207))+((r02*x15201)));
evalcond[5]=(((x15194*x15202))+x15215+((x15199*x15204))+(((-1.0)*x15198*x15199))+(((-1.0)*py))+((r12*x15201))+(((-1.0)*cj6*r11*x15198))+(((0.01)*x15205))+(((-1.0)*cj2*x15215))+((cj6*r11*x15204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15218=(r02*sj5);
IkReal x15219=(cj5*sj6);
IkReal x15220=(r00*sj2);
IkReal x15221=(cj6*sj4);
IkReal x15222=((1.0)*cj2);
IkReal x15223=(r12*sj5);
IkReal x15224=(cj4*sj2);
IkReal x15225=(cj4*x15222);
IkReal x15226=(cj5*cj6*r11);
IkReal x15227=((1.0)*x15224);
IkReal x15228=(cj5*cj6*r01);
IkReal x15229=(sj2*sj4*sj6);
IkReal x15230=(cj2*sj4*sj6);
if( IKabs(((((-1.0)*r10*x15221*x15222))+((cj4*x15219*x15220))+((x15220*x15221))+((x15224*x15228))+(((-1.0)*r01*x15229))+(((-1.0)*x15225*x15226))+((r11*x15230))+((x15218*x15224))+(((-1.0)*r10*x15219*x15225))+(((-1.0)*x15223*x15225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x15226*x15227))+(((-1.0)*r00*x15221*x15222))+((r01*x15230))+(((-1.0)*x15218*x15225))+(((-1.0)*r00*x15219*x15225))+(((-1.0)*x15225*x15228))+(((-1.0)*r10*sj2*x15221))+(((-1.0)*r10*x15219*x15227))+((r11*x15229))+(((-1.0)*x15223*x15227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x15221*x15222))+((cj4*x15219*x15220))+((x15220*x15221))+((x15224*x15228))+(((-1.0)*r01*x15229))+(((-1.0)*x15225*x15226))+((r11*x15230))+((x15218*x15224))+(((-1.0)*r10*x15219*x15225))+(((-1.0)*x15223*x15225))))+IKsqr(((((-1.0)*x15226*x15227))+(((-1.0)*r00*x15221*x15222))+((r01*x15230))+(((-1.0)*x15218*x15225))+(((-1.0)*r00*x15219*x15225))+(((-1.0)*x15225*x15228))+(((-1.0)*r10*sj2*x15221))+(((-1.0)*r10*x15219*x15227))+((r11*x15229))+(((-1.0)*x15223*x15227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x15221*x15222))+((cj4*x15219*x15220))+((x15220*x15221))+((x15224*x15228))+(((-1.0)*r01*x15229))+(((-1.0)*x15225*x15226))+((r11*x15230))+((x15218*x15224))+(((-1.0)*r10*x15219*x15225))+(((-1.0)*x15223*x15225))), ((((-1.0)*x15226*x15227))+(((-1.0)*r00*x15221*x15222))+((r01*x15230))+(((-1.0)*x15218*x15225))+(((-1.0)*r00*x15219*x15225))+(((-1.0)*x15225*x15228))+(((-1.0)*r10*sj2*x15221))+(((-1.0)*r10*x15219*x15227))+((r11*x15229))+(((-1.0)*x15223*x15227))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15231=IKcos(j0);
IkReal x15232=IKsin(j0);
IkReal x15233=((1.0)*sj4);
IkReal x15234=(cj6*sj4);
IkReal x15235=((0.37429)*sj5);
IkReal x15236=(r10*sj6);
IkReal x15237=((0.069)*sj2);
IkReal x15238=(r01*sj6);
IkReal x15239=((0.37429)*cj5);
IkReal x15240=(cj6*r01);
IkReal x15241=((0.01)*cj5);
IkReal x15242=(r12*sj5);
IkReal x15243=(r00*sj6);
IkReal x15244=(r02*sj5);
IkReal x15245=(cj4*cj6);
IkReal x15246=(cj4*cj5);
IkReal x15247=((1.0)*cj4);
IkReal x15248=(r11*sj6);
IkReal x15249=(cj2*x15231);
IkReal x15250=(cj5*cj6*r11);
IkReal x15251=((0.069)*x15232);
IkReal x15252=(sj2*x15231);
IkReal x15253=(cj2*x15232);
IkReal x15254=((1.0)*sj2*x15232);
evalcond[0]=((((-1.0)*x15233*x15248))+x15252+x15253+((x15236*x15246))+((r10*x15234))+((cj5*r11*x15245))+((cj4*x15242)));
evalcond[1]=(((r00*x15234))+((x15243*x15246))+(((-1.0)*x15233*x15238))+(((-1.0)*x15254))+x15249+((x15240*x15246))+((cj4*x15244)));
evalcond[2]=((((-1.0)*cj5*x15233*x15236))+(((-1.0)*x15233*x15242))+(((-1.0)*x15254))+(((-1.0)*x15247*x15248))+(((-1.0)*x15233*x15250))+x15249+((r10*x15245)));
evalcond[3]=((((-1.0)*x15233*x15244))+(((-1.0)*cj5*x15233*x15240))+(((-1.0)*cj5*x15233*x15243))+((r00*x15245))+(((-1.0)*x15253))+(((-1.0)*x15252))+(((-1.0)*x15238*x15247)));
evalcond[4]=((((-1.0)*x15235*x15243))+(((-1.0)*x15235*x15240))+((r02*x15239))+(((-1.0)*x15232*x15237))+(((-1.0)*px))+((x15241*x15243))+(((0.069)*x15231))+((x15240*x15241))+(((0.069)*x15249))+(((0.01)*x15244)));
evalcond[5]=(((cj2*x15251))+x15251+((x15236*x15241))+((cj6*r11*x15241))+(((-1.0)*py))+(((-1.0)*cj6*r11*x15235))+((r12*x15239))+((x15231*x15237))+(((0.01)*x15242))+(((-1.0)*x15235*x15236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x15255=(cj6*sj5);
IkReal x15256=(sj5*sj6);
IkReal x15257=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r00*x15256))+((r01*x15255))+(((-1.0)*r02*x15257)))))+(IKabs(((((-1.0)*r12*x15257))+((r11*x15255))+((r10*x15256))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15258=(cj5*sj4);
CheckValue<IkReal> x15259=IKPowWithIntegerCheck(sj1,-1);
if(!x15259.valid){
continue;
}
CheckValue<IkReal> x15260=IKPowWithIntegerCheck(cj1,-1);
if(!x15260.valid){
continue;
}
if( IKabs(((x15259.value)*((((cj6*r11*x15258))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x15258)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15260.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15259.value)*((((cj6*r11*x15258))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x15258))))))+IKsqr(((x15260.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x15259.value)*((((cj6*r11*x15258))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x15258))))), ((x15260.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15261=IKcos(j0);
IkReal x15262=IKsin(j0);
IkReal x15263=((1.0)*sj4);
IkReal x15264=(cj6*sj4);
IkReal x15265=((0.37429)*sj5);
IkReal x15266=(r10*sj6);
IkReal x15267=(r01*sj6);
IkReal x15268=((0.36442)*cj1);
IkReal x15269=(cj6*r01);
IkReal x15270=(r00*sj6);
IkReal x15271=(cj6*r11);
IkReal x15272=(r02*sj5);
IkReal x15273=((0.01)*cj5);
IkReal x15274=(r12*sj5);
IkReal x15275=(cj4*cj6);
IkReal x15276=(cj5*r02);
IkReal x15277=(cj4*cj5);
IkReal x15278=((1.0)*cj4);
IkReal x15279=(r11*sj6);
IkReal x15280=(cj5*r12);
IkReal x15281=((0.069)*x15262);
IkReal x15282=((0.069)*x15261);
IkReal x15283=(cj5*x15271);
IkReal x15284=((1.0)*x15262);
evalcond[0]=(((sj5*x15269))+((sj5*x15270))+(((-1.0)*x15276))+(((-1.0)*cj1*x15261)));
evalcond[1]=(((sj5*x15266))+((sj5*x15271))+(((-1.0)*cj1*x15284))+(((-1.0)*x15280)));
evalcond[2]=(((cj4*x15274))+((x15271*x15277))+(((-1.0)*x15263*x15279))+x15261+((x15266*x15277))+((r10*x15264)));
evalcond[3]=(((cj4*x15272))+((x15270*x15277))+(((-1.0)*x15263*x15267))+((x15269*x15277))+((r00*x15264))+(((-1.0)*x15284)));
evalcond[4]=((((-1.0)*x15278*x15279))+((sj1*x15262))+(((-1.0)*x15263*x15274))+(((-1.0)*x15263*x15283))+((r10*x15275))+(((-1.0)*cj5*x15263*x15266)));
evalcond[5]=(((sj1*x15261))+(((-1.0)*x15263*x15272))+(((-1.0)*cj5*x15263*x15270))+(((-1.0)*x15267*x15278))+(((-1.0)*cj5*x15263*x15269))+((r00*x15275)));
evalcond[6]=((((-1.0)*x15265*x15269))+((x15270*x15273))+(((0.37429)*x15276))+x15282+(((0.01)*x15272))+((x15261*x15268))+((x15269*x15273))+(((-1.0)*px))+(((-1.0)*x15265*x15270))+(((-1.0)*x15281)));
evalcond[7]=((((-1.0)*x15265*x15266))+(((0.37429)*x15280))+((x15271*x15273))+x15282+x15281+((x15266*x15273))+(((0.01)*x15274))+(((-1.0)*py))+((x15262*x15268))+(((-1.0)*x15265*x15271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15285=(cj6*r01);
IkReal x15286=(cj4*cj5);
IkReal x15287=(r00*sj6);
CheckValue<IkReal> x15288=IKPowWithIntegerCheck(cj1,-1);
if(!x15288.valid){
continue;
}
if( IKabs((((x15286*x15287))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x15285*x15286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15288.value)*((((sj5*x15287))+((sj5*x15285))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15286*x15287))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x15285*x15286))))+IKsqr(((x15288.value)*((((sj5*x15287))+((sj5*x15285))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x15286*x15287))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x15285*x15286))), ((x15288.value)*((((sj5*x15287))+((sj5*x15285))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15289=IKcos(j0);
IkReal x15290=IKsin(j0);
IkReal x15291=((1.0)*sj4);
IkReal x15292=(cj6*sj4);
IkReal x15293=((0.37429)*sj5);
IkReal x15294=(r10*sj6);
IkReal x15295=(r01*sj6);
IkReal x15296=((0.36442)*cj1);
IkReal x15297=(cj6*r01);
IkReal x15298=(r00*sj6);
IkReal x15299=(cj6*r11);
IkReal x15300=(r02*sj5);
IkReal x15301=((0.01)*cj5);
IkReal x15302=(r12*sj5);
IkReal x15303=(cj4*cj6);
IkReal x15304=(cj5*r02);
IkReal x15305=(cj4*cj5);
IkReal x15306=((1.0)*cj4);
IkReal x15307=(r11*sj6);
IkReal x15308=(cj5*r12);
IkReal x15309=((0.069)*x15290);
IkReal x15310=((0.069)*x15289);
IkReal x15311=(cj5*x15299);
IkReal x15312=((1.0)*x15290);
evalcond[0]=((((-1.0)*x15304))+((sj5*x15298))+((sj5*x15297))+(((-1.0)*cj1*x15289)));
evalcond[1]=((((-1.0)*x15308))+(((-1.0)*cj1*x15312))+((sj5*x15299))+((sj5*x15294)));
evalcond[2]=(((r10*x15292))+x15289+((cj4*x15302))+((x15294*x15305))+((x15299*x15305))+(((-1.0)*x15291*x15307)));
evalcond[3]=(((x15297*x15305))+(((-1.0)*x15291*x15295))+(((-1.0)*x15312))+((cj4*x15300))+((r00*x15292))+((x15298*x15305)));
evalcond[4]=((((-1.0)*cj5*x15291*x15294))+((r10*x15303))+(((-1.0)*x15291*x15311))+(((-1.0)*x15306*x15307))+((sj1*x15290))+(((-1.0)*x15291*x15302)));
evalcond[5]=((((-1.0)*x15295*x15306))+((r00*x15303))+(((-1.0)*cj5*x15291*x15297))+(((-1.0)*cj5*x15291*x15298))+((sj1*x15289))+(((-1.0)*x15291*x15300)));
evalcond[6]=(((x15297*x15301))+(((0.37429)*x15304))+x15310+(((-1.0)*px))+(((-1.0)*x15293*x15297))+(((-1.0)*x15293*x15298))+(((-1.0)*x15309))+((x15298*x15301))+(((0.01)*x15300))+((x15289*x15296)));
evalcond[7]=((((0.37429)*x15308))+x15310+x15309+(((-1.0)*py))+(((-1.0)*x15293*x15294))+(((-1.0)*x15293*x15299))+((x15294*x15301))+((x15299*x15301))+((x15290*x15296))+(((0.01)*x15302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15313=(cj6*sj5);
IkReal x15314=(sj5*sj6);
IkReal x15315=((1.0)*cj5);
CheckValue<IkReal> x15316=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15316.valid){
continue;
}
CheckValue<IkReal> x15317 = IKatan2WithCheck(IkReal((((r11*x15313))+(((-1.0)*r12*x15315))+((r10*x15314)))),IkReal((((r01*x15313))+((r00*x15314))+(((-1.0)*r02*x15315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15317.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15316.value)))+(x15317.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15318=IKcos(j0);
IkReal x15319=IKsin(j0);
IkReal x15320=((1.0)*sj4);
IkReal x15321=(cj6*sj4);
IkReal x15322=((0.37429)*sj5);
IkReal x15323=(r10*sj6);
IkReal x15324=(r01*sj6);
IkReal x15325=((0.36442)*cj1);
IkReal x15326=(cj6*r01);
IkReal x15327=(r00*sj6);
IkReal x15328=(cj6*r11);
IkReal x15329=(r02*sj5);
IkReal x15330=((0.01)*cj5);
IkReal x15331=(r12*sj5);
IkReal x15332=(cj4*cj6);
IkReal x15333=(cj5*r02);
IkReal x15334=(cj4*cj5);
IkReal x15335=((1.0)*cj4);
IkReal x15336=(r11*sj6);
IkReal x15337=(cj5*r12);
IkReal x15338=((0.069)*x15319);
IkReal x15339=((0.069)*x15318);
IkReal x15340=(cj5*x15328);
IkReal x15341=((1.0)*x15319);
evalcond[0]=((((-1.0)*x15333))+(((-1.0)*cj1*x15318))+((sj5*x15327))+((sj5*x15326)));
evalcond[1]=((((-1.0)*cj1*x15341))+(((-1.0)*x15337))+((sj5*x15328))+((sj5*x15323)));
evalcond[2]=((((-1.0)*x15320*x15336))+((x15323*x15334))+((x15328*x15334))+x15318+((cj4*x15331))+((r10*x15321)));
evalcond[3]=((((-1.0)*x15341))+((r00*x15321))+(((-1.0)*x15320*x15324))+((x15327*x15334))+((cj4*x15329))+((x15326*x15334)));
evalcond[4]=((((-1.0)*x15320*x15340))+(((-1.0)*x15320*x15331))+(((-1.0)*cj5*x15320*x15323))+((r10*x15332))+(((-1.0)*x15335*x15336))+((sj1*x15319)));
evalcond[5]=(((r00*x15332))+(((-1.0)*x15320*x15329))+(((-1.0)*cj5*x15320*x15327))+(((-1.0)*cj5*x15320*x15326))+(((-1.0)*x15324*x15335))+((sj1*x15318)));
evalcond[6]=((((-1.0)*x15322*x15327))+(((-1.0)*x15322*x15326))+((x15327*x15330))+x15339+(((0.01)*x15329))+(((-1.0)*px))+(((-1.0)*x15338))+((x15326*x15330))+((x15318*x15325))+(((0.37429)*x15333)));
evalcond[7]=((((-1.0)*x15322*x15328))+(((-1.0)*x15322*x15323))+((x15319*x15325))+((x15323*x15330))+((x15328*x15330))+x15339+x15338+(((-1.0)*py))+(((0.01)*x15331))+(((0.37429)*x15337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x15342=(cj6*sj5);
IkReal x15343=(sj5*sj6);
IkReal x15344=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r12*x15344))+((r11*x15342))+((r10*x15343)))))+(IKabs((((r00*x15343))+((r01*x15342))+(((-1.0)*r02*x15344))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15345=((1.0)*cj5*sj4);
CheckValue<IkReal> x15346=IKPowWithIntegerCheck(sj1,-1);
if(!x15346.valid){
continue;
}
CheckValue<IkReal> x15347=IKPowWithIntegerCheck(cj1,-1);
if(!x15347.valid){
continue;
}
if( IKabs(((x15346.value)*(((((-1.0)*r10*sj6*x15345))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+(((-1.0)*cj6*r11*x15345)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15347.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15346.value)*(((((-1.0)*r10*sj6*x15345))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+(((-1.0)*cj6*r11*x15345))))))+IKsqr(((x15347.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x15346.value)*(((((-1.0)*r10*sj6*x15345))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+(((-1.0)*cj6*r11*x15345))))), ((x15347.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15348=IKsin(j0);
IkReal x15349=IKcos(j0);
IkReal x15350=((1.0)*sj4);
IkReal x15351=(cj6*sj4);
IkReal x15352=((0.37429)*sj5);
IkReal x15353=(r10*sj6);
IkReal x15354=(r01*sj6);
IkReal x15355=((0.36442)*cj1);
IkReal x15356=(cj6*r01);
IkReal x15357=(r00*sj6);
IkReal x15358=(r12*sj5);
IkReal x15359=(cj6*r11);
IkReal x15360=(r02*sj5);
IkReal x15361=((0.01)*cj5);
IkReal x15362=(cj4*cj6);
IkReal x15363=(cj5*r02);
IkReal x15364=(cj4*cj5);
IkReal x15365=((1.0)*cj4);
IkReal x15366=(r11*sj6);
IkReal x15367=(cj5*r12);
IkReal x15368=((0.069)*x15348);
IkReal x15369=((0.069)*x15349);
IkReal x15370=(cj5*x15359);
IkReal x15371=((1.0)*x15349);
IkReal x15372=((1.0)*x15348);
evalcond[0]=((((-1.0)*cj1*x15371))+((sj5*x15357))+((sj5*x15356))+(((-1.0)*x15363)));
evalcond[1]=((((-1.0)*cj1*x15372))+((sj5*x15353))+((sj5*x15359))+(((-1.0)*x15367)));
evalcond[2]=((((-1.0)*x15350*x15354))+x15348+((x15357*x15364))+((x15356*x15364))+((cj4*x15360))+((r00*x15351)));
evalcond[3]=((((-1.0)*x15350*x15366))+((x15353*x15364))+((r10*x15351))+((x15359*x15364))+(((-1.0)*x15371))+((cj4*x15358)));
evalcond[4]=((((-1.0)*x15350*x15358))+((r10*x15362))+(((-1.0)*x15365*x15366))+(((-1.0)*x15350*x15370))+(((-1.0)*cj5*x15350*x15353))+(((-1.0)*sj1*x15372)));
evalcond[5]=((((-1.0)*x15350*x15360))+(((-1.0)*x15354*x15365))+(((-1.0)*cj5*x15350*x15356))+(((-1.0)*cj5*x15350*x15357))+(((-1.0)*sj1*x15371))+((r00*x15362)));
evalcond[6]=((((0.01)*x15360))+(((-1.0)*x15352*x15357))+(((-1.0)*x15352*x15356))+x15368+x15369+(((-1.0)*px))+((x15349*x15355))+((x15357*x15361))+((x15356*x15361))+(((0.37429)*x15363)));
evalcond[7]=(((x15353*x15361))+(((-1.0)*x15352*x15353))+(((-1.0)*x15352*x15359))+((x15348*x15355))+(((0.01)*x15358))+(((-1.0)*x15369))+x15368+((x15359*x15361))+(((-1.0)*py))+(((0.37429)*x15367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15373=(cj6*r11);
IkReal x15374=(cj4*cj5);
IkReal x15375=(r10*sj6);
CheckValue<IkReal> x15376=IKPowWithIntegerCheck(cj1,-1);
if(!x15376.valid){
continue;
}
if( IKabs(((x15376.value)*(((((-1.0)*cj5*r12))+((sj5*x15373))+((sj5*x15375)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj4))+((x15374*x15375))+(((-1.0)*r11*sj4*sj6))+((x15373*x15374))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15376.value)*(((((-1.0)*cj5*r12))+((sj5*x15373))+((sj5*x15375))))))+IKsqr((((cj6*r10*sj4))+((x15374*x15375))+(((-1.0)*r11*sj4*sj6))+((x15373*x15374))+((cj4*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x15376.value)*(((((-1.0)*cj5*r12))+((sj5*x15373))+((sj5*x15375))))), (((cj6*r10*sj4))+((x15374*x15375))+(((-1.0)*r11*sj4*sj6))+((x15373*x15374))+((cj4*r12*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15377=IKsin(j0);
IkReal x15378=IKcos(j0);
IkReal x15379=((1.0)*sj4);
IkReal x15380=(cj6*sj4);
IkReal x15381=((0.37429)*sj5);
IkReal x15382=(r10*sj6);
IkReal x15383=(r01*sj6);
IkReal x15384=((0.36442)*cj1);
IkReal x15385=(cj6*r01);
IkReal x15386=(r00*sj6);
IkReal x15387=(r12*sj5);
IkReal x15388=(cj6*r11);
IkReal x15389=(r02*sj5);
IkReal x15390=((0.01)*cj5);
IkReal x15391=(cj4*cj6);
IkReal x15392=(cj5*r02);
IkReal x15393=(cj4*cj5);
IkReal x15394=((1.0)*cj4);
IkReal x15395=(r11*sj6);
IkReal x15396=(cj5*r12);
IkReal x15397=((0.069)*x15377);
IkReal x15398=((0.069)*x15378);
IkReal x15399=(cj5*x15388);
IkReal x15400=((1.0)*x15378);
IkReal x15401=((1.0)*x15377);
evalcond[0]=((((-1.0)*cj1*x15400))+(((-1.0)*x15392))+((sj5*x15386))+((sj5*x15385)));
evalcond[1]=((((-1.0)*cj1*x15401))+(((-1.0)*x15396))+((sj5*x15388))+((sj5*x15382)));
evalcond[2]=(((x15386*x15393))+((x15385*x15393))+(((-1.0)*x15379*x15383))+x15377+((cj4*x15389))+((r00*x15380)));
evalcond[3]=((((-1.0)*x15400))+(((-1.0)*x15379*x15395))+((x15382*x15393))+((r10*x15380))+((cj4*x15387))+((x15388*x15393)));
evalcond[4]=((((-1.0)*x15394*x15395))+(((-1.0)*x15379*x15399))+((r10*x15391))+(((-1.0)*x15379*x15387))+(((-1.0)*cj5*x15379*x15382))+(((-1.0)*sj1*x15401)));
evalcond[5]=((((-1.0)*x15379*x15389))+(((-1.0)*x15383*x15394))+(((-1.0)*cj5*x15379*x15385))+(((-1.0)*cj5*x15379*x15386))+(((-1.0)*sj1*x15400))+((r00*x15391)));
evalcond[6]=(((x15386*x15390))+((x15385*x15390))+(((0.01)*x15389))+((x15378*x15384))+(((0.37429)*x15392))+x15398+x15397+(((-1.0)*px))+(((-1.0)*x15381*x15385))+(((-1.0)*x15381*x15386)));
evalcond[7]=((((0.01)*x15387))+((x15382*x15390))+((x15377*x15384))+(((0.37429)*x15396))+x15397+(((-1.0)*py))+(((-1.0)*x15398))+(((-1.0)*x15381*x15382))+(((-1.0)*x15381*x15388))+((x15388*x15390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15402=(cj6*sj5);
IkReal x15403=(sj5*sj6);
IkReal x15404=((1.0)*cj5);
CheckValue<IkReal> x15405=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15405.valid){
continue;
}
CheckValue<IkReal> x15406 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15404))+((r10*x15403))+((r11*x15402)))),IkReal((((r00*x15403))+((r01*x15402))+(((-1.0)*r02*x15404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15406.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15405.value)))+(x15406.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15407=IKsin(j0);
IkReal x15408=IKcos(j0);
IkReal x15409=((1.0)*sj4);
IkReal x15410=(cj6*sj4);
IkReal x15411=((0.37429)*sj5);
IkReal x15412=(r10*sj6);
IkReal x15413=(r01*sj6);
IkReal x15414=((0.36442)*cj1);
IkReal x15415=(cj6*r01);
IkReal x15416=(r00*sj6);
IkReal x15417=(r12*sj5);
IkReal x15418=(cj6*r11);
IkReal x15419=(r02*sj5);
IkReal x15420=((0.01)*cj5);
IkReal x15421=(cj4*cj6);
IkReal x15422=(cj5*r02);
IkReal x15423=(cj4*cj5);
IkReal x15424=((1.0)*cj4);
IkReal x15425=(r11*sj6);
IkReal x15426=(cj5*r12);
IkReal x15427=((0.069)*x15407);
IkReal x15428=((0.069)*x15408);
IkReal x15429=(cj5*x15418);
IkReal x15430=((1.0)*x15408);
IkReal x15431=((1.0)*x15407);
evalcond[0]=((((-1.0)*x15422))+((sj5*x15415))+((sj5*x15416))+(((-1.0)*cj1*x15430)));
evalcond[1]=((((-1.0)*x15426))+((sj5*x15412))+((sj5*x15418))+(((-1.0)*cj1*x15431)));
evalcond[2]=(((cj4*x15419))+((x15415*x15423))+(((-1.0)*x15409*x15413))+((r00*x15410))+((x15416*x15423))+x15407);
evalcond[3]=(((cj4*x15417))+((x15412*x15423))+((x15418*x15423))+(((-1.0)*x15430))+(((-1.0)*x15409*x15425))+((r10*x15410)));
evalcond[4]=(((r10*x15421))+(((-1.0)*cj5*x15409*x15412))+(((-1.0)*sj1*x15431))+(((-1.0)*x15424*x15425))+(((-1.0)*x15409*x15417))+(((-1.0)*x15409*x15429)));
evalcond[5]=((((-1.0)*x15413*x15424))+(((-1.0)*cj5*x15409*x15416))+(((-1.0)*cj5*x15409*x15415))+(((-1.0)*sj1*x15430))+(((-1.0)*x15409*x15419))+((r00*x15421)));
evalcond[6]=((((0.01)*x15419))+((x15415*x15420))+(((0.37429)*x15422))+(((-1.0)*px))+((x15408*x15414))+((x15416*x15420))+x15427+x15428+(((-1.0)*x15411*x15416))+(((-1.0)*x15411*x15415)));
evalcond[7]=((((0.01)*x15417))+((x15407*x15414))+(((0.37429)*x15426))+((x15412*x15420))+((x15418*x15420))+(((-1.0)*py))+(((-1.0)*x15428))+x15427+(((-1.0)*x15411*x15418))+(((-1.0)*x15411*x15412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15432=(cj6*sj5);
IkReal x15433=(sj5*sj6);
IkReal x15434=((1.0)*cj5);
if( IKabs((((r10*x15433))+(((-1.0)*r12*x15434))+((r11*x15432)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x15434))+((r01*x15432))+((r00*x15433)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x15433))+(((-1.0)*r12*x15434))+((r11*x15432))))+IKsqr(((((-1.0)*r02*x15434))+((r01*x15432))+((r00*x15433))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x15433))+(((-1.0)*r12*x15434))+((r11*x15432))), ((((-1.0)*r02*x15434))+((r01*x15432))+((r00*x15433))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15435=IKcos(j0);
IkReal x15436=IKsin(j0);
IkReal x15437=((1.0)*sj4);
IkReal x15438=(cj6*sj4);
IkReal x15439=((0.37429)*sj5);
IkReal x15440=(r10*sj6);
IkReal x15441=(r01*sj6);
IkReal x15442=((0.069)*sj2);
IkReal x15443=(cj6*r01);
IkReal x15444=(r00*sj6);
IkReal x15445=(r12*sj5);
IkReal x15446=(cj6*r11);
IkReal x15447=(r02*sj5);
IkReal x15448=((0.01)*cj5);
IkReal x15449=(cj4*cj6);
IkReal x15450=(cj5*r02);
IkReal x15451=(cj4*cj5);
IkReal x15452=((1.0)*cj4);
IkReal x15453=(r11*sj6);
IkReal x15454=(cj5*r12);
IkReal x15455=(cj5*x15446);
IkReal x15456=((1.0)*x15436);
evalcond[0]=(((sj5*x15444))+((sj5*x15443))+(((-1.0)*x15435))+(((-1.0)*x15450)));
evalcond[1]=(((sj5*x15446))+((sj5*x15440))+(((-1.0)*x15456))+(((-1.0)*x15454)));
evalcond[2]=(((r10*x15438))+((sj2*x15435))+((x15440*x15451))+((cj4*x15445))+((x15446*x15451))+(((-1.0)*x15437*x15453)));
evalcond[3]=((((-1.0)*sj2*x15456))+((x15444*x15451))+((x15443*x15451))+((cj4*x15447))+((r00*x15438))+(((-1.0)*x15437*x15441)));
evalcond[4]=((((-1.0)*cj5*x15437*x15440))+((r10*x15449))+((cj2*x15435))+(((-1.0)*x15452*x15453))+(((-1.0)*x15437*x15455))+(((-1.0)*x15437*x15445)));
evalcond[5]=(((r00*x15449))+(((-1.0)*cj5*x15437*x15444))+(((-1.0)*cj5*x15437*x15443))+(((-1.0)*cj2*x15456))+(((-1.0)*x15441*x15452))+(((-1.0)*x15437*x15447)));
evalcond[6]=((((-1.0)*x15439*x15443))+(((-1.0)*x15439*x15444))+((x15444*x15448))+(((-1.0)*px))+((x15443*x15448))+(((0.37429)*x15450))+(((-1.0)*x15436*x15442))+(((0.01)*x15447))+(((0.43342)*x15435)));
evalcond[7]=((((-1.0)*x15439*x15440))+(((-1.0)*x15439*x15446))+((x15435*x15442))+((x15440*x15448))+(((-1.0)*py))+(((0.37429)*x15454))+((x15446*x15448))+(((0.01)*x15445))+(((0.43342)*x15436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15457=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x15457))+(((-1.0)*r10*sj6*x15457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x15457))+(((-1.0)*r00*sj6*x15457))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x15457))+(((-1.0)*r10*sj6*x15457))))+IKsqr(((((-1.0)*cj6*r01*x15457))+(((-1.0)*r00*sj6*x15457))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x15457))+(((-1.0)*r10*sj6*x15457))), ((((-1.0)*cj6*r01*x15457))+(((-1.0)*r00*sj6*x15457))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15458=IKcos(j0);
IkReal x15459=IKsin(j0);
IkReal x15460=((1.0)*sj4);
IkReal x15461=(cj6*sj4);
IkReal x15462=((0.37429)*sj5);
IkReal x15463=(r10*sj6);
IkReal x15464=(r01*sj6);
IkReal x15465=((0.37429)*cj5);
IkReal x15466=((0.069)*sj2);
IkReal x15467=(cj6*r01);
IkReal x15468=(r00*sj6);
IkReal x15469=(r12*sj5);
IkReal x15470=(cj6*r11);
IkReal x15471=(r02*sj5);
IkReal x15472=((0.01)*cj5);
IkReal x15473=(cj4*cj6);
IkReal x15474=((1.0)*cj5);
IkReal x15475=(cj4*cj5);
IkReal x15476=((1.0)*cj4);
IkReal x15477=(r11*sj6);
IkReal x15478=(cj5*x15470);
IkReal x15479=((1.0)*x15459);
evalcond[0]=(x15458+((sj5*x15468))+((sj5*x15467))+(((-1.0)*r02*x15474)));
evalcond[1]=(x15459+((sj5*x15470))+((sj5*x15463))+(((-1.0)*r12*x15474)));
evalcond[2]=(((sj2*x15458))+((x15470*x15475))+((cj4*x15469))+((x15463*x15475))+(((-1.0)*x15460*x15477))+((r10*x15461)));
evalcond[3]=(((cj4*x15471))+(((-1.0)*sj2*x15479))+(((-1.0)*x15460*x15464))+((x15467*x15475))+((r00*x15461))+((x15468*x15475)));
evalcond[4]=(((cj2*x15458))+(((-1.0)*x15460*x15478))+(((-1.0)*x15460*x15469))+(((-1.0)*x15476*x15477))+(((-1.0)*cj5*x15460*x15463))+((r10*x15473)));
evalcond[5]=((((-1.0)*cj2*x15479))+(((-1.0)*x15460*x15471))+((r00*x15473))+(((-1.0)*cj5*x15460*x15468))+(((-1.0)*cj5*x15460*x15467))+(((-1.0)*x15464*x15476)));
evalcond[6]=(((r02*x15465))+(((0.01)*x15471))+(((-1.0)*x15462*x15467))+(((-1.0)*x15462*x15468))+(((-1.0)*px))+((x15467*x15472))+(((-1.0)*x15459*x15466))+(((-0.29542)*x15458))+((x15468*x15472)));
evalcond[7]=(((x15470*x15472))+((x15458*x15466))+((x15463*x15472))+(((0.01)*x15469))+(((-1.0)*x15462*x15463))+(((-1.0)*py))+(((-1.0)*x15462*x15470))+(((-0.29542)*x15459))+((r12*x15465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x15480=(cj6*sj5);
IkReal x15481=(sj5*sj6);
IkReal x15482=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r02*x15482))+((r01*x15480))+((r00*x15481)))))+(IKabs(((((-1.0)*r12*x15482))+((r10*x15481))+((r11*x15480))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15483=(cj4*cj5);
CheckValue<IkReal> x15484=IKPowWithIntegerCheck(sj1,-1);
if(!x15484.valid){
continue;
}
CheckValue<IkReal> x15485=IKPowWithIntegerCheck(cj1,-1);
if(!x15485.valid){
continue;
}
if( IKabs(((x15484.value)*((((cj6*r10*sj4))+((cj6*r11*x15483))+((r10*sj6*x15483))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15485.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15484.value)*((((cj6*r10*sj4))+((cj6*r11*x15483))+((r10*sj6*x15483))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))))+IKsqr(((x15485.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x15484.value)*((((cj6*r10*sj4))+((cj6*r11*x15483))+((r10*sj6*x15483))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))), ((x15485.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15486=IKcos(j0);
IkReal x15487=IKsin(j0);
IkReal x15488=((1.0)*sj4);
IkReal x15489=(cj6*sj4);
IkReal x15490=((0.37429)*sj5);
IkReal x15491=(r10*sj6);
IkReal x15492=(r01*sj6);
IkReal x15493=((0.36442)*cj1);
IkReal x15494=(cj6*r01);
IkReal x15495=(r00*sj6);
IkReal x15496=(r12*sj5);
IkReal x15497=(cj6*r11);
IkReal x15498=(r02*sj5);
IkReal x15499=((1.0)*cj5);
IkReal x15500=((0.01)*cj5);
IkReal x15501=(cj4*cj6);
IkReal x15502=((0.37429)*cj5);
IkReal x15503=(cj4*cj5);
IkReal x15504=((1.0)*cj4);
IkReal x15505=(r11*sj6);
IkReal x15506=(cj5*x15497);
IkReal x15507=((0.069)*x15486);
IkReal x15508=((0.069)*x15487);
IkReal x15509=((1.0)*x15487);
IkReal x15510=((1.0)*x15486);
evalcond[0]=((((-1.0)*cj1*x15510))+((sj5*x15495))+((sj5*x15494))+(((-1.0)*r02*x15499)));
evalcond[1]=((((-1.0)*cj1*x15509))+((sj5*x15491))+((sj5*x15497))+(((-1.0)*r12*x15499)));
evalcond[2]=(((r10*x15501))+(((-1.0)*x15488*x15506))+(((-1.0)*cj5*x15488*x15491))+(((-1.0)*x15488*x15496))+(((-1.0)*x15504*x15505))+x15486);
evalcond[3]=(((r10*x15489))+((x15491*x15503))+(((-1.0)*x15488*x15505))+((cj4*x15496))+(((-1.0)*sj1*x15509))+((x15497*x15503)));
evalcond[4]=((((-1.0)*x15488*x15492))+((cj4*x15498))+((x15495*x15503))+((x15494*x15503))+(((-1.0)*sj1*x15510))+((r00*x15489)));
evalcond[5]=((((-1.0)*x15509))+((r00*x15501))+(((-1.0)*cj5*x15488*x15495))+(((-1.0)*cj5*x15488*x15494))+(((-1.0)*x15488*x15498))+(((-1.0)*x15492*x15504)));
evalcond[6]=((((0.01)*x15498))+(((-1.0)*px))+((r02*x15502))+(((-1.0)*sj1*x15507))+((x15495*x15500))+x15507+((x15486*x15493))+((x15494*x15500))+(((-1.0)*x15490*x15495))+(((-1.0)*x15490*x15494)));
evalcond[7]=((((0.01)*x15496))+((x15487*x15493))+((x15491*x15500))+(((-1.0)*py))+((r12*x15502))+(((-1.0)*sj1*x15508))+x15508+((x15497*x15500))+(((-1.0)*x15490*x15491))+(((-1.0)*x15490*x15497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15511=(cj6*r11);
IkReal x15512=(cj5*sj4);
IkReal x15513=(r10*sj6);
CheckValue<IkReal> x15514=IKPowWithIntegerCheck(cj1,-1);
if(!x15514.valid){
continue;
}
if( IKabs(((x15514.value)*(((((-1.0)*cj5*r12))+((sj5*x15513))+((sj5*x15511)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*cj6*r10))+((x15512*x15513))+((cj4*r11*sj6))+((x15511*x15512))+((r12*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15514.value)*(((((-1.0)*cj5*r12))+((sj5*x15513))+((sj5*x15511))))))+IKsqr(((((-1.0)*cj4*cj6*r10))+((x15512*x15513))+((cj4*r11*sj6))+((x15511*x15512))+((r12*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x15514.value)*(((((-1.0)*cj5*r12))+((sj5*x15513))+((sj5*x15511))))), ((((-1.0)*cj4*cj6*r10))+((x15512*x15513))+((cj4*r11*sj6))+((x15511*x15512))+((r12*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15515=IKcos(j0);
IkReal x15516=IKsin(j0);
IkReal x15517=((1.0)*sj4);
IkReal x15518=(cj6*sj4);
IkReal x15519=((0.37429)*sj5);
IkReal x15520=(r10*sj6);
IkReal x15521=(r01*sj6);
IkReal x15522=((0.36442)*cj1);
IkReal x15523=(cj6*r01);
IkReal x15524=(r00*sj6);
IkReal x15525=(r12*sj5);
IkReal x15526=(cj6*r11);
IkReal x15527=(r02*sj5);
IkReal x15528=((1.0)*cj5);
IkReal x15529=((0.01)*cj5);
IkReal x15530=(cj4*cj6);
IkReal x15531=((0.37429)*cj5);
IkReal x15532=(cj4*cj5);
IkReal x15533=((1.0)*cj4);
IkReal x15534=(r11*sj6);
IkReal x15535=(cj5*x15526);
IkReal x15536=((0.069)*x15515);
IkReal x15537=((0.069)*x15516);
IkReal x15538=((1.0)*x15516);
IkReal x15539=((1.0)*x15515);
evalcond[0]=(((sj5*x15523))+((sj5*x15524))+(((-1.0)*cj1*x15539))+(((-1.0)*r02*x15528)));
evalcond[1]=(((sj5*x15520))+((sj5*x15526))+(((-1.0)*r12*x15528))+(((-1.0)*cj1*x15538)));
evalcond[2]=(((r10*x15530))+(((-1.0)*x15533*x15534))+(((-1.0)*x15517*x15535))+(((-1.0)*x15517*x15525))+(((-1.0)*cj5*x15517*x15520))+x15515);
evalcond[3]=(((r10*x15518))+((x15520*x15532))+(((-1.0)*x15517*x15534))+((cj4*x15525))+(((-1.0)*sj1*x15538))+((x15526*x15532)));
evalcond[4]=(((x15524*x15532))+((x15523*x15532))+(((-1.0)*x15517*x15521))+((cj4*x15527))+(((-1.0)*sj1*x15539))+((r00*x15518)));
evalcond[5]=((((-1.0)*x15521*x15533))+((r00*x15530))+(((-1.0)*x15538))+(((-1.0)*x15517*x15527))+(((-1.0)*cj5*x15517*x15523))+(((-1.0)*cj5*x15517*x15524)));
evalcond[6]=(((r02*x15531))+((x15523*x15529))+((x15524*x15529))+(((-1.0)*px))+(((0.01)*x15527))+(((-1.0)*x15519*x15523))+(((-1.0)*x15519*x15524))+x15536+(((-1.0)*sj1*x15536))+((x15515*x15522)));
evalcond[7]=(((x15520*x15529))+((x15516*x15522))+(((-1.0)*py))+(((0.01)*x15525))+(((-1.0)*x15519*x15520))+(((-1.0)*x15519*x15526))+((r12*x15531))+x15537+(((-1.0)*sj1*x15537))+((x15526*x15529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15540=(cj6*sj5);
IkReal x15541=(sj5*sj6);
IkReal x15542=((1.0)*cj5);
CheckValue<IkReal> x15543=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15543.valid){
continue;
}
CheckValue<IkReal> x15544 = IKatan2WithCheck(IkReal((((r10*x15541))+((r11*x15540))+(((-1.0)*r12*x15542)))),IkReal((((r01*x15540))+((r00*x15541))+(((-1.0)*r02*x15542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15544.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15543.value)))+(x15544.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15545=IKcos(j0);
IkReal x15546=IKsin(j0);
IkReal x15547=((1.0)*sj4);
IkReal x15548=(cj6*sj4);
IkReal x15549=((0.37429)*sj5);
IkReal x15550=(r10*sj6);
IkReal x15551=(r01*sj6);
IkReal x15552=((0.36442)*cj1);
IkReal x15553=(cj6*r01);
IkReal x15554=(r00*sj6);
IkReal x15555=(r12*sj5);
IkReal x15556=(cj6*r11);
IkReal x15557=(r02*sj5);
IkReal x15558=((1.0)*cj5);
IkReal x15559=((0.01)*cj5);
IkReal x15560=(cj4*cj6);
IkReal x15561=((0.37429)*cj5);
IkReal x15562=(cj4*cj5);
IkReal x15563=((1.0)*cj4);
IkReal x15564=(r11*sj6);
IkReal x15565=(cj5*x15556);
IkReal x15566=((0.069)*x15545);
IkReal x15567=((0.069)*x15546);
IkReal x15568=((1.0)*x15546);
IkReal x15569=((1.0)*x15545);
evalcond[0]=((((-1.0)*cj1*x15569))+(((-1.0)*r02*x15558))+((sj5*x15553))+((sj5*x15554)));
evalcond[1]=((((-1.0)*cj1*x15568))+(((-1.0)*r12*x15558))+((sj5*x15550))+((sj5*x15556)));
evalcond[2]=((((-1.0)*x15547*x15565))+(((-1.0)*x15547*x15555))+((r10*x15560))+(((-1.0)*cj5*x15547*x15550))+x15545+(((-1.0)*x15563*x15564)));
evalcond[3]=((((-1.0)*sj1*x15568))+((x15550*x15562))+(((-1.0)*x15547*x15564))+((x15556*x15562))+((r10*x15548))+((cj4*x15555)));
evalcond[4]=((((-1.0)*sj1*x15569))+((cj4*x15557))+((x15553*x15562))+(((-1.0)*x15547*x15551))+((x15554*x15562))+((r00*x15548)));
evalcond[5]=((((-1.0)*x15551*x15563))+(((-1.0)*x15547*x15557))+(((-1.0)*cj5*x15547*x15554))+(((-1.0)*cj5*x15547*x15553))+((r00*x15560))+(((-1.0)*x15568)));
evalcond[6]=((((-1.0)*sj1*x15566))+((r02*x15561))+(((-1.0)*px))+((x15545*x15552))+x15566+((x15554*x15559))+(((0.01)*x15557))+((x15553*x15559))+(((-1.0)*x15549*x15553))+(((-1.0)*x15549*x15554)));
evalcond[7]=(((x15556*x15559))+(((-1.0)*sj1*x15567))+((x15550*x15559))+((r12*x15561))+(((-1.0)*py))+((x15546*x15552))+x15567+(((0.01)*x15555))+(((-1.0)*x15549*x15556))+(((-1.0)*x15549*x15550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x15570=(cj6*sj5);
IkReal x15571=(sj5*sj6);
IkReal x15572=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r10*x15571))+(((-1.0)*r12*x15572))+((r11*x15570)))))+(IKabs(((((-1.0)*r02*x15572))+((r00*x15571))+((r01*x15570))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15573=((1.0)*cj6);
IkReal x15574=((1.0)*cj4);
CheckValue<IkReal> x15575=IKPowWithIntegerCheck(sj1,-1);
if(!x15575.valid){
continue;
}
CheckValue<IkReal> x15576=IKPowWithIntegerCheck(cj1,-1);
if(!x15576.valid){
continue;
}
if( IKabs(((x15575.value)*(((((-1.0)*cj4*cj5*r11*x15573))+((r11*sj4*sj6))+(((-1.0)*cj5*r10*sj6*x15574))+(((-1.0)*r12*sj5*x15574))+(((-1.0)*r10*sj4*x15573)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15576.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15575.value)*(((((-1.0)*cj4*cj5*r11*x15573))+((r11*sj4*sj6))+(((-1.0)*cj5*r10*sj6*x15574))+(((-1.0)*r12*sj5*x15574))+(((-1.0)*r10*sj4*x15573))))))+IKsqr(((x15576.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x15575.value)*(((((-1.0)*cj4*cj5*r11*x15573))+((r11*sj4*sj6))+(((-1.0)*cj5*r10*sj6*x15574))+(((-1.0)*r12*sj5*x15574))+(((-1.0)*r10*sj4*x15573))))), ((x15576.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15577=IKsin(j0);
IkReal x15578=IKcos(j0);
IkReal x15579=((1.0)*sj4);
IkReal x15580=(cj6*sj4);
IkReal x15581=((0.37429)*sj5);
IkReal x15582=(r10*sj6);
IkReal x15583=(r01*sj6);
IkReal x15584=((0.36442)*cj1);
IkReal x15585=(cj6*r01);
IkReal x15586=(r00*sj6);
IkReal x15587=(cj6*r11);
IkReal x15588=(r02*sj5);
IkReal x15589=((0.01)*cj5);
IkReal x15590=(r12*sj5);
IkReal x15591=(cj4*cj6);
IkReal x15592=(cj5*r02);
IkReal x15593=(cj4*cj5);
IkReal x15594=((1.0)*cj4);
IkReal x15595=(r11*sj6);
IkReal x15596=(cj5*r12);
IkReal x15597=(cj5*x15587);
IkReal x15598=(sj1*x15577);
IkReal x15599=((1.0)*x15578);
IkReal x15600=((0.069)*x15578);
evalcond[0]=((((-1.0)*x15592))+(((-1.0)*cj1*x15599))+((sj5*x15586))+((sj5*x15585)));
evalcond[1]=((((-1.0)*x15596))+(((-1.0)*cj1*x15577))+((sj5*x15587))+((sj5*x15582)));
evalcond[2]=((((-1.0)*x15579*x15595))+((cj4*x15590))+((x15582*x15593))+((r10*x15580))+x15598+((x15587*x15593)));
evalcond[3]=(((sj1*x15578))+((cj4*x15588))+((x15585*x15593))+(((-1.0)*x15579*x15583))+((r00*x15580))+((x15586*x15593)));
evalcond[4]=((((-1.0)*cj5*x15579*x15585))+(((-1.0)*cj5*x15579*x15586))+(((-1.0)*x15583*x15594))+(((-1.0)*x15579*x15588))+x15577+((r00*x15591)));
evalcond[5]=((((-1.0)*cj5*x15579*x15582))+(((-1.0)*x15579*x15597))+(((-1.0)*x15579*x15590))+((r10*x15591))+(((-1.0)*x15599))+(((-1.0)*x15594*x15595)));
evalcond[6]=(((sj1*x15600))+(((0.37429)*x15592))+(((0.01)*x15588))+((x15585*x15589))+((x15578*x15584))+(((-1.0)*px))+x15600+((x15586*x15589))+(((-1.0)*x15581*x15585))+(((-1.0)*x15581*x15586)));
evalcond[7]=((((0.37429)*x15596))+((x15582*x15589))+(((-1.0)*py))+(((-1.0)*x15581*x15582))+(((-1.0)*x15581*x15587))+((x15587*x15589))+(((0.01)*x15590))+((x15577*x15584))+(((0.069)*x15598))+(((0.069)*x15577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15601=(cj6*r01);
IkReal x15602=(cj5*sj4);
IkReal x15603=(r00*sj6);
CheckValue<IkReal> x15604=IKPowWithIntegerCheck(cj1,-1);
if(!x15604.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*cj6*r00))+((x15602*x15603))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x15601*x15602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15604.value)*((((sj5*x15603))+((sj5*x15601))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*cj6*r00))+((x15602*x15603))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x15601*x15602))))+IKsqr(((x15604.value)*((((sj5*x15603))+((sj5*x15601))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*cj6*r00))+((x15602*x15603))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x15601*x15602))), ((x15604.value)*((((sj5*x15603))+((sj5*x15601))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15605=IKsin(j0);
IkReal x15606=IKcos(j0);
IkReal x15607=((1.0)*sj4);
IkReal x15608=(cj6*sj4);
IkReal x15609=((0.37429)*sj5);
IkReal x15610=(r10*sj6);
IkReal x15611=(r01*sj6);
IkReal x15612=((0.36442)*cj1);
IkReal x15613=(cj6*r01);
IkReal x15614=(r00*sj6);
IkReal x15615=(cj6*r11);
IkReal x15616=(r02*sj5);
IkReal x15617=((0.01)*cj5);
IkReal x15618=(r12*sj5);
IkReal x15619=(cj4*cj6);
IkReal x15620=(cj5*r02);
IkReal x15621=(cj4*cj5);
IkReal x15622=((1.0)*cj4);
IkReal x15623=(r11*sj6);
IkReal x15624=(cj5*r12);
IkReal x15625=(cj5*x15615);
IkReal x15626=(sj1*x15605);
IkReal x15627=((1.0)*x15606);
IkReal x15628=((0.069)*x15606);
evalcond[0]=((((-1.0)*cj1*x15627))+(((-1.0)*x15620))+((sj5*x15614))+((sj5*x15613)));
evalcond[1]=((((-1.0)*cj1*x15605))+(((-1.0)*x15624))+((sj5*x15615))+((sj5*x15610)));
evalcond[2]=(((cj4*x15618))+(((-1.0)*x15607*x15623))+((x15615*x15621))+((x15610*x15621))+x15626+((r10*x15608)));
evalcond[3]=(((sj1*x15606))+((cj4*x15616))+((x15614*x15621))+(((-1.0)*x15607*x15611))+((x15613*x15621))+((r00*x15608)));
evalcond[4]=(((r00*x15619))+(((-1.0)*x15611*x15622))+(((-1.0)*x15607*x15616))+x15605+(((-1.0)*cj5*x15607*x15614))+(((-1.0)*cj5*x15607*x15613)));
evalcond[5]=((((-1.0)*x15627))+(((-1.0)*x15607*x15625))+(((-1.0)*x15622*x15623))+(((-1.0)*x15607*x15618))+((r10*x15619))+(((-1.0)*cj5*x15607*x15610)));
evalcond[6]=(((x15614*x15617))+((sj1*x15628))+(((-1.0)*x15609*x15613))+(((-1.0)*x15609*x15614))+(((0.37429)*x15620))+(((-1.0)*px))+x15628+((x15606*x15612))+(((0.01)*x15616))+((x15613*x15617)));
evalcond[7]=((((-1.0)*x15609*x15610))+(((-1.0)*x15609*x15615))+(((0.37429)*x15624))+(((-1.0)*py))+((x15615*x15617))+((x15610*x15617))+((x15605*x15612))+(((0.01)*x15618))+(((0.069)*x15626))+(((0.069)*x15605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15629=(cj6*sj5);
IkReal x15630=(sj5*sj6);
IkReal x15631=((1.0)*cj5);
CheckValue<IkReal> x15632 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15631))+((r11*x15629))+((r10*x15630)))),IkReal((((r01*x15629))+((r00*x15630))+(((-1.0)*r02*x15631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15632.valid){
continue;
}
CheckValue<IkReal> x15633=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15633.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x15632.value)+(((1.5707963267949)*(x15633.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15634=IKsin(j0);
IkReal x15635=IKcos(j0);
IkReal x15636=((1.0)*sj4);
IkReal x15637=(cj6*sj4);
IkReal x15638=((0.37429)*sj5);
IkReal x15639=(r10*sj6);
IkReal x15640=(r01*sj6);
IkReal x15641=((0.36442)*cj1);
IkReal x15642=(cj6*r01);
IkReal x15643=(r00*sj6);
IkReal x15644=(cj6*r11);
IkReal x15645=(r02*sj5);
IkReal x15646=((0.01)*cj5);
IkReal x15647=(r12*sj5);
IkReal x15648=(cj4*cj6);
IkReal x15649=(cj5*r02);
IkReal x15650=(cj4*cj5);
IkReal x15651=((1.0)*cj4);
IkReal x15652=(r11*sj6);
IkReal x15653=(cj5*r12);
IkReal x15654=(cj5*x15644);
IkReal x15655=(sj1*x15634);
IkReal x15656=((1.0)*x15635);
IkReal x15657=((0.069)*x15635);
evalcond[0]=((((-1.0)*cj1*x15656))+(((-1.0)*x15649))+((sj5*x15643))+((sj5*x15642)));
evalcond[1]=((((-1.0)*cj1*x15634))+(((-1.0)*x15653))+((sj5*x15644))+((sj5*x15639)));
evalcond[2]=((((-1.0)*x15636*x15652))+x15655+((r10*x15637))+((cj4*x15647))+((x15644*x15650))+((x15639*x15650)));
evalcond[3]=(((r00*x15637))+(((-1.0)*x15636*x15640))+((sj1*x15635))+((x15642*x15650))+((cj4*x15645))+((x15643*x15650)));
evalcond[4]=((((-1.0)*cj5*x15636*x15643))+(((-1.0)*cj5*x15636*x15642))+((r00*x15648))+(((-1.0)*x15636*x15645))+x15634+(((-1.0)*x15640*x15651)));
evalcond[5]=((((-1.0)*cj5*x15636*x15639))+(((-1.0)*x15651*x15652))+(((-1.0)*x15636*x15654))+(((-1.0)*x15636*x15647))+(((-1.0)*x15656))+((r10*x15648)));
evalcond[6]=((((0.01)*x15645))+(((-1.0)*x15638*x15642))+(((-1.0)*x15638*x15643))+((x15642*x15646))+(((-1.0)*px))+x15657+((sj1*x15657))+((x15643*x15646))+(((0.37429)*x15649))+((x15635*x15641)));
evalcond[7]=(((x15644*x15646))+(((0.01)*x15647))+(((-1.0)*x15638*x15644))+((x15639*x15646))+(((-1.0)*x15638*x15639))+((x15634*x15641))+(((-1.0)*py))+(((0.069)*x15655))+(((0.069)*x15634))+(((0.37429)*x15653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x15665=IKPowWithIntegerCheck(cj1,-1);
if(!x15665.valid){
continue;
}
IkReal x15658=x15665.value;
IkReal x15659=(cj1*r10);
IkReal x15660=(cj1*cj4);
IkReal x15661=(sj2*sj5);
IkReal x15662=(cj6*r01);
IkReal x15663=(r00*sj6);
IkReal x15664=((1.0)*cj5*r02);
CheckValue<IkReal> x15666=IKPowWithIntegerCheck(cj2,-1);
if(!x15666.valid){
continue;
}
CheckValue<IkReal> x15667=IKPowWithIntegerCheck(sj1,-1);
if(!x15667.valid){
continue;
}
if( IKabs((x15658*(x15666.value)*(x15667.value)*((((cj6*sj4*x15659))+(((-1.0)*sj2*x15664))+((r12*sj5*x15660))+((x15661*x15662))+((x15661*x15663))+(((-1.0)*cj1*r11*sj4*sj6))+((cj5*cj6*r11*x15660))+((cj4*cj5*sj6*x15659)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15658*(((((-1.0)*x15664))+((sj5*x15663))+((sj5*x15662)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15658*(x15666.value)*(x15667.value)*((((cj6*sj4*x15659))+(((-1.0)*sj2*x15664))+((r12*sj5*x15660))+((x15661*x15662))+((x15661*x15663))+(((-1.0)*cj1*r11*sj4*sj6))+((cj5*cj6*r11*x15660))+((cj4*cj5*sj6*x15659))))))+IKsqr((x15658*(((((-1.0)*x15664))+((sj5*x15663))+((sj5*x15662))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x15658*(x15666.value)*(x15667.value)*((((cj6*sj4*x15659))+(((-1.0)*sj2*x15664))+((r12*sj5*x15660))+((x15661*x15662))+((x15661*x15663))+(((-1.0)*cj1*r11*sj4*sj6))+((cj5*cj6*r11*x15660))+((cj4*cj5*sj6*x15659))))), (x15658*(((((-1.0)*x15664))+((sj5*x15663))+((sj5*x15662))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15668=IKcos(j0);
IkReal x15669=IKsin(j0);
IkReal x15670=((1.0)*sj4);
IkReal x15671=(cj6*sj4);
IkReal x15672=((0.37429)*sj5);
IkReal x15673=(r10*sj6);
IkReal x15674=((0.36442)*cj1);
IkReal x15675=(cj6*r11);
IkReal x15676=(r01*sj6);
IkReal x15677=(r00*sj6);
IkReal x15678=((0.069)*sj2);
IkReal x15679=(cj6*r01);
IkReal x15680=(r12*sj5);
IkReal x15681=(r02*sj5);
IkReal x15682=((1.0)*sj1);
IkReal x15683=((0.01)*cj5);
IkReal x15684=((1.0)*cj1);
IkReal x15685=(cj4*cj6);
IkReal x15686=(cj5*r02);
IkReal x15687=(cj4*cj5);
IkReal x15688=((1.0)*cj4);
IkReal x15689=(r11*sj6);
IkReal x15690=(cj5*r12);
IkReal x15691=(cj5*x15675);
IkReal x15692=(cj2*x15668);
IkReal x15693=((0.069)*x15669);
IkReal x15694=(sj2*x15668);
IkReal x15695=((1.0)*x15669);
evalcond[0]=(((sj5*x15679))+((sj5*x15677))+(((-1.0)*x15686))+(((-1.0)*x15668*x15684)));
evalcond[1]=((((-1.0)*x15669*x15684))+((sj5*x15675))+((sj5*x15673))+(((-1.0)*x15690)));
evalcond[2]=((((-1.0)*cj2*x15669*x15682))+((r10*x15671))+x15694+(((-1.0)*x15670*x15689))+((x15673*x15687))+((cj4*x15680))+((x15675*x15687)));
evalcond[3]=((((-1.0)*sj2*x15695))+((x15679*x15687))+(((-1.0)*x15682*x15692))+((x15677*x15687))+(((-1.0)*x15670*x15676))+((r00*x15671))+((cj4*x15681)));
evalcond[4]=(((r10*x15685))+(((-1.0)*x15688*x15689))+((sj1*sj2*x15669))+x15692+(((-1.0)*x15670*x15680))+(((-1.0)*x15670*x15691))+(((-1.0)*cj5*x15670*x15673)));
evalcond[5]=((((-1.0)*x15676*x15688))+((r00*x15685))+(((-1.0)*cj2*x15695))+((sj1*x15694))+(((-1.0)*x15670*x15681))+(((-1.0)*cj5*x15670*x15679))+(((-1.0)*cj5*x15670*x15677)));
evalcond[6]=((((-1.0)*x15672*x15677))+(((-1.0)*x15672*x15679))+((x15668*x15674))+((x15679*x15683))+(((0.069)*x15668))+(((-1.0)*px))+((x15677*x15683))+(((0.37429)*x15686))+(((-0.069)*sj1*x15692))+(((-1.0)*x15669*x15678))+(((0.01)*x15681)));
evalcond[7]=((((0.37429)*x15690))+(((-1.0)*x15672*x15673))+(((-1.0)*x15672*x15675))+((x15668*x15678))+((x15669*x15674))+(((-1.0)*cj2*sj1*x15693))+(((-1.0)*py))+x15693+((x15673*x15683))+(((0.01)*x15680))+((x15675*x15683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x15703=IKPowWithIntegerCheck(cj1,-1);
if(!x15703.valid){
continue;
}
IkReal x15696=x15703.value;
IkReal x15697=(cj1*cj4);
IkReal x15698=(cj2*sj1);
IkReal x15699=(cj5*r02);
IkReal x15700=(r00*sj6);
IkReal x15701=(cj1*sj4);
IkReal x15702=(cj6*r01*sj5);
CheckValue<IkReal> x15704=IKPowWithIntegerCheck(sj2,-1);
if(!x15704.valid){
continue;
}
if( IKabs((x15696*(x15704.value)*((((cj5*x15697*x15700))+((r02*sj5*x15697))+(((-1.0)*r01*sj6*x15701))+((cj6*r00*x15701))+(((-1.0)*sj5*x15698*x15700))+((x15698*x15699))+((cj5*cj6*r01*x15697))+(((-1.0)*x15698*x15702)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15696*((x15702+((sj5*x15700))+(((-1.0)*x15699)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15696*(x15704.value)*((((cj5*x15697*x15700))+((r02*sj5*x15697))+(((-1.0)*r01*sj6*x15701))+((cj6*r00*x15701))+(((-1.0)*sj5*x15698*x15700))+((x15698*x15699))+((cj5*cj6*r01*x15697))+(((-1.0)*x15698*x15702))))))+IKsqr((x15696*((x15702+((sj5*x15700))+(((-1.0)*x15699))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x15696*(x15704.value)*((((cj5*x15697*x15700))+((r02*sj5*x15697))+(((-1.0)*r01*sj6*x15701))+((cj6*r00*x15701))+(((-1.0)*sj5*x15698*x15700))+((x15698*x15699))+((cj5*cj6*r01*x15697))+(((-1.0)*x15698*x15702))))), (x15696*((x15702+((sj5*x15700))+(((-1.0)*x15699))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15705=IKcos(j0);
IkReal x15706=IKsin(j0);
IkReal x15707=((1.0)*sj4);
IkReal x15708=(cj6*sj4);
IkReal x15709=((0.37429)*sj5);
IkReal x15710=(r10*sj6);
IkReal x15711=((0.36442)*cj1);
IkReal x15712=(cj6*r11);
IkReal x15713=(r01*sj6);
IkReal x15714=(r00*sj6);
IkReal x15715=((0.069)*sj2);
IkReal x15716=(cj6*r01);
IkReal x15717=(r12*sj5);
IkReal x15718=(r02*sj5);
IkReal x15719=((1.0)*sj1);
IkReal x15720=((0.01)*cj5);
IkReal x15721=((1.0)*cj1);
IkReal x15722=(cj4*cj6);
IkReal x15723=(cj5*r02);
IkReal x15724=(cj4*cj5);
IkReal x15725=((1.0)*cj4);
IkReal x15726=(r11*sj6);
IkReal x15727=(cj5*r12);
IkReal x15728=(cj5*x15712);
IkReal x15729=(cj2*x15705);
IkReal x15730=((0.069)*x15706);
IkReal x15731=(sj2*x15705);
IkReal x15732=((1.0)*x15706);
evalcond[0]=((((-1.0)*x15705*x15721))+(((-1.0)*x15723))+((sj5*x15714))+((sj5*x15716)));
evalcond[1]=((((-1.0)*x15727))+(((-1.0)*x15706*x15721))+((sj5*x15710))+((sj5*x15712)));
evalcond[2]=((((-1.0)*x15707*x15726))+((cj4*x15717))+(((-1.0)*cj2*x15706*x15719))+((x15710*x15724))+x15731+((r10*x15708))+((x15712*x15724)));
evalcond[3]=(((cj4*x15718))+(((-1.0)*sj2*x15732))+((r00*x15708))+((x15714*x15724))+(((-1.0)*x15707*x15713))+(((-1.0)*x15719*x15729))+((x15716*x15724)));
evalcond[4]=((((-1.0)*x15707*x15728))+(((-1.0)*cj5*x15707*x15710))+(((-1.0)*x15725*x15726))+x15729+((sj1*sj2*x15706))+((r10*x15722))+(((-1.0)*x15707*x15717)));
evalcond[5]=((((-1.0)*x15713*x15725))+(((-1.0)*cj5*x15707*x15714))+(((-1.0)*cj5*x15707*x15716))+((r00*x15722))+((sj1*x15731))+(((-1.0)*cj2*x15732))+(((-1.0)*x15707*x15718)));
evalcond[6]=((((-1.0)*x15706*x15715))+(((-0.069)*sj1*x15729))+(((0.069)*x15705))+(((-1.0)*px))+(((0.37429)*x15723))+(((-1.0)*x15709*x15714))+(((-1.0)*x15709*x15716))+((x15705*x15711))+(((0.01)*x15718))+((x15714*x15720))+((x15716*x15720)));
evalcond[7]=((((-1.0)*py))+(((0.37429)*x15727))+(((-1.0)*x15709*x15710))+(((-1.0)*x15709*x15712))+((x15710*x15720))+x15730+((x15705*x15715))+(((-1.0)*cj2*sj1*x15730))+(((0.01)*x15717))+((x15706*x15711))+((x15712*x15720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15733=(cj6*sj5);
IkReal x15734=(sj5*sj6);
IkReal x15735=((1.0)*cj5);
CheckValue<IkReal> x15736=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15736.valid){
continue;
}
CheckValue<IkReal> x15737 = IKatan2WithCheck(IkReal((((r11*x15733))+(((-1.0)*r12*x15735))+((r10*x15734)))),IkReal((((r00*x15734))+(((-1.0)*r02*x15735))+((r01*x15733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15737.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15736.value)))+(x15737.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15738=IKcos(j0);
IkReal x15739=IKsin(j0);
IkReal x15740=((1.0)*sj4);
IkReal x15741=(cj6*sj4);
IkReal x15742=((0.37429)*sj5);
IkReal x15743=(r10*sj6);
IkReal x15744=((0.36442)*cj1);
IkReal x15745=(cj6*r11);
IkReal x15746=(r01*sj6);
IkReal x15747=(r00*sj6);
IkReal x15748=((0.069)*sj2);
IkReal x15749=(cj6*r01);
IkReal x15750=(r12*sj5);
IkReal x15751=(r02*sj5);
IkReal x15752=((1.0)*sj1);
IkReal x15753=((0.01)*cj5);
IkReal x15754=((1.0)*cj1);
IkReal x15755=(cj4*cj6);
IkReal x15756=(cj5*r02);
IkReal x15757=(cj4*cj5);
IkReal x15758=((1.0)*cj4);
IkReal x15759=(r11*sj6);
IkReal x15760=(cj5*r12);
IkReal x15761=(cj5*x15745);
IkReal x15762=(cj2*x15738);
IkReal x15763=((0.069)*x15739);
IkReal x15764=(sj2*x15738);
IkReal x15765=((1.0)*x15739);
evalcond[0]=(((sj5*x15749))+((sj5*x15747))+(((-1.0)*x15756))+(((-1.0)*x15738*x15754)));
evalcond[1]=(((sj5*x15745))+((sj5*x15743))+(((-1.0)*x15739*x15754))+(((-1.0)*x15760)));
evalcond[2]=(((x15743*x15757))+(((-1.0)*x15740*x15759))+(((-1.0)*cj2*x15739*x15752))+x15764+((x15745*x15757))+((cj4*x15750))+((r10*x15741)));
evalcond[3]=(((r00*x15741))+((x15749*x15757))+(((-1.0)*x15752*x15762))+((x15747*x15757))+(((-1.0)*sj2*x15765))+((cj4*x15751))+(((-1.0)*x15740*x15746)));
evalcond[4]=((((-1.0)*x15758*x15759))+(((-1.0)*x15740*x15750))+((r10*x15755))+(((-1.0)*cj5*x15740*x15743))+x15762+((sj1*sj2*x15739))+(((-1.0)*x15740*x15761)));
evalcond[5]=((((-1.0)*x15740*x15751))+(((-1.0)*x15746*x15758))+(((-1.0)*cj5*x15740*x15747))+(((-1.0)*cj5*x15740*x15749))+(((-1.0)*cj2*x15765))+((sj1*x15764))+((r00*x15755)));
evalcond[6]=((((0.01)*x15751))+(((-1.0)*x15742*x15747))+(((-1.0)*x15742*x15749))+(((-1.0)*x15739*x15748))+(((-1.0)*px))+(((-0.069)*sj1*x15762))+((x15749*x15753))+(((0.37429)*x15756))+((x15738*x15744))+((x15747*x15753))+(((0.069)*x15738)));
evalcond[7]=(((x15743*x15753))+(((0.01)*x15750))+(((-1.0)*x15742*x15745))+(((-1.0)*x15742*x15743))+((x15739*x15744))+(((-1.0)*cj2*sj1*x15763))+(((-1.0)*py))+x15763+((x15745*x15753))+((x15738*x15748))+(((0.37429)*x15760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15766=(cj6*sj5);
IkReal x15767=(sj5*sj6);
IkReal x15768=((1.0)*cj5);
CheckValue<IkReal> x15769=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15769.valid){
continue;
}
CheckValue<IkReal> x15770 = IKatan2WithCheck(IkReal((((r10*x15767))+((r11*x15766))+(((-1.0)*r12*x15768)))),IkReal((((r01*x15766))+(((-1.0)*r02*x15768))+((r00*x15767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15770.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15769.value)))+(x15770.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x15771=IKcos(j0);
IkReal x15772=IKsin(j0);
IkReal x15773=((0.01)*cj5);
IkReal x15774=(cj6*r11);
IkReal x15775=(r10*sj6);
IkReal x15776=((0.37429)*sj5);
IkReal x15777=(cj5*r12);
IkReal x15778=((1.0)*cj1);
IkReal x15779=((0.36442)*cj1);
IkReal x15780=(r00*sj6);
IkReal x15781=(cj6*r01);
IkReal x15782=(cj5*r02);
IkReal x15783=(cj2*sj1);
IkReal x15784=((0.01)*sj5);
IkReal x15785=((0.069)*x15772);
IkReal x15786=((0.069)*x15771);
evalcond[0]=(((sj5*x15781))+((sj5*x15780))+(((-1.0)*x15782))+(((-1.0)*x15771*x15778)));
evalcond[1]=((((-1.0)*x15772*x15778))+(((-1.0)*x15777))+((sj5*x15775))+((sj5*x15774)));
evalcond[2]=((((0.37429)*x15782))+((x15771*x15779))+(((-1.0)*x15776*x15781))+(((-1.0)*x15776*x15780))+(((-1.0)*px))+(((-1.0)*sj2*x15785))+((r02*x15784))+x15786+(((-1.0)*x15783*x15786))+((x15773*x15781))+((x15773*x15780)));
evalcond[3]=(((sj2*x15786))+((x15772*x15779))+((r12*x15784))+(((-1.0)*py))+(((-1.0)*x15775*x15776))+x15785+(((-1.0)*x15783*x15785))+((x15773*x15774))+((x15773*x15775))+(((0.37429)*x15777))+(((-1.0)*x15774*x15776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15787=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15787;
j4eval[1]=IKsign(x15787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15788=((1.0)*sj5);
IkReal x15789=(((cj5*r12))+(((-1.0)*cj6*r11*x15788))+(((-1.0)*r10*sj6*x15788)));
j4eval[0]=x15789;
j4eval[1]=IKsign(x15789);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15790=cj5*cj5;
IkReal x15791=cj6*cj6;
IkReal x15792=r22*r22;
IkReal x15793=r21*r21;
IkReal x15794=r20*r20;
IkReal x15795=((1.0)*cj5);
IkReal x15796=(cj6*r21);
IkReal x15797=(r20*sj6);
IkReal x15798=(cj1*cj2);
IkReal x15799=(cj1*sj2);
IkReal x15800=(r22*sj5);
IkReal x15801=(cj6*r20);
IkReal x15802=((2.0)*cj5);
IkReal x15803=(sj6*x15798);
IkReal x15804=((1.0)*x15793);
IkReal x15805=(x15791*x15794);
IkReal x15806=((((-1.0)*x15804))+(((-1.0)*x15797*x15800*x15802))+(((-1.0)*x15796*x15800*x15802))+(((-1.0)*x15790*x15794))+((x15790*x15805))+(((-1.0)*x15790*x15791*x15804))+(((-1.0)*x15792))+(((2.0)*x15796*x15797))+((x15790*x15792))+(((-1.0)*x15805))+(((-2.0)*x15790*x15796*x15797))+((x15791*x15793)));
j4eval[0]=x15806;
j4eval[1]=IKsign(x15806);
j4eval[2]=((IKabs(((((-1.0)*x15799*x15800))+((r21*x15803))+(((-1.0)*x15798*x15801))+(((-1.0)*x15795*x15796*x15799))+(((-1.0)*x15795*x15797*x15799)))))+(IKabs((((x15799*x15801))+(((-1.0)*x15798*x15800))+(((-1.0)*x15795*x15796*x15798))+(((-1.0)*r21*sj6*x15799))+(((-1.0)*x15795*x15797*x15798))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15807=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15807;
j4eval[1]=IKsign(x15807);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15808=((1.0)*sj5);
IkReal x15809=(((cj5*r12))+(((-1.0)*r10*sj6*x15808))+(((-1.0)*cj6*r11*x15808)));
j4eval[0]=x15809;
j4eval[1]=IKsign(x15809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15810=cj6*cj6;
IkReal x15811=cj5*cj5;
IkReal x15812=(cj5*sj5);
IkReal x15813=(cj6*r21);
IkReal x15814=((1.0)*r11);
IkReal x15815=(r10*r20);
IkReal x15816=(r10*sj6);
IkReal x15817=(r12*r22);
IkReal x15818=(r21*x15810);
IkReal x15819=(cj6*r20*sj6);
IkReal x15820=(r11*x15811);
IkReal x15821=((1.0)*x15811);
IkReal x15822=((((-1.0)*x15814*x15818))+(((-1.0)*x15814*x15819))+((r11*r21))+((r22*x15812*x15816))+((x15811*x15815))+((x15819*x15820))+((r12*x15812*x15813))+(((-1.0)*x15813*x15816))+((r12*r20*sj6*x15812))+((x15811*x15813*x15816))+((x15810*x15815))+((x15818*x15820))+(((-1.0)*x15817*x15821))+(((-1.0)*x15810*x15815*x15821))+x15817+((cj6*r11*r22*x15812)));
j4eval[0]=x15822;
j4eval[1]=IKsign(x15822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15823=cj6*cj6;
IkReal x15824=cj5*cj5;
IkReal x15825=((1.0)*r11);
IkReal x15826=(cj6*r20);
IkReal x15827=(cj0*cj2);
IkReal x15828=(cj5*r20);
IkReal x15829=(r12*r22);
IkReal x15830=(cj6*r21);
IkReal x15831=(sj0*sj2);
IkReal x15832=(r22*sj5);
IkReal x15833=(r12*sj5);
IkReal x15834=(r10*sj6);
IkReal x15835=(r21*x15823);
IkReal x15836=(sj6*x15831);
IkReal x15837=((1.0)*x15824);
IkReal x15838=(r10*x15824);
IkReal x15839=(r11*x15824);
IkReal x15840=(r10*r20*x15823);
CheckValue<IkReal> x15841=IKPowWithIntegerCheck(IKsign((((cj5*x15832*x15834))+((x15835*x15839))+(((-1.0)*x15825*x15835))+((r11*r21))+(((-1.0)*x15830*x15834))+((cj5*x15830*x15833))+((r20*x15838))+((sj6*x15828*x15833))+((x15824*x15830*x15834))+(((-1.0)*x15829*x15837))+((cj5*cj6*r11*x15832))+(((-1.0)*sj6*x15825*x15826))+x15840+x15829+(((-1.0)*x15837*x15840))+((sj6*x15826*x15839)))),-1);
if(!x15841.valid){
continue;
}
CheckValue<IkReal> x15842 = IKatan2WithCheck(IkReal((((x15828*x15836))+((sj6*x15827*x15828))+((x15831*x15832))+((cj5*x15830*x15831))+((x15827*x15832))+((cj5*x15827*x15830)))),IkReal(((((-1.0)*x15826*x15831))+((r21*sj6*x15827))+(((-1.0)*x15826*x15827))+((r21*x15836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15841.value)))+(x15842.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15843=IKcos(j4);
IkReal x15844=IKsin(j4);
IkReal x15845=(cj0*sj2);
IkReal x15846=(cj0*cj2);
IkReal x15847=(cj5*sj6);
IkReal x15848=(cj5*r01);
IkReal x15849=(cj5*r21);
IkReal x15850=((1.0)*sj0);
IkReal x15851=(cj2*x15850);
IkReal x15852=(cj5*cj6*r11);
IkReal x15853=((1.0)*x15844);
IkReal x15854=(cj6*x15843);
IkReal x15855=(sj5*x15843);
IkReal x15856=(cj6*x15844);
IkReal x15857=(sj5*x15853);
IkReal x15858=((1.0)*sj6*x15843);
evalcond[0]=(((r20*x15843*x15847))+((r20*x15856))+(((-1.0)*r21*sj6*x15853))+((r22*x15855))+((x15849*x15854)));
evalcond[1]=((((-1.0)*r20*x15847*x15853))+((r20*x15854))+(((-1.0)*r21*x15858))+(((-1.0)*r22*x15857))+(((-1.0)*cj6*x15849*x15853)));
evalcond[2]=(((r12*x15855))+(((-1.0)*r11*sj6*x15853))+(((-1.0)*x15851))+((r10*x15856))+((r10*x15843*x15847))+((x15843*x15852))+x15845);
evalcond[3]=(((r00*x15856))+((r02*x15855))+((r00*x15843*x15847))+(((-1.0)*r01*sj6*x15853))+(((-1.0)*sj2*x15850))+(((-1.0)*x15846))+((x15848*x15854)));
evalcond[4]=((((-1.0)*r10*x15847*x15853))+(((-1.0)*r12*x15857))+(((-1.0)*r11*x15858))+(((-1.0)*x15852*x15853))+((sj0*sj2))+((r10*x15854))+x15846);
evalcond[5]=((((-1.0)*r02*x15857))+(((-1.0)*r00*x15847*x15853))+((r00*x15854))+(((-1.0)*x15851))+(((-1.0)*cj6*x15848*x15853))+x15845+(((-1.0)*r01*x15858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15859=((1.0)*r21);
IkReal x15860=(sj0*sj2);
IkReal x15861=(cj0*cj2);
IkReal x15862=((1.0)*sj5);
IkReal x15863=(cj6*x15861);
IkReal x15864=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x15865=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x15862))+(((-1.0)*cj6*r11*x15862)))),-1);
if(!x15865.valid){
continue;
}
CheckValue<IkReal> x15866 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15861*x15862))+(((-1.0)*cj5*x15859*x15863))+(((-1.0)*x15861*x15864))+(((-1.0)*r22*x15860*x15862))+(((-1.0)*cj5*cj6*x15859*x15860))+(((-1.0)*x15860*x15864)))),IkReal((((cj6*r20*x15860))+((r20*x15863))+(((-1.0)*sj6*x15859*x15860))+(((-1.0)*sj6*x15859*x15861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15865.value)))+(x15866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15867=IKcos(j4);
IkReal x15868=IKsin(j4);
IkReal x15869=(cj0*sj2);
IkReal x15870=(cj0*cj2);
IkReal x15871=(cj5*sj6);
IkReal x15872=(cj5*r01);
IkReal x15873=(cj5*r21);
IkReal x15874=((1.0)*sj0);
IkReal x15875=(cj2*x15874);
IkReal x15876=(cj5*cj6*r11);
IkReal x15877=((1.0)*x15868);
IkReal x15878=(cj6*x15867);
IkReal x15879=(sj5*x15867);
IkReal x15880=(cj6*x15868);
IkReal x15881=(sj5*x15877);
IkReal x15882=((1.0)*sj6*x15867);
evalcond[0]=((((-1.0)*r21*sj6*x15877))+((r20*x15867*x15871))+((x15873*x15878))+((r20*x15880))+((r22*x15879)));
evalcond[1]=((((-1.0)*r20*x15871*x15877))+((r20*x15878))+(((-1.0)*r22*x15881))+(((-1.0)*r21*x15882))+(((-1.0)*cj6*x15873*x15877)));
evalcond[2]=(((r10*x15880))+(((-1.0)*x15875))+((r10*x15867*x15871))+((x15867*x15876))+((r12*x15879))+x15869+(((-1.0)*r11*sj6*x15877)));
evalcond[3]=((((-1.0)*sj2*x15874))+((r00*x15867*x15871))+((x15872*x15878))+((r00*x15880))+((r02*x15879))+(((-1.0)*r01*sj6*x15877))+(((-1.0)*x15870)));
evalcond[4]=((((-1.0)*r10*x15871*x15877))+((r10*x15878))+((sj0*sj2))+(((-1.0)*r12*x15881))+(((-1.0)*r11*x15882))+(((-1.0)*x15876*x15877))+x15870);
evalcond[5]=((((-1.0)*r02*x15881))+((r00*x15878))+(((-1.0)*x15875))+(((-1.0)*cj6*x15872*x15877))+(((-1.0)*r01*x15882))+(((-1.0)*r00*x15871*x15877))+x15869);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15883=(r22*sj5);
IkReal x15884=(cj6*r20);
IkReal x15885=(cj0*sj2);
IkReal x15886=(r21*sj6);
IkReal x15887=((1.0)*cj2*sj0);
IkReal x15888=(cj5*cj6*r21);
IkReal x15889=(cj5*r20*sj6);
CheckValue<IkReal> x15890 = IKatan2WithCheck(IkReal(((((-1.0)*x15883*x15887))+((x15883*x15885))+(((-1.0)*x15887*x15888))+(((-1.0)*x15887*x15889))+((x15885*x15889))+((x15885*x15888)))),IkReal((((cj2*sj0*x15884))+(((-1.0)*x15886*x15887))+(((-1.0)*x15884*x15885))+((x15885*x15886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15890.valid){
continue;
}
CheckValue<IkReal> x15891=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15890.value)+(((1.5707963267949)*(x15891.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15892=IKcos(j4);
IkReal x15893=IKsin(j4);
IkReal x15894=(cj0*sj2);
IkReal x15895=(cj0*cj2);
IkReal x15896=(cj5*sj6);
IkReal x15897=(cj5*r01);
IkReal x15898=(cj5*r21);
IkReal x15899=((1.0)*sj0);
IkReal x15900=(cj2*x15899);
IkReal x15901=(cj5*cj6*r11);
IkReal x15902=((1.0)*x15893);
IkReal x15903=(cj6*x15892);
IkReal x15904=(sj5*x15892);
IkReal x15905=(cj6*x15893);
IkReal x15906=(sj5*x15902);
IkReal x15907=((1.0)*sj6*x15892);
evalcond[0]=(((r22*x15904))+((r20*x15892*x15896))+(((-1.0)*r21*sj6*x15902))+((x15898*x15903))+((r20*x15905)));
evalcond[1]=((((-1.0)*cj6*x15898*x15902))+(((-1.0)*r22*x15906))+((r20*x15903))+(((-1.0)*r20*x15896*x15902))+(((-1.0)*r21*x15907)));
evalcond[2]=(((r12*x15904))+(((-1.0)*r11*sj6*x15902))+(((-1.0)*x15900))+((x15892*x15901))+((r10*x15892*x15896))+x15894+((r10*x15905)));
evalcond[3]=((((-1.0)*sj2*x15899))+((r00*x15892*x15896))+((x15897*x15903))+(((-1.0)*r01*sj6*x15902))+(((-1.0)*x15895))+((r00*x15905))+((r02*x15904)));
evalcond[4]=((((-1.0)*r10*x15896*x15902))+(((-1.0)*r11*x15907))+(((-1.0)*r12*x15906))+(((-1.0)*x15901*x15902))+((sj0*sj2))+x15895+((r10*x15903)));
evalcond[5]=((((-1.0)*cj6*x15897*x15902))+(((-1.0)*r00*x15896*x15902))+(((-1.0)*r02*x15906))+((r00*x15903))+(((-1.0)*x15900))+x15894+(((-1.0)*r01*x15907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15908=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15908;
j4eval[1]=IKsign(x15908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15909=((1.0)*sj5);
IkReal x15910=(((cj5*r12))+(((-1.0)*r10*sj6*x15909))+(((-1.0)*cj6*r11*x15909)));
j4eval[0]=x15910;
j4eval[1]=IKsign(x15910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15911=cj6*cj6;
IkReal x15912=cj5*cj5;
IkReal x15913=(cj5*sj5);
IkReal x15914=(cj6*r21);
IkReal x15915=((1.0)*r11);
IkReal x15916=(r10*r20);
IkReal x15917=(r10*sj6);
IkReal x15918=(r12*r22);
IkReal x15919=(r21*x15911);
IkReal x15920=(cj6*r20*sj6);
IkReal x15921=(r11*x15912);
IkReal x15922=((1.0)*x15912);
IkReal x15923=(((r12*r20*sj6*x15913))+((x15912*x15914*x15917))+((r22*x15913*x15917))+(((-1.0)*x15914*x15917))+((r11*r21))+(((-1.0)*x15915*x15920))+((x15912*x15916))+(((-1.0)*x15918*x15922))+((x15911*x15916))+((r12*x15913*x15914))+(((-1.0)*x15911*x15916*x15922))+((x15920*x15921))+((cj6*r11*r22*x15913))+(((-1.0)*x15915*x15919))+x15918+((x15919*x15921)));
j4eval[0]=x15923;
j4eval[1]=IKsign(x15923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15924=cj6*cj6;
IkReal x15925=cj5*cj5;
IkReal x15926=((1.0)*r11);
IkReal x15927=((1.0)*r20);
IkReal x15928=(cj0*cj2);
IkReal x15929=(r12*r22);
IkReal x15930=(cj6*sj6);
IkReal x15931=((1.0)*r21);
IkReal x15932=(r22*sj5);
IkReal x15933=(sj0*sj2);
IkReal x15934=(r12*sj5);
IkReal x15935=(cj5*sj6);
IkReal x15936=(r21*x15924);
IkReal x15937=(cj5*x15933);
IkReal x15938=(r10*x15925);
IkReal x15939=(r11*x15925);
IkReal x15940=(cj5*cj6*r21);
CheckValue<IkReal> x15941 = IKatan2WithCheck(IkReal(((((-1.0)*x15932*x15933))+((x15928*x15940))+(((-1.0)*x15927*x15933*x15935))+(((-1.0)*cj6*x15931*x15937))+((x15928*x15932))+((r20*x15928*x15935)))),IkReal(((((-1.0)*sj6*x15931*x15933))+((r21*sj6*x15928))+(((-1.0)*cj6*x15927*x15928))+((cj6*r20*x15933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15941.valid){
continue;
}
CheckValue<IkReal> x15942=IKPowWithIntegerCheck(IKsign((((x15934*x15940))+(((-1.0)*x15924*x15927*x15938))+(((-1.0)*x15925*x15929))+((r11*r21))+((r10*r20*x15924))+((r10*x15932*x15935))+((r20*x15938))+(((-1.0)*x15926*x15936))+((x15936*x15939))+((r20*x15930*x15939))+((r20*x15934*x15935))+((cj5*cj6*r11*x15932))+((r21*x15930*x15938))+(((-1.0)*r20*x15926*x15930))+x15929+(((-1.0)*r10*x15930*x15931)))),-1);
if(!x15942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15941.value)+(((1.5707963267949)*(x15942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15943=IKcos(j4);
IkReal x15944=IKsin(j4);
IkReal x15945=(cj0*cj2);
IkReal x15946=(cj5*sj6);
IkReal x15947=(cj5*r01);
IkReal x15948=(cj0*sj2);
IkReal x15949=(cj5*r21);
IkReal x15950=((1.0)*sj0);
IkReal x15951=(sj2*x15950);
IkReal x15952=(cj5*cj6*r11);
IkReal x15953=((1.0)*x15944);
IkReal x15954=(cj6*x15943);
IkReal x15955=(sj5*x15943);
IkReal x15956=(cj6*x15944);
IkReal x15957=(sj5*x15953);
IkReal x15958=((1.0)*sj6*x15943);
evalcond[0]=((((-1.0)*r21*sj6*x15953))+((x15949*x15954))+((r20*x15943*x15946))+((r20*x15956))+((r22*x15955)));
evalcond[1]=((((-1.0)*r20*x15946*x15953))+(((-1.0)*r22*x15957))+((r20*x15954))+(((-1.0)*r21*x15958))+(((-1.0)*cj6*x15949*x15953)));
evalcond[2]=(((r10*x15943*x15946))+((cj2*sj0))+((x15943*x15952))+(((-1.0)*r11*sj6*x15953))+((r12*x15955))+((r10*x15956))+x15948);
evalcond[3]=(((r00*x15956))+((r00*x15943*x15946))+(((-1.0)*r01*sj6*x15953))+(((-1.0)*x15951))+((r02*x15955))+((x15947*x15954))+x15945);
evalcond[4]=((((-1.0)*r10*x15946*x15953))+(((-1.0)*x15951))+((r10*x15954))+(((-1.0)*x15952*x15953))+(((-1.0)*r12*x15957))+(((-1.0)*r11*x15958))+x15945);
evalcond[5]=(((r00*x15954))+(((-1.0)*r02*x15957))+(((-1.0)*x15948))+(((-1.0)*r01*x15958))+(((-1.0)*cj6*x15947*x15953))+(((-1.0)*cj2*x15950))+(((-1.0)*r00*x15946*x15953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15959=(r21*sj6);
IkReal x15960=(sj0*sj2);
IkReal x15961=((1.0)*cj6);
IkReal x15962=(cj5*sj6);
IkReal x15963=(cj0*cj2);
IkReal x15964=(cj5*r21);
IkReal x15965=((1.0)*sj5);
IkReal x15966=(r20*x15963);
CheckValue<IkReal> x15967=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r11*sj5*x15961))+(((-1.0)*r10*sj6*x15965)))),-1);
if(!x15967.valid){
continue;
}
CheckValue<IkReal> x15968 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x15960*x15962))+((cj6*x15963*x15964))+(((-1.0)*x15960*x15961*x15964))+((x15962*x15966))+((r22*sj5*x15963))+(((-1.0)*r22*x15960*x15965)))),IkReal((((x15959*x15963))+(((-1.0)*x15959*x15960))+((cj6*r20*x15960))+(((-1.0)*x15961*x15966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15967.value)))+(x15968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15969=IKcos(j4);
IkReal x15970=IKsin(j4);
IkReal x15971=(cj0*cj2);
IkReal x15972=(cj5*sj6);
IkReal x15973=(cj5*r01);
IkReal x15974=(cj0*sj2);
IkReal x15975=(cj5*r21);
IkReal x15976=((1.0)*sj0);
IkReal x15977=(sj2*x15976);
IkReal x15978=(cj5*cj6*r11);
IkReal x15979=((1.0)*x15970);
IkReal x15980=(cj6*x15969);
IkReal x15981=(sj5*x15969);
IkReal x15982=(cj6*x15970);
IkReal x15983=(sj5*x15979);
IkReal x15984=((1.0)*sj6*x15969);
evalcond[0]=(((x15975*x15980))+((r20*x15982))+((r20*x15969*x15972))+(((-1.0)*r21*sj6*x15979))+((r22*x15981)));
evalcond[1]=(((r20*x15980))+(((-1.0)*r22*x15983))+(((-1.0)*r20*x15972*x15979))+(((-1.0)*r21*x15984))+(((-1.0)*cj6*x15975*x15979)));
evalcond[2]=(((cj2*sj0))+((r10*x15969*x15972))+((x15969*x15978))+(((-1.0)*r11*sj6*x15979))+((r10*x15982))+((r12*x15981))+x15974);
evalcond[3]=(((r00*x15982))+((r02*x15981))+(((-1.0)*x15977))+((x15973*x15980))+(((-1.0)*r01*sj6*x15979))+((r00*x15969*x15972))+x15971);
evalcond[4]=((((-1.0)*x15977))+(((-1.0)*r10*x15972*x15979))+((r10*x15980))+(((-1.0)*r11*x15984))+(((-1.0)*r12*x15983))+(((-1.0)*x15978*x15979))+x15971);
evalcond[5]=(((r00*x15980))+(((-1.0)*r02*x15983))+(((-1.0)*cj6*x15973*x15979))+(((-1.0)*x15974))+(((-1.0)*cj2*x15976))+(((-1.0)*r01*x15984))+(((-1.0)*r00*x15972*x15979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15985=(cj5*r21);
IkReal x15986=(cj0*sj2);
IkReal x15987=(r22*sj5);
IkReal x15988=((1.0)*r20);
IkReal x15989=(cj5*r20);
IkReal x15990=(cj2*cj6*sj0);
IkReal x15991=(cj2*sj0*sj6);
CheckValue<IkReal> x15992 = IKatan2WithCheck(IkReal((((sj6*x15986*x15989))+((x15986*x15987))+((x15989*x15991))+((x15985*x15990))+((cj2*sj0*x15987))+((cj6*x15985*x15986)))),IkReal((((r21*x15991))+(((-1.0)*cj6*x15986*x15988))+(((-1.0)*x15988*x15990))+((r21*sj6*x15986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15992.valid){
continue;
}
CheckValue<IkReal> x15993=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15992.value)+(((1.5707963267949)*(x15993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15994=IKcos(j4);
IkReal x15995=IKsin(j4);
IkReal x15996=(cj0*cj2);
IkReal x15997=(cj5*sj6);
IkReal x15998=(cj5*r01);
IkReal x15999=(cj0*sj2);
IkReal x16000=(cj5*r21);
IkReal x16001=((1.0)*sj0);
IkReal x16002=(sj2*x16001);
IkReal x16003=(cj5*cj6*r11);
IkReal x16004=((1.0)*x15995);
IkReal x16005=(cj6*x15994);
IkReal x16006=(sj5*x15994);
IkReal x16007=(cj6*x15995);
IkReal x16008=(sj5*x16004);
IkReal x16009=((1.0)*sj6*x15994);
evalcond[0]=(((r20*x16007))+((r20*x15994*x15997))+((x16000*x16005))+(((-1.0)*r21*sj6*x16004))+((r22*x16006)));
evalcond[1]=((((-1.0)*r20*x15997*x16004))+(((-1.0)*r21*x16009))+((r20*x16005))+(((-1.0)*cj6*x16000*x16004))+(((-1.0)*r22*x16008)));
evalcond[2]=(((r10*x16007))+((cj2*sj0))+((x15994*x16003))+((r12*x16006))+((r10*x15994*x15997))+(((-1.0)*r11*sj6*x16004))+x15999);
evalcond[3]=((((-1.0)*x16002))+((r02*x16006))+((x15998*x16005))+((r00*x16007))+(((-1.0)*r01*sj6*x16004))+((r00*x15994*x15997))+x15996);
evalcond[4]=(((r10*x16005))+(((-1.0)*x16002))+(((-1.0)*r10*x15997*x16004))+(((-1.0)*r11*x16009))+(((-1.0)*r12*x16008))+(((-1.0)*x16003*x16004))+x15996);
evalcond[5]=((((-1.0)*r01*x16009))+(((-1.0)*cj2*x16001))+(((-1.0)*r02*x16008))+(((-1.0)*cj6*x15998*x16004))+((r00*x16005))+(((-1.0)*r00*x15997*x16004))+(((-1.0)*x15999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16010=cj5*cj5;
IkReal x16011=cj6*cj6;
IkReal x16012=r22*r22;
IkReal x16013=r21*r21;
IkReal x16014=r20*r20;
IkReal x16015=((1.0)*cj5);
IkReal x16016=(cj6*r21);
IkReal x16017=(r20*sj6);
IkReal x16018=(cj1*cj2);
IkReal x16019=(cj1*sj2);
IkReal x16020=(r22*sj5);
IkReal x16021=(cj6*r20);
IkReal x16022=((2.0)*cj5);
IkReal x16023=(sj6*x16018);
IkReal x16024=((1.0)*x16013);
IkReal x16025=(x16011*x16014);
CheckValue<IkReal> x16026 = IKatan2WithCheck(IkReal(((((-1.0)*x16018*x16021))+(((-1.0)*x16015*x16016*x16019))+(((-1.0)*x16019*x16020))+(((-1.0)*x16015*x16017*x16019))+((r21*x16023)))),IkReal(((((-1.0)*x16018*x16020))+(((-1.0)*x16015*x16016*x16018))+(((-1.0)*x16015*x16017*x16018))+((x16019*x16021))+(((-1.0)*r21*sj6*x16019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16026.valid){
continue;
}
CheckValue<IkReal> x16027=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16010*x16011*x16024))+(((-1.0)*x16024))+((x16011*x16013))+((x16010*x16012))+(((-1.0)*x16010*x16014))+(((-1.0)*x16025))+(((-1.0)*x16012))+(((-2.0)*x16010*x16016*x16017))+(((-1.0)*x16016*x16020*x16022))+((x16010*x16025))+(((2.0)*x16016*x16017))+(((-1.0)*x16017*x16020*x16022)))),-1);
if(!x16027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16026.value)+(((1.5707963267949)*(x16027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16028=IKcos(j4);
IkReal x16029=IKsin(j4);
IkReal x16030=(cj0*sj1);
IkReal x16031=((1.0)*cj2);
IkReal x16032=(cj5*sj6);
IkReal x16033=(sj0*sj1);
IkReal x16034=((1.0)*sj6);
IkReal x16035=(cj5*cj6);
IkReal x16036=(r11*x16035);
IkReal x16037=((1.0)*x16029);
IkReal x16038=(sj5*x16028);
IkReal x16039=(r01*x16028);
IkReal x16040=(cj6*x16028);
IkReal x16041=(cj6*x16029);
IkReal x16042=(sj5*x16037);
evalcond[0]=((((-1.0)*r21*x16029*x16034))+((r20*x16028*x16032))+((r21*x16028*x16035))+(((-1.0)*cj1*x16031))+((r20*x16041))+((r22*x16038)));
evalcond[1]=((((-1.0)*r21*x16028*x16034))+(((-1.0)*r21*x16035*x16037))+((cj1*sj2))+(((-1.0)*r22*x16042))+((r20*x16040))+(((-1.0)*r20*x16032*x16037)));
evalcond[2]=((((-1.0)*x16031*x16033))+((x16028*x16036))+(((-1.0)*r11*x16029*x16034))+((r12*x16038))+((r10*x16041))+((r10*x16028*x16032))+((cj0*sj2)));
evalcond[3]=((((-1.0)*x16030*x16031))+((r02*x16038))+(((-1.0)*r01*x16029*x16034))+((r00*x16028*x16032))+((x16035*x16039))+(((-1.0)*sj0*sj2))+((r00*x16041)));
evalcond[4]=((((-1.0)*r12*x16042))+((sj2*x16033))+((r10*x16040))+((cj0*cj2))+(((-1.0)*r11*x16028*x16034))+(((-1.0)*r10*x16032*x16037))+(((-1.0)*x16036*x16037)));
evalcond[5]=((((-1.0)*r00*x16032*x16037))+((sj2*x16030))+(((-1.0)*x16034*x16039))+(((-1.0)*sj0*x16031))+(((-1.0)*r02*x16042))+(((-1.0)*r01*x16035*x16037))+((r00*x16040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16043=(sj0*sj2);
IkReal x16044=((1.0)*r21);
IkReal x16045=((1.0)*sj5);
IkReal x16046=(cj6*r20);
IkReal x16047=(cj5*cj6);
IkReal x16048=(cj1*cj2);
IkReal x16049=(sj6*x16048);
IkReal x16050=(cj0*cj2*sj1);
IkReal x16051=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x16052=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x16045))+(((-1.0)*cj6*r11*x16045)))),-1);
if(!x16052.valid){
continue;
}
CheckValue<IkReal> x16053 = IKatan2WithCheck(IkReal(((((-1.0)*x16050*x16051))+(((-1.0)*r22*x16043*x16045))+(((-1.0)*x16043*x16044*x16047))+((r02*sj5*x16048))+((cj5*r00*x16049))+((r01*x16047*x16048))+(((-1.0)*x16043*x16051))+(((-1.0)*x16044*x16047*x16050))+(((-1.0)*r22*x16045*x16050)))),IkReal((((x16046*x16050))+(((-1.0)*sj6*x16043*x16044))+(((-1.0)*sj6*x16044*x16050))+(((-1.0)*cj6*r00*x16048))+((x16043*x16046))+((r01*x16049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16052.value)))+(x16053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16054=IKcos(j4);
IkReal x16055=IKsin(j4);
IkReal x16056=(cj0*sj1);
IkReal x16057=((1.0)*cj2);
IkReal x16058=(cj5*sj6);
IkReal x16059=(sj0*sj1);
IkReal x16060=((1.0)*sj6);
IkReal x16061=(cj5*cj6);
IkReal x16062=(r11*x16061);
IkReal x16063=((1.0)*x16055);
IkReal x16064=(sj5*x16054);
IkReal x16065=(r01*x16054);
IkReal x16066=(cj6*x16054);
IkReal x16067=(cj6*x16055);
IkReal x16068=(sj5*x16063);
evalcond[0]=(((r22*x16064))+((r21*x16054*x16061))+(((-1.0)*cj1*x16057))+(((-1.0)*r21*x16055*x16060))+((r20*x16054*x16058))+((r20*x16067)));
evalcond[1]=((((-1.0)*r21*x16061*x16063))+((cj1*sj2))+(((-1.0)*r21*x16054*x16060))+(((-1.0)*r20*x16058*x16063))+((r20*x16066))+(((-1.0)*r22*x16068)));
evalcond[2]=(((r12*x16064))+((r10*x16067))+((r10*x16054*x16058))+((x16054*x16062))+(((-1.0)*x16057*x16059))+((cj0*sj2))+(((-1.0)*r11*x16055*x16060)));
evalcond[3]=(((x16061*x16065))+((r00*x16067))+((r00*x16054*x16058))+((r02*x16064))+(((-1.0)*r01*x16055*x16060))+(((-1.0)*sj0*sj2))+(((-1.0)*x16056*x16057)));
evalcond[4]=(((r10*x16066))+(((-1.0)*x16062*x16063))+((cj0*cj2))+((sj2*x16059))+(((-1.0)*r10*x16058*x16063))+(((-1.0)*r12*x16068))+(((-1.0)*r11*x16054*x16060)));
evalcond[5]=((((-1.0)*x16060*x16065))+(((-1.0)*r00*x16058*x16063))+(((-1.0)*r01*x16061*x16063))+((r00*x16066))+((sj2*x16056))+(((-1.0)*r02*x16068))+(((-1.0)*sj0*x16057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16069=(cj6*r20);
IkReal x16070=(cj0*sj2);
IkReal x16071=((1.0)*sj6);
IkReal x16072=(cj1*cj2);
IkReal x16073=(cj5*cj6);
IkReal x16074=(cj5*r20);
IkReal x16075=(r22*sj5);
IkReal x16076=(cj2*sj0*sj1);
CheckValue<IkReal> x16077 = IKatan2WithCheck(IkReal((((cj5*r10*sj6*x16072))+(((-1.0)*r21*x16073*x16076))+(((-1.0)*x16071*x16074*x16076))+((r12*sj5*x16072))+((sj6*x16070*x16074))+((x16070*x16075))+((r21*x16070*x16073))+((r11*x16072*x16073))+(((-1.0)*x16075*x16076)))),IkReal((((x16069*x16076))+((r11*sj6*x16072))+((r21*sj6*x16070))+(((-1.0)*r21*x16071*x16076))+(((-1.0)*x16069*x16070))+(((-1.0)*cj6*r10*x16072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16077.valid){
continue;
}
CheckValue<IkReal> x16078=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x16078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16077.value)+(((1.5707963267949)*(x16078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16079=IKcos(j4);
IkReal x16080=IKsin(j4);
IkReal x16081=(cj0*sj1);
IkReal x16082=((1.0)*cj2);
IkReal x16083=(cj5*sj6);
IkReal x16084=(sj0*sj1);
IkReal x16085=((1.0)*sj6);
IkReal x16086=(cj5*cj6);
IkReal x16087=(r11*x16086);
IkReal x16088=((1.0)*x16080);
IkReal x16089=(sj5*x16079);
IkReal x16090=(r01*x16079);
IkReal x16091=(cj6*x16079);
IkReal x16092=(cj6*x16080);
IkReal x16093=(sj5*x16088);
evalcond[0]=((((-1.0)*r21*x16080*x16085))+((r20*x16092))+(((-1.0)*cj1*x16082))+((r21*x16079*x16086))+((r22*x16089))+((r20*x16079*x16083)));
evalcond[1]=((((-1.0)*r21*x16086*x16088))+((r20*x16091))+((cj1*sj2))+(((-1.0)*r22*x16093))+(((-1.0)*r20*x16083*x16088))+(((-1.0)*r21*x16079*x16085)));
evalcond[2]=(((x16079*x16087))+(((-1.0)*r11*x16080*x16085))+((r12*x16089))+((r10*x16079*x16083))+((r10*x16092))+(((-1.0)*x16082*x16084))+((cj0*sj2)));
evalcond[3]=((((-1.0)*r01*x16080*x16085))+((r00*x16079*x16083))+(((-1.0)*sj0*sj2))+((r00*x16092))+(((-1.0)*x16081*x16082))+((x16086*x16090))+((r02*x16089)));
evalcond[4]=((((-1.0)*r10*x16083*x16088))+(((-1.0)*r12*x16093))+((sj2*x16084))+(((-1.0)*r11*x16079*x16085))+((cj0*cj2))+(((-1.0)*x16087*x16088))+((r10*x16091)));
evalcond[5]=(((sj2*x16081))+(((-1.0)*r02*x16093))+(((-1.0)*r01*x16086*x16088))+((r00*x16091))+(((-1.0)*x16085*x16090))+(((-1.0)*r00*x16083*x16088))+(((-1.0)*sj0*x16082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16094=cj1*cj1;
IkReal x16095=(cj5*r02);
IkReal x16096=((136398.7618)*cj1);
IkReal x16097=(r10*sj6);
IkReal x16098=((690.0)*r12);
IkReal x16099=((25826.01)*sj2);
IkReal x16100=(r00*sj6);
IkReal x16101=(cj6*sj5);
IkReal x16102=((25826.01)*r11);
IkReal x16103=((69000.0)*py);
IkReal x16104=(sj2*sj5);
IkReal x16105=(cj2*sj1);
IkReal x16106=((25826.01)*sj5);
IkReal x16107=((690.0)*r02);
IkReal x16108=((364420.0)*cj1);
IkReal x16109=((3644.2)*cj1);
IkReal x16110=(cj5*cj6);
IkReal x16111=((690.0)*r11);
IkReal x16112=((69000.0)*px);
IkReal x16113=((50289.96)*cj1);
IkReal x16114=((690.0)*cj5);
IkReal x16115=((690.0)*r01);
IkReal x16116=((25826.01)*r01);
IkReal x16117=(cj5*r12);
IkReal x16118=(sj5*x16105);
IkReal x16119=(sj2*x16114);
IkReal x16120=((25826.01)*x16117);
CheckValue<IkReal> x16121=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-1.0)*x16105*x16113))+x16113+(((132801.9364)*x16094))+(((-9522.0)*x16105))+(((-4761.0)*x16094*(cj2*cj2))))),-1);
if(!x16121.valid){
continue;
}
CheckValue<IkReal> x16122 = IKatan2WithCheck(IkReal(((((-1.0)*x16120))+(((-1.0)*x16110*x16111))+(((-1.0)*r01*x16099*x16101))+(((-1.0)*sj2*x16112))+(((-1.0)*x16097*x16105*x16106))+((r11*x16096*x16101))+((x16097*x16106))+(((-1.0)*sj5*x16099*x16100))+(((-1.0)*x16097*x16114))+(((-1.0)*sj5*x16098))+((sj2*x16110*x16115))+(((-1.0)*x16101*x16102*x16105))+((x16105*x16120))+(((-1.0)*r12*sj5*x16109))+((x16097*x16105*x16114))+x16103+(((-1.0)*r11*x16109*x16110))+(((-1.0)*cj5*x16097*x16109))+((py*x16108))+((x16101*x16102))+(((-1.0)*x16096*x16117))+((sj5*x16096*x16097))+((x16095*x16099))+((x16100*x16119))+((x16098*x16118))+((x16104*x16107))+(((-1.0)*x16103*x16105))+((x16105*x16110*x16111)))),IkReal(((((-1.0)*x16110*x16115))+(((25826.01)*x16095*x16105))+((r01*x16096*x16101))+(((-1.0)*cj5*x16100*x16109))+(((-1.0)*x16101*x16105*x16116))+(((-1.0)*x16100*x16114))+(((-1.0)*x16100*x16105*x16106))+((r11*x16099*x16101))+(((-1.0)*x16097*x16119))+(((-1.0)*x16105*x16112))+(((-1.0)*x16095*x16096))+x16112+(((-1.0)*r01*x16109*x16110))+((x16100*x16105*x16114))+((x16107*x16118))+((px*x16108))+((x16100*x16106))+(((-1.0)*x16099*x16117))+(((-25826.01)*x16095))+((x16101*x16116))+(((-1.0)*r02*sj5*x16109))+((sj5*x16097*x16099))+(((-1.0)*x16098*x16104))+((sj5*x16096*x16100))+((sj2*x16103))+(((-1.0)*sj5*x16107))+(((-1.0)*sj2*x16110*x16111))+((x16105*x16110*x16115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16122.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16121.value)))+(x16122.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x16123=IKcos(j0);
IkReal x16124=IKsin(j0);
IkReal x16125=(r10*sj6);
IkReal x16126=((0.37429)*sj5);
IkReal x16127=((0.36442)*cj1);
IkReal x16128=((0.01)*cj5);
IkReal x16129=(cj6*r11);
IkReal x16130=(r00*sj6);
IkReal x16131=(cj6*r01);
IkReal x16132=((0.37429)*cj5);
IkReal x16133=(cj2*sj1);
IkReal x16134=((0.01)*sj5);
IkReal x16135=((0.069)*x16124);
IkReal x16136=((0.069)*x16123);
evalcond[0]=(((x16128*x16131))+((x16128*x16130))+((r02*x16134))+((r02*x16132))+x16136+(((-1.0)*px))+(((-1.0)*x16126*x16131))+(((-1.0)*x16126*x16130))+(((-1.0)*x16133*x16136))+(((-1.0)*sj2*x16135))+((x16123*x16127)));
evalcond[1]=(((x16128*x16129))+(((-1.0)*x16126*x16129))+(((-1.0)*x16125*x16126))+((sj2*x16136))+x16135+(((-1.0)*py))+((x16124*x16127))+(((-1.0)*x16133*x16135))+((x16125*x16128))+((r12*x16132))+((r12*x16134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x16137=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x16137;
j4eval[1]=IKsign(x16137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16138=((1.0)*sj5);
IkReal x16139=((((-1.0)*cj6*r01*x16138))+(((-1.0)*r00*sj6*x16138))+((cj5*r02)));
j4eval[0]=x16139;
j4eval[1]=IKsign(x16139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16140=((1.0)*sj5);
IkReal x16141=(((cj5*r22))+(((-1.0)*cj6*r21*x16140))+(((-1.0)*r20*sj6*x16140)));
j4eval[0]=x16141;
j4eval[1]=IKsign(x16141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16142=((1.0)*sj6);
IkReal x16143=(cj5*cj6);
IkReal x16144=(sj1*sj2);
IkReal x16145=(cj0*r11);
IkReal x16146=(cj6*r00);
IkReal x16147=(cj2*sj0);
IkReal x16148=(cj0*cj2);
IkReal x16149=(r02*sj5);
IkReal x16150=((1.0)*sj5);
IkReal x16151=(cj5*sj6);
IkReal x16152=(cj0*r10);
IkReal x16153=(r01*sj0*x16144);
CheckValue<IkReal> x16154=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj5*x16142))+(((-1.0)*cj6*r21*x16150)))),-1);
if(!x16154.valid){
continue;
}
CheckValue<IkReal> x16155 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*x16144*x16152))+(((-1.0)*r01*x16142*x16148))+((cj6*r10*x16147))+((x16146*x16148))+(((-1.0)*r11*x16142*x16147))+((sj6*x16144*x16145))+((sj0*x16144*x16146))+(((-1.0)*x16142*x16153)))),IkReal(((((-1.0)*cj0*r12*x16144*x16150))+(((-1.0)*x16143*x16144*x16145))+((r10*x16147*x16151))+((x16148*x16149))+((r01*x16143*x16148))+((r00*sj0*x16144*x16151))+((x16143*x16153))+((r11*x16143*x16147))+(((-1.0)*cj5*x16142*x16144*x16152))+((r12*sj5*x16147))+((r00*x16148*x16151))+((sj0*x16144*x16149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16154.value)))+(x16155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16156=IKsin(j4);
IkReal x16157=IKcos(j4);
IkReal x16158=(r01*sj3);
IkReal x16159=((1.0)*sj5);
IkReal x16160=(cj3*r02);
IkReal x16161=((1.0)*cj6);
IkReal x16162=(cj5*r12);
IkReal x16163=(cj0*sj2);
IkReal x16164=(sj3*sj6);
IkReal x16165=((1.0)*r20);
IkReal x16166=(cj0*cj2);
IkReal x16167=(cj3*sj6);
IkReal x16168=((1.0)*cj1);
IkReal x16169=((1.0)*cj5);
IkReal x16170=(cj6*sj5);
IkReal x16171=(r21*sj3);
IkReal x16172=((1.0)*r00);
IkReal x16173=((1.0)*r10);
IkReal x16174=(cj3*r22);
IkReal x16175=(r11*sj3);
IkReal x16176=((1.0)*sj0);
IkReal x16177=(cj3*x16161);
IkReal x16178=(cj5*x16157);
IkReal x16179=(sj6*x16156);
IkReal x16180=(r10*x16156);
IkReal x16181=(r00*x16156);
IkReal x16182=(cj6*x16157);
IkReal x16183=(sj3*x16157);
IkReal x16184=(cj5*x16156);
IkReal x16185=(r20*x16156);
IkReal x16186=((1.0)*sj6*x16157);
evalcond[0]=(((r20*x16182))+(((-1.0)*r21*x16161*x16184))+((cj1*sj2))+(((-1.0)*cj5*x16165*x16179))+(((-1.0)*r22*x16156*x16159))+(((-1.0)*r21*x16186)));
evalcond[1]=(((r10*x16182))+(((-1.0)*r11*x16186))+x16166+(((-1.0)*r12*x16156*x16159))+(((-1.0)*r10*x16169*x16179))+((sj0*sj1*sj2))+(((-1.0)*r11*x16161*x16184)));
evalcond[2]=(((sj1*x16163))+((r00*x16182))+(((-1.0)*r02*x16156*x16159))+(((-1.0)*cj2*x16176))+(((-1.0)*r01*x16186))+(((-1.0)*r00*x16169*x16179))+(((-1.0)*r01*x16161*x16184)));
evalcond[3]=((((-1.0)*cj3*cj6*r21*x16159))+sj1+((cj5*x16174))+(((-1.0)*sj3*x16161*x16185))+(((-1.0)*x16161*x16171*x16178))+(((-1.0)*r22*x16159*x16183))+(((-1.0)*r20*x16159*x16167))+((r21*x16156*x16164))+(((-1.0)*x16164*x16165*x16178)));
evalcond[4]=((((-1.0)*r22*sj3*x16169))+((r20*sj5*x16164))+(((-1.0)*x16165*x16167*x16178))+(((-1.0)*x16177*x16185))+((x16170*x16171))+(((-1.0)*cj2*x16168))+((r21*x16156*x16167))+(((-1.0)*r21*x16177*x16178))+(((-1.0)*x16157*x16159*x16174)));
evalcond[5]=((((-1.0)*r00*x16159*x16167))+(((-1.0)*r02*x16159*x16183))+((cj5*x16160))+(((-1.0)*sj3*x16161*x16181))+((x16158*x16179))+(((-1.0)*x16158*x16161*x16178))+(((-1.0)*cj3*cj6*r01*x16159))+(((-1.0)*cj0*x16168))+(((-1.0)*r00*x16157*x16164*x16169)));
evalcond[6]=((((-1.0)*r10*x16159*x16167))+(((-1.0)*x16161*x16175*x16178))+(((-1.0)*sj3*x16161*x16180))+(((-1.0)*r10*x16157*x16164*x16169))+(((-1.0)*r12*x16159*x16183))+(((-1.0)*cj3*cj6*r11*x16159))+((cj3*x16162))+((r11*x16156*x16164))+(((-1.0)*sj0*x16168)));
evalcond[7]=(x16163+(((-1.0)*cj2*sj1*x16176))+(((-1.0)*x16177*x16180))+((r10*sj5*x16164))+((x16170*x16175))+(((-1.0)*sj3*x16162))+(((-1.0)*cj3*r12*x16157*x16159))+((r11*x16156*x16167))+(((-1.0)*r11*x16177*x16178))+(((-1.0)*r10*x16157*x16167*x16169)));
evalcond[8]=(((r00*sj5*x16164))+(((-1.0)*sj1*x16166))+(((-1.0)*r01*x16177*x16178))+(((-1.0)*sj2*x16176))+((x16158*x16170))+(((-1.0)*x16177*x16181))+(((-1.0)*r02*sj3*x16169))+(((-1.0)*r00*x16157*x16167*x16169))+(((-1.0)*x16157*x16159*x16160))+((r01*x16156*x16167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16187=(cj6*r21);
IkReal x16188=(r20*sj6);
IkReal x16189=(cj1*sj2);
IkReal x16190=((1.0)*cj6);
IkReal x16191=((1.0)*sj5);
IkReal x16192=(cj0*cj2);
IkReal x16193=(r21*sj6);
IkReal x16194=(sj0*sj1*sj2);
IkReal x16195=((1.0)*cj5*x16192);
IkReal x16196=((1.0)*cj5*x16194);
CheckValue<IkReal> x16197 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x16190*x16192))+(((-1.0)*r20*x16190*x16194))+((x16192*x16193))+((cj6*r10*x16189))+((x16193*x16194))+(((-1.0)*r11*sj6*x16189)))),IkReal(((((-1.0)*r22*x16191*x16192))+(((-1.0)*r22*x16191*x16194))+((r12*sj5*x16189))+(((-1.0)*x16187*x16195))+(((-1.0)*x16187*x16196))+(((-1.0)*x16188*x16196))+(((-1.0)*x16188*x16195))+((cj5*r10*sj6*x16189))+((cj5*cj6*r11*x16189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16197.valid){
continue;
}
CheckValue<IkReal> x16198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x16191))+(((-1.0)*r01*sj5*x16190))+((cj5*r02)))),-1);
if(!x16198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16197.value)+(((1.5707963267949)*(x16198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16199=IKsin(j4);
IkReal x16200=IKcos(j4);
IkReal x16201=(r01*sj3);
IkReal x16202=((1.0)*sj5);
IkReal x16203=(cj3*r02);
IkReal x16204=((1.0)*cj6);
IkReal x16205=(cj5*r12);
IkReal x16206=(cj0*sj2);
IkReal x16207=(sj3*sj6);
IkReal x16208=((1.0)*r20);
IkReal x16209=(cj0*cj2);
IkReal x16210=(cj3*sj6);
IkReal x16211=((1.0)*cj1);
IkReal x16212=((1.0)*cj5);
IkReal x16213=(cj6*sj5);
IkReal x16214=(r21*sj3);
IkReal x16215=((1.0)*r00);
IkReal x16216=((1.0)*r10);
IkReal x16217=(cj3*r22);
IkReal x16218=(r11*sj3);
IkReal x16219=((1.0)*sj0);
IkReal x16220=(cj3*x16204);
IkReal x16221=(cj5*x16200);
IkReal x16222=(sj6*x16199);
IkReal x16223=(r10*x16199);
IkReal x16224=(r00*x16199);
IkReal x16225=(cj6*x16200);
IkReal x16226=(sj3*x16200);
IkReal x16227=(cj5*x16199);
IkReal x16228=(r20*x16199);
IkReal x16229=((1.0)*sj6*x16200);
evalcond[0]=(((cj1*sj2))+(((-1.0)*cj5*x16208*x16222))+((r20*x16225))+(((-1.0)*r21*x16229))+(((-1.0)*r21*x16204*x16227))+(((-1.0)*r22*x16199*x16202)));
evalcond[1]=((((-1.0)*r11*x16204*x16227))+x16209+(((-1.0)*r11*x16229))+((sj0*sj1*sj2))+(((-1.0)*r12*x16199*x16202))+((r10*x16225))+(((-1.0)*r10*x16212*x16222)));
evalcond[2]=(((r00*x16225))+(((-1.0)*r00*x16212*x16222))+(((-1.0)*r02*x16199*x16202))+((sj1*x16206))+(((-1.0)*r01*x16229))+(((-1.0)*cj2*x16219))+(((-1.0)*r01*x16204*x16227)));
evalcond[3]=(sj1+(((-1.0)*r22*x16202*x16226))+((cj5*x16217))+(((-1.0)*x16207*x16208*x16221))+((r21*x16199*x16207))+(((-1.0)*cj3*cj6*r21*x16202))+(((-1.0)*r20*x16202*x16210))+(((-1.0)*sj3*x16204*x16228))+(((-1.0)*x16204*x16214*x16221)));
evalcond[4]=((((-1.0)*r22*sj3*x16212))+((r21*x16199*x16210))+(((-1.0)*x16208*x16210*x16221))+(((-1.0)*x16220*x16228))+((x16213*x16214))+((r20*sj5*x16207))+(((-1.0)*cj2*x16211))+(((-1.0)*x16200*x16202*x16217))+(((-1.0)*r21*x16220*x16221)));
evalcond[5]=((((-1.0)*r02*x16202*x16226))+((x16201*x16222))+(((-1.0)*cj0*x16211))+(((-1.0)*r00*x16200*x16207*x16212))+(((-1.0)*sj3*x16204*x16224))+(((-1.0)*x16201*x16204*x16221))+(((-1.0)*cj3*cj6*r01*x16202))+((cj5*x16203))+(((-1.0)*r00*x16202*x16210)));
evalcond[6]=((((-1.0)*r10*x16202*x16210))+((cj3*x16205))+((r11*x16199*x16207))+(((-1.0)*sj3*x16204*x16223))+(((-1.0)*sj0*x16211))+(((-1.0)*r12*x16202*x16226))+(((-1.0)*x16204*x16218*x16221))+(((-1.0)*cj3*cj6*r11*x16202))+(((-1.0)*r10*x16200*x16207*x16212)));
evalcond[7]=((((-1.0)*sj3*x16205))+(((-1.0)*x16220*x16223))+(((-1.0)*r10*x16200*x16210*x16212))+(((-1.0)*r11*x16220*x16221))+((x16213*x16218))+x16206+(((-1.0)*cj3*r12*x16200*x16202))+((r10*sj5*x16207))+(((-1.0)*cj2*sj1*x16219))+((r11*x16199*x16210)));
evalcond[8]=(((x16201*x16213))+(((-1.0)*x16200*x16202*x16203))+(((-1.0)*x16220*x16224))+(((-1.0)*sj2*x16219))+(((-1.0)*r02*sj3*x16212))+(((-1.0)*r01*x16220*x16221))+(((-1.0)*sj1*x16209))+((r01*x16199*x16210))+((r00*sj5*x16207))+(((-1.0)*r00*x16200*x16210*x16212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16230=(cj6*r20);
IkReal x16231=(cj2*sj0);
IkReal x16232=((1.0)*sj2);
IkReal x16233=(cj0*sj1);
IkReal x16234=(cj1*r01);
IkReal x16235=(r22*sj5);
IkReal x16236=(cj5*cj6);
IkReal x16237=(cj1*sj2);
IkReal x16238=(r21*sj6);
IkReal x16239=(cj5*r20*sj6);
CheckValue<IkReal> x16240=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x16240.valid){
continue;
}
CheckValue<IkReal> x16241 = IKatan2WithCheck(IkReal((((sj2*x16233*x16238))+((x16230*x16231))+(((-1.0)*x16230*x16232*x16233))+(((-1.0)*sj6*x16232*x16234))+((cj6*r00*x16237))+(((-1.0)*x16231*x16238)))),IkReal(((((-1.0)*r21*x16232*x16233*x16236))+((x16231*x16235))+((x16231*x16239))+((r21*x16231*x16236))+((cj5*r00*sj6*x16237))+((r02*sj5*x16237))+(((-1.0)*x16232*x16233*x16235))+(((-1.0)*x16232*x16233*x16239))+((sj2*x16234*x16236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16240.value)))+(x16241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16242=IKsin(j4);
IkReal x16243=IKcos(j4);
IkReal x16244=(r01*sj3);
IkReal x16245=((1.0)*sj5);
IkReal x16246=(cj3*r02);
IkReal x16247=((1.0)*cj6);
IkReal x16248=(cj5*r12);
IkReal x16249=(cj0*sj2);
IkReal x16250=(sj3*sj6);
IkReal x16251=((1.0)*r20);
IkReal x16252=(cj0*cj2);
IkReal x16253=(cj3*sj6);
IkReal x16254=((1.0)*cj1);
IkReal x16255=((1.0)*cj5);
IkReal x16256=(cj6*sj5);
IkReal x16257=(r21*sj3);
IkReal x16258=((1.0)*r00);
IkReal x16259=((1.0)*r10);
IkReal x16260=(cj3*r22);
IkReal x16261=(r11*sj3);
IkReal x16262=((1.0)*sj0);
IkReal x16263=(cj3*x16247);
IkReal x16264=(cj5*x16243);
IkReal x16265=(sj6*x16242);
IkReal x16266=(r10*x16242);
IkReal x16267=(r00*x16242);
IkReal x16268=(cj6*x16243);
IkReal x16269=(sj3*x16243);
IkReal x16270=(cj5*x16242);
IkReal x16271=(r20*x16242);
IkReal x16272=((1.0)*sj6*x16243);
evalcond[0]=((((-1.0)*r21*x16247*x16270))+((cj1*sj2))+(((-1.0)*r22*x16242*x16245))+(((-1.0)*cj5*x16251*x16265))+(((-1.0)*r21*x16272))+((r20*x16268)));
evalcond[1]=(((r10*x16268))+(((-1.0)*r11*x16247*x16270))+x16252+(((-1.0)*r12*x16242*x16245))+((sj0*sj1*sj2))+(((-1.0)*r10*x16255*x16265))+(((-1.0)*r11*x16272)));
evalcond[2]=((((-1.0)*r01*x16247*x16270))+((sj1*x16249))+(((-1.0)*r00*x16255*x16265))+(((-1.0)*cj2*x16262))+((r00*x16268))+(((-1.0)*r01*x16272))+(((-1.0)*r02*x16242*x16245)));
evalcond[3]=((((-1.0)*x16250*x16251*x16264))+sj1+(((-1.0)*x16247*x16257*x16264))+(((-1.0)*r22*x16245*x16269))+((r21*x16242*x16250))+(((-1.0)*sj3*x16247*x16271))+(((-1.0)*r20*x16245*x16253))+(((-1.0)*cj3*cj6*r21*x16245))+((cj5*x16260)));
evalcond[4]=((((-1.0)*r21*x16263*x16264))+(((-1.0)*x16251*x16253*x16264))+((r21*x16242*x16253))+(((-1.0)*cj2*x16254))+(((-1.0)*x16263*x16271))+(((-1.0)*r22*sj3*x16255))+((r20*sj5*x16250))+(((-1.0)*x16243*x16245*x16260))+((x16256*x16257)));
evalcond[5]=((((-1.0)*cj3*cj6*r01*x16245))+(((-1.0)*r02*x16245*x16269))+((cj5*x16246))+(((-1.0)*sj3*x16247*x16267))+(((-1.0)*cj0*x16254))+(((-1.0)*r00*x16245*x16253))+(((-1.0)*r00*x16243*x16250*x16255))+((x16244*x16265))+(((-1.0)*x16244*x16247*x16264)));
evalcond[6]=((((-1.0)*r10*x16245*x16253))+(((-1.0)*r12*x16245*x16269))+(((-1.0)*sj0*x16254))+(((-1.0)*cj3*cj6*r11*x16245))+(((-1.0)*sj3*x16247*x16266))+((r11*x16242*x16250))+(((-1.0)*r10*x16243*x16250*x16255))+(((-1.0)*x16247*x16261*x16264))+((cj3*x16248)));
evalcond[7]=((((-1.0)*x16263*x16266))+(((-1.0)*cj2*sj1*x16262))+x16249+(((-1.0)*r11*x16263*x16264))+((r11*x16242*x16253))+(((-1.0)*cj3*r12*x16243*x16245))+(((-1.0)*r10*x16243*x16253*x16255))+((r10*sj5*x16250))+(((-1.0)*sj3*x16248))+((x16256*x16261)));
evalcond[8]=((((-1.0)*x16243*x16245*x16246))+((r00*sj5*x16250))+((r01*x16242*x16253))+(((-1.0)*r02*sj3*x16255))+(((-1.0)*x16263*x16267))+(((-1.0)*r01*x16263*x16264))+(((-1.0)*sj2*x16262))+(((-1.0)*sj1*x16252))+((x16244*x16256))+(((-1.0)*r00*x16243*x16253*x16255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16273=cj6*cj6;
IkReal x16274=r20*r20;
IkReal x16275=cj5*cj5;
IkReal x16276=r21*r21;
IkReal x16277=r22*r22;
IkReal x16278=(cj6*sj5);
IkReal x16279=(cj3*r22);
IkReal x16280=(cj5*r21);
IkReal x16281=(sj3*sj6);
IkReal x16282=((1.0)*r22);
IkReal x16283=(cj6*r21);
IkReal x16284=(cj3*cj6);
IkReal x16285=(cj1*cj2);
IkReal x16286=(cj5*sj3);
IkReal x16287=(cj6*r20);
IkReal x16288=((1.0)*cj3);
IkReal x16289=(cj3*sj6);
IkReal x16290=(cj5*r20);
IkReal x16291=((2.0)*r20);
IkReal x16292=(r21*sj3);
IkReal x16293=((1.0)*x16274);
IkReal x16294=(cj3*x16273);
IkReal x16295=((1.0)*cj1*sj2);
IkReal x16296=(sj5*x16273);
IkReal x16297=(r22*x16275);
IkReal x16298=((1.0)*x16276);
IkReal x16299=(cj3*x16275);
CheckValue<IkReal> x16300 = IKatan2WithCheck(IkReal(((((-1.0)*x16280*x16284*x16295))+(((-1.0)*cj1*sj2*sj6*x16288*x16290))+(((-1.0)*sj5*x16279*x16295))+(((-1.0)*x16280*x16281*x16282))+(((-1.0)*x16291*x16292*x16296))+(((-1.0)*x16278*x16281*x16293))+((x16285*x16287))+((r20*sj5*x16292))+((x16276*x16278*x16281))+((r22*x16286*x16287))+(((-1.0)*r21*sj6*x16285)))),IkReal((((x16274*x16286*x16296))+((r22*sj5*x16285))+(((-1.0)*x16286*x16296*x16298))+((sj6*x16285*x16290))+(((-1.0)*x16278*x16280*x16281*x16291))+(((-1.0)*r20*x16281*x16282))+(((-1.0)*sj3*x16282*x16283))+(((-1.0)*cj1*r21*sj2*sj6*x16288))+((x16281*x16291*x16297))+((cj1*r20*sj2*x16284))+((sj5*x16277*x16286))+(((-1.0)*sj5*x16286*x16293))+(((2.0)*sj3*x16283*x16297))+((cj6*x16280*x16285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16300.valid){
continue;
}
CheckValue<IkReal> x16301=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16275*x16283*x16289*x16291))+(((-1.0)*x16277*x16288))+(((-1.0)*x16273*x16274*x16288))+(((-1.0)*x16273*x16275*x16276*x16288))+((x16277*x16299))+(((-1.0)*x16274*x16275*x16288))+((x16283*x16289*x16291))+(((-2.0)*x16278*x16279*x16280))+((x16276*x16294))+((x16274*x16275*x16294))+(((-1.0)*x16276*x16288))+(((-2.0)*sj5*sj6*x16279*x16290)))),-1);
if(!x16301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16300.value)+(((1.5707963267949)*(x16301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16302=IKsin(j4);
IkReal x16303=IKcos(j4);
IkReal x16304=(cj3*r21);
IkReal x16305=((1.0)*sj5);
IkReal x16306=(r21*sj3);
IkReal x16307=((1.0)*cj5);
IkReal x16308=(r22*sj3);
IkReal x16309=(cj6*r20);
IkReal x16310=(cj3*r22);
IkReal x16311=(sj6*x16302);
IkReal x16312=(r20*sj3*sj6);
IkReal x16313=(cj3*r20*sj6);
IkReal x16314=((1.0)*x16302);
IkReal x16315=(x16303*x16307);
evalcond[0]=((((-1.0)*cj6*r21*x16302*x16307))+((cj1*sj2))+(((-1.0)*r20*x16307*x16311))+(((-1.0)*r22*x16302*x16305))+((x16303*x16309))+(((-1.0)*r21*sj6*x16303)));
evalcond[1]=(((cj5*x16310))+sj1+(((-1.0)*x16303*x16305*x16308))+(((-1.0)*x16312*x16315))+(((-1.0)*cj6*x16304*x16305))+(((-1.0)*sj3*x16309*x16314))+(((-1.0)*x16305*x16313))+((x16306*x16311))+(((-1.0)*cj6*x16306*x16315)));
evalcond[2]=((((-1.0)*x16313*x16315))+(((-1.0)*x16303*x16305*x16310))+((cj6*sj5*x16306))+((x16304*x16311))+(((-1.0)*cj1*cj2))+(((-1.0)*cj6*x16304*x16315))+(((-1.0)*x16307*x16308))+((sj5*x16312))+(((-1.0)*cj3*x16309*x16314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x16316=cj1*cj1;
IkReal x16317=((1.0)+((x16316*(cj2*cj2)))+(((-1.0)*x16316)));
j0eval[0]=x16317;
j0eval[1]=IKsign(x16317);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x16318=(cj1*cj2);
j0eval[0]=((((-1.0)*sj1))+cj2+(((5.28144927536232)*x16318)));
j0eval[1]=IKsign(((((364.42)*x16318))+(((-69.0)*sj1))+(((69.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x16319=cj1*cj1;
IkReal x16320=(sj1*sj2);
IkReal x16321=((5.28144927536232)*cj1);
IkReal x16322=(cj2*x16319);
j0eval[0]=(x16320+((x16320*x16321))+((sj2*x16322)));
j0eval[1]=((((-1.0)*sj1))+(((-1.0)*x16322))+(((-1.0)*sj1*x16321)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16323=(cj4*sj6);
IkReal x16324=((1.0)*r01);
IkReal x16325=(cj5*sj4);
IkReal x16326=(sj4*sj5);
IkReal x16327=(cj4*cj6);
if( IKabs(((((-1.0)*x16323*x16324))+(((-1.0)*r02*x16326))+((r00*x16327))+(((-1.0)*cj6*x16324*x16325))+(((-1.0)*r00*sj6*x16325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x16326))+(((-1.0)*r10*x16327))+((r10*sj6*x16325))+((cj6*r11*x16325))+((r11*x16323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x16323*x16324))+(((-1.0)*r02*x16326))+((r00*x16327))+(((-1.0)*cj6*x16324*x16325))+(((-1.0)*r00*sj6*x16325))))+IKsqr((((r12*x16326))+(((-1.0)*r10*x16327))+((r10*sj6*x16325))+((cj6*r11*x16325))+((r11*x16323))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x16323*x16324))+(((-1.0)*r02*x16326))+((r00*x16327))+(((-1.0)*cj6*x16324*x16325))+(((-1.0)*r00*sj6*x16325))), (((r12*x16326))+(((-1.0)*r10*x16327))+((r10*sj6*x16325))+((cj6*r11*x16325))+((r11*x16323))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16328=IKcos(j0);
IkReal x16329=IKsin(j0);
IkReal x16330=((1.0)*sj4);
IkReal x16331=(cj6*r10);
IkReal x16332=(sj5*sj6);
IkReal x16333=(cj3*cj5);
IkReal x16334=(r00*sj3);
IkReal x16335=((0.36442)*cj1);
IkReal x16336=(cj6*r01);
IkReal x16337=((1.0)*cj3);
IkReal x16338=((0.01)*cj5);
IkReal x16339=(r10*sj6);
IkReal x16340=(r12*sj5);
IkReal x16341=(sj3*sj5);
IkReal x16342=(r02*sj5);
IkReal x16343=(cj6*r00);
IkReal x16344=((1.0)*cj4);
IkReal x16345=(r00*sj6);
IkReal x16346=((0.37429)*cj5);
IkReal x16347=(cj6*r11);
IkReal x16348=((0.37429)*sj5);
IkReal x16349=(cj5*x16347);
IkReal x16350=((0.069)*x16329);
IkReal x16351=(r11*sj4*sj6);
IkReal x16352=(sj3*x16344);
IkReal x16353=(r01*sj4*sj6);
IkReal x16354=((1.0)*x16329);
IkReal x16355=((1.0)*x16328);
IkReal x16356=((0.069)*x16328);
IkReal x16357=((1.0)*cj5*sj3);
evalcond[0]=((((-1.0)*x16330*x16349))+(((-1.0)*x16330*x16340))+x16328+(((-1.0)*cj5*x16330*x16339))+(((-1.0)*r11*sj6*x16344))+((cj4*x16331)));
evalcond[1]=((((-1.0)*x16354))+(((-1.0)*x16330*x16342))+(((-1.0)*cj5*x16330*x16345))+((cj4*x16343))+(((-1.0)*cj5*x16330*x16336))+(((-1.0)*r01*sj6*x16344)));
evalcond[2]=(((x16338*x16345))+(((0.01)*x16342))+(((-1.0)*x16336*x16348))+x16356+((r02*x16346))+(((-1.0)*px))+((x16336*x16338))+((x16328*x16335))+(((-0.37429)*r00*x16332))+(((-1.0)*sj1*x16356)));
evalcond[3]=(((x16338*x16347))+(((0.01)*x16340))+x16350+(((-1.0)*py))+(((-0.37429)*r10*x16332))+((x16329*x16335))+(((-1.0)*x16347*x16348))+((r12*x16346))+((x16338*x16339))+(((-1.0)*sj1*x16350)));
evalcond[4]=((((-1.0)*cj4*x16337*x16340))+(((-1.0)*x16333*x16344*x16347))+(((-1.0)*x16333*x16339*x16344))+((cj3*x16351))+(((-1.0)*cj3*x16330*x16331))+(((-1.0)*r12*x16357))+((x16341*x16347))+((r10*sj3*x16332))+(((-1.0)*sj1*x16354)));
evalcond[5]=((((-1.0)*cj4*x16337*x16342))+(((-1.0)*x16333*x16344*x16345))+((cj3*x16353))+(((-1.0)*cj3*x16330*x16343))+((x16336*x16341))+(((-1.0)*r02*x16357))+((x16332*x16334))+(((-1.0)*sj1*x16355))+(((-1.0)*x16333*x16336*x16344)));
evalcond[6]=((((-1.0)*cj1*x16355))+(((-1.0)*r00*x16332*x16337))+((r02*x16333))+(((-1.0)*r02*x16341*x16344))+((sj3*x16353))+(((-1.0)*cj5*x16336*x16352))+(((-1.0)*cj5*sj6*x16334*x16344))+(((-1.0)*sj5*x16336*x16337))+(((-1.0)*cj6*x16330*x16334)));
evalcond[7]=((((-1.0)*cj1*x16354))+(((-1.0)*sj5*x16337*x16347))+(((-1.0)*x16340*x16352))+((r12*x16333))+((sj3*x16351))+(((-1.0)*cj5*x16339*x16352))+(((-1.0)*x16349*x16352))+(((-1.0)*sj3*x16330*x16331))+(((-1.0)*r10*x16332*x16337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16358=((1.0)*cj4);
IkReal x16359=(sj4*sj5);
IkReal x16360=(cj5*sj4*sj6);
IkReal x16361=(cj5*cj6*sj4);
if( IKabs((((r00*x16360))+((r02*x16359))+(((-1.0)*cj6*r00*x16358))+((cj4*r01*sj6))+((r01*x16361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x16360))+(((-1.0)*r11*sj6*x16358))+((cj4*cj6*r10))+(((-1.0)*r12*x16359))+(((-1.0)*r11*x16361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x16360))+((r02*x16359))+(((-1.0)*cj6*r00*x16358))+((cj4*r01*sj6))+((r01*x16361))))+IKsqr(((((-1.0)*r10*x16360))+(((-1.0)*r11*sj6*x16358))+((cj4*cj6*r10))+(((-1.0)*r12*x16359))+(((-1.0)*r11*x16361))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x16360))+((r02*x16359))+(((-1.0)*cj6*r00*x16358))+((cj4*r01*sj6))+((r01*x16361))), ((((-1.0)*r10*x16360))+(((-1.0)*r11*sj6*x16358))+((cj4*cj6*r10))+(((-1.0)*r12*x16359))+(((-1.0)*r11*x16361))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16362=IKcos(j0);
IkReal x16363=IKsin(j0);
IkReal x16364=((1.0)*sj4);
IkReal x16365=(cj6*sj3);
IkReal x16366=(sj5*sj6);
IkReal x16367=(cj3*cj5);
IkReal x16368=(r00*sj3);
IkReal x16369=((0.36442)*cj1);
IkReal x16370=(cj5*r01);
IkReal x16371=((1.0)*cj3);
IkReal x16372=(r10*sj6);
IkReal x16373=((0.01)*cj5);
IkReal x16374=(r12*sj5);
IkReal x16375=(r01*sj5);
IkReal x16376=((1.0)*cj4);
IkReal x16377=(r02*sj5);
IkReal x16378=(cj3*cj6);
IkReal x16379=(r00*sj6);
IkReal x16380=((0.37429)*cj5);
IkReal x16381=(cj4*cj6);
IkReal x16382=(r11*sj5);
IkReal x16383=(cj5*sj3);
IkReal x16384=((0.37429)*cj6);
IkReal x16385=(cj5*cj6*r11);
IkReal x16386=((0.069)*x16363);
IkReal x16387=(r11*sj4*sj6);
IkReal x16388=(r01*sj4*sj6);
IkReal x16389=((1.0)*x16362);
IkReal x16390=((0.069)*x16362);
evalcond[0]=(((r00*x16381))+x16363+(((-1.0)*cj6*x16364*x16370))+(((-1.0)*x16364*x16377))+(((-1.0)*r01*sj6*x16376))+(((-1.0)*cj5*x16364*x16379)));
evalcond[1]=((((-1.0)*r11*sj6*x16376))+(((-1.0)*x16389))+(((-1.0)*x16364*x16374))+(((-1.0)*x16364*x16385))+((r10*x16381))+(((-1.0)*cj5*x16364*x16372)));
evalcond[2]=(((sj1*x16390))+(((0.01)*cj6*x16370))+x16390+(((0.01)*x16377))+(((-1.0)*px))+((x16362*x16369))+((r02*x16380))+((x16373*x16379))+(((-1.0)*x16375*x16384))+(((-0.37429)*r00*x16366)));
evalcond[3]=((((-1.0)*x16382*x16384))+((sj1*x16386))+((x16363*x16369))+x16386+(((0.01)*x16374))+((r12*x16380))+((cj6*r11*x16373))+(((-1.0)*py))+((x16372*x16373))+(((-0.37429)*r10*x16366)));
evalcond[4]=(((cj3*x16387))+(((-1.0)*cj6*r11*x16367*x16376))+(((-1.0)*cj4*x16371*x16374))+(((-1.0)*r12*x16383))+(((-1.0)*r10*x16364*x16378))+((sj1*x16363))+((r10*sj3*x16366))+(((-1.0)*x16367*x16372*x16376))+((x16365*x16382)));
evalcond[5]=((((-1.0)*r02*x16383))+((cj3*x16388))+(((-1.0)*x16367*x16376*x16379))+(((-1.0)*cj4*x16371*x16377))+((x16366*x16368))+(((-1.0)*r00*x16364*x16378))+((sj1*x16362))+((x16365*x16375))+(((-1.0)*cj6*r01*x16367*x16376)));
evalcond[6]=((((-1.0)*r00*x16364*x16365))+(((-1.0)*cj5*sj6*x16368*x16376))+((r02*x16367))+(((-1.0)*r00*x16366*x16371))+(((-1.0)*x16365*x16370*x16376))+(((-1.0)*cj1*x16389))+((sj3*x16388))+(((-1.0)*sj3*x16376*x16377))+(((-1.0)*cj6*x16371*x16375)));
evalcond[7]=((((-1.0)*x16372*x16376*x16383))+(((-1.0)*cj1*x16363))+((sj3*x16387))+(((-1.0)*sj3*x16374*x16376))+(((-1.0)*cj5*r11*x16365*x16376))+(((-1.0)*r10*x16366*x16371))+(((-1.0)*r10*x16364*x16365))+((r12*x16367))+(((-1.0)*cj6*x16371*x16382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16391=((0.842227766698146)*sj5);
IkReal x16392=(r10*sj6);
IkReal x16393=(cj6*r01);
IkReal x16394=((0.00358229604870815)*cj5);
IkReal x16395=(cj6*r11);
IkReal x16396=((0.0225020109192911)*sj5);
IkReal x16397=((0.134081758807097)*sj5);
IkReal x16398=(r00*sj6);
IkReal x16399=((0.134081758807097)*cj5);
IkReal x16400=((0.0225020109192911)*cj5);
IkReal x16401=((0.842227766698146)*cj5);
IkReal x16402=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*x16392*x16400))+(((-1.0)*x16395*x16400))+(((-1.0)*x16393*x16397))+(((2.25020109192911)*py))+(((-1.0)*x16397*x16398))+((x16393*x16394))+(((-0.358229604870815)*px))+(((-1.0)*r12*x16401))+((x16394*x16398))+((r02*x16399))+((x16391*x16395))+((x16391*x16392))+((r02*x16402))+(((-1.0)*r12*x16396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x16393*x16400))+(((-1.0)*x16392*x16394))+(((2.25020109192911)*px))+(((-1.0)*r02*x16396))+((x16392*x16397))+(((-1.0)*r12*x16402))+(((-1.0)*x16398*x16400))+(((0.358229604870815)*py))+((x16391*x16398))+((x16391*x16393))+((x16395*x16397))+(((-1.0)*r02*x16401))+(((-1.0)*r12*x16399))+(((-1.0)*x16394*x16395)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x16392*x16400))+(((-1.0)*x16395*x16400))+(((-1.0)*x16393*x16397))+(((2.25020109192911)*py))+(((-1.0)*x16397*x16398))+((x16393*x16394))+(((-0.358229604870815)*px))+(((-1.0)*r12*x16401))+((x16394*x16398))+((r02*x16399))+((x16391*x16395))+((x16391*x16392))+((r02*x16402))+(((-1.0)*r12*x16396))))+IKsqr(((((-1.0)*x16393*x16400))+(((-1.0)*x16392*x16394))+(((2.25020109192911)*px))+(((-1.0)*r02*x16396))+((x16392*x16397))+(((-1.0)*r12*x16402))+(((-1.0)*x16398*x16400))+(((0.358229604870815)*py))+((x16391*x16398))+((x16391*x16393))+((x16395*x16397))+(((-1.0)*r02*x16401))+(((-1.0)*r12*x16399))+(((-1.0)*x16394*x16395))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x16392*x16400))+(((-1.0)*x16395*x16400))+(((-1.0)*x16393*x16397))+(((2.25020109192911)*py))+(((-1.0)*x16397*x16398))+((x16393*x16394))+(((-0.358229604870815)*px))+(((-1.0)*r12*x16401))+((x16394*x16398))+((r02*x16399))+((x16391*x16395))+((x16391*x16392))+((r02*x16402))+(((-1.0)*r12*x16396))), ((((-1.0)*x16393*x16400))+(((-1.0)*x16392*x16394))+(((2.25020109192911)*px))+(((-1.0)*r02*x16396))+((x16392*x16397))+(((-1.0)*r12*x16402))+(((-1.0)*x16398*x16400))+(((0.358229604870815)*py))+((x16391*x16398))+((x16391*x16393))+((x16395*x16397))+(((-1.0)*r02*x16401))+(((-1.0)*r12*x16399))+(((-1.0)*x16394*x16395))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x16403=IKsin(j0);
IkReal x16404=IKcos(j0);
IkReal x16405=(r10*sj3);
IkReal x16406=(cj3*r00);
IkReal x16407=(sj5*sj6);
IkReal x16408=(cj5*r12);
IkReal x16409=(r00*sj3);
IkReal x16410=(cj3*r10);
IkReal x16411=(cj5*sj6);
IkReal x16412=((1.0)*cj4);
IkReal x16413=(cj5*r02);
IkReal x16414=(cj3*r01);
IkReal x16415=(sj4*sj6);
IkReal x16416=(r12*sj5);
IkReal x16417=(cj6*sj5);
IkReal x16418=(r01*sj3);
IkReal x16419=(r11*sj3);
IkReal x16420=((1.0)*sj3);
IkReal x16421=(r02*sj5);
IkReal x16422=(cj5*cj6);
IkReal x16423=(cj3*r11);
IkReal x16424=((1.0)*x16403);
IkReal x16425=((1.0)*cj6*sj4);
IkReal x16426=(r11*x16415);
IkReal x16427=((0.01)*x16422);
evalcond[0]=((((0.01)*x16421))+((r01*x16427))+(((0.43342)*x16404))+(((-0.069)*x16403))+(((-1.0)*px))+(((-0.37429)*r00*x16407))+(((0.37429)*x16413))+(((-0.37429)*r01*x16417))+(((0.01)*r00*x16411)));
evalcond[1]=((((-0.37429)*r10*x16407))+(((0.37429)*x16408))+(((0.43342)*x16403))+(((0.01)*x16416))+(((0.01)*r10*x16411))+((r11*x16427))+(((0.069)*x16404))+(((-1.0)*py))+(((-0.37429)*r11*x16417)));
evalcond[2]=(((x16417*x16419))+((x16405*x16407))+(((-1.0)*x16410*x16425))+x16404+(((-1.0)*x16408*x16420))+(((-1.0)*cj3*x16412*x16416))+(((-1.0)*x16410*x16411*x16412))+(((-1.0)*x16412*x16422*x16423))+((x16415*x16423)));
evalcond[3]=(((x16417*x16418))+(((-1.0)*x16406*x16411*x16412))+(((-1.0)*x16424))+(((-1.0)*x16412*x16414*x16422))+((x16407*x16409))+(((-1.0)*x16406*x16425))+((x16414*x16415))+(((-1.0)*cj3*x16412*x16421))+(((-1.0)*x16413*x16420)));
evalcond[4]=((((-1.0)*x16409*x16425))+((cj3*x16413))+(((-1.0)*x16412*x16418*x16422))+(((-1.0)*sj3*x16412*x16421))+((x16415*x16418))+(((-1.0)*x16409*x16411*x16412))+(((-1.0)*x16404))+(((-1.0)*x16414*x16417))+(((-1.0)*x16406*x16407)));
evalcond[5]=((((-1.0)*x16405*x16411*x16412))+(((-1.0)*x16412*x16419*x16422))+(((-1.0)*x16424))+(((-1.0)*sj3*x16412*x16416))+(((-1.0)*x16417*x16423))+((x16415*x16419))+(((-1.0)*x16405*x16425))+(((-1.0)*x16407*x16410))+((cj3*x16408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16428=((0.842227766698146)*sj5);
IkReal x16429=(r10*sj6);
IkReal x16430=(cj6*r01);
IkReal x16431=((0.00358229604870815)*cj5);
IkReal x16432=(cj6*r11);
IkReal x16433=((0.0225020109192911)*sj5);
IkReal x16434=((0.134081758807097)*sj5);
IkReal x16435=(r00*sj6);
IkReal x16436=((0.134081758807097)*cj5);
IkReal x16437=((0.0225020109192911)*cj5);
IkReal x16438=((0.842227766698146)*cj5);
IkReal x16439=((0.00358229604870815)*sj5);
if( IKabs((((x16430*x16434))+(((2.25020109192911)*py))+(((-1.0)*x16431*x16435))+(((0.358229604870815)*px))+(((-1.0)*x16432*x16437))+((x16428*x16429))+((x16434*x16435))+(((-1.0)*r12*x16438))+(((-1.0)*r12*x16433))+((x16428*x16432))+(((-1.0)*x16429*x16437))+(((-1.0)*r02*x16439))+(((-1.0)*r02*x16436))+(((-1.0)*x16430*x16431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x16429*x16431))+(((2.25020109192911)*px))+((r12*x16436))+((r12*x16439))+(((-0.358229604870815)*py))+(((-1.0)*x16432*x16434))+((x16428*x16430))+((x16428*x16435))+(((-1.0)*x16435*x16437))+(((-1.0)*x16429*x16434))+((x16431*x16432))+(((-1.0)*r02*x16433))+(((-1.0)*r02*x16438))+(((-1.0)*x16430*x16437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x16430*x16434))+(((2.25020109192911)*py))+(((-1.0)*x16431*x16435))+(((0.358229604870815)*px))+(((-1.0)*x16432*x16437))+((x16428*x16429))+((x16434*x16435))+(((-1.0)*r12*x16438))+(((-1.0)*r12*x16433))+((x16428*x16432))+(((-1.0)*x16429*x16437))+(((-1.0)*r02*x16439))+(((-1.0)*r02*x16436))+(((-1.0)*x16430*x16431))))+IKsqr((((x16429*x16431))+(((2.25020109192911)*px))+((r12*x16436))+((r12*x16439))+(((-0.358229604870815)*py))+(((-1.0)*x16432*x16434))+((x16428*x16430))+((x16428*x16435))+(((-1.0)*x16435*x16437))+(((-1.0)*x16429*x16434))+((x16431*x16432))+(((-1.0)*r02*x16433))+(((-1.0)*r02*x16438))+(((-1.0)*x16430*x16437))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x16430*x16434))+(((2.25020109192911)*py))+(((-1.0)*x16431*x16435))+(((0.358229604870815)*px))+(((-1.0)*x16432*x16437))+((x16428*x16429))+((x16434*x16435))+(((-1.0)*r12*x16438))+(((-1.0)*r12*x16433))+((x16428*x16432))+(((-1.0)*x16429*x16437))+(((-1.0)*r02*x16439))+(((-1.0)*r02*x16436))+(((-1.0)*x16430*x16431))), (((x16429*x16431))+(((2.25020109192911)*px))+((r12*x16436))+((r12*x16439))+(((-0.358229604870815)*py))+(((-1.0)*x16432*x16434))+((x16428*x16430))+((x16428*x16435))+(((-1.0)*x16435*x16437))+(((-1.0)*x16429*x16434))+((x16431*x16432))+(((-1.0)*r02*x16433))+(((-1.0)*r02*x16438))+(((-1.0)*x16430*x16437))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x16440=IKsin(j0);
IkReal x16441=IKcos(j0);
IkReal x16442=(r10*sj3);
IkReal x16443=(cj3*r00);
IkReal x16444=(sj5*sj6);
IkReal x16445=(cj5*r12);
IkReal x16446=(r00*sj3);
IkReal x16447=((1.0)*cj3);
IkReal x16448=(cj5*r02);
IkReal x16449=((0.01)*cj5);
IkReal x16450=(r10*sj6);
IkReal x16451=(cj6*r11);
IkReal x16452=(cj4*cj5);
IkReal x16453=((1.0)*sj3);
IkReal x16454=(cj6*r01);
IkReal x16455=((1.0)*sj6);
IkReal x16456=((0.01)*sj5);
IkReal x16457=((1.0)*x16441);
IkReal x16458=((1.0)*cj6*sj4);
IkReal x16459=(sj5*x16454);
IkReal x16460=(r11*sj4*sj6);
IkReal x16461=(cj4*r12*sj5);
IkReal x16462=(r01*sj4*sj6);
IkReal x16463=(cj4*r02*sj5);
evalcond[0]=((((-0.37429)*x16459))+(((-0.37429)*r00*x16444))+((r00*sj6*x16449))+(((0.37429)*x16448))+((r02*x16456))+(((-1.0)*px))+(((0.43342)*x16441))+((x16449*x16454))+(((0.069)*x16440)));
evalcond[1]=((((-0.37429)*sj5*x16451))+(((0.37429)*x16445))+(((-0.069)*x16441))+((r12*x16456))+(((-1.0)*py))+(((0.43342)*x16440))+((x16449*x16450))+((x16449*x16451))+(((-0.37429)*r10*x16444)));
evalcond[2]=((((-1.0)*x16443*x16458))+(((-1.0)*x16447*x16452*x16454))+x16440+((cj3*x16462))+((sj3*x16459))+(((-1.0)*x16443*x16452*x16455))+(((-1.0)*x16447*x16463))+(((-1.0)*x16448*x16453))+((x16444*x16446)));
evalcond[3]=((((-1.0)*x16447*x16451*x16452))+(((-1.0)*x16457))+((sj3*sj5*x16451))+((cj3*x16460))+(((-1.0)*x16445*x16453))+(((-1.0)*cj6*r10*sj4*x16447))+((x16442*x16444))+(((-1.0)*x16447*x16461))+(((-1.0)*x16447*x16450*x16452)));
evalcond[4]=((((-1.0)*x16457))+(((-1.0)*x16453*x16463))+((sj3*x16462))+(((-1.0)*x16446*x16458))+(((-1.0)*x16446*x16452*x16455))+((cj3*x16448))+(((-1.0)*x16447*x16459))+(((-1.0)*x16452*x16453*x16454))+(((-1.0)*x16443*x16444)));
evalcond[5]=((((-1.0)*x16453*x16461))+(((-1.0)*x16442*x16458))+((sj3*x16460))+(((-1.0)*x16440))+(((-1.0)*r10*x16444*x16447))+((cj3*x16445))+(((-1.0)*sj5*x16447*x16451))+(((-1.0)*x16451*x16452*x16453))+(((-1.0)*x16442*x16452*x16455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16464=((0.0320990151198118)*sj5);
IkReal x16465=((0.00749723120732182)*sj5);
IkReal x16466=(cj6*r01);
IkReal x16467=((0.00749723120732182)*cj5);
IkReal x16468=(r00*sj6);
IkReal x16469=((1.20143403691943)*sj5);
IkReal x16470=((0.0320990151198118)*cj5);
IkReal x16471=(r10*sj6);
IkReal x16472=((0.280613866858848)*cj5);
IkReal x16473=((1.20143403691943)*cj5);
IkReal x16474=((0.280613866858848)*sj5);
IkReal x16475=(cj6*r11);
IkReal x16476=(cj6*x16469);
IkReal x16477=(cj6*x16470);
if( IKabs(((((-0.749723120732182)*px))+(((-1.0)*x16468*x16474))+(((-1.0)*x16469*x16471))+(((-1.0)*x16469*x16475))+((r02*x16465))+((r02*x16472))+((x16467*x16468))+((x16470*x16471))+((x16470*x16475))+(((-1.0)*x16466*x16474))+((r12*x16464))+((r12*x16473))+((x16466*x16467))+(((-3.20990151198118)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x16472))+(((-1.0)*r12*x16465))+(((-1.0)*x16467*x16475))+(((-1.0)*x16467*x16471))+((r02*x16464))+((x16468*x16470))+((r02*x16473))+((x16471*x16474))+(((0.749723120732182)*py))+(((-1.0)*x16466*x16469))+((x16474*x16475))+(((-3.20990151198118)*px))+((x16466*x16470))+(((-1.0)*x16468*x16469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.749723120732182)*px))+(((-1.0)*x16468*x16474))+(((-1.0)*x16469*x16471))+(((-1.0)*x16469*x16475))+((r02*x16465))+((r02*x16472))+((x16467*x16468))+((x16470*x16471))+((x16470*x16475))+(((-1.0)*x16466*x16474))+((r12*x16464))+((r12*x16473))+((x16466*x16467))+(((-3.20990151198118)*py))))+IKsqr(((((-1.0)*r12*x16472))+(((-1.0)*r12*x16465))+(((-1.0)*x16467*x16475))+(((-1.0)*x16467*x16471))+((r02*x16464))+((x16468*x16470))+((r02*x16473))+((x16471*x16474))+(((0.749723120732182)*py))+(((-1.0)*x16466*x16469))+((x16474*x16475))+(((-3.20990151198118)*px))+((x16466*x16470))+(((-1.0)*x16468*x16469))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.749723120732182)*px))+(((-1.0)*x16468*x16474))+(((-1.0)*x16469*x16471))+(((-1.0)*x16469*x16475))+((r02*x16465))+((r02*x16472))+((x16467*x16468))+((x16470*x16471))+((x16470*x16475))+(((-1.0)*x16466*x16474))+((r12*x16464))+((r12*x16473))+((x16466*x16467))+(((-3.20990151198118)*py))), ((((-1.0)*r12*x16472))+(((-1.0)*r12*x16465))+(((-1.0)*x16467*x16475))+(((-1.0)*x16467*x16471))+((r02*x16464))+((x16468*x16470))+((r02*x16473))+((x16471*x16474))+(((0.749723120732182)*py))+(((-1.0)*x16466*x16469))+((x16474*x16475))+(((-3.20990151198118)*px))+((x16466*x16470))+(((-1.0)*x16468*x16469))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x16478=IKcos(j0);
IkReal x16479=IKsin(j0);
IkReal x16480=(r10*sj3);
IkReal x16481=(cj3*r00);
IkReal x16482=(sj5*sj6);
IkReal x16483=(cj3*cj5);
IkReal x16484=(r00*sj3);
IkReal x16485=(cj3*r10);
IkReal x16486=(cj5*sj6);
IkReal x16487=((1.0)*cj4);
IkReal x16488=(cj5*cj6);
IkReal x16489=(r01*sj3);
IkReal x16490=(cj3*r01);
IkReal x16491=(sj4*sj6);
IkReal x16492=(r12*sj5);
IkReal x16493=(cj6*sj5);
IkReal x16494=((0.37429)*cj5);
IkReal x16495=(r11*sj3);
IkReal x16496=(r02*sj5);
IkReal x16497=((1.0)*cj6*sj4);
IkReal x16498=(r11*x16491);
IkReal x16499=((1.0)*cj5*sj3);
evalcond[0]=((((0.01)*x16496))+(((-0.29542)*x16478))+((r02*x16494))+(((-1.0)*px))+(((0.01)*r00*x16486))+(((-0.37429)*r01*x16493))+(((-0.37429)*r00*x16482))+(((0.01)*r01*x16488))+(((-0.069)*x16479)));
evalcond[1]=((((-0.37429)*r10*x16482))+((r12*x16494))+(((0.01)*x16492))+(((0.01)*r10*x16486))+(((-0.29542)*x16479))+(((-1.0)*py))+(((0.069)*x16478))+(((-0.37429)*r11*x16493))+(((0.01)*r11*x16488)));
evalcond[2]=(((x16493*x16495))+(((-1.0)*cj6*r11*x16483*x16487))+x16478+(((-1.0)*cj3*x16487*x16492))+(((-1.0)*r10*sj6*x16483*x16487))+((cj3*x16498))+(((-1.0)*r12*x16499))+(((-1.0)*x16485*x16497))+((x16480*x16482)));
evalcond[3]=((((-1.0)*x16484*x16497))+(((-1.0)*sj3*x16487*x16496))+x16478+(((-1.0)*x16490*x16493))+((r02*x16483))+(((-1.0)*x16487*x16488*x16489))+(((-1.0)*x16484*x16486*x16487))+((x16489*x16491))+(((-1.0)*x16481*x16482)));
evalcond[4]=(((r12*x16483))+(((-1.0)*sj3*x16487*x16492))+((x16491*x16495))+x16479+(((-1.0)*x16480*x16486*x16487))+(((-1.0)*x16487*x16488*x16495))+(((-1.0)*x16480*x16497))+(((-1.0)*cj3*r11*x16493))+(((-1.0)*x16482*x16485)));
evalcond[5]=((((-1.0)*x16481*x16486*x16487))+((x16482*x16484))+(((-1.0)*cj3*x16487*x16496))+((x16490*x16491))+(((-1.0)*x16479))+((x16489*x16493))+(((-1.0)*cj6*r01*x16483*x16487))+(((-1.0)*x16481*x16497))+(((-1.0)*r02*x16499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16500=((0.0320990151198118)*sj5);
IkReal x16501=((0.00749723120732182)*sj5);
IkReal x16502=(cj6*r01);
IkReal x16503=((0.00749723120732182)*cj5);
IkReal x16504=(r00*sj6);
IkReal x16505=((1.20143403691943)*sj5);
IkReal x16506=((0.0320990151198118)*cj5);
IkReal x16507=(r10*sj6);
IkReal x16508=((0.280613866858848)*cj5);
IkReal x16509=((1.20143403691943)*cj5);
IkReal x16510=((0.280613866858848)*sj5);
IkReal x16511=(cj6*r11);
IkReal x16512=(cj6*x16505);
IkReal x16513=(cj6*x16506);
if( IKabs(((((-1.0)*x16505*x16507))+((r12*x16509))+((r12*x16500))+((x16506*x16511))+(((-1.0)*r02*x16508))+(((-1.0)*r02*x16501))+(((-1.0)*x16502*x16503))+(((-1.0)*x16503*x16504))+((x16504*x16510))+(((-1.0)*x16505*x16511))+((x16502*x16510))+(((0.749723120732182)*px))+((x16506*x16507))+(((-3.20990151198118)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.749723120732182)*py))+((r12*x16508))+((r12*x16501))+(((-1.0)*x16502*x16505))+((x16504*x16506))+((x16503*x16511))+((r02*x16509))+((r02*x16500))+(((-1.0)*x16510*x16511))+((x16502*x16506))+((x16503*x16507))+(((-3.20990151198118)*px))+(((-1.0)*x16504*x16505))+(((-1.0)*x16507*x16510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x16505*x16507))+((r12*x16509))+((r12*x16500))+((x16506*x16511))+(((-1.0)*r02*x16508))+(((-1.0)*r02*x16501))+(((-1.0)*x16502*x16503))+(((-1.0)*x16503*x16504))+((x16504*x16510))+(((-1.0)*x16505*x16511))+((x16502*x16510))+(((0.749723120732182)*px))+((x16506*x16507))+(((-3.20990151198118)*py))))+IKsqr(((((-0.749723120732182)*py))+((r12*x16508))+((r12*x16501))+(((-1.0)*x16502*x16505))+((x16504*x16506))+((x16503*x16511))+((r02*x16509))+((r02*x16500))+(((-1.0)*x16510*x16511))+((x16502*x16506))+((x16503*x16507))+(((-3.20990151198118)*px))+(((-1.0)*x16504*x16505))+(((-1.0)*x16507*x16510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x16505*x16507))+((r12*x16509))+((r12*x16500))+((x16506*x16511))+(((-1.0)*r02*x16508))+(((-1.0)*r02*x16501))+(((-1.0)*x16502*x16503))+(((-1.0)*x16503*x16504))+((x16504*x16510))+(((-1.0)*x16505*x16511))+((x16502*x16510))+(((0.749723120732182)*px))+((x16506*x16507))+(((-3.20990151198118)*py))), ((((-0.749723120732182)*py))+((r12*x16508))+((r12*x16501))+(((-1.0)*x16502*x16505))+((x16504*x16506))+((x16503*x16511))+((r02*x16509))+((r02*x16500))+(((-1.0)*x16510*x16511))+((x16502*x16506))+((x16503*x16507))+(((-3.20990151198118)*px))+(((-1.0)*x16504*x16505))+(((-1.0)*x16507*x16510))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x16514=IKcos(j0);
IkReal x16515=IKsin(j0);
IkReal x16516=(r10*sj3);
IkReal x16517=(cj3*r00);
IkReal x16518=(sj5*sj6);
IkReal x16519=(cj3*cj5);
IkReal x16520=(r00*sj3);
IkReal x16521=((1.0)*cj3);
IkReal x16522=(cj6*r01);
IkReal x16523=((0.37429)*sj5);
IkReal x16524=((0.01)*cj5);
IkReal x16525=(r10*sj6);
IkReal x16526=(cj6*r11);
IkReal x16527=((1.0)*cj4);
IkReal x16528=(cj5*sj3);
IkReal x16529=(r12*sj5);
IkReal x16530=((0.37429)*cj5);
IkReal x16531=(sj3*sj5);
IkReal x16532=(cj5*sj6);
IkReal x16533=(r02*sj5);
IkReal x16534=((1.0)*cj6*sj4);
IkReal x16535=(r11*sj4*sj6);
IkReal x16536=(r01*sj4*sj6);
evalcond[0]=(((x16522*x16524))+((r00*sj6*x16524))+(((-0.29542)*x16514))+((r02*x16530))+(((-1.0)*px))+(((-0.37429)*r00*x16518))+(((0.01)*x16533))+(((-1.0)*x16522*x16523))+(((0.069)*x16515)));
evalcond[1]=((((-0.29542)*x16515))+((x16524*x16526))+((x16524*x16525))+((r12*x16530))+(((-1.0)*py))+(((0.01)*x16529))+(((-0.069)*x16514))+(((-0.37429)*r10*x16518))+(((-1.0)*x16523*x16526)));
evalcond[2]=(((cj3*x16536))+x16515+(((-1.0)*x16517*x16527*x16532))+(((-1.0)*cj4*x16521*x16533))+(((-1.0)*r02*x16528))+(((-1.0)*x16519*x16522*x16527))+((x16518*x16520))+(((-1.0)*x16517*x16534))+((x16522*x16531)));
evalcond[3]=((((-1.0)*x16520*x16527*x16532))+((r02*x16519))+x16514+(((-1.0)*x16522*x16527*x16528))+(((-1.0)*r02*x16527*x16531))+(((-1.0)*x16517*x16518))+(((-1.0)*x16520*x16534))+((sj3*x16536))+(((-1.0)*sj5*x16521*x16522)));
evalcond[4]=((((-1.0)*x16516*x16534))+x16515+(((-1.0)*r10*x16518*x16521))+(((-1.0)*x16516*x16527*x16532))+(((-1.0)*sj3*x16527*x16529))+((sj3*x16535))+((r12*x16519))+(((-1.0)*x16526*x16527*x16528))+(((-1.0)*sj5*x16521*x16526)));
evalcond[5]=(((cj3*x16535))+((x16516*x16518))+((x16526*x16531))+(((-1.0)*x16519*x16526*x16527))+(((-1.0)*cj6*r10*sj4*x16521))+(((-1.0)*r12*x16528))+(((-1.0)*cj4*x16521*x16529))+(((-1.0)*x16519*x16525*x16527))+(((-1.0)*x16514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16537=cj1*cj1;
IkReal x16538=((69.0)*r10);
IkReal x16539=(cj4*cj6);
IkReal x16540=((364.42)*cj1);
IkReal x16541=(cj5*sj4);
IkReal x16542=((374.29)*cj2);
IkReal x16543=(cj5*r02);
IkReal x16544=(sj1*sj5);
IkReal x16545=((10.0)*r02);
IkReal x16546=(sj1*sj2);
IkReal x16547=(cj6*r11);
IkReal x16548=((69.0)*cj2);
IkReal x16549=(cj6*r01);
IkReal x16550=(cj2*sj1);
IkReal x16551=(r12*sj4);
IkReal x16552=(r00*sj6);
IkReal x16553=((1000.0)*px);
IkReal x16554=(cj4*r11*sj6);
IkReal x16555=((10.0)*cj5*sj1);
IkReal x16556=((10.0)*cj2*cj5);
IkReal x16557=(x16538*x16539);
IkReal x16558=((69.0)*x16554);
IkReal x16559=((69.0)*sj5*x16551);
IkReal x16560=((69.0)*x16541*x16547);
IkReal x16561=(sj6*x16538*x16541);
IkReal x16562=(x16558+x16559+x16561+x16560);
CheckValue<IkReal> x16563=IKPowWithIntegerCheck((((sj2*x16537*x16548))+(((69.0)*x16546))+((x16540*x16546))),-1);
if(!x16563.valid){
continue;
}
CheckValue<IkReal> x16564=IKPowWithIntegerCheck(((((-69.0)*sj1))+(((-1.0)*x16537*x16548))+(((-1.0)*sj1*x16540))),-1);
if(!x16564.valid){
continue;
}
if( IKabs(((x16563.value)*((((x16542*x16543))+(((-1.0)*sj5*x16542*x16549))+(((-1.0)*cj2*x16553))+((r10*sj6*x16540*x16541))+(((-1.0)*x16544*x16548*x16551))+x16562+((x16549*x16556))+((sj5*x16540*x16551))+(((-1.0)*sj1*x16548*x16554))+((x16540*x16554))+((cj2*sj5*x16545))+(((-1.0)*x16557))+(((-1.0)*sj5*x16542*x16552))+((x16540*x16541*x16547))+(((-1.0)*r10*x16539*x16540))+((x16552*x16556))+(((-1.0)*sj1*x16541*x16547*x16548))+((x16550*x16557))+(((-1.0)*x16550*x16561)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16564.value)*((x16557+((x16549*x16555))+(((-374.29)*x16544*x16549))+(((-1.0)*x16562))+((x16552*x16555))+(((374.29)*sj1*x16543))+(((-1.0)*sj1*x16553))+((x16544*x16545))+(((-374.29)*x16544*x16552)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16563.value)*((((x16542*x16543))+(((-1.0)*sj5*x16542*x16549))+(((-1.0)*cj2*x16553))+((r10*sj6*x16540*x16541))+(((-1.0)*x16544*x16548*x16551))+x16562+((x16549*x16556))+((sj5*x16540*x16551))+(((-1.0)*sj1*x16548*x16554))+((x16540*x16554))+((cj2*sj5*x16545))+(((-1.0)*x16557))+(((-1.0)*sj5*x16542*x16552))+((x16540*x16541*x16547))+(((-1.0)*r10*x16539*x16540))+((x16552*x16556))+(((-1.0)*sj1*x16541*x16547*x16548))+((x16550*x16557))+(((-1.0)*x16550*x16561))))))+IKsqr(((x16564.value)*((x16557+((x16549*x16555))+(((-374.29)*x16544*x16549))+(((-1.0)*x16562))+((x16552*x16555))+(((374.29)*sj1*x16543))+(((-1.0)*sj1*x16553))+((x16544*x16545))+(((-374.29)*x16544*x16552))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16563.value)*((((x16542*x16543))+(((-1.0)*sj5*x16542*x16549))+(((-1.0)*cj2*x16553))+((r10*sj6*x16540*x16541))+(((-1.0)*x16544*x16548*x16551))+x16562+((x16549*x16556))+((sj5*x16540*x16551))+(((-1.0)*sj1*x16548*x16554))+((x16540*x16554))+((cj2*sj5*x16545))+(((-1.0)*x16557))+(((-1.0)*sj5*x16542*x16552))+((x16540*x16541*x16547))+(((-1.0)*r10*x16539*x16540))+((x16552*x16556))+(((-1.0)*sj1*x16541*x16547*x16548))+((x16550*x16557))+(((-1.0)*x16550*x16561))))), ((x16564.value)*((x16557+((x16549*x16555))+(((-374.29)*x16544*x16549))+(((-1.0)*x16562))+((x16552*x16555))+(((374.29)*sj1*x16543))+(((-1.0)*sj1*x16553))+((x16544*x16545))+(((-374.29)*x16544*x16552))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16565=IKcos(j0);
IkReal x16566=IKsin(j0);
IkReal x16567=((1.0)*sj4);
IkReal x16568=(cj6*sj3);
IkReal x16569=(cj3*cj5);
IkReal x16570=(sj5*sj6);
IkReal x16571=(r00*sj3);
IkReal x16572=((0.36442)*cj1);
IkReal x16573=((0.069)*sj2);
IkReal x16574=(cj6*r01);
IkReal x16575=((1.0)*cj3);
IkReal x16576=((0.37429)*sj5);
IkReal x16577=((0.01)*cj5);
IkReal x16578=(r10*sj6);
IkReal x16579=(r12*sj5);
IkReal x16580=((1.0)*cj4);
IkReal x16581=(r02*sj5);
IkReal x16582=((1.0)*sj1);
IkReal x16583=(cj3*cj6);
IkReal x16584=(r01*sj6);
IkReal x16585=(r00*sj6);
IkReal x16586=(cj6*r11);
IkReal x16587=((0.37429)*cj5);
IkReal x16588=(cj4*cj6);
IkReal x16589=(cj5*sj3);
IkReal x16590=(cj5*x16586);
IkReal x16591=(cj2*x16565);
IkReal x16592=((0.069)*x16566);
IkReal x16593=(r11*sj4*sj6);
IkReal x16594=(sj2*x16565);
IkReal x16595=((1.0)*x16566);
evalcond[0]=((((-1.0)*x16567*x16579))+x16591+((sj1*sj2*x16566))+(((-1.0)*cj5*x16567*x16578))+(((-1.0)*x16567*x16590))+((r10*x16588))+(((-1.0)*r11*sj6*x16580)));
evalcond[1]=((((-1.0)*cj5*x16567*x16585))+((sj1*x16594))+(((-1.0)*x16580*x16584))+(((-1.0)*cj2*x16595))+(((-1.0)*cj5*x16567*x16574))+(((-1.0)*x16567*x16581))+((r00*x16588)));
evalcond[2]=((((-1.0)*sj3*x16580*x16581))+(((-1.0)*cj1*x16565))+((sj3*sj4*x16584))+(((-1.0)*r00*x16570*x16575))+((r02*x16569))+(((-1.0)*cj5*sj6*x16571*x16580))+(((-1.0)*sj5*x16574*x16575))+(((-1.0)*r00*x16567*x16568))+(((-1.0)*cj5*r01*x16568*x16580)));
evalcond[3]=((((-1.0)*r10*x16570*x16575))+(((-1.0)*r10*x16567*x16568))+(((-1.0)*cj1*x16595))+((r12*x16569))+(((-1.0)*sj3*x16579*x16580))+(((-1.0)*x16578*x16580*x16589))+((sj3*x16593))+(((-1.0)*cj5*r11*x16568*x16580))+(((-1.0)*sj5*x16575*x16586)));
evalcond[4]=((((-1.0)*x16566*x16573))+(((-0.37429)*r00*x16570))+(((0.069)*x16565))+((x16577*x16585))+(((-1.0)*px))+((x16574*x16577))+(((-0.069)*sj1*x16591))+(((0.01)*x16581))+(((-1.0)*x16574*x16576))+((x16565*x16572))+((r02*x16587)));
evalcond[5]=((((-1.0)*x16576*x16586))+x16592+((r12*x16587))+(((-0.37429)*r10*x16570))+((x16577*x16586))+((x16577*x16578))+(((-1.0)*py))+((x16565*x16573))+(((-1.0)*cj2*sj1*x16592))+((x16566*x16572))+(((0.01)*x16579)));
evalcond[6]=(((r10*sj3*x16570))+(((-1.0)*r10*x16567*x16583))+(((-1.0)*cj4*x16575*x16579))+(((-1.0)*r12*x16589))+(((-1.0)*x16569*x16580*x16586))+x16594+((cj3*x16593))+(((-1.0)*cj2*x16566*x16582))+((r11*sj5*x16568))+(((-1.0)*x16569*x16578*x16580)));
evalcond[7]=((((-1.0)*x16569*x16574*x16580))+(((-1.0)*x16569*x16580*x16585))+(((-1.0)*sj2*x16595))+(((-1.0)*r00*x16567*x16583))+((r01*sj5*x16568))+(((-1.0)*r02*x16589))+(((-1.0)*x16582*x16591))+(((-1.0)*cj4*x16575*x16581))+((x16570*x16571))+((cj3*sj4*x16584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16596=(r10*sj6);
IkReal x16597=((69.0)*cj2);
IkReal x16598=(cj6*r11);
IkReal x16599=((374.29)*sj5);
IkReal x16600=((10.0)*cj5);
IkReal x16601=(cj5*sj4);
IkReal x16602=(r11*sj6);
IkReal x16603=(sj1*sj2);
IkReal x16604=((1000.0)*py);
IkReal x16605=((69.0)*sj2);
IkReal x16606=(r12*sj5);
IkReal x16607=((364.42)*cj1);
IkReal x16608=(cj4*x16607);
IkReal x16609=(sj1*x16606);
IkReal x16610=((374.29)*cj5*r12);
IkReal x16611=((69.0)*cj4*cj6*r10);
IkReal x16612=(x16601*x16607);
CheckValue<IkReal> x16613=IKPowWithIntegerCheck(IKsign((x16597+(((-69.0)*sj1))+((cj2*x16607)))),-1);
if(!x16613.valid){
continue;
}
CheckValue<IkReal> x16614 = IKatan2WithCheck(IkReal((((cj4*cj6*r10*x16605))+(((-1.0)*cj2*x16598*x16600))+(((-1.0)*cj2*x16610))+(((-1.0)*cj4*x16602*x16605))+((cj2*x16598*x16599))+(((-1.0)*x16596*x16601*x16605))+(((-1.0)*x16598*x16601*x16605))+((cj2*x16596*x16599))+(((-1.0)*sj4*x16605*x16606))+((cj2*x16604))+(((-1.0)*cj2*x16596*x16600))+(((-10.0)*cj2*x16606)))),IkReal(((((10.0)*x16603*x16606))+((cj4*cj6*r10*sj1*x16597))+(((69.0)*sj4*x16606))+(((-1.0)*x16596*x16599*x16603))+(((-1.0)*sj1*x16596*x16597*x16601))+(((-1.0)*sj1*x16597*x16598*x16601))+((x16602*x16608))+((x16598*x16600*x16603))+((x16596*x16612))+((x16603*x16610))+(((-1.0)*cj4*sj1*x16597*x16602))+(((-1.0)*x16603*x16604))+(((69.0)*cj4*x16602))+(((-1.0)*x16598*x16599*x16603))+(((-1.0)*x16611))+((sj4*x16606*x16607))+((x16596*x16600*x16603))+(((69.0)*x16596*x16601))+(((-1.0)*sj4*x16597*x16609))+((x16598*x16612))+(((-1.0)*cj6*r10*x16608))+(((69.0)*x16598*x16601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16614.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16613.value)))+(x16614.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16615=IKcos(j0);
IkReal x16616=IKsin(j0);
IkReal x16617=((1.0)*sj4);
IkReal x16618=(cj6*sj3);
IkReal x16619=(cj3*cj5);
IkReal x16620=(sj5*sj6);
IkReal x16621=(r00*sj3);
IkReal x16622=((0.36442)*cj1);
IkReal x16623=((0.069)*sj2);
IkReal x16624=(cj6*r01);
IkReal x16625=((1.0)*cj3);
IkReal x16626=((0.37429)*sj5);
IkReal x16627=((0.01)*cj5);
IkReal x16628=(r10*sj6);
IkReal x16629=(r12*sj5);
IkReal x16630=((1.0)*cj4);
IkReal x16631=(r02*sj5);
IkReal x16632=((1.0)*sj1);
IkReal x16633=(cj3*cj6);
IkReal x16634=(r01*sj6);
IkReal x16635=(r00*sj6);
IkReal x16636=(cj6*r11);
IkReal x16637=((0.37429)*cj5);
IkReal x16638=(cj4*cj6);
IkReal x16639=(cj5*sj3);
IkReal x16640=(cj5*x16636);
IkReal x16641=(cj2*x16615);
IkReal x16642=((0.069)*x16616);
IkReal x16643=(r11*sj4*sj6);
IkReal x16644=(sj2*x16615);
IkReal x16645=((1.0)*x16616);
evalcond[0]=(x16641+(((-1.0)*r11*sj6*x16630))+(((-1.0)*cj5*x16617*x16628))+((sj1*sj2*x16616))+(((-1.0)*x16617*x16640))+(((-1.0)*x16617*x16629))+((r10*x16638)));
evalcond[1]=((((-1.0)*cj5*x16617*x16624))+((sj1*x16644))+(((-1.0)*x16617*x16631))+(((-1.0)*x16630*x16634))+((r00*x16638))+(((-1.0)*cj2*x16645))+(((-1.0)*cj5*x16617*x16635)));
evalcond[2]=((((-1.0)*sj5*x16624*x16625))+((r02*x16619))+((sj3*sj4*x16634))+(((-1.0)*sj3*x16630*x16631))+(((-1.0)*r00*x16617*x16618))+(((-1.0)*cj5*r01*x16618*x16630))+(((-1.0)*cj5*sj6*x16621*x16630))+(((-1.0)*r00*x16620*x16625))+(((-1.0)*cj1*x16615)));
evalcond[3]=(((sj3*x16643))+(((-1.0)*x16628*x16630*x16639))+(((-1.0)*r10*x16620*x16625))+(((-1.0)*cj1*x16645))+(((-1.0)*r10*x16617*x16618))+(((-1.0)*sj3*x16629*x16630))+(((-1.0)*sj5*x16625*x16636))+(((-1.0)*cj5*r11*x16618*x16630))+((r12*x16619)));
evalcond[4]=((((-1.0)*x16616*x16623))+((x16615*x16622))+(((-1.0)*px))+(((-0.37429)*r00*x16620))+(((-1.0)*x16624*x16626))+(((0.01)*x16631))+((x16627*x16635))+((r02*x16637))+((x16624*x16627))+(((-0.069)*sj1*x16641))+(((0.069)*x16615)));
evalcond[5]=(((x16627*x16628))+(((-1.0)*x16626*x16636))+x16642+((x16615*x16623))+((r12*x16637))+(((-1.0)*py))+(((-1.0)*cj2*sj1*x16642))+((x16616*x16622))+((x16627*x16636))+(((-0.37429)*r10*x16620))+(((0.01)*x16629)));
evalcond[6]=((((-1.0)*x16619*x16630*x16636))+((r10*sj3*x16620))+(((-1.0)*r10*x16617*x16633))+x16644+(((-1.0)*cj2*x16616*x16632))+(((-1.0)*cj4*x16625*x16629))+(((-1.0)*x16619*x16628*x16630))+((cj3*x16643))+(((-1.0)*r12*x16639))+((r11*sj5*x16618)));
evalcond[7]=((((-1.0)*x16619*x16630*x16635))+(((-1.0)*r02*x16639))+(((-1.0)*sj2*x16645))+((r01*sj5*x16618))+(((-1.0)*cj4*x16625*x16631))+(((-1.0)*x16619*x16624*x16630))+((x16620*x16621))+(((-1.0)*x16632*x16641))+(((-1.0)*r00*x16617*x16633))+((cj3*sj4*x16634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16646=cj1*cj1;
IkReal x16647=((1.0)*r01);
IkReal x16648=(cj5*cj6);
IkReal x16649=(r02*sj5);
IkReal x16650=(cj2*sj4);
IkReal x16651=(cj5*sj6);
IkReal x16652=(cj4*cj6);
IkReal x16653=(r12*sj5);
IkReal x16654=(cj2*cj4*sj6);
IkReal x16655=(sj1*sj2*sj4);
IkReal x16656=((1.0)*sj1*sj2);
IkReal x16657=(cj4*sj1*sj2*sj6);
CheckValue<IkReal> x16658 = IKatan2WithCheck(IkReal(((((-1.0)*x16649*x16650))+((x16653*x16655))+(((-1.0)*x16647*x16654))+((cj2*r00*x16652))+(((-1.0)*x16647*x16648*x16650))+((r10*x16651*x16655))+((r11*x16657))+(((-1.0)*r00*x16650*x16651))+(((-1.0)*r10*x16652*x16656))+((r11*x16648*x16655)))),IkReal((((r01*x16657))+(((-1.0)*r00*x16652*x16656))+((x16649*x16655))+((r11*x16654))+(((-1.0)*cj2*r10*x16652))+((r00*x16651*x16655))+((x16650*x16653))+((r11*x16648*x16650))+((r01*x16648*x16655))+((r10*x16650*x16651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16658.valid){
continue;
}
CheckValue<IkReal> x16659=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x16646))+((x16646*(cj2*cj2))))),-1);
if(!x16659.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x16658.value)+(((1.5707963267949)*(x16659.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16660=IKcos(j0);
IkReal x16661=IKsin(j0);
IkReal x16662=((1.0)*sj4);
IkReal x16663=(cj6*sj3);
IkReal x16664=(cj3*cj5);
IkReal x16665=(sj5*sj6);
IkReal x16666=(r00*sj3);
IkReal x16667=((0.36442)*cj1);
IkReal x16668=((0.069)*sj2);
IkReal x16669=(cj6*r01);
IkReal x16670=((1.0)*cj3);
IkReal x16671=((0.37429)*sj5);
IkReal x16672=((0.01)*cj5);
IkReal x16673=(r10*sj6);
IkReal x16674=(r12*sj5);
IkReal x16675=((1.0)*cj4);
IkReal x16676=(r02*sj5);
IkReal x16677=((1.0)*sj1);
IkReal x16678=(cj3*cj6);
IkReal x16679=(r01*sj6);
IkReal x16680=(r00*sj6);
IkReal x16681=(cj6*r11);
IkReal x16682=((0.37429)*cj5);
IkReal x16683=(cj4*cj6);
IkReal x16684=(cj5*sj3);
IkReal x16685=(cj5*x16681);
IkReal x16686=(cj2*x16660);
IkReal x16687=((0.069)*x16661);
IkReal x16688=(r11*sj4*sj6);
IkReal x16689=(sj2*x16660);
IkReal x16690=((1.0)*x16661);
evalcond[0]=(x16686+(((-1.0)*r11*sj6*x16675))+((r10*x16683))+(((-1.0)*cj5*x16662*x16673))+(((-1.0)*x16662*x16674))+(((-1.0)*x16662*x16685))+((sj1*sj2*x16661)));
evalcond[1]=((((-1.0)*cj5*x16662*x16669))+((r00*x16683))+((sj1*x16689))+(((-1.0)*x16662*x16676))+(((-1.0)*cj2*x16690))+(((-1.0)*x16675*x16679))+(((-1.0)*cj5*x16662*x16680)));
evalcond[2]=((((-1.0)*r00*x16662*x16663))+(((-1.0)*cj5*sj6*x16666*x16675))+(((-1.0)*cj1*x16660))+((r02*x16664))+(((-1.0)*sj5*x16669*x16670))+(((-1.0)*cj5*r01*x16663*x16675))+(((-1.0)*r00*x16665*x16670))+(((-1.0)*sj3*x16675*x16676))+((sj3*sj4*x16679)));
evalcond[3]=((((-1.0)*r10*x16665*x16670))+(((-1.0)*x16673*x16675*x16684))+((r12*x16664))+(((-1.0)*r10*x16662*x16663))+(((-1.0)*cj5*r11*x16663*x16675))+((sj3*x16688))+(((-1.0)*sj5*x16670*x16681))+(((-1.0)*sj3*x16674*x16675))+(((-1.0)*cj1*x16690)));
evalcond[4]=((((0.069)*x16660))+(((-0.37429)*r00*x16665))+((x16669*x16672))+(((-0.069)*sj1*x16686))+(((-1.0)*px))+(((0.01)*x16676))+(((-1.0)*x16661*x16668))+((x16660*x16667))+(((-1.0)*x16669*x16671))+((r02*x16682))+((x16672*x16680)));
evalcond[5]=(x16687+((x16661*x16667))+(((-0.37429)*r10*x16665))+((x16672*x16673))+(((-1.0)*py))+(((-1.0)*x16671*x16681))+(((0.01)*x16674))+(((-1.0)*cj2*sj1*x16687))+((r12*x16682))+((x16660*x16668))+((x16672*x16681)));
evalcond[6]=(x16689+((r11*sj5*x16663))+(((-1.0)*x16664*x16675*x16681))+(((-1.0)*r10*x16662*x16678))+(((-1.0)*r12*x16684))+(((-1.0)*cj4*x16670*x16674))+((cj3*x16688))+(((-1.0)*cj2*x16661*x16677))+(((-1.0)*x16664*x16673*x16675))+((r10*sj3*x16665)));
evalcond[7]=((((-1.0)*r00*x16662*x16678))+(((-1.0)*x16664*x16669*x16675))+((r01*sj5*x16663))+(((-1.0)*x16664*x16675*x16680))+((x16665*x16666))+(((-1.0)*cj4*x16670*x16676))+((cj3*sj4*x16679))+(((-1.0)*sj2*x16690))+(((-1.0)*r02*x16684))+(((-1.0)*x16677*x16686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16691=cj6*cj6;
IkReal x16692=r21*r21;
IkReal x16693=r20*r20;
IkReal x16694=cj5*cj5;
IkReal x16695=r22*r22;
IkReal x16696=(cj3*r21);
IkReal x16697=((1.0)*r20);
IkReal x16698=(cj6*r22);
IkReal x16699=(cj1*sj2);
IkReal x16700=(cj3*cj5);
IkReal x16701=((2.0)*sj6);
IkReal x16702=((1.0)*sj3);
IkReal x16703=(cj5*cj6);
IkReal x16704=(r22*sj5);
IkReal x16705=(cj5*sj3);
IkReal x16706=(r21*sj6);
IkReal x16707=(r20*sj5);
IkReal x16708=(cj5*sj6);
IkReal x16709=((1.0)*sj1);
IkReal x16710=(cj6*r20*sj3);
IkReal x16711=(sj3*x16694);
IkReal x16712=(sj5*x16693);
IkReal x16713=(cj3*r20*r22);
IkReal x16714=(sj5*x16692);
IkReal x16715=(cj3*cj6*sj6);
IkReal x16716=(x16691*x16693);
IkReal x16717=(sj3*x16691*x16692);
CheckValue<IkReal> x16718=IKPowWithIntegerCheck(IKsign((x16717+(((-1.0)*r20*x16701*x16704*x16705))+((r21*x16701*x16710))+((x16695*x16711))+(((-1.0)*x16691*x16692*x16694*x16702))+(((-2.0)*r21*sj5*x16698*x16705))+(((-1.0)*r21*x16694*x16701*x16710))+(((-1.0)*x16692*x16702))+((x16711*x16716))+(((-1.0)*x16693*x16694*x16702))+(((-1.0)*x16695*x16702))+(((-1.0)*x16702*x16716)))),-1);
if(!x16718.valid){
continue;
}
CheckValue<IkReal> x16719 = IKatan2WithCheck(IkReal(((((2.0)*x16691*x16696*x16707))+(((-1.0)*cj6*sj1*x16697))+(((-1.0)*sj5*x16696*x16697))+(((-1.0)*x16714*x16715))+(((-1.0)*r21*x16699*x16702*x16703))+((x16712*x16715))+((sj1*x16706))+((r22*x16696*x16708))+(((-1.0)*x16697*x16698*x16700))+(((-1.0)*sj6*x16697*x16699*x16705))+(((-1.0)*x16699*x16702*x16704)))),IkReal(((((-1.0)*r21*x16703*x16709))+(((-1.0)*sj5*x16695*x16700))+((x16696*x16698))+(((-2.0)*x16694*x16696*x16698))+((x16700*x16712))+((x16699*x16710))+((sj6*x16713))+(((-1.0)*x16694*x16701*x16713))+((x16691*x16700*x16714))+(((-1.0)*sj1*x16697*x16708))+(((-1.0)*x16704*x16709))+((x16696*x16701*x16703*x16707))+(((-1.0)*x16699*x16702*x16706))+(((-1.0)*x16691*x16700*x16712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16718.value)))+(x16719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16720=IKsin(j4);
IkReal x16721=IKcos(j4);
IkReal x16722=(cj3*r21);
IkReal x16723=((1.0)*sj5);
IkReal x16724=(r21*sj3);
IkReal x16725=((1.0)*cj5);
IkReal x16726=(r22*sj3);
IkReal x16727=(cj6*r20);
IkReal x16728=(cj3*r22);
IkReal x16729=(sj6*x16720);
IkReal x16730=(r20*sj3*sj6);
IkReal x16731=(cj3*r20*sj6);
IkReal x16732=((1.0)*x16720);
IkReal x16733=(x16721*x16725);
evalcond[0]=((((-1.0)*r20*x16725*x16729))+(((-1.0)*cj6*r21*x16720*x16725))+((cj1*sj2))+(((-1.0)*r22*x16720*x16723))+((x16721*x16727))+(((-1.0)*r21*sj6*x16721)));
evalcond[1]=((((-1.0)*x16721*x16723*x16726))+sj1+(((-1.0)*x16730*x16733))+((cj5*x16728))+(((-1.0)*x16723*x16731))+(((-1.0)*cj6*x16724*x16733))+((x16724*x16729))+(((-1.0)*cj6*x16722*x16723))+(((-1.0)*sj3*x16727*x16732)));
evalcond[2]=((((-1.0)*cj3*x16727*x16732))+(((-1.0)*x16721*x16723*x16728))+(((-1.0)*x16731*x16733))+(((-1.0)*cj1*cj2))+(((-1.0)*x16725*x16726))+((x16722*x16729))+(((-1.0)*cj6*x16722*x16733))+((cj6*sj5*x16724))+((sj5*x16730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x16734=cj1*cj1;
IkReal x16735=((1.0)+(((-1.0)*x16734))+((x16734*(cj2*cj2))));
j0eval[0]=x16735;
j0eval[1]=IKsign(x16735);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x16736=(cj1*cj2);
j0eval[0]=((((-1.0)*sj1))+cj2+(((5.28144927536232)*x16736)));
j0eval[1]=IKsign(((((-69.0)*sj1))+(((69.0)*cj2))+(((364.42)*x16736))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x16737=cj1*cj1;
IkReal x16738=(sj1*sj2);
IkReal x16739=((5.28144927536232)*cj1);
IkReal x16740=(cj2*x16737);
j0eval[0]=(x16738+((x16738*x16739))+((sj2*x16740)));
j0eval[1]=((((-1.0)*sj1))+(((-1.0)*sj1*x16739))+(((-1.0)*x16740)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16741=(cj4*sj6);
IkReal x16742=((1.0)*r01);
IkReal x16743=(cj5*sj4);
IkReal x16744=(sj4*sj5);
IkReal x16745=(cj4*cj6);
if( IKabs(((((-1.0)*cj6*x16742*x16743))+(((-1.0)*r00*sj6*x16743))+((r00*x16745))+(((-1.0)*x16741*x16742))+(((-1.0)*r02*x16744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r11*x16743))+((r11*x16741))+((r10*sj6*x16743))+(((-1.0)*r10*x16745))+((r12*x16744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*x16742*x16743))+(((-1.0)*r00*sj6*x16743))+((r00*x16745))+(((-1.0)*x16741*x16742))+(((-1.0)*r02*x16744))))+IKsqr((((cj6*r11*x16743))+((r11*x16741))+((r10*sj6*x16743))+(((-1.0)*r10*x16745))+((r12*x16744))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj6*x16742*x16743))+(((-1.0)*r00*sj6*x16743))+((r00*x16745))+(((-1.0)*x16741*x16742))+(((-1.0)*r02*x16744))), (((cj6*r11*x16743))+((r11*x16741))+((r10*sj6*x16743))+(((-1.0)*r10*x16745))+((r12*x16744))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16746=IKcos(j0);
IkReal x16747=IKsin(j0);
IkReal x16748=((1.0)*sj4);
IkReal x16749=(cj6*r10);
IkReal x16750=(sj5*sj6);
IkReal x16751=(cj3*cj5);
IkReal x16752=(r00*sj3);
IkReal x16753=((0.36442)*cj1);
IkReal x16754=(cj6*r01);
IkReal x16755=((1.0)*cj3);
IkReal x16756=((0.01)*cj5);
IkReal x16757=(r10*sj6);
IkReal x16758=(r12*sj5);
IkReal x16759=(sj3*sj5);
IkReal x16760=(r02*sj5);
IkReal x16761=(cj6*r00);
IkReal x16762=((1.0)*cj4);
IkReal x16763=(r00*sj6);
IkReal x16764=((0.37429)*cj5);
IkReal x16765=(cj6*r11);
IkReal x16766=((0.37429)*sj5);
IkReal x16767=(cj5*x16765);
IkReal x16768=((0.069)*x16747);
IkReal x16769=(r11*sj4*sj6);
IkReal x16770=(sj3*x16762);
IkReal x16771=(r01*sj4*sj6);
IkReal x16772=((1.0)*x16747);
IkReal x16773=((1.0)*x16746);
IkReal x16774=((0.069)*x16746);
IkReal x16775=((1.0)*cj5*sj3);
evalcond[0]=((((-1.0)*x16748*x16758))+x16746+(((-1.0)*x16748*x16767))+(((-1.0)*r11*sj6*x16762))+((cj4*x16749))+(((-1.0)*cj5*x16748*x16757)));
evalcond[1]=((((-1.0)*x16772))+(((-1.0)*x16748*x16760))+(((-1.0)*r01*sj6*x16762))+((cj4*x16761))+(((-1.0)*cj5*x16748*x16754))+(((-1.0)*cj5*x16748*x16763)));
evalcond[2]=(x16774+(((-1.0)*x16754*x16766))+(((0.01)*x16760))+(((-1.0)*px))+((x16756*x16763))+((r02*x16764))+((x16754*x16756))+((x16746*x16753))+(((-0.37429)*r00*x16750))+(((-1.0)*sj1*x16774)));
evalcond[3]=(((r12*x16764))+x16768+(((-0.37429)*r10*x16750))+(((-1.0)*sj1*x16768))+(((0.01)*x16758))+(((-1.0)*py))+((x16756*x16757))+((x16747*x16753))+((x16756*x16765))+(((-1.0)*x16765*x16766)));
evalcond[4]=(((cj3*x16769))+(((-1.0)*cj4*x16755*x16758))+((r10*sj3*x16750))+(((-1.0)*x16751*x16762*x16765))+((x16759*x16765))+(((-1.0)*r12*x16775))+(((-1.0)*sj1*x16772))+(((-1.0)*x16751*x16757*x16762))+(((-1.0)*cj3*x16748*x16749)));
evalcond[5]=((((-1.0)*cj4*x16755*x16760))+(((-1.0)*r02*x16775))+(((-1.0)*x16751*x16762*x16763))+(((-1.0)*x16751*x16754*x16762))+((x16754*x16759))+(((-1.0)*cj3*x16748*x16761))+(((-1.0)*sj1*x16773))+((cj3*x16771))+((x16750*x16752)));
evalcond[6]=((((-1.0)*cj5*x16754*x16770))+(((-1.0)*cj5*sj6*x16752*x16762))+(((-1.0)*sj5*x16754*x16755))+((r02*x16751))+(((-1.0)*r02*x16759*x16762))+(((-1.0)*cj1*x16773))+(((-1.0)*cj6*x16748*x16752))+((sj3*x16771))+(((-1.0)*r00*x16750*x16755)));
evalcond[7]=(((r12*x16751))+(((-1.0)*r10*x16750*x16755))+(((-1.0)*x16758*x16770))+(((-1.0)*sj3*x16748*x16749))+((sj3*x16769))+(((-1.0)*sj5*x16755*x16765))+(((-1.0)*cj1*x16772))+(((-1.0)*cj5*x16757*x16770))+(((-1.0)*x16767*x16770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16776=((1.0)*cj4);
IkReal x16777=(sj4*sj5);
IkReal x16778=(cj5*sj4*sj6);
IkReal x16779=(cj5*cj6*sj4);
if( IKabs((((r02*x16777))+((r00*x16778))+((r01*x16779))+(((-1.0)*cj6*r00*x16776))+((cj4*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*cj6*r10))+(((-1.0)*r10*x16778))+(((-1.0)*r11*sj6*x16776))+(((-1.0)*r12*x16777))+(((-1.0)*r11*x16779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x16777))+((r00*x16778))+((r01*x16779))+(((-1.0)*cj6*r00*x16776))+((cj4*r01*sj6))))+IKsqr((((cj4*cj6*r10))+(((-1.0)*r10*x16778))+(((-1.0)*r11*sj6*x16776))+(((-1.0)*r12*x16777))+(((-1.0)*r11*x16779))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*x16777))+((r00*x16778))+((r01*x16779))+(((-1.0)*cj6*r00*x16776))+((cj4*r01*sj6))), (((cj4*cj6*r10))+(((-1.0)*r10*x16778))+(((-1.0)*r11*sj6*x16776))+(((-1.0)*r12*x16777))+(((-1.0)*r11*x16779))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16780=IKcos(j0);
IkReal x16781=IKsin(j0);
IkReal x16782=((1.0)*sj4);
IkReal x16783=(cj6*sj3);
IkReal x16784=(sj5*sj6);
IkReal x16785=(cj3*cj5);
IkReal x16786=(r00*sj3);
IkReal x16787=((0.36442)*cj1);
IkReal x16788=(cj5*r01);
IkReal x16789=((1.0)*cj3);
IkReal x16790=(r10*sj6);
IkReal x16791=((0.01)*cj5);
IkReal x16792=(r12*sj5);
IkReal x16793=(r01*sj5);
IkReal x16794=((1.0)*cj4);
IkReal x16795=(r02*sj5);
IkReal x16796=(cj3*cj6);
IkReal x16797=(r00*sj6);
IkReal x16798=((0.37429)*cj5);
IkReal x16799=(cj4*cj6);
IkReal x16800=(r11*sj5);
IkReal x16801=(cj5*sj3);
IkReal x16802=((0.37429)*cj6);
IkReal x16803=(cj5*cj6*r11);
IkReal x16804=((0.069)*x16781);
IkReal x16805=(r11*sj4*sj6);
IkReal x16806=(r01*sj4*sj6);
IkReal x16807=((1.0)*x16780);
IkReal x16808=((0.069)*x16780);
evalcond[0]=(x16781+(((-1.0)*r01*sj6*x16794))+(((-1.0)*x16782*x16795))+(((-1.0)*cj6*x16782*x16788))+(((-1.0)*cj5*x16782*x16797))+((r00*x16799)));
evalcond[1]=((((-1.0)*r11*sj6*x16794))+((r10*x16799))+(((-1.0)*x16807))+(((-1.0)*x16782*x16803))+(((-1.0)*x16782*x16792))+(((-1.0)*cj5*x16782*x16790)));
evalcond[2]=(x16808+(((0.01)*cj6*x16788))+((x16780*x16787))+(((0.01)*x16795))+((sj1*x16808))+(((-0.37429)*r00*x16784))+((r02*x16798))+((x16791*x16797))+(((-1.0)*px))+(((-1.0)*x16793*x16802)));
evalcond[3]=(x16804+((cj6*r11*x16791))+(((0.01)*x16792))+((x16781*x16787))+((x16790*x16791))+((sj1*x16804))+((r12*x16798))+(((-1.0)*py))+(((-0.37429)*r10*x16784))+(((-1.0)*x16800*x16802)));
evalcond[4]=(((sj1*x16781))+(((-1.0)*cj6*r11*x16785*x16794))+((cj3*x16805))+((r10*sj3*x16784))+(((-1.0)*cj4*x16789*x16792))+(((-1.0)*r12*x16801))+(((-1.0)*x16785*x16790*x16794))+(((-1.0)*r10*x16782*x16796))+((x16783*x16800)));
evalcond[5]=(((sj1*x16780))+(((-1.0)*r00*x16782*x16796))+((x16783*x16793))+(((-1.0)*r02*x16801))+((cj3*x16806))+(((-1.0)*cj4*x16789*x16795))+(((-1.0)*x16785*x16794*x16797))+(((-1.0)*cj6*r01*x16785*x16794))+((x16784*x16786)));
evalcond[6]=(((sj3*x16806))+(((-1.0)*r00*x16782*x16783))+(((-1.0)*x16783*x16788*x16794))+(((-1.0)*sj3*x16794*x16795))+(((-1.0)*cj1*x16807))+((r02*x16785))+(((-1.0)*cj6*x16789*x16793))+(((-1.0)*r00*x16784*x16789))+(((-1.0)*cj5*sj6*x16786*x16794)));
evalcond[7]=((((-1.0)*sj3*x16792*x16794))+((sj3*x16805))+(((-1.0)*r10*x16782*x16783))+(((-1.0)*cj5*r11*x16783*x16794))+((r12*x16785))+(((-1.0)*cj6*x16789*x16800))+(((-1.0)*r10*x16784*x16789))+(((-1.0)*cj1*x16781))+(((-1.0)*x16790*x16794*x16801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16809=((0.842227766698146)*sj5);
IkReal x16810=(r10*sj6);
IkReal x16811=(cj6*r01);
IkReal x16812=((0.00358229604870815)*cj5);
IkReal x16813=(cj6*r11);
IkReal x16814=((0.0225020109192911)*sj5);
IkReal x16815=((0.134081758807097)*sj5);
IkReal x16816=(r00*sj6);
IkReal x16817=((0.134081758807097)*cj5);
IkReal x16818=((0.0225020109192911)*cj5);
IkReal x16819=((0.842227766698146)*cj5);
IkReal x16820=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*r12*x16814))+(((-1.0)*r12*x16819))+(((-1.0)*x16811*x16815))+(((2.25020109192911)*py))+((x16809*x16810))+((x16809*x16813))+(((-0.358229604870815)*px))+(((-1.0)*x16810*x16818))+((r02*x16817))+(((-1.0)*x16815*x16816))+((x16811*x16812))+((r02*x16820))+((x16812*x16816))+(((-1.0)*x16813*x16818)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x16817))+(((-1.0)*x16811*x16818))+(((2.25020109192911)*px))+(((-1.0)*x16812*x16813))+((x16809*x16811))+((x16809*x16816))+(((-1.0)*r12*x16820))+(((-1.0)*x16810*x16812))+(((0.358229604870815)*py))+(((-1.0)*x16816*x16818))+((x16813*x16815))+((x16810*x16815))+(((-1.0)*r02*x16819))+(((-1.0)*r02*x16814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x16814))+(((-1.0)*r12*x16819))+(((-1.0)*x16811*x16815))+(((2.25020109192911)*py))+((x16809*x16810))+((x16809*x16813))+(((-0.358229604870815)*px))+(((-1.0)*x16810*x16818))+((r02*x16817))+(((-1.0)*x16815*x16816))+((x16811*x16812))+((r02*x16820))+((x16812*x16816))+(((-1.0)*x16813*x16818))))+IKsqr(((((-1.0)*r12*x16817))+(((-1.0)*x16811*x16818))+(((2.25020109192911)*px))+(((-1.0)*x16812*x16813))+((x16809*x16811))+((x16809*x16816))+(((-1.0)*r12*x16820))+(((-1.0)*x16810*x16812))+(((0.358229604870815)*py))+(((-1.0)*x16816*x16818))+((x16813*x16815))+((x16810*x16815))+(((-1.0)*r02*x16819))+(((-1.0)*r02*x16814))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x16814))+(((-1.0)*r12*x16819))+(((-1.0)*x16811*x16815))+(((2.25020109192911)*py))+((x16809*x16810))+((x16809*x16813))+(((-0.358229604870815)*px))+(((-1.0)*x16810*x16818))+((r02*x16817))+(((-1.0)*x16815*x16816))+((x16811*x16812))+((r02*x16820))+((x16812*x16816))+(((-1.0)*x16813*x16818))), ((((-1.0)*r12*x16817))+(((-1.0)*x16811*x16818))+(((2.25020109192911)*px))+(((-1.0)*x16812*x16813))+((x16809*x16811))+((x16809*x16816))+(((-1.0)*r12*x16820))+(((-1.0)*x16810*x16812))+(((0.358229604870815)*py))+(((-1.0)*x16816*x16818))+((x16813*x16815))+((x16810*x16815))+(((-1.0)*r02*x16819))+(((-1.0)*r02*x16814))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x16821=IKsin(j0);
IkReal x16822=IKcos(j0);
IkReal x16823=(r10*sj3);
IkReal x16824=(cj3*r00);
IkReal x16825=(sj5*sj6);
IkReal x16826=(cj5*r12);
IkReal x16827=(r00*sj3);
IkReal x16828=(cj3*r10);
IkReal x16829=(cj5*sj6);
IkReal x16830=((1.0)*cj4);
IkReal x16831=(cj5*r02);
IkReal x16832=(cj3*r01);
IkReal x16833=(sj4*sj6);
IkReal x16834=(r12*sj5);
IkReal x16835=(cj6*sj5);
IkReal x16836=(r01*sj3);
IkReal x16837=(r11*sj3);
IkReal x16838=((1.0)*sj3);
IkReal x16839=(r02*sj5);
IkReal x16840=(cj5*cj6);
IkReal x16841=(cj3*r11);
IkReal x16842=((1.0)*x16821);
IkReal x16843=((1.0)*cj6*sj4);
IkReal x16844=(r11*x16833);
IkReal x16845=((0.01)*x16840);
evalcond[0]=((((0.01)*r00*x16829))+(((0.37429)*x16831))+(((-0.37429)*r01*x16835))+(((-1.0)*px))+(((-0.37429)*r00*x16825))+(((0.01)*x16839))+(((-0.069)*x16821))+((r01*x16845))+(((0.43342)*x16822)));
evalcond[1]=((((-0.37429)*r10*x16825))+(((0.37429)*x16826))+(((-0.37429)*r11*x16835))+(((-1.0)*py))+(((0.01)*x16834))+(((0.069)*x16822))+(((0.01)*r10*x16829))+((r11*x16845))+(((0.43342)*x16821)));
evalcond[2]=((((-1.0)*x16828*x16843))+x16822+(((-1.0)*x16826*x16838))+(((-1.0)*x16830*x16840*x16841))+((x16823*x16825))+((x16835*x16837))+(((-1.0)*x16828*x16829*x16830))+(((-1.0)*cj3*x16830*x16834))+((x16833*x16841)));
evalcond[3]=(((x16832*x16833))+(((-1.0)*x16830*x16832*x16840))+((x16825*x16827))+(((-1.0)*x16842))+(((-1.0)*x16824*x16829*x16830))+((x16835*x16836))+(((-1.0)*x16831*x16838))+(((-1.0)*cj3*x16830*x16839))+(((-1.0)*x16824*x16843)));
evalcond[4]=((((-1.0)*x16830*x16836*x16840))+((cj3*x16831))+(((-1.0)*x16822))+(((-1.0)*x16827*x16829*x16830))+(((-1.0)*sj3*x16830*x16839))+((x16833*x16836))+(((-1.0)*x16832*x16835))+(((-1.0)*x16827*x16843))+(((-1.0)*x16824*x16825)));
evalcond[5]=(((cj3*x16826))+(((-1.0)*x16823*x16829*x16830))+(((-1.0)*sj3*x16830*x16834))+(((-1.0)*x16842))+((x16833*x16837))+(((-1.0)*x16830*x16837*x16840))+(((-1.0)*x16823*x16843))+(((-1.0)*x16825*x16828))+(((-1.0)*x16835*x16841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16846=((0.842227766698146)*sj5);
IkReal x16847=(r10*sj6);
IkReal x16848=(cj6*r01);
IkReal x16849=((0.00358229604870815)*cj5);
IkReal x16850=(cj6*r11);
IkReal x16851=((0.0225020109192911)*sj5);
IkReal x16852=((0.134081758807097)*sj5);
IkReal x16853=(r00*sj6);
IkReal x16854=((0.134081758807097)*cj5);
IkReal x16855=((0.0225020109192911)*cj5);
IkReal x16856=((0.842227766698146)*cj5);
IkReal x16857=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*x16847*x16855))+(((2.25020109192911)*py))+(((-1.0)*r02*x16854))+(((-1.0)*r02*x16857))+(((-1.0)*x16850*x16855))+((x16846*x16850))+(((-1.0)*r12*x16851))+(((-1.0)*r12*x16856))+(((0.358229604870815)*px))+((x16848*x16852))+(((-1.0)*x16848*x16849))+((x16852*x16853))+((x16846*x16847))+(((-1.0)*x16849*x16853)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x16847*x16852))+(((2.25020109192911)*px))+(((-1.0)*r02*x16851))+(((-1.0)*r02*x16856))+((r12*x16854))+((r12*x16857))+(((-1.0)*x16850*x16852))+((x16846*x16853))+(((-0.358229604870815)*py))+((x16849*x16850))+((x16846*x16848))+(((-1.0)*x16853*x16855))+((x16847*x16849))+(((-1.0)*x16848*x16855)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x16847*x16855))+(((2.25020109192911)*py))+(((-1.0)*r02*x16854))+(((-1.0)*r02*x16857))+(((-1.0)*x16850*x16855))+((x16846*x16850))+(((-1.0)*r12*x16851))+(((-1.0)*r12*x16856))+(((0.358229604870815)*px))+((x16848*x16852))+(((-1.0)*x16848*x16849))+((x16852*x16853))+((x16846*x16847))+(((-1.0)*x16849*x16853))))+IKsqr(((((-1.0)*x16847*x16852))+(((2.25020109192911)*px))+(((-1.0)*r02*x16851))+(((-1.0)*r02*x16856))+((r12*x16854))+((r12*x16857))+(((-1.0)*x16850*x16852))+((x16846*x16853))+(((-0.358229604870815)*py))+((x16849*x16850))+((x16846*x16848))+(((-1.0)*x16853*x16855))+((x16847*x16849))+(((-1.0)*x16848*x16855))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x16847*x16855))+(((2.25020109192911)*py))+(((-1.0)*r02*x16854))+(((-1.0)*r02*x16857))+(((-1.0)*x16850*x16855))+((x16846*x16850))+(((-1.0)*r12*x16851))+(((-1.0)*r12*x16856))+(((0.358229604870815)*px))+((x16848*x16852))+(((-1.0)*x16848*x16849))+((x16852*x16853))+((x16846*x16847))+(((-1.0)*x16849*x16853))), ((((-1.0)*x16847*x16852))+(((2.25020109192911)*px))+(((-1.0)*r02*x16851))+(((-1.0)*r02*x16856))+((r12*x16854))+((r12*x16857))+(((-1.0)*x16850*x16852))+((x16846*x16853))+(((-0.358229604870815)*py))+((x16849*x16850))+((x16846*x16848))+(((-1.0)*x16853*x16855))+((x16847*x16849))+(((-1.0)*x16848*x16855))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x16858=IKsin(j0);
IkReal x16859=IKcos(j0);
IkReal x16860=(r10*sj3);
IkReal x16861=(cj3*r00);
IkReal x16862=(sj5*sj6);
IkReal x16863=(cj5*r12);
IkReal x16864=(r00*sj3);
IkReal x16865=((1.0)*cj3);
IkReal x16866=(cj5*r02);
IkReal x16867=((0.01)*cj5);
IkReal x16868=(r10*sj6);
IkReal x16869=(cj6*r11);
IkReal x16870=(cj4*cj5);
IkReal x16871=((1.0)*sj3);
IkReal x16872=(cj6*r01);
IkReal x16873=((1.0)*sj6);
IkReal x16874=((0.01)*sj5);
IkReal x16875=((1.0)*x16859);
IkReal x16876=((1.0)*cj6*sj4);
IkReal x16877=(sj5*x16872);
IkReal x16878=(r11*sj4*sj6);
IkReal x16879=(cj4*r12*sj5);
IkReal x16880=(r01*sj4*sj6);
IkReal x16881=(cj4*r02*sj5);
evalcond[0]=((((-0.37429)*x16877))+((r02*x16874))+(((0.069)*x16858))+((r00*sj6*x16867))+(((-1.0)*px))+(((-0.37429)*r00*x16862))+(((0.43342)*x16859))+((x16867*x16872))+(((0.37429)*x16866)));
evalcond[1]=((((-0.37429)*sj5*x16869))+(((-0.37429)*r10*x16862))+(((-1.0)*py))+(((-0.069)*x16859))+((x16867*x16869))+((x16867*x16868))+(((0.43342)*x16858))+((r12*x16874))+(((0.37429)*x16863)));
evalcond[2]=((((-1.0)*x16861*x16870*x16873))+x16858+(((-1.0)*x16865*x16881))+((sj3*x16877))+(((-1.0)*x16865*x16870*x16872))+(((-1.0)*x16866*x16871))+((cj3*x16880))+((x16862*x16864))+(((-1.0)*x16861*x16876)));
evalcond[3]=(((sj3*sj5*x16869))+(((-1.0)*x16865*x16869*x16870))+(((-1.0)*cj6*r10*sj4*x16865))+((x16860*x16862))+(((-1.0)*x16875))+(((-1.0)*x16865*x16879))+(((-1.0)*x16865*x16868*x16870))+(((-1.0)*x16863*x16871))+((cj3*x16878)));
evalcond[4]=((((-1.0)*x16864*x16870*x16873))+(((-1.0)*x16864*x16876))+((sj3*x16880))+(((-1.0)*x16870*x16871*x16872))+(((-1.0)*x16875))+(((-1.0)*x16861*x16862))+(((-1.0)*x16865*x16877))+((cj3*x16866))+(((-1.0)*x16871*x16881)));
evalcond[5]=((((-1.0)*x16860*x16876))+(((-1.0)*r10*x16862*x16865))+(((-1.0)*sj5*x16865*x16869))+(((-1.0)*x16860*x16870*x16873))+((sj3*x16878))+(((-1.0)*x16869*x16870*x16871))+((cj3*x16863))+(((-1.0)*x16871*x16879))+(((-1.0)*x16858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16882=((0.0320990151198118)*sj5);
IkReal x16883=((0.00749723120732182)*sj5);
IkReal x16884=(cj6*r01);
IkReal x16885=((0.00749723120732182)*cj5);
IkReal x16886=(r00*sj6);
IkReal x16887=((1.20143403691943)*sj5);
IkReal x16888=((0.0320990151198118)*cj5);
IkReal x16889=(r10*sj6);
IkReal x16890=((0.280613866858848)*cj5);
IkReal x16891=((1.20143403691943)*cj5);
IkReal x16892=((0.280613866858848)*sj5);
IkReal x16893=(cj6*r11);
IkReal x16894=(cj6*x16887);
IkReal x16895=(cj6*x16888);
if( IKabs(((((-0.749723120732182)*px))+((x16888*x16889))+(((-1.0)*x16887*x16889))+((r12*x16891))+(((-1.0)*x16887*x16893))+((r02*x16883))+((x16884*x16885))+((x16885*x16886))+((x16888*x16893))+(((-1.0)*x16886*x16892))+((r12*x16882))+(((-1.0)*x16884*x16892))+((r02*x16890))+(((-3.20990151198118)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x16892*x16893))+(((-1.0)*x16886*x16887))+(((-1.0)*x16884*x16887))+(((-1.0)*x16885*x16889))+((x16886*x16888))+(((-1.0)*r12*x16890))+((r02*x16882))+((x16884*x16888))+((x16889*x16892))+(((0.749723120732182)*py))+((r02*x16891))+(((-1.0)*x16885*x16893))+(((-1.0)*r12*x16883))+(((-3.20990151198118)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.749723120732182)*px))+((x16888*x16889))+(((-1.0)*x16887*x16889))+((r12*x16891))+(((-1.0)*x16887*x16893))+((r02*x16883))+((x16884*x16885))+((x16885*x16886))+((x16888*x16893))+(((-1.0)*x16886*x16892))+((r12*x16882))+(((-1.0)*x16884*x16892))+((r02*x16890))+(((-3.20990151198118)*py))))+IKsqr((((x16892*x16893))+(((-1.0)*x16886*x16887))+(((-1.0)*x16884*x16887))+(((-1.0)*x16885*x16889))+((x16886*x16888))+(((-1.0)*r12*x16890))+((r02*x16882))+((x16884*x16888))+((x16889*x16892))+(((0.749723120732182)*py))+((r02*x16891))+(((-1.0)*x16885*x16893))+(((-1.0)*r12*x16883))+(((-3.20990151198118)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.749723120732182)*px))+((x16888*x16889))+(((-1.0)*x16887*x16889))+((r12*x16891))+(((-1.0)*x16887*x16893))+((r02*x16883))+((x16884*x16885))+((x16885*x16886))+((x16888*x16893))+(((-1.0)*x16886*x16892))+((r12*x16882))+(((-1.0)*x16884*x16892))+((r02*x16890))+(((-3.20990151198118)*py))), (((x16892*x16893))+(((-1.0)*x16886*x16887))+(((-1.0)*x16884*x16887))+(((-1.0)*x16885*x16889))+((x16886*x16888))+(((-1.0)*r12*x16890))+((r02*x16882))+((x16884*x16888))+((x16889*x16892))+(((0.749723120732182)*py))+((r02*x16891))+(((-1.0)*x16885*x16893))+(((-1.0)*r12*x16883))+(((-3.20990151198118)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x16896=IKcos(j0);
IkReal x16897=IKsin(j0);
IkReal x16898=(r10*sj3);
IkReal x16899=(cj3*r00);
IkReal x16900=(sj5*sj6);
IkReal x16901=(cj3*cj5);
IkReal x16902=(r00*sj3);
IkReal x16903=(cj3*r10);
IkReal x16904=(cj5*sj6);
IkReal x16905=((1.0)*cj4);
IkReal x16906=(cj5*cj6);
IkReal x16907=(r01*sj3);
IkReal x16908=(cj3*r01);
IkReal x16909=(sj4*sj6);
IkReal x16910=(r12*sj5);
IkReal x16911=(cj6*sj5);
IkReal x16912=((0.37429)*cj5);
IkReal x16913=(r11*sj3);
IkReal x16914=(r02*sj5);
IkReal x16915=((1.0)*cj6*sj4);
IkReal x16916=(r11*x16909);
IkReal x16917=((1.0)*cj5*sj3);
evalcond[0]=((((0.01)*x16914))+(((-0.37429)*r00*x16900))+(((-0.37429)*r01*x16911))+(((-0.29542)*x16896))+(((-1.0)*px))+(((-0.069)*x16897))+(((0.01)*r00*x16904))+(((0.01)*r01*x16906))+((r02*x16912)));
evalcond[1]=((((0.01)*x16910))+(((0.01)*r10*x16904))+((r12*x16912))+(((-0.29542)*x16897))+(((-1.0)*py))+(((-0.37429)*r10*x16900))+(((0.01)*r11*x16906))+(((0.069)*x16896))+(((-0.37429)*r11*x16911)));
evalcond[2]=((((-1.0)*x16903*x16915))+((x16898*x16900))+x16896+(((-1.0)*r10*sj6*x16901*x16905))+(((-1.0)*cj3*x16905*x16910))+((cj3*x16916))+(((-1.0)*r12*x16917))+((x16911*x16913))+(((-1.0)*cj6*r11*x16901*x16905)));
evalcond[3]=(((r02*x16901))+x16896+(((-1.0)*x16905*x16906*x16907))+(((-1.0)*x16899*x16900))+(((-1.0)*x16902*x16915))+(((-1.0)*x16908*x16911))+(((-1.0)*sj3*x16905*x16914))+((x16907*x16909))+(((-1.0)*x16902*x16904*x16905)));
evalcond[4]=((((-1.0)*x16905*x16906*x16913))+x16897+((r12*x16901))+((x16909*x16913))+(((-1.0)*cj3*r11*x16911))+(((-1.0)*x16898*x16915))+(((-1.0)*sj3*x16905*x16910))+(((-1.0)*x16900*x16903))+(((-1.0)*x16898*x16904*x16905)));
evalcond[5]=((((-1.0)*cj3*x16905*x16914))+(((-1.0)*cj6*r01*x16901*x16905))+((x16908*x16909))+(((-1.0)*r02*x16917))+((x16900*x16902))+((x16907*x16911))+(((-1.0)*x16899*x16915))+(((-1.0)*x16897))+(((-1.0)*x16899*x16904*x16905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16918=((0.0320990151198118)*sj5);
IkReal x16919=((0.00749723120732182)*sj5);
IkReal x16920=(cj6*r01);
IkReal x16921=((0.00749723120732182)*cj5);
IkReal x16922=(r00*sj6);
IkReal x16923=((1.20143403691943)*sj5);
IkReal x16924=((0.0320990151198118)*cj5);
IkReal x16925=(r10*sj6);
IkReal x16926=((0.280613866858848)*cj5);
IkReal x16927=((1.20143403691943)*cj5);
IkReal x16928=((0.280613866858848)*sj5);
IkReal x16929=(cj6*r11);
IkReal x16930=(cj6*x16923);
IkReal x16931=(cj6*x16924);
if( IKabs((((x16924*x16925))+((x16924*x16929))+(((-1.0)*x16920*x16921))+(((-1.0)*x16921*x16922))+(((-1.0)*r02*x16919))+((r12*x16918))+(((-1.0)*x16923*x16925))+(((-1.0)*x16923*x16929))+((x16920*x16928))+((r12*x16927))+((x16922*x16928))+(((0.749723120732182)*px))+(((-1.0)*r02*x16926))+(((-3.20990151198118)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.749723120732182)*py))+(((-1.0)*x16920*x16923))+(((-1.0)*x16922*x16923))+((r12*x16919))+((x16920*x16924))+((x16921*x16929))+((x16921*x16925))+((r12*x16926))+((r02*x16927))+((x16922*x16924))+(((-1.0)*x16928*x16929))+(((-1.0)*x16925*x16928))+(((-3.20990151198118)*px))+((r02*x16918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x16924*x16925))+((x16924*x16929))+(((-1.0)*x16920*x16921))+(((-1.0)*x16921*x16922))+(((-1.0)*r02*x16919))+((r12*x16918))+(((-1.0)*x16923*x16925))+(((-1.0)*x16923*x16929))+((x16920*x16928))+((r12*x16927))+((x16922*x16928))+(((0.749723120732182)*px))+(((-1.0)*r02*x16926))+(((-3.20990151198118)*py))))+IKsqr(((((-0.749723120732182)*py))+(((-1.0)*x16920*x16923))+(((-1.0)*x16922*x16923))+((r12*x16919))+((x16920*x16924))+((x16921*x16929))+((x16921*x16925))+((r12*x16926))+((r02*x16927))+((x16922*x16924))+(((-1.0)*x16928*x16929))+(((-1.0)*x16925*x16928))+(((-3.20990151198118)*px))+((r02*x16918))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x16924*x16925))+((x16924*x16929))+(((-1.0)*x16920*x16921))+(((-1.0)*x16921*x16922))+(((-1.0)*r02*x16919))+((r12*x16918))+(((-1.0)*x16923*x16925))+(((-1.0)*x16923*x16929))+((x16920*x16928))+((r12*x16927))+((x16922*x16928))+(((0.749723120732182)*px))+(((-1.0)*r02*x16926))+(((-3.20990151198118)*py))), ((((-0.749723120732182)*py))+(((-1.0)*x16920*x16923))+(((-1.0)*x16922*x16923))+((r12*x16919))+((x16920*x16924))+((x16921*x16929))+((x16921*x16925))+((r12*x16926))+((r02*x16927))+((x16922*x16924))+(((-1.0)*x16928*x16929))+(((-1.0)*x16925*x16928))+(((-3.20990151198118)*px))+((r02*x16918))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x16932=IKcos(j0);
IkReal x16933=IKsin(j0);
IkReal x16934=(r10*sj3);
IkReal x16935=(cj3*r00);
IkReal x16936=(sj5*sj6);
IkReal x16937=(cj3*cj5);
IkReal x16938=(r00*sj3);
IkReal x16939=((1.0)*cj3);
IkReal x16940=(cj6*r01);
IkReal x16941=((0.37429)*sj5);
IkReal x16942=((0.01)*cj5);
IkReal x16943=(r10*sj6);
IkReal x16944=(cj6*r11);
IkReal x16945=((1.0)*cj4);
IkReal x16946=(cj5*sj3);
IkReal x16947=(r12*sj5);
IkReal x16948=((0.37429)*cj5);
IkReal x16949=(sj3*sj5);
IkReal x16950=(cj5*sj6);
IkReal x16951=(r02*sj5);
IkReal x16952=((1.0)*cj6*sj4);
IkReal x16953=(r11*sj4*sj6);
IkReal x16954=(r01*sj4*sj6);
evalcond[0]=((((0.01)*x16951))+(((-1.0)*x16940*x16941))+((r02*x16948))+((r00*sj6*x16942))+(((-0.37429)*r00*x16936))+(((-0.29542)*x16932))+(((-1.0)*px))+(((0.069)*x16933))+((x16940*x16942)));
evalcond[1]=((((-0.069)*x16932))+((r12*x16948))+(((0.01)*x16947))+(((-1.0)*x16941*x16944))+((x16942*x16943))+((x16942*x16944))+(((-0.29542)*x16933))+(((-1.0)*py))+(((-0.37429)*r10*x16936)));
evalcond[2]=((((-1.0)*cj4*x16939*x16951))+(((-1.0)*x16935*x16952))+((cj3*x16954))+((x16936*x16938))+(((-1.0)*r02*x16946))+(((-1.0)*x16935*x16945*x16950))+((x16940*x16949))+(((-1.0)*x16937*x16940*x16945))+x16933);
evalcond[3]=((((-1.0)*x16938*x16945*x16950))+((r02*x16937))+(((-1.0)*r02*x16945*x16949))+((sj3*x16954))+(((-1.0)*x16935*x16936))+(((-1.0)*x16940*x16945*x16946))+(((-1.0)*sj5*x16939*x16940))+(((-1.0)*x16938*x16952))+x16932);
evalcond[4]=((((-1.0)*x16944*x16945*x16946))+((r12*x16937))+(((-1.0)*sj3*x16945*x16947))+(((-1.0)*x16934*x16952))+((sj3*x16953))+(((-1.0)*r10*x16936*x16939))+(((-1.0)*sj5*x16939*x16944))+(((-1.0)*x16934*x16945*x16950))+x16933);
evalcond[5]=((((-1.0)*x16937*x16943*x16945))+(((-1.0)*r12*x16946))+(((-1.0)*x16932))+(((-1.0)*cj6*r10*sj4*x16939))+((x16934*x16936))+((cj3*x16953))+(((-1.0)*cj4*x16939*x16947))+(((-1.0)*x16937*x16944*x16945))+((x16944*x16949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16955=cj1*cj1;
IkReal x16956=((69.0)*r10);
IkReal x16957=(cj4*cj6);
IkReal x16958=((364.42)*cj1);
IkReal x16959=(cj5*sj4);
IkReal x16960=((374.29)*cj2);
IkReal x16961=(cj5*r02);
IkReal x16962=(sj1*sj5);
IkReal x16963=((10.0)*r02);
IkReal x16964=(sj1*sj2);
IkReal x16965=(cj6*r11);
IkReal x16966=((69.0)*cj2);
IkReal x16967=(cj6*r01);
IkReal x16968=(cj2*sj1);
IkReal x16969=(r12*sj4);
IkReal x16970=(r00*sj6);
IkReal x16971=((1000.0)*px);
IkReal x16972=(cj4*r11*sj6);
IkReal x16973=((10.0)*cj5*sj1);
IkReal x16974=((10.0)*cj2*cj5);
IkReal x16975=(x16956*x16957);
IkReal x16976=((69.0)*x16972);
IkReal x16977=((69.0)*sj5*x16969);
IkReal x16978=((69.0)*x16959*x16965);
IkReal x16979=(sj6*x16956*x16959);
IkReal x16980=(x16978+x16979+x16976+x16977);
CheckValue<IkReal> x16981=IKPowWithIntegerCheck((((x16958*x16964))+((sj2*x16955*x16966))+(((69.0)*x16964))),-1);
if(!x16981.valid){
continue;
}
CheckValue<IkReal> x16982=IKPowWithIntegerCheck(((((-1.0)*sj1*x16958))+(((-69.0)*sj1))+(((-1.0)*x16955*x16966))),-1);
if(!x16982.valid){
continue;
}
if( IKabs(((x16981.value)*(((((-1.0)*sj5*x16960*x16970))+((x16958*x16972))+((x16968*x16975))+((x16970*x16974))+(((-1.0)*sj5*x16960*x16967))+((x16967*x16974))+((sj5*x16958*x16969))+(((-1.0)*r10*x16957*x16958))+(((-1.0)*x16975))+((cj2*sj5*x16963))+(((-1.0)*sj1*x16966*x16972))+((x16960*x16961))+(((-1.0)*x16968*x16979))+(((-1.0)*x16962*x16966*x16969))+(((-1.0)*sj1*x16959*x16965*x16966))+(((-1.0)*cj2*x16971))+((x16958*x16959*x16965))+((r10*sj6*x16958*x16959))+x16980)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16982.value)*((((x16970*x16973))+((x16967*x16973))+((x16962*x16963))+(((-1.0)*x16980))+(((-374.29)*x16962*x16970))+(((-374.29)*x16962*x16967))+(((374.29)*sj1*x16961))+(((-1.0)*sj1*x16971))+x16975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16981.value)*(((((-1.0)*sj5*x16960*x16970))+((x16958*x16972))+((x16968*x16975))+((x16970*x16974))+(((-1.0)*sj5*x16960*x16967))+((x16967*x16974))+((sj5*x16958*x16969))+(((-1.0)*r10*x16957*x16958))+(((-1.0)*x16975))+((cj2*sj5*x16963))+(((-1.0)*sj1*x16966*x16972))+((x16960*x16961))+(((-1.0)*x16968*x16979))+(((-1.0)*x16962*x16966*x16969))+(((-1.0)*sj1*x16959*x16965*x16966))+(((-1.0)*cj2*x16971))+((x16958*x16959*x16965))+((r10*sj6*x16958*x16959))+x16980))))+IKsqr(((x16982.value)*((((x16970*x16973))+((x16967*x16973))+((x16962*x16963))+(((-1.0)*x16980))+(((-374.29)*x16962*x16970))+(((-374.29)*x16962*x16967))+(((374.29)*sj1*x16961))+(((-1.0)*sj1*x16971))+x16975))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16981.value)*(((((-1.0)*sj5*x16960*x16970))+((x16958*x16972))+((x16968*x16975))+((x16970*x16974))+(((-1.0)*sj5*x16960*x16967))+((x16967*x16974))+((sj5*x16958*x16969))+(((-1.0)*r10*x16957*x16958))+(((-1.0)*x16975))+((cj2*sj5*x16963))+(((-1.0)*sj1*x16966*x16972))+((x16960*x16961))+(((-1.0)*x16968*x16979))+(((-1.0)*x16962*x16966*x16969))+(((-1.0)*sj1*x16959*x16965*x16966))+(((-1.0)*cj2*x16971))+((x16958*x16959*x16965))+((r10*sj6*x16958*x16959))+x16980))), ((x16982.value)*((((x16970*x16973))+((x16967*x16973))+((x16962*x16963))+(((-1.0)*x16980))+(((-374.29)*x16962*x16970))+(((-374.29)*x16962*x16967))+(((374.29)*sj1*x16961))+(((-1.0)*sj1*x16971))+x16975))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16983=IKcos(j0);
IkReal x16984=IKsin(j0);
IkReal x16985=((1.0)*sj4);
IkReal x16986=(cj6*sj3);
IkReal x16987=(cj3*cj5);
IkReal x16988=(sj5*sj6);
IkReal x16989=(r00*sj3);
IkReal x16990=((0.36442)*cj1);
IkReal x16991=((0.069)*sj2);
IkReal x16992=(cj6*r01);
IkReal x16993=((1.0)*cj3);
IkReal x16994=((0.37429)*sj5);
IkReal x16995=((0.01)*cj5);
IkReal x16996=(r10*sj6);
IkReal x16997=(r12*sj5);
IkReal x16998=((1.0)*cj4);
IkReal x16999=(r02*sj5);
IkReal x17000=((1.0)*sj1);
IkReal x17001=(cj3*cj6);
IkReal x17002=(r01*sj6);
IkReal x17003=(r00*sj6);
IkReal x17004=(cj6*r11);
IkReal x17005=((0.37429)*cj5);
IkReal x17006=(cj4*cj6);
IkReal x17007=(cj5*sj3);
IkReal x17008=(cj5*x17004);
IkReal x17009=(cj2*x16983);
IkReal x17010=((0.069)*x16984);
IkReal x17011=(r11*sj4*sj6);
IkReal x17012=(sj2*x16983);
IkReal x17013=((1.0)*x16984);
evalcond[0]=((((-1.0)*x16985*x17008))+(((-1.0)*r11*sj6*x16998))+x17009+(((-1.0)*x16985*x16997))+((sj1*sj2*x16984))+((r10*x17006))+(((-1.0)*cj5*x16985*x16996)));
evalcond[1]=(((sj1*x17012))+((r00*x17006))+(((-1.0)*cj5*x16985*x17003))+(((-1.0)*x16998*x17002))+(((-1.0)*x16985*x16999))+(((-1.0)*cj2*x17013))+(((-1.0)*cj5*x16985*x16992)));
evalcond[2]=(((r02*x16987))+(((-1.0)*sj3*x16998*x16999))+(((-1.0)*cj5*r01*x16986*x16998))+(((-1.0)*cj5*sj6*x16989*x16998))+(((-1.0)*r00*x16988*x16993))+(((-1.0)*sj5*x16992*x16993))+((sj3*sj4*x17002))+(((-1.0)*r00*x16985*x16986))+(((-1.0)*cj1*x16983)));
evalcond[3]=(((r12*x16987))+(((-1.0)*sj5*x16993*x17004))+(((-1.0)*r10*x16985*x16986))+((sj3*x17011))+(((-1.0)*cj5*r11*x16986*x16998))+(((-1.0)*r10*x16988*x16993))+(((-1.0)*cj1*x17013))+(((-1.0)*sj3*x16997*x16998))+(((-1.0)*x16996*x16998*x17007)));
evalcond[4]=((((0.01)*x16999))+((x16992*x16995))+(((-0.37429)*r00*x16988))+((x16995*x17003))+(((-1.0)*x16992*x16994))+(((-1.0)*px))+(((0.069)*x16983))+((x16983*x16990))+(((-0.069)*sj1*x17009))+(((-1.0)*x16984*x16991))+((r02*x17005)));
evalcond[5]=((((0.01)*x16997))+((x16984*x16990))+((x16995*x16996))+((x16995*x17004))+((r12*x17005))+(((-1.0)*py))+(((-0.37429)*r10*x16988))+(((-1.0)*x16994*x17004))+((x16983*x16991))+x17010+(((-1.0)*cj2*sj1*x17010)));
evalcond[6]=((((-1.0)*x16987*x16998*x17004))+(((-1.0)*x16987*x16996*x16998))+(((-1.0)*cj4*x16993*x16997))+((cj3*x17011))+(((-1.0)*r12*x17007))+((r11*sj5*x16986))+(((-1.0)*r10*x16985*x17001))+x17012+((r10*sj3*x16988))+(((-1.0)*cj2*x16984*x17000)));
evalcond[7]=((((-1.0)*x16987*x16998*x17003))+(((-1.0)*x17000*x17009))+(((-1.0)*cj4*x16993*x16999))+((r01*sj5*x16986))+(((-1.0)*x16987*x16992*x16998))+(((-1.0)*r02*x17007))+(((-1.0)*sj2*x17013))+((cj3*sj4*x17002))+(((-1.0)*r00*x16985*x17001))+((x16988*x16989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17014=(r10*sj6);
IkReal x17015=((69.0)*cj2);
IkReal x17016=(cj6*r11);
IkReal x17017=((374.29)*sj5);
IkReal x17018=((10.0)*cj5);
IkReal x17019=(cj5*sj4);
IkReal x17020=(r11*sj6);
IkReal x17021=(sj1*sj2);
IkReal x17022=((1000.0)*py);
IkReal x17023=((69.0)*sj2);
IkReal x17024=(r12*sj5);
IkReal x17025=((364.42)*cj1);
IkReal x17026=(cj4*x17025);
IkReal x17027=(sj1*x17024);
IkReal x17028=((374.29)*cj5*r12);
IkReal x17029=((69.0)*cj4*cj6*r10);
IkReal x17030=(x17019*x17025);
CheckValue<IkReal> x17031=IKPowWithIntegerCheck(IKsign(((((-69.0)*sj1))+((cj2*x17025))+x17015)),-1);
if(!x17031.valid){
continue;
}
CheckValue<IkReal> x17032 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x17028))+(((-1.0)*x17016*x17019*x17023))+(((-1.0)*cj2*x17014*x17018))+((cj2*x17022))+((cj2*x17016*x17017))+(((-10.0)*cj2*x17024))+((cj2*x17014*x17017))+(((-1.0)*cj2*x17016*x17018))+(((-1.0)*cj4*x17020*x17023))+(((-1.0)*x17014*x17019*x17023))+((cj4*cj6*r10*x17023))+(((-1.0)*sj4*x17023*x17024)))),IkReal(((((-1.0)*x17029))+((x17016*x17030))+(((-1.0)*cj6*r10*x17026))+((x17014*x17030))+(((10.0)*x17021*x17024))+(((-1.0)*x17014*x17017*x17021))+(((69.0)*sj4*x17024))+(((-1.0)*sj4*x17015*x17027))+((x17014*x17018*x17021))+((x17016*x17018*x17021))+((sj4*x17024*x17025))+(((69.0)*x17014*x17019))+(((-1.0)*sj1*x17014*x17015*x17019))+(((-1.0)*x17016*x17017*x17021))+(((69.0)*cj4*x17020))+(((69.0)*x17016*x17019))+((x17021*x17028))+(((-1.0)*cj4*sj1*x17015*x17020))+((cj4*cj6*r10*sj1*x17015))+((x17020*x17026))+(((-1.0)*sj1*x17015*x17016*x17019))+(((-1.0)*x17021*x17022)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17032.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17031.value)))+(x17032.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17033=IKcos(j0);
IkReal x17034=IKsin(j0);
IkReal x17035=((1.0)*sj4);
IkReal x17036=(cj6*sj3);
IkReal x17037=(cj3*cj5);
IkReal x17038=(sj5*sj6);
IkReal x17039=(r00*sj3);
IkReal x17040=((0.36442)*cj1);
IkReal x17041=((0.069)*sj2);
IkReal x17042=(cj6*r01);
IkReal x17043=((1.0)*cj3);
IkReal x17044=((0.37429)*sj5);
IkReal x17045=((0.01)*cj5);
IkReal x17046=(r10*sj6);
IkReal x17047=(r12*sj5);
IkReal x17048=((1.0)*cj4);
IkReal x17049=(r02*sj5);
IkReal x17050=((1.0)*sj1);
IkReal x17051=(cj3*cj6);
IkReal x17052=(r01*sj6);
IkReal x17053=(r00*sj6);
IkReal x17054=(cj6*r11);
IkReal x17055=((0.37429)*cj5);
IkReal x17056=(cj4*cj6);
IkReal x17057=(cj5*sj3);
IkReal x17058=(cj5*x17054);
IkReal x17059=(cj2*x17033);
IkReal x17060=((0.069)*x17034);
IkReal x17061=(r11*sj4*sj6);
IkReal x17062=(sj2*x17033);
IkReal x17063=((1.0)*x17034);
evalcond[0]=((((-1.0)*r11*sj6*x17048))+(((-1.0)*cj5*x17035*x17046))+((r10*x17056))+(((-1.0)*x17035*x17047))+((sj1*sj2*x17034))+(((-1.0)*x17035*x17058))+x17059);
evalcond[1]=((((-1.0)*x17048*x17052))+((r00*x17056))+(((-1.0)*cj5*x17035*x17042))+(((-1.0)*cj5*x17035*x17053))+(((-1.0)*x17035*x17049))+((sj1*x17062))+(((-1.0)*cj2*x17063)));
evalcond[2]=(((sj3*sj4*x17052))+((r02*x17037))+(((-1.0)*sj5*x17042*x17043))+(((-1.0)*r00*x17035*x17036))+(((-1.0)*r00*x17038*x17043))+(((-1.0)*cj5*r01*x17036*x17048))+(((-1.0)*sj3*x17048*x17049))+(((-1.0)*cj5*sj6*x17039*x17048))+(((-1.0)*cj1*x17033)));
evalcond[3]=((((-1.0)*sj3*x17047*x17048))+(((-1.0)*x17046*x17048*x17057))+(((-1.0)*r10*x17038*x17043))+(((-1.0)*sj5*x17043*x17054))+(((-1.0)*r10*x17035*x17036))+(((-1.0)*cj1*x17063))+(((-1.0)*cj5*r11*x17036*x17048))+((r12*x17037))+((sj3*x17061)));
evalcond[4]=((((-1.0)*x17034*x17041))+(((0.01)*x17049))+((x17042*x17045))+(((-0.069)*sj1*x17059))+(((-1.0)*px))+(((-1.0)*x17042*x17044))+((x17033*x17040))+((r02*x17055))+(((-0.37429)*r00*x17038))+(((0.069)*x17033))+((x17045*x17053)));
evalcond[5]=((((0.01)*x17047))+((x17034*x17040))+(((-1.0)*x17044*x17054))+(((-1.0)*py))+((r12*x17055))+(((-1.0)*cj2*sj1*x17060))+x17060+((x17033*x17041))+(((-0.37429)*r10*x17038))+((x17045*x17046))+((x17045*x17054)));
evalcond[6]=(((cj3*x17061))+(((-1.0)*x17037*x17046*x17048))+(((-1.0)*cj4*x17043*x17047))+((r10*sj3*x17038))+(((-1.0)*r12*x17057))+(((-1.0)*r10*x17035*x17051))+(((-1.0)*cj2*x17034*x17050))+((r11*sj5*x17036))+(((-1.0)*x17037*x17048*x17054))+x17062);
evalcond[7]=((((-1.0)*x17037*x17042*x17048))+(((-1.0)*cj4*x17043*x17049))+((cj3*sj4*x17052))+(((-1.0)*r00*x17035*x17051))+((x17038*x17039))+(((-1.0)*sj2*x17063))+(((-1.0)*r02*x17057))+(((-1.0)*x17037*x17048*x17053))+((r01*sj5*x17036))+(((-1.0)*x17050*x17059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17064=cj1*cj1;
IkReal x17065=((1.0)*r01);
IkReal x17066=(cj5*cj6);
IkReal x17067=(r02*sj5);
IkReal x17068=(cj2*sj4);
IkReal x17069=(cj5*sj6);
IkReal x17070=(cj4*cj6);
IkReal x17071=(r12*sj5);
IkReal x17072=(cj2*cj4*sj6);
IkReal x17073=(sj1*sj2*sj4);
IkReal x17074=((1.0)*sj1*sj2);
IkReal x17075=(cj4*sj1*sj2*sj6);
CheckValue<IkReal> x17076=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x17064))+((x17064*(cj2*cj2))))),-1);
if(!x17076.valid){
continue;
}
CheckValue<IkReal> x17077 = IKatan2WithCheck(IkReal((((r10*x17069*x17073))+(((-1.0)*r10*x17070*x17074))+((x17071*x17073))+(((-1.0)*r00*x17068*x17069))+(((-1.0)*x17067*x17068))+(((-1.0)*x17065*x17072))+((cj2*r00*x17070))+((r11*x17075))+((r11*x17066*x17073))+(((-1.0)*x17065*x17066*x17068)))),IkReal((((r01*x17075))+(((-1.0)*r00*x17070*x17074))+((x17067*x17073))+(((-1.0)*cj2*r10*x17070))+((r01*x17066*x17073))+((r11*x17066*x17068))+((r11*x17072))+((x17068*x17071))+((r10*x17068*x17069))+((r00*x17069*x17073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17077.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17076.value)))+(x17077.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17078=IKcos(j0);
IkReal x17079=IKsin(j0);
IkReal x17080=((1.0)*sj4);
IkReal x17081=(cj6*sj3);
IkReal x17082=(cj3*cj5);
IkReal x17083=(sj5*sj6);
IkReal x17084=(r00*sj3);
IkReal x17085=((0.36442)*cj1);
IkReal x17086=((0.069)*sj2);
IkReal x17087=(cj6*r01);
IkReal x17088=((1.0)*cj3);
IkReal x17089=((0.37429)*sj5);
IkReal x17090=((0.01)*cj5);
IkReal x17091=(r10*sj6);
IkReal x17092=(r12*sj5);
IkReal x17093=((1.0)*cj4);
IkReal x17094=(r02*sj5);
IkReal x17095=((1.0)*sj1);
IkReal x17096=(cj3*cj6);
IkReal x17097=(r01*sj6);
IkReal x17098=(r00*sj6);
IkReal x17099=(cj6*r11);
IkReal x17100=((0.37429)*cj5);
IkReal x17101=(cj4*cj6);
IkReal x17102=(cj5*sj3);
IkReal x17103=(cj5*x17099);
IkReal x17104=(cj2*x17078);
IkReal x17105=((0.069)*x17079);
IkReal x17106=(r11*sj4*sj6);
IkReal x17107=(sj2*x17078);
IkReal x17108=((1.0)*x17079);
evalcond[0]=((((-1.0)*r11*sj6*x17093))+((sj1*sj2*x17079))+(((-1.0)*x17080*x17103))+(((-1.0)*x17080*x17092))+((r10*x17101))+x17104+(((-1.0)*cj5*x17080*x17091)));
evalcond[1]=((((-1.0)*cj5*x17080*x17087))+(((-1.0)*x17080*x17094))+(((-1.0)*cj2*x17108))+(((-1.0)*x17093*x17097))+(((-1.0)*cj5*x17080*x17098))+((sj1*x17107))+((r00*x17101)));
evalcond[2]=((((-1.0)*r00*x17080*x17081))+(((-1.0)*sj3*x17093*x17094))+((sj3*sj4*x17097))+(((-1.0)*cj5*r01*x17081*x17093))+(((-1.0)*cj5*sj6*x17084*x17093))+(((-1.0)*sj5*x17087*x17088))+(((-1.0)*cj1*x17078))+(((-1.0)*r00*x17083*x17088))+((r02*x17082)));
evalcond[3]=((((-1.0)*x17091*x17093*x17102))+(((-1.0)*sj3*x17092*x17093))+((r12*x17082))+((sj3*x17106))+(((-1.0)*r10*x17080*x17081))+(((-1.0)*r10*x17083*x17088))+(((-1.0)*cj1*x17108))+(((-1.0)*sj5*x17088*x17099))+(((-1.0)*cj5*r11*x17081*x17093)));
evalcond[4]=((((-1.0)*x17079*x17086))+((x17090*x17098))+(((0.01)*x17094))+((x17087*x17090))+(((0.069)*x17078))+((x17078*x17085))+((r02*x17100))+(((-1.0)*px))+(((-1.0)*x17087*x17089))+(((-0.37429)*r00*x17083))+(((-0.069)*sj1*x17104)));
evalcond[5]=(((x17090*x17091))+((x17090*x17099))+(((-0.37429)*r10*x17083))+(((0.01)*x17092))+(((-1.0)*x17089*x17099))+((x17078*x17086))+((x17079*x17085))+(((-1.0)*py))+(((-1.0)*cj2*sj1*x17105))+x17105+((r12*x17100)));
evalcond[6]=(((r10*sj3*x17083))+(((-1.0)*r12*x17102))+(((-1.0)*x17082*x17091*x17093))+(((-1.0)*cj4*x17088*x17092))+((r11*sj5*x17081))+(((-1.0)*r10*x17080*x17096))+(((-1.0)*cj2*x17079*x17095))+x17107+(((-1.0)*x17082*x17093*x17099))+((cj3*x17106)));
evalcond[7]=((((-1.0)*x17095*x17104))+(((-1.0)*cj4*x17088*x17094))+(((-1.0)*r02*x17102))+((x17083*x17084))+(((-1.0)*sj2*x17108))+(((-1.0)*x17082*x17087*x17093))+(((-1.0)*x17082*x17093*x17098))+((cj3*sj4*x17097))+((r01*sj5*x17081))+(((-1.0)*r00*x17080*x17096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - baxter (af1ad2c61231d6e872c0869b7a6dc020)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
